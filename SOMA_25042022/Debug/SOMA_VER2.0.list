
SOMA_VER2.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f50c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009d30  0801f6bc  0801f6bc  0002f6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080293ec  080293ec  000400ac  2**0
                  CONTENTS
  4 .ARM          00000008  080293ec  080293ec  000393ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080293f4  080293f4  000400ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080293f4  080293f4  000393f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080293f8  080293f8  000393f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  080293fc  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000400ac  2**0
                  CONTENTS
 10 .bss          0001e494  200000ac  200000ac  000400ac  2**2
                  ALLOC
 11 ._user_heap_stack 00005000  2001e540  2001e540  000400ac  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000400ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00053462  00000000  00000000  000400dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000aed2  00000000  00000000  0009353e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000033d0  00000000  00000000  0009e410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000042f8  00000000  00000000  000a17e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003467a  00000000  00000000  000a5ad8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004d03a  00000000  00000000  000da152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108adb  00000000  00000000  0012718c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0022fc67  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000de44  00000000  00000000  0022fcb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00012a84  00000000  00000000  0023dafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801f6a4 	.word	0x0801f6a4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000b0 	.word	0x200000b0
 80001ec:	0801f6a4 	.word	0x0801f6a4

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b974 	b.w	8000bcc <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	4604      	mov	r4, r0
 8000904:	468e      	mov	lr, r1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d14d      	bne.n	80009a6 <__udivmoddi4+0xaa>
 800090a:	428a      	cmp	r2, r1
 800090c:	4694      	mov	ip, r2
 800090e:	d969      	bls.n	80009e4 <__udivmoddi4+0xe8>
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	b152      	cbz	r2, 800092c <__udivmoddi4+0x30>
 8000916:	fa01 f302 	lsl.w	r3, r1, r2
 800091a:	f1c2 0120 	rsb	r1, r2, #32
 800091e:	fa20 f101 	lsr.w	r1, r0, r1
 8000922:	fa0c fc02 	lsl.w	ip, ip, r2
 8000926:	ea41 0e03 	orr.w	lr, r1, r3
 800092a:	4094      	lsls	r4, r2
 800092c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000930:	0c21      	lsrs	r1, r4, #16
 8000932:	fbbe f6f8 	udiv	r6, lr, r8
 8000936:	fa1f f78c 	uxth.w	r7, ip
 800093a:	fb08 e316 	mls	r3, r8, r6, lr
 800093e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000942:	fb06 f107 	mul.w	r1, r6, r7
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000952:	f080 811f 	bcs.w	8000b94 <__udivmoddi4+0x298>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 811c 	bls.w	8000b94 <__udivmoddi4+0x298>
 800095c:	3e02      	subs	r6, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a5b      	subs	r3, r3, r1
 8000962:	b2a4      	uxth	r4, r4
 8000964:	fbb3 f0f8 	udiv	r0, r3, r8
 8000968:	fb08 3310 	mls	r3, r8, r0, r3
 800096c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000970:	fb00 f707 	mul.w	r7, r0, r7
 8000974:	42a7      	cmp	r7, r4
 8000976:	d90a      	bls.n	800098e <__udivmoddi4+0x92>
 8000978:	eb1c 0404 	adds.w	r4, ip, r4
 800097c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000980:	f080 810a 	bcs.w	8000b98 <__udivmoddi4+0x29c>
 8000984:	42a7      	cmp	r7, r4
 8000986:	f240 8107 	bls.w	8000b98 <__udivmoddi4+0x29c>
 800098a:	4464      	add	r4, ip
 800098c:	3802      	subs	r0, #2
 800098e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000992:	1be4      	subs	r4, r4, r7
 8000994:	2600      	movs	r6, #0
 8000996:	b11d      	cbz	r5, 80009a0 <__udivmoddi4+0xa4>
 8000998:	40d4      	lsrs	r4, r2
 800099a:	2300      	movs	r3, #0
 800099c:	e9c5 4300 	strd	r4, r3, [r5]
 80009a0:	4631      	mov	r1, r6
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d909      	bls.n	80009be <__udivmoddi4+0xc2>
 80009aa:	2d00      	cmp	r5, #0
 80009ac:	f000 80ef 	beq.w	8000b8e <__udivmoddi4+0x292>
 80009b0:	2600      	movs	r6, #0
 80009b2:	e9c5 0100 	strd	r0, r1, [r5]
 80009b6:	4630      	mov	r0, r6
 80009b8:	4631      	mov	r1, r6
 80009ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009be:	fab3 f683 	clz	r6, r3
 80009c2:	2e00      	cmp	r6, #0
 80009c4:	d14a      	bne.n	8000a5c <__udivmoddi4+0x160>
 80009c6:	428b      	cmp	r3, r1
 80009c8:	d302      	bcc.n	80009d0 <__udivmoddi4+0xd4>
 80009ca:	4282      	cmp	r2, r0
 80009cc:	f200 80f9 	bhi.w	8000bc2 <__udivmoddi4+0x2c6>
 80009d0:	1a84      	subs	r4, r0, r2
 80009d2:	eb61 0303 	sbc.w	r3, r1, r3
 80009d6:	2001      	movs	r0, #1
 80009d8:	469e      	mov	lr, r3
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d0e0      	beq.n	80009a0 <__udivmoddi4+0xa4>
 80009de:	e9c5 4e00 	strd	r4, lr, [r5]
 80009e2:	e7dd      	b.n	80009a0 <__udivmoddi4+0xa4>
 80009e4:	b902      	cbnz	r2, 80009e8 <__udivmoddi4+0xec>
 80009e6:	deff      	udf	#255	; 0xff
 80009e8:	fab2 f282 	clz	r2, r2
 80009ec:	2a00      	cmp	r2, #0
 80009ee:	f040 8092 	bne.w	8000b16 <__udivmoddi4+0x21a>
 80009f2:	eba1 010c 	sub.w	r1, r1, ip
 80009f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009fa:	fa1f fe8c 	uxth.w	lr, ip
 80009fe:	2601      	movs	r6, #1
 8000a00:	0c20      	lsrs	r0, r4, #16
 8000a02:	fbb1 f3f7 	udiv	r3, r1, r7
 8000a06:	fb07 1113 	mls	r1, r7, r3, r1
 8000a0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a0e:	fb0e f003 	mul.w	r0, lr, r3
 8000a12:	4288      	cmp	r0, r1
 8000a14:	d908      	bls.n	8000a28 <__udivmoddi4+0x12c>
 8000a16:	eb1c 0101 	adds.w	r1, ip, r1
 8000a1a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000a1e:	d202      	bcs.n	8000a26 <__udivmoddi4+0x12a>
 8000a20:	4288      	cmp	r0, r1
 8000a22:	f200 80cb 	bhi.w	8000bbc <__udivmoddi4+0x2c0>
 8000a26:	4643      	mov	r3, r8
 8000a28:	1a09      	subs	r1, r1, r0
 8000a2a:	b2a4      	uxth	r4, r4
 8000a2c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a30:	fb07 1110 	mls	r1, r7, r0, r1
 8000a34:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000a38:	fb0e fe00 	mul.w	lr, lr, r0
 8000a3c:	45a6      	cmp	lr, r4
 8000a3e:	d908      	bls.n	8000a52 <__udivmoddi4+0x156>
 8000a40:	eb1c 0404 	adds.w	r4, ip, r4
 8000a44:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a48:	d202      	bcs.n	8000a50 <__udivmoddi4+0x154>
 8000a4a:	45a6      	cmp	lr, r4
 8000a4c:	f200 80bb 	bhi.w	8000bc6 <__udivmoddi4+0x2ca>
 8000a50:	4608      	mov	r0, r1
 8000a52:	eba4 040e 	sub.w	r4, r4, lr
 8000a56:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000a5a:	e79c      	b.n	8000996 <__udivmoddi4+0x9a>
 8000a5c:	f1c6 0720 	rsb	r7, r6, #32
 8000a60:	40b3      	lsls	r3, r6
 8000a62:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a66:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a6a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a6e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a72:	431c      	orrs	r4, r3
 8000a74:	40f9      	lsrs	r1, r7
 8000a76:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a7a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a7e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a82:	0c20      	lsrs	r0, r4, #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fb09 1118 	mls	r1, r9, r8, r1
 8000a8c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a90:	fb08 f00e 	mul.w	r0, r8, lr
 8000a94:	4288      	cmp	r0, r1
 8000a96:	fa02 f206 	lsl.w	r2, r2, r6
 8000a9a:	d90b      	bls.n	8000ab4 <__udivmoddi4+0x1b8>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aa4:	f080 8088 	bcs.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aa8:	4288      	cmp	r0, r1
 8000aaa:	f240 8085 	bls.w	8000bb8 <__udivmoddi4+0x2bc>
 8000aae:	f1a8 0802 	sub.w	r8, r8, #2
 8000ab2:	4461      	add	r1, ip
 8000ab4:	1a09      	subs	r1, r1, r0
 8000ab6:	b2a4      	uxth	r4, r4
 8000ab8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000abc:	fb09 1110 	mls	r1, r9, r0, r1
 8000ac0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ac4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ac8:	458e      	cmp	lr, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x1e2>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ad4:	d26c      	bcs.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ad6:	458e      	cmp	lr, r1
 8000ad8:	d96a      	bls.n	8000bb0 <__udivmoddi4+0x2b4>
 8000ada:	3802      	subs	r0, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000ae2:	fba0 9402 	umull	r9, r4, r0, r2
 8000ae6:	eba1 010e 	sub.w	r1, r1, lr
 8000aea:	42a1      	cmp	r1, r4
 8000aec:	46c8      	mov	r8, r9
 8000aee:	46a6      	mov	lr, r4
 8000af0:	d356      	bcc.n	8000ba0 <__udivmoddi4+0x2a4>
 8000af2:	d053      	beq.n	8000b9c <__udivmoddi4+0x2a0>
 8000af4:	b15d      	cbz	r5, 8000b0e <__udivmoddi4+0x212>
 8000af6:	ebb3 0208 	subs.w	r2, r3, r8
 8000afa:	eb61 010e 	sbc.w	r1, r1, lr
 8000afe:	fa01 f707 	lsl.w	r7, r1, r7
 8000b02:	fa22 f306 	lsr.w	r3, r2, r6
 8000b06:	40f1      	lsrs	r1, r6
 8000b08:	431f      	orrs	r7, r3
 8000b0a:	e9c5 7100 	strd	r7, r1, [r5]
 8000b0e:	2600      	movs	r6, #0
 8000b10:	4631      	mov	r1, r6
 8000b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	40d8      	lsrs	r0, r3
 8000b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b20:	fa21 f303 	lsr.w	r3, r1, r3
 8000b24:	4091      	lsls	r1, r2
 8000b26:	4301      	orrs	r1, r0
 8000b28:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2c:	fa1f fe8c 	uxth.w	lr, ip
 8000b30:	fbb3 f0f7 	udiv	r0, r3, r7
 8000b34:	fb07 3610 	mls	r6, r7, r0, r3
 8000b38:	0c0b      	lsrs	r3, r1, #16
 8000b3a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000b3e:	fb00 f60e 	mul.w	r6, r0, lr
 8000b42:	429e      	cmp	r6, r3
 8000b44:	fa04 f402 	lsl.w	r4, r4, r2
 8000b48:	d908      	bls.n	8000b5c <__udivmoddi4+0x260>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b52:	d22f      	bcs.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b54:	429e      	cmp	r6, r3
 8000b56:	d92d      	bls.n	8000bb4 <__udivmoddi4+0x2b8>
 8000b58:	3802      	subs	r0, #2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	1b9b      	subs	r3, r3, r6
 8000b5e:	b289      	uxth	r1, r1
 8000b60:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b64:	fb07 3316 	mls	r3, r7, r6, r3
 8000b68:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b6c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b70:	428b      	cmp	r3, r1
 8000b72:	d908      	bls.n	8000b86 <__udivmoddi4+0x28a>
 8000b74:	eb1c 0101 	adds.w	r1, ip, r1
 8000b78:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b7c:	d216      	bcs.n	8000bac <__udivmoddi4+0x2b0>
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d914      	bls.n	8000bac <__udivmoddi4+0x2b0>
 8000b82:	3e02      	subs	r6, #2
 8000b84:	4461      	add	r1, ip
 8000b86:	1ac9      	subs	r1, r1, r3
 8000b88:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b8c:	e738      	b.n	8000a00 <__udivmoddi4+0x104>
 8000b8e:	462e      	mov	r6, r5
 8000b90:	4628      	mov	r0, r5
 8000b92:	e705      	b.n	80009a0 <__udivmoddi4+0xa4>
 8000b94:	4606      	mov	r6, r0
 8000b96:	e6e3      	b.n	8000960 <__udivmoddi4+0x64>
 8000b98:	4618      	mov	r0, r3
 8000b9a:	e6f8      	b.n	800098e <__udivmoddi4+0x92>
 8000b9c:	454b      	cmp	r3, r9
 8000b9e:	d2a9      	bcs.n	8000af4 <__udivmoddi4+0x1f8>
 8000ba0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ba4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ba8:	3801      	subs	r0, #1
 8000baa:	e7a3      	b.n	8000af4 <__udivmoddi4+0x1f8>
 8000bac:	4646      	mov	r6, r8
 8000bae:	e7ea      	b.n	8000b86 <__udivmoddi4+0x28a>
 8000bb0:	4620      	mov	r0, r4
 8000bb2:	e794      	b.n	8000ade <__udivmoddi4+0x1e2>
 8000bb4:	4640      	mov	r0, r8
 8000bb6:	e7d1      	b.n	8000b5c <__udivmoddi4+0x260>
 8000bb8:	46d0      	mov	r8, sl
 8000bba:	e77b      	b.n	8000ab4 <__udivmoddi4+0x1b8>
 8000bbc:	3b02      	subs	r3, #2
 8000bbe:	4461      	add	r1, ip
 8000bc0:	e732      	b.n	8000a28 <__udivmoddi4+0x12c>
 8000bc2:	4630      	mov	r0, r6
 8000bc4:	e709      	b.n	80009da <__udivmoddi4+0xde>
 8000bc6:	4464      	add	r4, ip
 8000bc8:	3802      	subs	r0, #2
 8000bca:	e742      	b.n	8000a52 <__udivmoddi4+0x156>

08000bcc <__aeabi_idiv0>:
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <fillReadBuffer>:

const int16_t q_buf_zero[I2S_BUF_LEN*2] = {0, };


static int fillReadBuffer(uint8_t *read_buf, uint8_t *read_ptr, int buf_size, int bytes_left, FILE *infile)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b086      	sub	sp, #24
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	60b9      	str	r1, [r7, #8]
 8000bda:	607a      	str	r2, [r7, #4]
 8000bdc:	603b      	str	r3, [r7, #0]
  int nRead;

  /* move last, small chunk from end of buffer to start, then fill with new data */
  memmove(read_buf, read_ptr, bytes_left);
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	68b9      	ldr	r1, [r7, #8]
 8000be4:	68f8      	ldr	r0, [r7, #12]
 8000be6:	f01d fbab 	bl	801e340 <memmove>
  nRead = fread( read_buf + bytes_left, 1, buf_size - bytes_left, infile);
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	18d0      	adds	r0, r2, r3
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	6a3b      	ldr	r3, [r7, #32]
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	f001 faad 	bl	800215a <ob_fread>
 8000c00:	4603      	mov	r3, r0
 8000c02:	617b      	str	r3, [r7, #20]
  /* zero-pad to avoid finding false sync word after last frame (from old data in readBuf) */
  if (nRead < buf_size - bytes_left)
 8000c04:	687a      	ldr	r2, [r7, #4]
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	697a      	ldr	r2, [r7, #20]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	da0d      	bge.n	8000c2c <fillReadBuffer+0x5c>
  {
    memset(read_buf + bytes_left + nRead, 0, buf_size - bytes_left - nRead);
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	4413      	add	r3, r2
 8000c16:	68fa      	ldr	r2, [r7, #12]
 8000c18:	18d0      	adds	r0, r2, r3
 8000c1a:	687a      	ldr	r2, [r7, #4]
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	1ad2      	subs	r2, r2, r3
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	461a      	mov	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f01d fba4 	bl	801e374 <memset>
  }
  return nRead;
 8000c2c:	697b      	ldr	r3, [r7, #20]
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
	...

08000c38 <i2sStart>:

bool i2sStart(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status;
  I2S_HandleTypeDef *p_i2s = &hi2s2;
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <i2sStart+0x48>)
 8000c40:	607b      	str	r3, [r7, #4]

  q_in  = 0;
 8000c42:	4b10      	ldr	r3, [pc, #64]	; (8000c84 <i2sStart+0x4c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
  q_out = 0;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <i2sStart+0x50>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]

  status = HAL_I2S_Transmit_DMA(p_i2s, (uint16_t *)q_buf_zero, q_buf_len*2);
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <i2sStart+0x54>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	490d      	ldr	r1, [pc, #52]	; (8000c90 <i2sStart+0x58>)
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f007 fd0f 	bl	8008680 <HAL_I2S_Transmit_DMA>
 8000c62:	4603      	mov	r3, r0
 8000c64:	70fb      	strb	r3, [r7, #3]
  if (status == HAL_OK)
 8000c66:	78fb      	ldrb	r3, [r7, #3]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d102      	bne.n	8000c72 <i2sStart+0x3a>
  {
    is_started = true;
 8000c6c:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <i2sStart+0x5c>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
  }

  return is_started;
 8000c72:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <i2sStart+0x5c>)
 8000c74:	781b      	ldrb	r3, [r3, #0]
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000e4dc 	.word	0x2000e4dc
 8000c84:	200021fc 	.word	0x200021fc
 8000c88:	20002200 	.word	0x20002200
 8000c8c:	20002208 	.word	0x20002208
 8000c90:	08021768 	.word	0x08021768
 8000c94:	200021f8 	.word	0x200021f8

08000c98 <i2sStop>:

bool i2sStop(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  is_started = false;
 8000c9c:	4b04      	ldr	r3, [pc, #16]	; (8000cb0 <i2sStop+0x18>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	701a      	strb	r2, [r3, #0]

  return true;
 8000ca2:	2301      	movs	r3, #1
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200021f8 	.word	0x200021f8

08000cb4 <i2sSetSampleRate>:

bool i2sSetSampleRate(uint8_t ch, uint32_t freq)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b084      	sub	sp, #16
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	4603      	mov	r3, r0
 8000cbc:	6039      	str	r1, [r7, #0]
 8000cbe:	71fb      	strb	r3, [r7, #7]
	bool ret = true;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	73fb      	strb	r3, [r7, #15]

	i2s_sample_rate = freq;
 8000cc4:	4a19      	ldr	r2, [pc, #100]	; (8000d2c <i2sSetSampleRate+0x78>)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	6013      	str	r3, [r2, #0]

	q_buf_len = (i2s_sample_rate * 1) / (1000/I2S_BUF_MS);
 8000cca:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <i2sSetSampleRate+0x78>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a18      	ldr	r2, [pc, #96]	; (8000d30 <i2sSetSampleRate+0x7c>)
 8000cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd4:	095b      	lsrs	r3, r3, #5
 8000cd6:	4a17      	ldr	r2, [pc, #92]	; (8000d34 <i2sSetSampleRate+0x80>)
 8000cd8:	6013      	str	r3, [r2, #0]
	q_in  = 0;
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <i2sSetSampleRate+0x84>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
	q_out = 0;
 8000ce0:	4b16      	ldr	r3, [pc, #88]	; (8000d3c <i2sSetSampleRate+0x88>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
	q_len = I2S_BUF_LEN / q_buf_len;
 8000ce6:	4b13      	ldr	r3, [pc, #76]	; (8000d34 <i2sSetSampleRate+0x80>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cf2:	4a13      	ldr	r2, [pc, #76]	; (8000d40 <i2sSetSampleRate+0x8c>)
 8000cf4:	6013      	str	r3, [r2, #0]



	hi2s2.Init.AudioFreq = freq;
 8000cf6:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <i2sSetSampleRate+0x90>)
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	6153      	str	r3, [r2, #20]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cfc:	4811      	ldr	r0, [pc, #68]	; (8000d44 <i2sSetSampleRate+0x90>)
 8000cfe:	f007 fb7f 	bl	8008400 <HAL_I2S_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <i2sSetSampleRate+0x58>
	{
		ret = false;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	73fb      	strb	r3, [r7, #15]
	}

	i2sStart();
 8000d0c:	f7ff ff94 	bl	8000c38 <i2sStart>
	i2sStop();
 8000d10:	f7ff ffc2 	bl	8000c98 <i2sStop>

	sgtl5000_set_freq(freq);
 8000d14:	6838      	ldr	r0, [r7, #0]
 8000d16:	f004 fbab 	bl	8005470 <sgtl5000_set_freq>

	HAL_Delay(10);
 8000d1a:	200a      	movs	r0, #10
 8000d1c:	f005 fc48 	bl	80065b0 <HAL_Delay>

	return ret;
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000000 	.word	0x20000000
 8000d30:	51eb851f 	.word	0x51eb851f
 8000d34:	20002208 	.word	0x20002208
 8000d38:	200021fc 	.word	0x200021fc
 8000d3c:	20002200 	.word	0x20002200
 8000d40:	20002204 	.word	0x20002204
 8000d44:	2000e4dc 	.word	0x2000e4dc

08000d48 <PlayAudioFile>:

void PlayAudioFile(char* fileName, char* fileType)
{
 8000d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d4c:	b0a9      	sub	sp, #164	; 0xa4
 8000d4e:	af02      	add	r7, sp, #8
 8000d50:	6078      	str	r0, [r7, #4]
 8000d52:	6039      	str	r1, [r7, #0]
	bool ret = true;
 8000d54:	2301      	movs	r3, #1
 8000d56:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	if (strcmp(fileType, "playWAV") == 0)
 8000d5a:	49c0      	ldr	r1, [pc, #768]	; (800105c <PlayAudioFile+0x314>)
 8000d5c:	6838      	ldr	r0, [r7, #0]
 8000d5e:	f7ff fa47 	bl	80001f0 <strcmp>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	f040 8155 	bne.w	8001014 <PlayAudioFile+0x2cc>
	{
 8000d6a:	466b      	mov	r3, sp
 8000d6c:	461e      	mov	r6, r3
		FILE *fp;
		wavfile_header_t header;
		uint32_t r_len;

		printf("FileName      : %s\n", fileName);
 8000d6e:	6879      	ldr	r1, [r7, #4]
 8000d70:	48bb      	ldr	r0, [pc, #748]	; (8001060 <PlayAudioFile+0x318>)
 8000d72:	f01d fbe7 	bl	801e544 <iprintf>

		fp = fopen(fileName, "r");
 8000d76:	49bb      	ldr	r1, [pc, #748]	; (8001064 <PlayAudioFile+0x31c>)
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f001 f981 	bl	8002080 <ob_fopen>
 8000d7e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
		if (fp == NULL)
 8000d82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d108      	bne.n	8000d9c <PlayAudioFile+0x54>
		{
			printf("fopen fail : %s\n", fileName);
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	48b6      	ldr	r0, [pc, #728]	; (8001068 <PlayAudioFile+0x320>)
 8000d8e:	f01d fbd9 	bl	801e544 <iprintf>
			SetPlayState(PLAY_NONE);
 8000d92:	2000      	movs	r0, #0
 8000d94:	f002 f8ce 	bl	8002f34 <SetPlayState>
 8000d98:	46b5      	mov	sp, r6
 8000d9a:	e315      	b.n	80013c8 <PlayAudioFile+0x680>
			return;
		}
		fread(&header, sizeof(wavfile_header_t), 1, fp);
 8000d9c:	f107 000c 	add.w	r0, r7, #12
 8000da0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000da4:	2201      	movs	r2, #1
 8000da6:	212c      	movs	r1, #44	; 0x2c
 8000da8:	f001 f9d7 	bl	800215a <ob_fread>

		printf("ChunkSize     : %d\n", header.ChunkSize);
 8000dac:	693b      	ldr	r3, [r7, #16]
 8000dae:	4619      	mov	r1, r3
 8000db0:	48ae      	ldr	r0, [pc, #696]	; (800106c <PlayAudioFile+0x324>)
 8000db2:	f01d fbc7 	bl	801e544 <iprintf>
		printf("Format        : %c%c%c%c\n", header.Format[0], header.Format[1], header.Format[2], header.Format[3]);
 8000db6:	7d3b      	ldrb	r3, [r7, #20]
 8000db8:	4619      	mov	r1, r3
 8000dba:	7d7b      	ldrb	r3, [r7, #21]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	7dbb      	ldrb	r3, [r7, #22]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	7dfb      	ldrb	r3, [r7, #23]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	48a9      	ldr	r0, [pc, #676]	; (8001070 <PlayAudioFile+0x328>)
 8000dca:	f01d fbbb 	bl	801e544 <iprintf>
		printf("Subchunk1Size : %d\n", header.Subchunk1Size);
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	48a8      	ldr	r0, [pc, #672]	; (8001074 <PlayAudioFile+0x32c>)
 8000dd4:	f01d fbb6 	bl	801e544 <iprintf>
		printf("AudioFormat   : %d\n", header.AudioFormat);
 8000dd8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8000ddc:	4619      	mov	r1, r3
 8000dde:	48a6      	ldr	r0, [pc, #664]	; (8001078 <PlayAudioFile+0x330>)
 8000de0:	f01d fbb0 	bl	801e544 <iprintf>
		printf("NumChannels   : %d\n", header.NumChannels);
 8000de4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000de8:	4619      	mov	r1, r3
 8000dea:	48a4      	ldr	r0, [pc, #656]	; (800107c <PlayAudioFile+0x334>)
 8000dec:	f01d fbaa 	bl	801e544 <iprintf>
		printf("SampleRate    : %d\n", header.SampleRate);
 8000df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	48a2      	ldr	r0, [pc, #648]	; (8001080 <PlayAudioFile+0x338>)
 8000df6:	f01d fba5 	bl	801e544 <iprintf>
		printf("ByteRate      : %d\n", header.ByteRate);
 8000dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	48a1      	ldr	r0, [pc, #644]	; (8001084 <PlayAudioFile+0x33c>)
 8000e00:	f01d fba0 	bl	801e544 <iprintf>
		printf("BlockAlign    : %d\n", header.BlockAlign);
 8000e04:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	489f      	ldr	r0, [pc, #636]	; (8001088 <PlayAudioFile+0x340>)
 8000e0c:	f01d fb9a 	bl	801e544 <iprintf>
		printf("BitsPerSample : %d\n", header.BitsPerSample);
 8000e10:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8000e14:	4619      	mov	r1, r3
 8000e16:	489d      	ldr	r0, [pc, #628]	; (800108c <PlayAudioFile+0x344>)
 8000e18:	f01d fb94 	bl	801e544 <iprintf>
		printf("Subchunk2Size : %d\n", header.Subchunk2Size);
 8000e1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e1e:	4619      	mov	r1, r3
 8000e20:	489b      	ldr	r0, [pc, #620]	; (8001090 <PlayAudioFile+0x348>)
 8000e22:	f01d fb8f 	bl	801e544 <iprintf>


		i2sSetSampleRate(DEF_I2S2, header.SampleRate);
 8000e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e28:	4619      	mov	r1, r3
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff ff42 	bl	8000cb4 <i2sSetSampleRate>

		i2sStart();
 8000e30:	f7ff ff02 	bl	8000c38 <i2sStart>

		r_len = q_buf_len;
 8000e34:	4b97      	ldr	r3, [pc, #604]	; (8001094 <PlayAudioFile+0x34c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

		int16_t buf_frame[q_buf_len*2];
 8000e3c:	4b95      	ldr	r3, [pc, #596]	; (8001094 <PlayAudioFile+0x34c>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	0059      	lsls	r1, r3, #1
 8000e42:	460b      	mov	r3, r1
 8000e44:	3b01      	subs	r3, #1
 8000e46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	4688      	mov	r8, r1
 8000e4e:	4699      	mov	r9, r3
 8000e50:	f04f 0200 	mov.w	r2, #0
 8000e54:	f04f 0300 	mov.w	r3, #0
 8000e58:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8000e5c:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8000e60:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8000e64:	2300      	movs	r3, #0
 8000e66:	460c      	mov	r4, r1
 8000e68:	461d      	mov	r5, r3
 8000e6a:	f04f 0200 	mov.w	r2, #0
 8000e6e:	f04f 0300 	mov.w	r3, #0
 8000e72:	012b      	lsls	r3, r5, #4
 8000e74:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8000e78:	0122      	lsls	r2, r4, #4
 8000e7a:	004b      	lsls	r3, r1, #1
 8000e7c:	3307      	adds	r3, #7
 8000e7e:	08db      	lsrs	r3, r3, #3
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	ebad 0d03 	sub.w	sp, sp, r3
 8000e86:	ab02      	add	r3, sp, #8
 8000e88:	3301      	adds	r3, #1
 8000e8a:	085b      	lsrs	r3, r3, #1
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	67fb      	str	r3, [r7, #124]	; 0x7c

		fseek(fp, sizeof(wavfile_header_t), SEEK_SET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	212c      	movs	r1, #44	; 0x2c
 8000e94:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8000e98:	f001 f97e 	bl	8002198 <ob_fseek>

		while(playState == PLAY_STARTED)
 8000e9c:	e0ab      	b.n	8000ff6 <PlayAudioFile+0x2ae>
		{
			uint32_t buf_len;
			int len;

			buf_len = ((q_len + q_in - q_out) % q_len);
 8000e9e:	4b7e      	ldr	r3, [pc, #504]	; (8001098 <PlayAudioFile+0x350>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b7e      	ldr	r3, [pc, #504]	; (800109c <PlayAudioFile+0x354>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	441a      	add	r2, r3
 8000ea8:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <PlayAudioFile+0x358>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	4a7a      	ldr	r2, [pc, #488]	; (8001098 <PlayAudioFile+0x350>)
 8000eb0:	6812      	ldr	r2, [r2, #0]
 8000eb2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000eb6:	fb01 f202 	mul.w	r2, r1, r2
 8000eba:	1a9b      	subs	r3, r3, r2
 8000ebc:	67bb      	str	r3, [r7, #120]	; 0x78
			buf_len = (q_len - buf_len) - 1;
 8000ebe:	4b76      	ldr	r3, [pc, #472]	; (8001098 <PlayAudioFile+0x350>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	67bb      	str	r3, [r7, #120]	; 0x78

			if (buf_len > 0)
 8000eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	f000 8092 	beq.w	8000ff6 <PlayAudioFile+0x2ae>
			{
				HAL_GPIO_WritePin(GPIOE, SYS_LOCK_Pin, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	4873      	ldr	r0, [pc, #460]	; (80010a4 <PlayAudioFile+0x35c>)
 8000ed8:	f006 fa50 	bl	800737c <HAL_GPIO_WritePin>
				len = fread(buf_frame, r_len, 2*header.NumChannels, fp);
 8000edc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000ee0:	005b      	lsls	r3, r3, #1
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000ee8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8000eec:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8000eee:	f001 f934 	bl	800215a <ob_fread>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	677b      	str	r3, [r7, #116]	; 0x74

				if (len != r_len*2*header.NumChannels)
 8000ef6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000efa:	461a      	mov	r2, r3
 8000efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f00:	fb02 f303 	mul.w	r3, r2, r3
 8000f04:	005a      	lsls	r2, r3, #1
 8000f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d003      	beq.n	8000f14 <PlayAudioFile+0x1cc>
				{
					SetPlayState(PLAY_NONE);
 8000f0c:	2000      	movs	r0, #0
 8000f0e:	f002 f811 	bl	8002f34 <SetPlayState>
					break;
 8000f12:	e075      	b.n	8001000 <PlayAudioFile+0x2b8>
				}

				uint32_t q_offset;

				q_offset = q_in*q_buf_len;
 8000f14:	4b61      	ldr	r3, [pc, #388]	; (800109c <PlayAudioFile+0x354>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a5e      	ldr	r2, [pc, #376]	; (8001094 <PlayAudioFile+0x34c>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	673b      	str	r3, [r7, #112]	; 0x70

				for (int i=0; i<r_len; i++)
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000f28:	e040      	b.n	8000fac <PlayAudioFile+0x264>
				{
					if (header.NumChannels == 2)
 8000f2a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d11d      	bne.n	8000f6e <PlayAudioFile+0x226>
					{
						q_buf[q_offset + i].left  = buf_frame[i*2 + 0];
 8000f32:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f36:	0059      	lsls	r1, r3, #1
 8000f38:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f3e:	4413      	add	r3, r2
 8000f40:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f42:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 8000f46:	4a58      	ldr	r2, [pc, #352]	; (80010a8 <PlayAudioFile+0x360>)
 8000f48:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
						q_buf[q_offset + i].right = buf_frame[i*2 + 1];
 8000f4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	1c59      	adds	r1, r3, #1
 8000f54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f5a:	4413      	add	r3, r2
 8000f5c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f5e:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 8000f62:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <PlayAudioFile+0x360>)
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	460a      	mov	r2, r1
 8000f6a:	805a      	strh	r2, [r3, #2]
 8000f6c:	e019      	b.n	8000fa2 <PlayAudioFile+0x25a>
					}
					else
					{
						q_buf[q_offset + i].left  = buf_frame[i];
 8000f6e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f74:	4413      	add	r3, r2
 8000f76:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f78:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000f7c:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <PlayAudioFile+0x360>)
 8000f82:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
						q_buf[q_offset + i].right = buf_frame[i];
 8000f86:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000f8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000f8c:	4413      	add	r3, r2
 8000f8e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8000f90:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8000f94:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
 8000f98:	4a43      	ldr	r2, [pc, #268]	; (80010a8 <PlayAudioFile+0x360>)
 8000f9a:	009b      	lsls	r3, r3, #2
 8000f9c:	4413      	add	r3, r2
 8000f9e:	460a      	mov	r2, r1
 8000fa0:	805a      	strh	r2, [r3, #2]
				for (int i=0; i<r_len; i++)
 8000fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8b8      	bhi.n	8000f2a <PlayAudioFile+0x1e2>
					}
				}

				if (((q_in + 1) % q_len) != q_out)
 8000fb8:	4b38      	ldr	r3, [pc, #224]	; (800109c <PlayAudioFile+0x354>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	4a36      	ldr	r2, [pc, #216]	; (8001098 <PlayAudioFile+0x350>)
 8000fc0:	6812      	ldr	r2, [r2, #0]
 8000fc2:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fc6:	fb01 f202 	mul.w	r2, r1, r2
 8000fca:	1a9a      	subs	r2, r3, r2
 8000fcc:	4b34      	ldr	r3, [pc, #208]	; (80010a0 <PlayAudioFile+0x358>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d00b      	beq.n	8000fec <PlayAudioFile+0x2a4>
				{
					q_in = (q_in+1) % q_len;
 8000fd4:	4b31      	ldr	r3, [pc, #196]	; (800109c <PlayAudioFile+0x354>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	4a2f      	ldr	r2, [pc, #188]	; (8001098 <PlayAudioFile+0x350>)
 8000fdc:	6812      	ldr	r2, [r2, #0]
 8000fde:	fbb3 f1f2 	udiv	r1, r3, r2
 8000fe2:	fb01 f202 	mul.w	r2, r1, r2
 8000fe6:	1a9b      	subs	r3, r3, r2
 8000fe8:	4a2c      	ldr	r2, [pc, #176]	; (800109c <PlayAudioFile+0x354>)
 8000fea:	6013      	str	r3, [r2, #0]
				}
				HAL_GPIO_WritePin(GPIOE, SYS_LOCK_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2101      	movs	r1, #1
 8000ff0:	482c      	ldr	r0, [pc, #176]	; (80010a4 <PlayAudioFile+0x35c>)
 8000ff2:	f006 f9c3 	bl	800737c <HAL_GPIO_WritePin>
		while(playState == PLAY_STARTED)
 8000ff6:	4b2d      	ldr	r3, [pc, #180]	; (80010ac <PlayAudioFile+0x364>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b02      	cmp	r3, #2
 8000ffc:	f43f af4f 	beq.w	8000e9e <PlayAudioFile+0x156>
			}
		}

		i2sStop();
 8001000:	f7ff fe4a 	bl	8000c98 <i2sStop>

		fclose(fp);
 8001004:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001008:	f001 f88e 	bl	8002128 <ob_fclose>

		ret = true;
 800100c:	2301      	movs	r3, #1
 800100e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001012:	46b5      	mov	sp, r6
	}

	if (strcmp(fileType, "playMP3") == 0)
 8001014:	4926      	ldr	r1, [pc, #152]	; (80010b0 <PlayAudioFile+0x368>)
 8001016:	6838      	ldr	r0, [r7, #0]
 8001018:	f7ff f8ea 	bl	80001f0 <strcmp>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	f040 81d2 	bne.w	80013c8 <PlayAudioFile+0x680>
	{
		printf("FileName      : %s\n", fileName);
 8001024:	6879      	ldr	r1, [r7, #4]
 8001026:	480e      	ldr	r0, [pc, #56]	; (8001060 <PlayAudioFile+0x318>)
 8001028:	f01d fa8c 	bl	801e544 <iprintf>

		HMP3Decoder h_dec;
		h_dec = MP3InitDecoder();
 800102c:	f00e fdda 	bl	800fbe4 <MP3InitDecoder>
 8001030:	66f8      	str	r0, [r7, #108]	; 0x6c
		if (h_dec != 0)
 8001032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 81c7 	beq.w	80013c8 <PlayAudioFile+0x680>
		{
			MP3FrameInfo frameInfo;
			FILE *fp;
			fp = fopen(fileName, "r");
 800103a:	490a      	ldr	r1, [pc, #40]	; (8001064 <PlayAudioFile+0x31c>)
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f001 f81f 	bl	8002080 <ob_fopen>
 8001042:	66b8      	str	r0, [r7, #104]	; 0x68
			if (fp == NULL)
 8001044:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001046:	2b00      	cmp	r3, #0
 8001048:	d134      	bne.n	80010b4 <PlayAudioFile+0x36c>
			{
				printf("fopen fail : %s\n", fileName);
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	4806      	ldr	r0, [pc, #24]	; (8001068 <PlayAudioFile+0x320>)
 800104e:	f01d fa79 	bl	801e544 <iprintf>
				SetPlayState(PLAY_NONE);
 8001052:	2000      	movs	r0, #0
 8001054:	f001 ff6e 	bl	8002f34 <SetPlayState>
 8001058:	e1b6      	b.n	80013c8 <PlayAudioFile+0x680>
 800105a:	bf00      	nop
 800105c:	0801f6bc 	.word	0x0801f6bc
 8001060:	0801f6c4 	.word	0x0801f6c4
 8001064:	0801f6d8 	.word	0x0801f6d8
 8001068:	0801f6dc 	.word	0x0801f6dc
 800106c:	0801f6f0 	.word	0x0801f6f0
 8001070:	0801f704 	.word	0x0801f704
 8001074:	0801f720 	.word	0x0801f720
 8001078:	0801f734 	.word	0x0801f734
 800107c:	0801f748 	.word	0x0801f748
 8001080:	0801f75c 	.word	0x0801f75c
 8001084:	0801f770 	.word	0x0801f770
 8001088:	0801f784 	.word	0x0801f784
 800108c:	0801f798 	.word	0x0801f798
 8001090:	0801f7ac 	.word	0x0801f7ac
 8001094:	20002208 	.word	0x20002208
 8001098:	20002204 	.word	0x20002204
 800109c:	200021fc 	.word	0x200021fc
 80010a0:	20002200 	.word	0x20002200
 80010a4:	40021000 	.word	0x40021000
 80010a8:	2000220c 	.word	0x2000220c
 80010ac:	2000e9a8 	.word	0x2000e9a8
 80010b0:	0801f7c0 	.word	0x0801f7c0

			//int offset;
			int err;
			int n_read;

			bytes_left = 0;
 80010b4:	4b8f      	ldr	r3, [pc, #572]	; (80012f4 <PlayAudioFile+0x5ac>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
			read_ptr = read_buf;
 80010ba:	4b8f      	ldr	r3, [pc, #572]	; (80012f8 <PlayAudioFile+0x5b0>)
 80010bc:	4a8f      	ldr	r2, [pc, #572]	; (80012fc <PlayAudioFile+0x5b4>)
 80010be:	601a      	str	r2, [r3, #0]

			n_read = fillReadBuffer(read_buf, read_ptr, READBUF_SIZE, bytes_left, fp);
 80010c0:	4b8d      	ldr	r3, [pc, #564]	; (80012f8 <PlayAudioFile+0x5b0>)
 80010c2:	6819      	ldr	r1, [r3, #0]
 80010c4:	4b8b      	ldr	r3, [pc, #556]	; (80012f4 <PlayAudioFile+0x5ac>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	4613      	mov	r3, r2
 80010ce:	f240 7294 	movw	r2, #1940	; 0x794
 80010d2:	488a      	ldr	r0, [pc, #552]	; (80012fc <PlayAudioFile+0x5b4>)
 80010d4:	f7ff fd7c 	bl	8000bd0 <fillReadBuffer>
 80010d8:	6678      	str	r0, [r7, #100]	; 0x64

			bytes_left += n_read;
 80010da:	4b86      	ldr	r3, [pc, #536]	; (80012f4 <PlayAudioFile+0x5ac>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80010e0:	4413      	add	r3, r2
 80010e2:	4a84      	ldr	r2, [pc, #528]	; (80012f4 <PlayAudioFile+0x5ac>)
 80010e4:	6013      	str	r3, [r2, #0]
			read_ptr = read_buf;
 80010e6:	4b84      	ldr	r3, [pc, #528]	; (80012f8 <PlayAudioFile+0x5b0>)
 80010e8:	4a84      	ldr	r2, [pc, #528]	; (80012fc <PlayAudioFile+0x5b4>)
 80010ea:	601a      	str	r2, [r3, #0]

			n_read = MP3FindSyncWord(read_ptr, READBUF_SIZE);
 80010ec:	4b82      	ldr	r3, [pc, #520]	; (80012f8 <PlayAudioFile+0x5b0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f240 7194 	movw	r1, #1940	; 0x794
 80010f4:	4618      	mov	r0, r3
 80010f6:	f00e fd77 	bl	800fbe8 <MP3FindSyncWord>
 80010fa:	6678      	str	r0, [r7, #100]	; 0x64
			printf("Offset: %d\n", n_read);
 80010fc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80010fe:	4880      	ldr	r0, [pc, #512]	; (8001300 <PlayAudioFile+0x5b8>)
 8001100:	f01d fa20 	bl	801e544 <iprintf>

			bytes_left -= n_read;
 8001104:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	4a79      	ldr	r2, [pc, #484]	; (80012f4 <PlayAudioFile+0x5ac>)
 800110e:	6013      	str	r3, [r2, #0]
			read_ptr += n_read;
 8001110:	4b79      	ldr	r3, [pc, #484]	; (80012f8 <PlayAudioFile+0x5b0>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001116:	4413      	add	r3, r2
 8001118:	4a77      	ldr	r2, [pc, #476]	; (80012f8 <PlayAudioFile+0x5b0>)
 800111a:	6013      	str	r3, [r2, #0]

			n_read = fillReadBuffer(read_buf, read_ptr, READBUF_SIZE, bytes_left, fp);
 800111c:	4b76      	ldr	r3, [pc, #472]	; (80012f8 <PlayAudioFile+0x5b0>)
 800111e:	6819      	ldr	r1, [r3, #0]
 8001120:	4b74      	ldr	r3, [pc, #464]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001126:	9300      	str	r3, [sp, #0]
 8001128:	4613      	mov	r3, r2
 800112a:	f240 7294 	movw	r2, #1940	; 0x794
 800112e:	4873      	ldr	r0, [pc, #460]	; (80012fc <PlayAudioFile+0x5b4>)
 8001130:	f7ff fd4e 	bl	8000bd0 <fillReadBuffer>
 8001134:	6678      	str	r0, [r7, #100]	; 0x64
			bytes_left += n_read;
 8001136:	4b6f      	ldr	r3, [pc, #444]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800113c:	4413      	add	r3, r2
 800113e:	4a6d      	ldr	r2, [pc, #436]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001140:	6013      	str	r3, [r2, #0]
			read_ptr = read_buf;
 8001142:	4b6d      	ldr	r3, [pc, #436]	; (80012f8 <PlayAudioFile+0x5b0>)
 8001144:	4a6d      	ldr	r2, [pc, #436]	; (80012fc <PlayAudioFile+0x5b4>)
 8001146:	601a      	str	r2, [r3, #0]

			err = MP3GetNextFrameInfo(h_dec, &frameInfo, read_ptr);
 8001148:	4b6b      	ldr	r3, [pc, #428]	; (80012f8 <PlayAudioFile+0x5b0>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001150:	4619      	mov	r1, r3
 8001152:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8001154:	f00e fd62 	bl	800fc1c <MP3GetNextFrameInfo>
 8001158:	6638      	str	r0, [r7, #96]	; 0x60
			if (err != ERR_MP3_INVALID_FRAMEHEADER)
 800115a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800115c:	f113 0f06 	cmn.w	r3, #6
 8001160:	f000 8128 	beq.w	80013b4 <PlayAudioFile+0x66c>
			{
				printf("samplerate     %d\n", frameInfo.samprate);
 8001164:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001166:	4619      	mov	r1, r3
 8001168:	4866      	ldr	r0, [pc, #408]	; (8001304 <PlayAudioFile+0x5bc>)
 800116a:	f01d f9eb 	bl	801e544 <iprintf>
				printf("bitrate        %d\n", frameInfo.bitrate);
 800116e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001170:	4619      	mov	r1, r3
 8001172:	4865      	ldr	r0, [pc, #404]	; (8001308 <PlayAudioFile+0x5c0>)
 8001174:	f01d f9e6 	bl	801e544 <iprintf>
				printf("nChans         %d\n", frameInfo.nChans);
 8001178:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800117a:	4619      	mov	r1, r3
 800117c:	4863      	ldr	r0, [pc, #396]	; (800130c <PlayAudioFile+0x5c4>)
 800117e:	f01d f9e1 	bl	801e544 <iprintf>
				printf("outputSamps    %d\n", frameInfo.outputSamps);
 8001182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001184:	4619      	mov	r1, r3
 8001186:	4862      	ldr	r0, [pc, #392]	; (8001310 <PlayAudioFile+0x5c8>)
 8001188:	f01d f9dc 	bl	801e544 <iprintf>
				printf("bitsPerSample  %d\n", frameInfo.bitsPerSample);
 800118c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800118e:	4619      	mov	r1, r3
 8001190:	4860      	ldr	r0, [pc, #384]	; (8001314 <PlayAudioFile+0x5cc>)
 8001192:	f01d f9d7 	bl	801e544 <iprintf>

				i2sSetSampleRate(DEF_I2S2, frameInfo.samprate);
 8001196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001198:	4619      	mov	r1, r3
 800119a:	2002      	movs	r0, #2
 800119c:	f7ff fd8a 	bl	8000cb4 <i2sSetSampleRate>

				q_buf_len = frameInfo.outputSamps / frameInfo.nChans;
 80011a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011a4:	fb92 f3f3 	sdiv	r3, r2, r3
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <PlayAudioFile+0x5d0>)
 80011ac:	601a      	str	r2, [r3, #0]
				q_in  = 0;
 80011ae:	4b5b      	ldr	r3, [pc, #364]	; (800131c <PlayAudioFile+0x5d4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
				q_out = 0;
 80011b4:	4b5a      	ldr	r3, [pc, #360]	; (8001320 <PlayAudioFile+0x5d8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
				q_len = I2S_BUF_LEN / q_buf_len;
 80011ba:	4b57      	ldr	r3, [pc, #348]	; (8001318 <PlayAudioFile+0x5d0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c6:	4a57      	ldr	r2, [pc, #348]	; (8001324 <PlayAudioFile+0x5dc>)
 80011c8:	6013      	str	r3, [r2, #0]

				i2sStart();
 80011ca:	f7ff fd35 	bl	8000c38 <i2sStart>
			}

			while(playState == PLAY_STARTED)
 80011ce:	e0f1      	b.n	80013b4 <PlayAudioFile+0x66c>
			{
				if (bytes_left < READBUF_SIZE)
 80011d0:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <PlayAudioFile+0x5ac>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f240 7293 	movw	r2, #1939	; 0x793
 80011d8:	4293      	cmp	r3, r2
 80011da:	dc21      	bgt.n	8001220 <PlayAudioFile+0x4d8>
				{
					HAL_GPIO_WritePin(GPIOE, SYS_LOCK_Pin, GPIO_PIN_SET);
 80011dc:	2201      	movs	r2, #1
 80011de:	2101      	movs	r1, #1
 80011e0:	4851      	ldr	r0, [pc, #324]	; (8001328 <PlayAudioFile+0x5e0>)
 80011e2:	f006 f8cb 	bl	800737c <HAL_GPIO_WritePin>
					n_read = fillReadBuffer(read_buf, read_ptr, READBUF_SIZE, bytes_left, fp);
 80011e6:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <PlayAudioFile+0x5b0>)
 80011e8:	6819      	ldr	r1, [r3, #0]
 80011ea:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <PlayAudioFile+0x5ac>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	4613      	mov	r3, r2
 80011f4:	f240 7294 	movw	r2, #1940	; 0x794
 80011f8:	4840      	ldr	r0, [pc, #256]	; (80012fc <PlayAudioFile+0x5b4>)
 80011fa:	f7ff fce9 	bl	8000bd0 <fillReadBuffer>
 80011fe:	6678      	str	r0, [r7, #100]	; 0x64

					if (n_read == 0 )
 8001200:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <PlayAudioFile+0x4c6>
					{
						SetPlayState(PLAY_NONE);
 8001206:	2000      	movs	r0, #0
 8001208:	f001 fe94 	bl	8002f34 <SetPlayState>
						break;
 800120c:	e0d7      	b.n	80013be <PlayAudioFile+0x676>
					}
					bytes_left += n_read;
 800120e:	4b39      	ldr	r3, [pc, #228]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001214:	4413      	add	r3, r2
 8001216:	4a37      	ldr	r2, [pc, #220]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001218:	6013      	str	r3, [r2, #0]
					read_ptr = read_buf;
 800121a:	4b37      	ldr	r3, [pc, #220]	; (80012f8 <PlayAudioFile+0x5b0>)
 800121c:	4a37      	ldr	r2, [pc, #220]	; (80012fc <PlayAudioFile+0x5b4>)
 800121e:	601a      	str	r2, [r3, #0]
				}


				n_read = MP3FindSyncWord(read_ptr, bytes_left);
 8001220:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <PlayAudioFile+0x5b0>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a33      	ldr	r2, [pc, #204]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001226:	6812      	ldr	r2, [r2, #0]
 8001228:	4611      	mov	r1, r2
 800122a:	4618      	mov	r0, r3
 800122c:	f00e fcdc 	bl	800fbe8 <MP3FindSyncWord>
 8001230:	6678      	str	r0, [r7, #100]	; 0x64
				if (n_read >= 0)
 8001232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001234:	2b00      	cmp	r3, #0
 8001236:	f2c0 80bd 	blt.w	80013b4 <PlayAudioFile+0x66c>
				{
					read_ptr += n_read;
 800123a:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <PlayAudioFile+0x5b0>)
 800123c:	681a      	ldr	r2, [r3, #0]
 800123e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001240:	4413      	add	r3, r2
 8001242:	4a2d      	ldr	r2, [pc, #180]	; (80012f8 <PlayAudioFile+0x5b0>)
 8001244:	6013      	str	r3, [r2, #0]
					bytes_left -= n_read;
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001250:	6013      	str	r3, [r2, #0]


					//fill the inactive outbuffer
					err = MP3Decode(h_dec, &read_ptr, (int*) &bytes_left, out_buf, 0);
 8001252:	2300      	movs	r3, #0
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	4b35      	ldr	r3, [pc, #212]	; (800132c <PlayAudioFile+0x5e4>)
 8001258:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <PlayAudioFile+0x5ac>)
 800125a:	4927      	ldr	r1, [pc, #156]	; (80012f8 <PlayAudioFile+0x5b0>)
 800125c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800125e:	f00e fd0d 	bl	800fc7c <MP3Decode>
 8001262:	6638      	str	r0, [r7, #96]	; 0x60
					HAL_GPIO_WritePin(GPIOE, SYS_LOCK_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2101      	movs	r1, #1
 8001268:	482f      	ldr	r0, [pc, #188]	; (8001328 <PlayAudioFile+0x5e0>)
 800126a:	f006 f887 	bl	800737c <HAL_GPIO_WritePin>
					if (err)
 800126e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001270:	2b00      	cmp	r3, #0
 8001272:	d00f      	beq.n	8001294 <PlayAudioFile+0x54c>
					{
						// sometimes we have a bad frame, lets just nudge forward one byte
						if (err == ERR_MP3_INVALID_FRAMEHEADER)
 8001274:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001276:	f113 0f06 	cmn.w	r3, #6
 800127a:	f040 809b 	bne.w	80013b4 <PlayAudioFile+0x66c>
						{
							read_ptr   += 1;
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <PlayAudioFile+0x5b0>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	3301      	adds	r3, #1
 8001284:	4a1c      	ldr	r2, [pc, #112]	; (80012f8 <PlayAudioFile+0x5b0>)
 8001286:	6013      	str	r3, [r2, #0]
							bytes_left -= 1;
 8001288:	4b1a      	ldr	r3, [pc, #104]	; (80012f4 <PlayAudioFile+0x5ac>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	3b01      	subs	r3, #1
 800128e:	4a19      	ldr	r2, [pc, #100]	; (80012f4 <PlayAudioFile+0x5ac>)
 8001290:	6013      	str	r3, [r2, #0]
 8001292:	e08f      	b.n	80013b4 <PlayAudioFile+0x66c>
					{

						uint32_t pre_time;
						uint32_t valid_len;

						pre_time = HAL_GetTick();
 8001294:	f005 f980 	bl	8006598 <HAL_GetTick>
 8001298:	65f8      	str	r0, [r7, #92]	; 0x5c
						while(1)
						{
							valid_len = (q_len - 1) - ((q_len + q_in - q_out) % q_len);
 800129a:	4b22      	ldr	r3, [pc, #136]	; (8001324 <PlayAudioFile+0x5dc>)
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	4b21      	ldr	r3, [pc, #132]	; (8001324 <PlayAudioFile+0x5dc>)
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	4b1e      	ldr	r3, [pc, #120]	; (800131c <PlayAudioFile+0x5d4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	441a      	add	r2, r3
 80012a8:	4b1d      	ldr	r3, [pc, #116]	; (8001320 <PlayAudioFile+0x5d8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	4a1d      	ldr	r2, [pc, #116]	; (8001324 <PlayAudioFile+0x5dc>)
 80012b0:	6812      	ldr	r2, [r2, #0]
 80012b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80012b6:	fb00 f202 	mul.w	r2, r0, r2
 80012ba:	1a9b      	subs	r3, r3, r2
 80012bc:	1acb      	subs	r3, r1, r3
 80012be:	3b01      	subs	r3, #1
 80012c0:	65bb      	str	r3, [r7, #88]	; 0x58

							if (valid_len > 0)
 80012c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d107      	bne.n	80012d8 <PlayAudioFile+0x590>
							{
								break;
							}
							if (HAL_GetTick()-pre_time >= 100)
 80012c8:	f005 f966 	bl	8006598 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b63      	cmp	r3, #99	; 0x63
 80012d4:	d802      	bhi.n	80012dc <PlayAudioFile+0x594>
							valid_len = (q_len - 1) - ((q_len + q_in - q_out) % q_len);
 80012d6:	e7e0      	b.n	800129a <PlayAudioFile+0x552>
								break;
 80012d8:	bf00      	nop
 80012da:	e000      	b.n	80012de <PlayAudioFile+0x596>
							{
								break;
 80012dc:	bf00      	nop
						}


						uint32_t q_offset;

						q_offset   = q_in*q_buf_len;
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <PlayAudioFile+0x5d4>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a0d      	ldr	r2, [pc, #52]	; (8001318 <PlayAudioFile+0x5d0>)
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	fb02 f303 	mul.w	r3, r2, r3
 80012ea:	657b      	str	r3, [r7, #84]	; 0x54

						for (int j=0; j<q_buf_len; j++)
 80012ec:	2300      	movs	r3, #0
 80012ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012f2:	e03f      	b.n	8001374 <PlayAudioFile+0x62c>
 80012f4:	200021f4 	.word	0x200021f4
 80012f8:	20000ff0 	.word	0x20000ff0
 80012fc:	200000c8 	.word	0x200000c8
 8001300:	0801f7c8 	.word	0x0801f7c8
 8001304:	0801f7d4 	.word	0x0801f7d4
 8001308:	0801f7e8 	.word	0x0801f7e8
 800130c:	0801f7fc 	.word	0x0801f7fc
 8001310:	0801f810 	.word	0x0801f810
 8001314:	0801f824 	.word	0x0801f824
 8001318:	20002208 	.word	0x20002208
 800131c:	200021fc 	.word	0x200021fc
 8001320:	20002200 	.word	0x20002200
 8001324:	20002204 	.word	0x20002204
 8001328:	40021000 	.word	0x40021000
 800132c:	20000ff4 	.word	0x20000ff4
						{
							q_buf[q_offset + j].left  = out_buf[j*2 + 0];
 8001330:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001334:	005a      	lsls	r2, r3, #1
 8001336:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 800133a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800133c:	440b      	add	r3, r1
 800133e:	4924      	ldr	r1, [pc, #144]	; (80013d0 <PlayAudioFile+0x688>)
 8001340:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001344:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <PlayAudioFile+0x68c>)
 8001346:	f822 1023 	strh.w	r1, [r2, r3, lsl #2]
							q_buf[q_offset + j].right = out_buf[j*2 + 1];
 800134a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	1c5a      	adds	r2, r3, #1
 8001352:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8001356:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001358:	440b      	add	r3, r1
 800135a:	491d      	ldr	r1, [pc, #116]	; (80013d0 <PlayAudioFile+0x688>)
 800135c:	f931 1012 	ldrsh.w	r1, [r1, r2, lsl #1]
 8001360:	4a1c      	ldr	r2, [pc, #112]	; (80013d4 <PlayAudioFile+0x68c>)
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	460a      	mov	r2, r1
 8001368:	805a      	strh	r2, [r3, #2]
						for (int j=0; j<q_buf_len; j++)
 800136a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800136e:	3301      	adds	r3, #1
 8001370:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001374:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <PlayAudioFile+0x690>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d3d7      	bcc.n	8001330 <PlayAudioFile+0x5e8>
						}
						if (((q_in + 1) % q_len) != q_out)
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <PlayAudioFile+0x694>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	3301      	adds	r3, #1
 8001386:	4a16      	ldr	r2, [pc, #88]	; (80013e0 <PlayAudioFile+0x698>)
 8001388:	6812      	ldr	r2, [r2, #0]
 800138a:	fbb3 f1f2 	udiv	r1, r3, r2
 800138e:	fb01 f202 	mul.w	r2, r1, r2
 8001392:	1a9a      	subs	r2, r3, r2
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <PlayAudioFile+0x69c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	429a      	cmp	r2, r3
 800139a:	d00b      	beq.n	80013b4 <PlayAudioFile+0x66c>
						{
							q_in = (q_in+1) % q_len;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <PlayAudioFile+0x694>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	3301      	adds	r3, #1
 80013a2:	4a0f      	ldr	r2, [pc, #60]	; (80013e0 <PlayAudioFile+0x698>)
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80013aa:	fb01 f202 	mul.w	r2, r1, r2
 80013ae:	1a9b      	subs	r3, r3, r2
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <PlayAudioFile+0x694>)
 80013b2:	6013      	str	r3, [r2, #0]
			while(playState == PLAY_STARTED)
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <PlayAudioFile+0x6a0>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	f43f af09 	beq.w	80011d0 <PlayAudioFile+0x488>
						}
					}
				}
			}
			i2sStop();
 80013be:	f7ff fc6b 	bl	8000c98 <i2sStop>
			fclose(fp);
 80013c2:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80013c4:	f000 feb0 	bl	8002128 <ob_fclose>
		}
	}

}
 80013c8:	379c      	adds	r7, #156	; 0x9c
 80013ca:	46bd      	mov	sp, r7
 80013cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013d0:	20000ff4 	.word	0x20000ff4
 80013d4:	2000220c 	.word	0x2000220c
 80013d8:	20002208 	.word	0x20002208
 80013dc:	200021fc 	.word	0x200021fc
 80013e0:	20002204 	.word	0x20002204
 80013e4:	20002200 	.word	0x20002200
 80013e8:	2000e9a8 	.word	0x2000e9a8

080013ec <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(GPIOE, LID_UPDN_Pin, GPIO_PIN_RESET);
 80013f4:	2200      	movs	r2, #0
 80013f6:	2140      	movs	r1, #64	; 0x40
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80013fa:	f005 ffbf 	bl	800737c <HAL_GPIO_WritePin>
}
 80013fe:	bf00      	nop
 8001400:	3708      	adds	r7, #8
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000

0800140c <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOE, LID_UPDN_Pin, GPIO_PIN_SET);
 8001414:	2201      	movs	r2, #1
 8001416:	2140      	movs	r1, #64	; 0x40
 8001418:	4828      	ldr	r0, [pc, #160]	; (80014bc <HAL_I2S_TxCpltCallback+0xb0>)
 800141a:	f005 ffaf 	bl	800737c <HAL_GPIO_WritePin>

	uint32_t len;

	if (is_started != true)
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <HAL_I2S_TxCpltCallback+0xb4>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	f083 0301 	eor.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	2b00      	cmp	r3, #0
 800142a:	d142      	bne.n	80014b2 <HAL_I2S_TxCpltCallback+0xa6>
	{
		return;
	}

	len = (q_len + q_in - q_out) % q_len;
 800142c:	4b25      	ldr	r3, [pc, #148]	; (80014c4 <HAL_I2S_TxCpltCallback+0xb8>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b25      	ldr	r3, [pc, #148]	; (80014c8 <HAL_I2S_TxCpltCallback+0xbc>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	441a      	add	r2, r3
 8001436:	4b25      	ldr	r3, [pc, #148]	; (80014cc <HAL_I2S_TxCpltCallback+0xc0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	4a21      	ldr	r2, [pc, #132]	; (80014c4 <HAL_I2S_TxCpltCallback+0xb8>)
 800143e:	6812      	ldr	r2, [r2, #0]
 8001440:	fbb3 f1f2 	udiv	r1, r3, r2
 8001444:	fb01 f202 	mul.w	r2, r1, r2
 8001448:	1a9b      	subs	r3, r3, r2
 800144a:	60fb      	str	r3, [r7, #12]

	if (len > 0)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d024      	beq.n	800149c <HAL_I2S_TxCpltCallback+0x90>
	{
		HAL_I2S_Transmit_DMA(hi2s, (uint16_t *)&q_buf[q_out*q_buf_len], q_buf_len * 2);
 8001452:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_I2S_TxCpltCallback+0xc0>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a1e      	ldr	r2, [pc, #120]	; (80014d0 <HAL_I2S_TxCpltCallback+0xc4>)
 8001458:	6812      	ldr	r2, [r2, #0]
 800145a:	fb02 f303 	mul.w	r3, r2, r3
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <HAL_I2S_TxCpltCallback+0xc8>)
 8001462:	1899      	adds	r1, r3, r2
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <HAL_I2S_TxCpltCallback+0xc4>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	b29b      	uxth	r3, r3
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	b29b      	uxth	r3, r3
 800146e:	461a      	mov	r2, r3
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f007 f905 	bl	8008680 <HAL_I2S_Transmit_DMA>

		if (q_out != q_in)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <HAL_I2S_TxCpltCallback+0xc0>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b13      	ldr	r3, [pc, #76]	; (80014c8 <HAL_I2S_TxCpltCallback+0xbc>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d018      	beq.n	80014b4 <HAL_I2S_TxCpltCallback+0xa8>
		{
			q_out = (q_out + 1) % q_len;
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_I2S_TxCpltCallback+0xc0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3301      	adds	r3, #1
 8001488:	4a0e      	ldr	r2, [pc, #56]	; (80014c4 <HAL_I2S_TxCpltCallback+0xb8>)
 800148a:	6812      	ldr	r2, [r2, #0]
 800148c:	fbb3 f1f2 	udiv	r1, r3, r2
 8001490:	fb01 f202 	mul.w	r2, r1, r2
 8001494:	1a9b      	subs	r3, r3, r2
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <HAL_I2S_TxCpltCallback+0xc0>)
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	e00b      	b.n	80014b4 <HAL_I2S_TxCpltCallback+0xa8>
		}
	}
	else
	{
		HAL_I2S_Transmit_DMA(hi2s, (uint16_t *)q_buf_zero, q_buf_len*2);
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_I2S_TxCpltCallback+0xc4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	b29b      	uxth	r3, r3
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	490b      	ldr	r1, [pc, #44]	; (80014d8 <HAL_I2S_TxCpltCallback+0xcc>)
 80014aa:	6878      	ldr	r0, [r7, #4]
 80014ac:	f007 f8e8 	bl	8008680 <HAL_I2S_Transmit_DMA>
 80014b0:	e000      	b.n	80014b4 <HAL_I2S_TxCpltCallback+0xa8>
		return;
 80014b2:	bf00      	nop
	}
}
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40021000 	.word	0x40021000
 80014c0:	200021f8 	.word	0x200021f8
 80014c4:	20002204 	.word	0x20002204
 80014c8:	200021fc 	.word	0x200021fc
 80014cc:	20002200 	.word	0x20002200
 80014d0:	20002208 	.word	0x20002208
 80014d4:	2000220c 	.word	0x2000220c
 80014d8:	08021768 	.word	0x08021768

080014dc <ConvertToBase64>:
	= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

void ConvertToBase64(char *pcOutStr, const char *pccInStr, int iLen);

void ConvertToBase64(char *pcOutStr, const char *pccInStr, int iLen)
{
 80014dc:	b480      	push	{r7}
 80014de:	b089      	sub	sp, #36	; 0x24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	60b9      	str	r1, [r7, #8]
 80014e6:	607a      	str	r2, [r7, #4]
	const char *pccIn = (const char *)pccInStr;
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	61fb      	str	r3, [r7, #28]
	char *pcOut;
	int iCount;
	pcOut = pcOutStr;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	61bb      	str	r3, [r7, #24]

	/* Loop in for Multiple of 24Bits and Convert to Base 64 */
	for (iCount = 0; iLen - iCount >= 3; iCount += 3, pccIn += 3) {
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e03e      	b.n	8001574 <ConvertToBase64+0x98>
		*pcOut++ = g_ccB64Tbl[pccIn[0] >> 2];
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	781b      	ldrb	r3, [r3, #0]
 80014fa:	089b      	lsrs	r3, r3, #2
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	1c5a      	adds	r2, r3, #1
 8001504:	61ba      	str	r2, [r7, #24]
 8001506:	4a46      	ldr	r2, [pc, #280]	; (8001620 <ConvertToBase64+0x144>)
 8001508:	5c52      	ldrb	r2, [r2, r1]
 800150a:	701a      	strb	r2, [r3, #0]
		*pcOut++ = g_ccB64Tbl[((pccIn[0] & 0x03) << 4) | (pccIn[1] >> 4)];
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	3201      	adds	r2, #1
 800151a:	7812      	ldrb	r2, [r2, #0]
 800151c:	0912      	lsrs	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	431a      	orrs	r2, r3
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	1c59      	adds	r1, r3, #1
 8001526:	61b9      	str	r1, [r7, #24]
 8001528:	493d      	ldr	r1, [pc, #244]	; (8001620 <ConvertToBase64+0x144>)
 800152a:	5c8a      	ldrb	r2, [r1, r2]
 800152c:	701a      	strb	r2, [r3, #0]
		*pcOut++ = g_ccB64Tbl[((pccIn[1] & 0x0F) << 2) | (pccIn[2] >> 6)];
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	3301      	adds	r3, #1
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	009b      	lsls	r3, r3, #2
 8001536:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800153a:	69fa      	ldr	r2, [r7, #28]
 800153c:	3202      	adds	r2, #2
 800153e:	7812      	ldrb	r2, [r2, #0]
 8001540:	0992      	lsrs	r2, r2, #6
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	431a      	orrs	r2, r3
 8001546:	69bb      	ldr	r3, [r7, #24]
 8001548:	1c59      	adds	r1, r3, #1
 800154a:	61b9      	str	r1, [r7, #24]
 800154c:	4934      	ldr	r1, [pc, #208]	; (8001620 <ConvertToBase64+0x144>)
 800154e:	5c8a      	ldrb	r2, [r1, r2]
 8001550:	701a      	strb	r2, [r3, #0]
		*pcOut++ = g_ccB64Tbl[pccIn[2] & 0x3f];
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3302      	adds	r3, #2
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	1c59      	adds	r1, r3, #1
 8001560:	61b9      	str	r1, [r7, #24]
 8001562:	492f      	ldr	r1, [pc, #188]	; (8001620 <ConvertToBase64+0x144>)
 8001564:	5c8a      	ldrb	r2, [r1, r2]
 8001566:	701a      	strb	r2, [r3, #0]
	for (iCount = 0; iLen - iCount >= 3; iCount += 3, pccIn += 3) {
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3303      	adds	r3, #3
 800156c:	617b      	str	r3, [r7, #20]
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3303      	adds	r3, #3
 8001572:	61fb      	str	r3, [r7, #28]
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	dcbb      	bgt.n	80014f6 <ConvertToBase64+0x1a>
	}

	/* Check if String is not multiple of 3 Bytes */
	if (iCount != iLen) {
 800157e:	697a      	ldr	r2, [r7, #20]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	429a      	cmp	r2, r3
 8001584:	d043      	beq.n	800160e <ConvertToBase64+0x132>
		unsigned char ucLastByte;

		*pcOut++ = g_ccB64Tbl[pccIn[0] >> 2];
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	089b      	lsrs	r3, r3, #2
 800158c:	b2db      	uxtb	r3, r3
 800158e:	4619      	mov	r1, r3
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	61ba      	str	r2, [r7, #24]
 8001596:	4a22      	ldr	r2, [pc, #136]	; (8001620 <ConvertToBase64+0x144>)
 8001598:	5c52      	ldrb	r2, [r2, r1]
 800159a:	701a      	strb	r2, [r3, #0]
		ucLastByte = ((pccIn[0] & 0x03) << 4);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	011b      	lsls	r3, r3, #4
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80015a8:	74fb      	strb	r3, [r7, #19]

		if (iLen - iCount > 1) {
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	dd1b      	ble.n	80015ec <ConvertToBase64+0x110>
			/* If there are 2 Extra Bytes */
			ucLastByte |= (pccIn[1] >> 4);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	3301      	adds	r3, #1
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	091b      	lsrs	r3, r3, #4
 80015bc:	b2da      	uxtb	r2, r3
 80015be:	7cfb      	ldrb	r3, [r7, #19]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	74fb      	strb	r3, [r7, #19]
			*pcOut++ = g_ccB64Tbl[ucLastByte];
 80015c4:	7cfa      	ldrb	r2, [r7, #19]
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	1c59      	adds	r1, r3, #1
 80015ca:	61b9      	str	r1, [r7, #24]
 80015cc:	4914      	ldr	r1, [pc, #80]	; (8001620 <ConvertToBase64+0x144>)
 80015ce:	5c8a      	ldrb	r2, [r1, r2]
 80015d0:	701a      	strb	r2, [r3, #0]
			*pcOut++ = g_ccB64Tbl[((pccIn[1] & 0x0F) << 2)];
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	3301      	adds	r3, #1
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	1c59      	adds	r1, r3, #1
 80015e2:	61b9      	str	r1, [r7, #24]
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <ConvertToBase64+0x144>)
 80015e6:	5c8a      	ldrb	r2, [r1, r2]
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	e00b      	b.n	8001604 <ConvertToBase64+0x128>
		} else {
			/* If there is only 1 Extra Byte */
			*pcOut++ = g_ccB64Tbl[ucLastByte];
 80015ec:	7cfa      	ldrb	r2, [r7, #19]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	1c59      	adds	r1, r3, #1
 80015f2:	61b9      	str	r1, [r7, #24]
 80015f4:	490a      	ldr	r1, [pc, #40]	; (8001620 <ConvertToBase64+0x144>)
 80015f6:	5c8a      	ldrb	r2, [r1, r2]
 80015f8:	701a      	strb	r2, [r3, #0]
			*pcOut++ = '=';
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	1c5a      	adds	r2, r3, #1
 80015fe:	61ba      	str	r2, [r7, #24]
 8001600:	223d      	movs	r2, #61	; 0x3d
 8001602:	701a      	strb	r2, [r3, #0]
		}

		*pcOut++ = '=';
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	61ba      	str	r2, [r7, #24]
 800160a:	223d      	movs	r2, #61	; 0x3d
 800160c:	701a      	strb	r2, [r3, #0]
	}

	*pcOut  = '\0';
 800160e:	69bb      	ldr	r3, [r7, #24]
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
}
 8001614:	bf00      	nop
 8001616:	3724      	adds	r7, #36	; 0x24
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	08025768 	.word	0x08025768

08001624 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2110      	movs	r1, #16
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <SELECT+0x14>)
 800162e:	f005 fea5 	bl	800737c <HAL_GPIO_WritePin>
//	HAL_Delay(1);
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40020000 	.word	0x40020000

0800163c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8001640:	2201      	movs	r2, #1
 8001642:	2110      	movs	r1, #16
 8001644:	4802      	ldr	r0, [pc, #8]	; (8001650 <DESELECT+0x14>)
 8001646:	f005 fe99 	bl	800737c <HAL_GPIO_WritePin>
//	HAL_Delay(1);
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40020000 	.word	0x40020000

08001654 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800165e:	bf00      	nop
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <SPI_TxByte+0x30>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b02      	cmp	r3, #2
 800166c:	d1f8      	bne.n	8001660 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800166e:	1df9      	adds	r1, r7, #7
 8001670:	2364      	movs	r3, #100	; 0x64
 8001672:	2201      	movs	r2, #1
 8001674:	4803      	ldr	r0, [pc, #12]	; (8001684 <SPI_TxByte+0x30>)
 8001676:	f009 f8a7 	bl	800a7c8 <HAL_SPI_Transmit>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	2000e65c 	.word	0x2000e65c

08001688 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001694:	bf00      	nop
 8001696:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <SPI_TxBuffer+0x30>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 0302 	and.w	r3, r3, #2
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d1f8      	bne.n	8001696 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80016a4:	887a      	ldrh	r2, [r7, #2]
 80016a6:	2364      	movs	r3, #100	; 0x64
 80016a8:	6879      	ldr	r1, [r7, #4]
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <SPI_TxBuffer+0x30>)
 80016ac:	f009 f88c 	bl	800a7c8 <HAL_SPI_Transmit>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2000e65c 	.word	0x2000e65c

080016bc <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80016c2:	23ff      	movs	r3, #255	; 0xff
 80016c4:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80016c6:	bf00      	nop
 80016c8:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <SPI_RxByte+0x34>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	689b      	ldr	r3, [r3, #8]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d1f8      	bne.n	80016c8 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80016d6:	1dba      	adds	r2, r7, #6
 80016d8:	1df9      	adds	r1, r7, #7
 80016da:	2364      	movs	r3, #100	; 0x64
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2301      	movs	r3, #1
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <SPI_RxByte+0x34>)
 80016e2:	f009 f9ad 	bl	800aa40 <HAL_SPI_TransmitReceive>

	return data;
 80016e6:	79bb      	ldrb	r3, [r7, #6]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	2000e65c 	.word	0x2000e65c

080016f4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80016fc:	f7ff ffde 	bl	80016bc <SPI_RxByte>
 8001700:	4603      	mov	r3, r0
 8001702:	461a      	mov	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	701a      	strb	r2, [r3, #0]
}
 8001708:	bf00      	nop
 800170a:	3708      	adds	r7, #8
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 50;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <SD_ReadyWait+0x2c>)
 8001718:	2232      	movs	r2, #50	; 0x32
 800171a:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800171c:	f7ff ffce 	bl	80016bc <SPI_RxByte>
 8001720:	4603      	mov	r3, r0
 8001722:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	2bff      	cmp	r3, #255	; 0xff
 8001728:	d003      	beq.n	8001732 <SD_ReadyWait+0x22>
 800172a:	4b04      	ldr	r3, [pc, #16]	; (800173c <SD_ReadyWait+0x2c>)
 800172c:	881b      	ldrh	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d1f4      	bne.n	800171c <SD_ReadyWait+0xc>

	return res;
 8001732:	79fb      	ldrb	r3, [r7, #7]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	2000620e 	.word	0x2000620e

08001740 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8001746:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800174a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800174c:	f7ff ff76 	bl	800163c <DESELECT>
	for(int i = 0; i < 10; i++)
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	e005      	b.n	8001762 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001756:	20ff      	movs	r0, #255	; 0xff
 8001758:	f7ff ff7c 	bl	8001654 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	3301      	adds	r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	2b09      	cmp	r3, #9
 8001766:	ddf6      	ble.n	8001756 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001768:	f7ff ff5c 	bl	8001624 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800176c:	2340      	movs	r3, #64	; 0x40
 800176e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001774:	2300      	movs	r3, #0
 8001776:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001780:	2395      	movs	r3, #149	; 0x95
 8001782:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001784:	463b      	mov	r3, r7
 8001786:	2106      	movs	r1, #6
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff7d 	bl	8001688 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800178e:	e002      	b.n	8001796 <SD_PowerOn+0x56>
	{
		cnt--;
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	3b01      	subs	r3, #1
 8001794:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001796:	f7ff ff91 	bl	80016bc <SPI_RxByte>
 800179a:	4603      	mov	r3, r0
 800179c:	2b01      	cmp	r3, #1
 800179e:	d002      	beq.n	80017a6 <SD_PowerOn+0x66>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d1f4      	bne.n	8001790 <SD_PowerOn+0x50>
	}

	DESELECT();
 80017a6:	f7ff ff49 	bl	800163c <DESELECT>
	SPI_TxByte(0XFF);
 80017aa:	20ff      	movs	r0, #255	; 0xff
 80017ac:	f7ff ff52 	bl	8001654 <SPI_TxByte>

	PowerFlag = 1;
 80017b0:	4b03      	ldr	r3, [pc, #12]	; (80017c0 <SD_PowerOn+0x80>)
 80017b2:	2201      	movs	r2, #1
 80017b4:	701a      	strb	r2, [r3, #0]
}
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20006211 	.word	0x20006211

080017c4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80017c8:	4b03      	ldr	r3, [pc, #12]	; (80017d8 <SD_PowerOff+0x14>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	701a      	strb	r2, [r3, #0]
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr
 80017d8:	20006211 	.word	0x20006211

080017dc <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
	return PowerFlag;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <SD_CheckPower+0x14>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20006211 	.word	0x20006211

080017f4 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b084      	sub	sp, #16
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 20;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <SD_RxDataBlock+0x58>)
 8001800:	2214      	movs	r2, #20
 8001802:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8001804:	f7ff ff5a 	bl	80016bc <SPI_RxByte>
 8001808:	4603      	mov	r3, r0
 800180a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800180c:	7bfb      	ldrb	r3, [r7, #15]
 800180e:	2bff      	cmp	r3, #255	; 0xff
 8001810:	d103      	bne.n	800181a <SD_RxDataBlock+0x26>
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <SD_RxDataBlock+0x58>)
 8001814:	881b      	ldrh	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f4      	bne.n	8001804 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800181a:	7bfb      	ldrb	r3, [r7, #15]
 800181c:	2bfe      	cmp	r3, #254	; 0xfe
 800181e:	d001      	beq.n	8001824 <SD_RxDataBlock+0x30>
 8001820:	2300      	movs	r3, #0
 8001822:	e00f      	b.n	8001844 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff62 	bl	80016f4 <SPI_RxBytePtr>
	} while(len--);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	1e5a      	subs	r2, r3, #1
 8001834:	603a      	str	r2, [r7, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1f4      	bne.n	8001824 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800183a:	f7ff ff3f 	bl	80016bc <SPI_RxByte>
	SPI_RxByte();
 800183e:	f7ff ff3d 	bl	80016bc <SPI_RxByte>

	return TRUE;
 8001842:	2301      	movs	r3, #1
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	2000620c 	.word	0x2000620c

08001850 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800185c:	2300      	movs	r3, #0
 800185e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001860:	f7ff ff56 	bl	8001710 <SD_ReadyWait>
 8001864:	4603      	mov	r3, r0
 8001866:	2bff      	cmp	r3, #255	; 0xff
 8001868:	d001      	beq.n	800186e <SD_TxDataBlock+0x1e>
 800186a:	2300      	movs	r3, #0
 800186c:	e02f      	b.n	80018ce <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	4618      	mov	r0, r3
 8001872:	f7ff feef 	bl	8001654 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	2bfd      	cmp	r3, #253	; 0xfd
 800187a:	d020      	beq.n	80018be <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800187c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff01 	bl	8001688 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001886:	f7ff ff19 	bl	80016bc <SPI_RxByte>
		SPI_RxByte();
 800188a:	f7ff ff17 	bl	80016bc <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800188e:	e00b      	b.n	80018a8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001890:	f7ff ff14 	bl	80016bc <SPI_RxByte>
 8001894:	4603      	mov	r3, r0
 8001896:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001898:	7bfb      	ldrb	r3, [r7, #15]
 800189a:	f003 031f 	and.w	r3, r3, #31
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d006      	beq.n	80018b0 <SD_TxDataBlock+0x60>
			i++;
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	3301      	adds	r3, #1
 80018a6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	2b40      	cmp	r3, #64	; 0x40
 80018ac:	d9f0      	bls.n	8001890 <SD_TxDataBlock+0x40>
 80018ae:	e000      	b.n	80018b2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80018b0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80018b2:	bf00      	nop
 80018b4:	f7ff ff02 	bl	80016bc <SPI_RxByte>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0fa      	beq.n	80018b4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	f003 031f 	and.w	r3, r3, #31
 80018c4:	2b05      	cmp	r3, #5
 80018c6:	d101      	bne.n	80018cc <SD_TxDataBlock+0x7c>
 80018c8:	2301      	movs	r3, #1
 80018ca:	e000      	b.n	80018ce <SD_TxDataBlock+0x7e>

	return FALSE;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	b084      	sub	sp, #16
 80018da:	af00      	add	r7, sp, #0
 80018dc:	4603      	mov	r3, r0
 80018de:	6039      	str	r1, [r7, #0]
 80018e0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80018e2:	f7ff ff15 	bl	8001710 <SD_ReadyWait>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2bff      	cmp	r3, #255	; 0xff
 80018ea:	d001      	beq.n	80018f0 <SD_SendCmd+0x1a>
 80018ec:	23ff      	movs	r3, #255	; 0xff
 80018ee:	e042      	b.n	8001976 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff feae 	bl	8001654 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	0e1b      	lsrs	r3, r3, #24
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff fea8 	bl	8001654 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	0c1b      	lsrs	r3, r3, #16
 8001908:	b2db      	uxtb	r3, r3
 800190a:	4618      	mov	r0, r3
 800190c:	f7ff fea2 	bl	8001654 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	0a1b      	lsrs	r3, r3, #8
 8001914:	b2db      	uxtb	r3, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fe9c 	bl	8001654 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2db      	uxtb	r3, r3
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fe97 	bl	8001654 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8001926:	79fb      	ldrb	r3, [r7, #7]
 8001928:	2b40      	cmp	r3, #64	; 0x40
 800192a:	d102      	bne.n	8001932 <SD_SendCmd+0x5c>
 800192c:	2395      	movs	r3, #149	; 0x95
 800192e:	73fb      	strb	r3, [r7, #15]
 8001930:	e007      	b.n	8001942 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	2b48      	cmp	r3, #72	; 0x48
 8001936:	d102      	bne.n	800193e <SD_SendCmd+0x68>
 8001938:	2387      	movs	r3, #135	; 0x87
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	e001      	b.n	8001942 <SD_SendCmd+0x6c>
	else crc = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8001942:	7bfb      	ldrb	r3, [r7, #15]
 8001944:	4618      	mov	r0, r3
 8001946:	f7ff fe85 	bl	8001654 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2b4c      	cmp	r3, #76	; 0x4c
 800194e:	d101      	bne.n	8001954 <SD_SendCmd+0x7e>
 8001950:	f7ff feb4 	bl	80016bc <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001954:	230a      	movs	r3, #10
 8001956:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001958:	f7ff feb0 	bl	80016bc <SPI_RxByte>
 800195c:	4603      	mov	r3, r0
 800195e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001960:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001964:	2b00      	cmp	r3, #0
 8001966:	da05      	bge.n	8001974 <SD_SendCmd+0x9e>
 8001968:	7bbb      	ldrb	r3, [r7, #14]
 800196a:	3b01      	subs	r3, #1
 800196c:	73bb      	strb	r3, [r7, #14]
 800196e:	7bbb      	ldrb	r3, [r7, #14]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f1      	bne.n	8001958 <SD_SendCmd+0x82>

	return res;
 8001974:	7b7b      	ldrb	r3, [r7, #13]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8001980:	b590      	push	{r4, r7, lr}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	4603      	mov	r3, r0
 8001988:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SD_disk_initialize+0x14>
 8001990:	2301      	movs	r3, #1
 8001992:	e0d0      	b.n	8001b36 <SD_disk_initialize+0x1b6>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001994:	4b6a      	ldr	r3, [pc, #424]	; (8001b40 <SD_disk_initialize+0x1c0>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	f003 0302 	and.w	r3, r3, #2
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <SD_disk_initialize+0x2a>
 80019a2:	4b67      	ldr	r3, [pc, #412]	; (8001b40 <SD_disk_initialize+0x1c0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	e0c5      	b.n	8001b36 <SD_disk_initialize+0x1b6>

	/* power on */
	SD_PowerOn();
 80019aa:	f7ff fec9 	bl	8001740 <SD_PowerOn>

	/* slave select */
	SELECT();
 80019ae:	f7ff fe39 	bl	8001624 <SELECT>

	/* check disk type */
	type = 0;
 80019b2:	2300      	movs	r3, #0
 80019b4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80019b6:	2100      	movs	r1, #0
 80019b8:	2040      	movs	r0, #64	; 0x40
 80019ba:	f7ff ff8c 	bl	80018d6 <SD_SendCmd>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b01      	cmp	r3, #1
 80019c2:	f040 80a0 	bne.w	8001b06 <SD_disk_initialize+0x186>
	{
		/* timeout 1 sec */
		Timer1 = 100;
 80019c6:	4b5f      	ldr	r3, [pc, #380]	; (8001b44 <SD_disk_initialize+0x1c4>)
 80019c8:	2264      	movs	r2, #100	; 0x64
 80019ca:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80019cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80019d0:	2048      	movs	r0, #72	; 0x48
 80019d2:	f7ff ff80 	bl	80018d6 <SD_SendCmd>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d155      	bne.n	8001a88 <SD_disk_initialize+0x108>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	e00c      	b.n	80019fc <SD_disk_initialize+0x7c>
			{
				ocr[n] = SPI_RxByte();
 80019e2:	7bfc      	ldrb	r4, [r7, #15]
 80019e4:	f7ff fe6a 	bl	80016bc <SPI_RxByte>
 80019e8:	4603      	mov	r3, r0
 80019ea:	461a      	mov	r2, r3
 80019ec:	f104 0310 	add.w	r3, r4, #16
 80019f0:	443b      	add	r3, r7
 80019f2:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80019f6:	7bfb      	ldrb	r3, [r7, #15]
 80019f8:	3301      	adds	r3, #1
 80019fa:	73fb      	strb	r3, [r7, #15]
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d9ef      	bls.n	80019e2 <SD_disk_initialize+0x62>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001a02:	7abb      	ldrb	r3, [r7, #10]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d17e      	bne.n	8001b06 <SD_disk_initialize+0x186>
 8001a08:	7afb      	ldrb	r3, [r7, #11]
 8001a0a:	2baa      	cmp	r3, #170	; 0xaa
 8001a0c:	d17b      	bne.n	8001b06 <SD_disk_initialize+0x186>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2077      	movs	r0, #119	; 0x77
 8001a12:	f7ff ff60 	bl	80018d6 <SD_SendCmd>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d807      	bhi.n	8001a2c <SD_disk_initialize+0xac>
 8001a1c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a20:	2069      	movs	r0, #105	; 0x69
 8001a22:	f7ff ff58 	bl	80018d6 <SD_SendCmd>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d004      	beq.n	8001a36 <SD_disk_initialize+0xb6>
				} while (Timer1);
 8001a2c:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <SD_disk_initialize+0x1c4>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1ec      	bne.n	8001a0e <SD_disk_initialize+0x8e>
 8001a34:	e000      	b.n	8001a38 <SD_disk_initialize+0xb8>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8001a36:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001a38:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <SD_disk_initialize+0x1c4>)
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d062      	beq.n	8001b06 <SD_disk_initialize+0x186>
 8001a40:	2100      	movs	r1, #0
 8001a42:	207a      	movs	r0, #122	; 0x7a
 8001a44:	f7ff ff47 	bl	80018d6 <SD_SendCmd>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d15b      	bne.n	8001b06 <SD_disk_initialize+0x186>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	e00c      	b.n	8001a6e <SD_disk_initialize+0xee>
					{
						ocr[n] = SPI_RxByte();
 8001a54:	7bfc      	ldrb	r4, [r7, #15]
 8001a56:	f7ff fe31 	bl	80016bc <SPI_RxByte>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	f104 0310 	add.w	r3, r4, #16
 8001a62:	443b      	add	r3, r7
 8001a64:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	73fb      	strb	r3, [r7, #15]
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d9ef      	bls.n	8001a54 <SD_disk_initialize+0xd4>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001a74:	7a3b      	ldrb	r3, [r7, #8]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <SD_disk_initialize+0x102>
 8001a7e:	230c      	movs	r3, #12
 8001a80:	e000      	b.n	8001a84 <SD_disk_initialize+0x104>
 8001a82:	2304      	movs	r3, #4
 8001a84:	73bb      	strb	r3, [r7, #14]
 8001a86:	e03e      	b.n	8001b06 <SD_disk_initialize+0x186>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2077      	movs	r0, #119	; 0x77
 8001a8c:	f7ff ff23 	bl	80018d6 <SD_SendCmd>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d808      	bhi.n	8001aa8 <SD_disk_initialize+0x128>
 8001a96:	2100      	movs	r1, #0
 8001a98:	2069      	movs	r0, #105	; 0x69
 8001a9a:	f7ff ff1c 	bl	80018d6 <SD_SendCmd>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d801      	bhi.n	8001aa8 <SD_disk_initialize+0x128>
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	e000      	b.n	8001aaa <SD_disk_initialize+0x12a>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001aac:	7bbb      	ldrb	r3, [r7, #14]
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d10e      	bne.n	8001ad0 <SD_disk_initialize+0x150>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2077      	movs	r0, #119	; 0x77
 8001ab6:	f7ff ff0e 	bl	80018d6 <SD_SendCmd>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d80e      	bhi.n	8001ade <SD_disk_initialize+0x15e>
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	2069      	movs	r0, #105	; 0x69
 8001ac4:	f7ff ff07 	bl	80018d6 <SD_SendCmd>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d107      	bne.n	8001ade <SD_disk_initialize+0x15e>
 8001ace:	e00c      	b.n	8001aea <SD_disk_initialize+0x16a>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2041      	movs	r0, #65	; 0x41
 8001ad4:	f7ff feff 	bl	80018d6 <SD_SendCmd>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <SD_disk_initialize+0x168>
				}

			} while (Timer1);
 8001ade:	4b19      	ldr	r3, [pc, #100]	; (8001b44 <SD_disk_initialize+0x1c4>)
 8001ae0:	881b      	ldrh	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1e2      	bne.n	8001aac <SD_disk_initialize+0x12c>
 8001ae6:	e000      	b.n	8001aea <SD_disk_initialize+0x16a>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001ae8:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <SD_disk_initialize+0x1c4>)
 8001aec:	881b      	ldrh	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <SD_disk_initialize+0x182>
 8001af2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001af6:	2050      	movs	r0, #80	; 0x50
 8001af8:	f7ff feed 	bl	80018d6 <SD_SendCmd>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d001      	beq.n	8001b06 <SD_disk_initialize+0x186>
 8001b02:	2300      	movs	r3, #0
 8001b04:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8001b06:	4a10      	ldr	r2, [pc, #64]	; (8001b48 <SD_disk_initialize+0x1c8>)
 8001b08:	7bbb      	ldrb	r3, [r7, #14]
 8001b0a:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8001b0c:	f7ff fd96 	bl	800163c <DESELECT>
	SPI_RxByte();
 8001b10:	f7ff fdd4 	bl	80016bc <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8001b14:	7bbb      	ldrb	r3, [r7, #14]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <SD_disk_initialize+0x1ac>
	{
		Stat &= ~STA_NOINIT;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <SD_disk_initialize+0x1c0>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	f023 0301 	bic.w	r3, r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <SD_disk_initialize+0x1c0>)
 8001b28:	701a      	strb	r2, [r3, #0]
 8001b2a:	e001      	b.n	8001b30 <SD_disk_initialize+0x1b0>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8001b2c:	f7ff fe4a 	bl	80017c4 <SD_PowerOff>
	}

	return Stat;
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <SD_disk_initialize+0x1c0>)
 8001b32:	781b      	ldrb	r3, [r3, #0]
 8001b34:	b2db      	uxtb	r3, r3
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd90      	pop	{r4, r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000004 	.word	0x20000004
 8001b44:	2000620c 	.word	0x2000620c
 8001b48:	20006210 	.word	0x20006210

08001b4c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <SD_disk_status+0x14>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e002      	b.n	8001b66 <SD_disk_status+0x1a>
	return Stat;
 8001b60:	4b04      	ldr	r3, [pc, #16]	; (8001b74 <SD_disk_status+0x28>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000004 	.word	0x20000004

08001b78 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60b9      	str	r1, [r7, #8]
 8001b80:	607a      	str	r2, [r7, #4]
 8001b82:	603b      	str	r3, [r7, #0]
 8001b84:	4603      	mov	r3, r0
 8001b86:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001b88:	7bfb      	ldrb	r3, [r7, #15]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d102      	bne.n	8001b94 <SD_disk_read+0x1c>
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d101      	bne.n	8001b98 <SD_disk_read+0x20>
 8001b94:	2304      	movs	r3, #4
 8001b96:	e054      	b.n	8001c42 <SD_disk_read+0xca>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001b98:	4b2c      	ldr	r3, [pc, #176]	; (8001c4c <SD_disk_read+0xd4>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <SD_disk_read+0x32>
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e04b      	b.n	8001c42 <SD_disk_read+0xca>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001baa:	4b29      	ldr	r3, [pc, #164]	; (8001c50 <SD_disk_read+0xd8>)
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <SD_disk_read+0x44>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	025b      	lsls	r3, r3, #9
 8001bba:	607b      	str	r3, [r7, #4]

	SELECT();
 8001bbc:	f7ff fd32 	bl	8001624 <SELECT>

	if (count == 1)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d111      	bne.n	8001bea <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	2051      	movs	r0, #81	; 0x51
 8001bca:	f7ff fe84 	bl	80018d6 <SD_SendCmd>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d12c      	bne.n	8001c2e <SD_disk_read+0xb6>
 8001bd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bd8:	68b8      	ldr	r0, [r7, #8]
 8001bda:	f7ff fe0b 	bl	80017f4 <SD_RxDataBlock>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d024      	beq.n	8001c2e <SD_disk_read+0xb6>
 8001be4:	2300      	movs	r3, #0
 8001be6:	603b      	str	r3, [r7, #0]
 8001be8:	e021      	b.n	8001c2e <SD_disk_read+0xb6>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	2052      	movs	r0, #82	; 0x52
 8001bee:	f7ff fe72 	bl	80018d6 <SD_SendCmd>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d11a      	bne.n	8001c2e <SD_disk_read+0xb6>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8001bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bfc:	68b8      	ldr	r0, [r7, #8]
 8001bfe:	f7ff fdf9 	bl	80017f4 <SD_RxDataBlock>
 8001c02:	4603      	mov	r3, r0
 8001c04:	f083 0301 	eor.w	r3, r3, #1
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d10a      	bne.n	8001c24 <SD_disk_read+0xac>
				buff += 512;
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001c14:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1ea      	bne.n	8001bf8 <SD_disk_read+0x80>
 8001c22:	e000      	b.n	8001c26 <SD_disk_read+0xae>
				if (!SD_RxDataBlock(buff, 512)) break;
 8001c24:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8001c26:	2100      	movs	r1, #0
 8001c28:	204c      	movs	r0, #76	; 0x4c
 8001c2a:	f7ff fe54 	bl	80018d6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8001c2e:	f7ff fd05 	bl	800163c <DESELECT>
	SPI_RxByte();
 8001c32:	f7ff fd43 	bl	80016bc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2db      	uxtb	r3, r3
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3710      	adds	r7, #16
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000004 	.word	0x20000004
 8001c50:	20006210 	.word	0x20006210

08001c54 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60b9      	str	r1, [r7, #8]
 8001c5c:	607a      	str	r2, [r7, #4]
 8001c5e:	603b      	str	r3, [r7, #0]
 8001c60:	4603      	mov	r3, r0
 8001c62:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <SD_disk_write+0x1c>
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d101      	bne.n	8001c74 <SD_disk_write+0x20>
 8001c70:	2304      	movs	r3, #4
 8001c72:	e071      	b.n	8001d58 <SD_disk_write+0x104>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001c74:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <SD_disk_write+0x10c>)
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <SD_disk_write+0x32>
 8001c82:	2303      	movs	r3, #3
 8001c84:	e068      	b.n	8001d58 <SD_disk_write+0x104>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001c86:	4b36      	ldr	r3, [pc, #216]	; (8001d60 <SD_disk_write+0x10c>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <SD_disk_write+0x44>
 8001c94:	2302      	movs	r3, #2
 8001c96:	e05f      	b.n	8001d58 <SD_disk_write+0x104>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001c98:	4b32      	ldr	r3, [pc, #200]	; (8001d64 <SD_disk_write+0x110>)
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	f003 0304 	and.w	r3, r3, #4
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <SD_disk_write+0x56>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	025b      	lsls	r3, r3, #9
 8001ca8:	607b      	str	r3, [r7, #4]

	SELECT();
 8001caa:	f7ff fcbb 	bl	8001624 <SELECT>

	if (count == 1)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d110      	bne.n	8001cd6 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001cb4:	6879      	ldr	r1, [r7, #4]
 8001cb6:	2058      	movs	r0, #88	; 0x58
 8001cb8:	f7ff fe0d 	bl	80018d6 <SD_SendCmd>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d140      	bne.n	8001d44 <SD_disk_write+0xf0>
 8001cc2:	21fe      	movs	r1, #254	; 0xfe
 8001cc4:	68b8      	ldr	r0, [r7, #8]
 8001cc6:	f7ff fdc3 	bl	8001850 <SD_TxDataBlock>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d039      	beq.n	8001d44 <SD_disk_write+0xf0>
			count = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	603b      	str	r3, [r7, #0]
 8001cd4:	e036      	b.n	8001d44 <SD_disk_write+0xf0>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001cd6:	4b23      	ldr	r3, [pc, #140]	; (8001d64 <SD_disk_write+0x110>)
 8001cd8:	781b      	ldrb	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d007      	beq.n	8001cf2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	2077      	movs	r0, #119	; 0x77
 8001ce6:	f7ff fdf6 	bl	80018d6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8001cea:	6839      	ldr	r1, [r7, #0]
 8001cec:	2057      	movs	r0, #87	; 0x57
 8001cee:	f7ff fdf2 	bl	80018d6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8001cf2:	6879      	ldr	r1, [r7, #4]
 8001cf4:	2059      	movs	r0, #89	; 0x59
 8001cf6:	f7ff fdee 	bl	80018d6 <SD_SendCmd>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d121      	bne.n	8001d44 <SD_disk_write+0xf0>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001d00:	21fc      	movs	r1, #252	; 0xfc
 8001d02:	68b8      	ldr	r0, [r7, #8]
 8001d04:	f7ff fda4 	bl	8001850 <SD_TxDataBlock>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	f083 0301 	eor.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d10a      	bne.n	8001d2a <SD_disk_write+0xd6>
				buff += 512;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001d1a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	3b01      	subs	r3, #1
 8001d20:	603b      	str	r3, [r7, #0]
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1eb      	bne.n	8001d00 <SD_disk_write+0xac>
 8001d28:	e000      	b.n	8001d2c <SD_disk_write+0xd8>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8001d2a:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8001d2c:	21fd      	movs	r1, #253	; 0xfd
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fd8e 	bl	8001850 <SD_TxDataBlock>
 8001d34:	4603      	mov	r3, r0
 8001d36:	f083 0301 	eor.w	r3, r3, #1
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <SD_disk_write+0xf0>
			{
				count = 1;
 8001d40:	2301      	movs	r3, #1
 8001d42:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8001d44:	f7ff fc7a 	bl	800163c <DESELECT>
	SPI_RxByte();
 8001d48:	f7ff fcb8 	bl	80016bc <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	bf14      	ite	ne
 8001d52:	2301      	movne	r3, #1
 8001d54:	2300      	moveq	r3, #0
 8001d56:	b2db      	uxtb	r3, r3
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3710      	adds	r7, #16
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20000004 	.word	0x20000004
 8001d64:	20006210 	.word	0x20006210

08001d68 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001d68:	b590      	push	{r4, r7, lr}
 8001d6a:	b08b      	sub	sp, #44	; 0x2c
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	4603      	mov	r3, r0
 8001d70:	603a      	str	r2, [r7, #0]
 8001d72:	71fb      	strb	r3, [r7, #7]
 8001d74:	460b      	mov	r3, r1
 8001d76:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <SD_disk_ioctl+0x1e>
 8001d82:	2304      	movs	r3, #4
 8001d84:	e115      	b.n	8001fb2 <SD_disk_ioctl+0x24a>
	res = RES_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (ctrl == CTRL_POWER)
 8001d8c:	79bb      	ldrb	r3, [r7, #6]
 8001d8e:	2b05      	cmp	r3, #5
 8001d90:	d124      	bne.n	8001ddc <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001d92:	6a3b      	ldr	r3, [r7, #32]
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d012      	beq.n	8001dc0 <SD_disk_ioctl+0x58>
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	dc1a      	bgt.n	8001dd4 <SD_disk_ioctl+0x6c>
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d002      	beq.n	8001da8 <SD_disk_ioctl+0x40>
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d006      	beq.n	8001db4 <SD_disk_ioctl+0x4c>
 8001da6:	e015      	b.n	8001dd4 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8001da8:	f7ff fd0c 	bl	80017c4 <SD_PowerOff>
			res = RES_OK;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001db2:	e0fc      	b.n	8001fae <SD_disk_ioctl+0x246>
		case 1:
			SD_PowerOn();		/* Power On */
 8001db4:	f7ff fcc4 	bl	8001740 <SD_PowerOn>
			res = RES_OK;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001dbe:	e0f6      	b.n	8001fae <SD_disk_ioctl+0x246>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001dc0:	6a3b      	ldr	r3, [r7, #32]
 8001dc2:	1c5c      	adds	r4, r3, #1
 8001dc4:	f7ff fd0a 	bl	80017dc <SD_CheckPower>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001dd2:	e0ec      	b.n	8001fae <SD_disk_ioctl+0x246>
		default:
			res = RES_PARERR;
 8001dd4:	2304      	movs	r3, #4
 8001dd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001dda:	e0e8      	b.n	8001fae <SD_disk_ioctl+0x246>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001ddc:	4b77      	ldr	r3, [pc, #476]	; (8001fbc <SD_disk_ioctl+0x254>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	f003 0301 	and.w	r3, r3, #1
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <SD_disk_ioctl+0x86>
 8001dea:	2303      	movs	r3, #3
 8001dec:	e0e1      	b.n	8001fb2 <SD_disk_ioctl+0x24a>

		SELECT();
 8001dee:	f7ff fc19 	bl	8001624 <SELECT>

		switch (ctrl)
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	2b0d      	cmp	r3, #13
 8001df6:	f200 80cb 	bhi.w	8001f90 <SD_disk_ioctl+0x228>
 8001dfa:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <SD_disk_ioctl+0x98>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001efb 	.word	0x08001efb
 8001e04:	08001e39 	.word	0x08001e39
 8001e08:	08001eeb 	.word	0x08001eeb
 8001e0c:	08001f91 	.word	0x08001f91
 8001e10:	08001f91 	.word	0x08001f91
 8001e14:	08001f91 	.word	0x08001f91
 8001e18:	08001f91 	.word	0x08001f91
 8001e1c:	08001f91 	.word	0x08001f91
 8001e20:	08001f91 	.word	0x08001f91
 8001e24:	08001f91 	.word	0x08001f91
 8001e28:	08001f91 	.word	0x08001f91
 8001e2c:	08001f0d 	.word	0x08001f0d
 8001e30:	08001f31 	.word	0x08001f31
 8001e34:	08001f55 	.word	0x08001f55
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001e38:	2100      	movs	r1, #0
 8001e3a:	2049      	movs	r0, #73	; 0x49
 8001e3c:	f7ff fd4b 	bl	80018d6 <SD_SendCmd>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	f040 80a8 	bne.w	8001f98 <SD_disk_ioctl+0x230>
 8001e48:	f107 030c 	add.w	r3, r7, #12
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fcd0 	bl	80017f4 <SD_RxDataBlock>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 809e 	beq.w	8001f98 <SD_disk_ioctl+0x230>
			{
				if ((csd[0] >> 6) == 1)
 8001e5c:	7b3b      	ldrb	r3, [r7, #12]
 8001e5e:	099b      	lsrs	r3, r3, #6
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d10e      	bne.n	8001e84 <SD_disk_ioctl+0x11c>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001e66:	7d7b      	ldrb	r3, [r7, #21]
 8001e68:	b29a      	uxth	r2, r3
 8001e6a:	7d3b      	ldrb	r3, [r7, #20]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	021b      	lsls	r3, r3, #8
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4413      	add	r3, r2
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3301      	adds	r3, #1
 8001e78:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8001e7a:	8bfb      	ldrh	r3, [r7, #30]
 8001e7c:	029a      	lsls	r2, r3, #10
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e02e      	b.n	8001ee2 <SD_disk_ioctl+0x17a>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001e84:	7c7b      	ldrb	r3, [r7, #17]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	7dbb      	ldrb	r3, [r7, #22]
 8001e8e:	09db      	lsrs	r3, r3, #7
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	4413      	add	r3, r2
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	7d7b      	ldrb	r3, [r7, #21]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	f003 0306 	and.w	r3, r3, #6
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001eac:	7d3b      	ldrb	r3, [r7, #20]
 8001eae:	099b      	lsrs	r3, r3, #6
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	7cfb      	ldrb	r3, [r7, #19]
 8001eb6:	b29b      	uxth	r3, r3
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4413      	add	r3, r2
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	7cbb      	ldrb	r3, [r7, #18]
 8001ec2:	029b      	lsls	r3, r3, #10
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001ed4:	8bfa      	ldrh	r2, [r7, #30]
 8001ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001eda:	3b09      	subs	r3, #9
 8001edc:	409a      	lsls	r2, r3
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
			break;
 8001ee8:	e056      	b.n	8001f98 <SD_disk_ioctl+0x230>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001ef8:	e055      	b.n	8001fa6 <SD_disk_ioctl+0x23e>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001efa:	f7ff fc09 	bl	8001710 <SD_ReadyWait>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2bff      	cmp	r3, #255	; 0xff
 8001f02:	d14b      	bne.n	8001f9c <SD_disk_ioctl+0x234>
 8001f04:	2300      	movs	r3, #0
 8001f06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f0a:	e047      	b.n	8001f9c <SD_disk_ioctl+0x234>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2049      	movs	r0, #73	; 0x49
 8001f10:	f7ff fce1 	bl	80018d6 <SD_SendCmd>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d142      	bne.n	8001fa0 <SD_disk_ioctl+0x238>
 8001f1a:	2110      	movs	r1, #16
 8001f1c:	6a38      	ldr	r0, [r7, #32]
 8001f1e:	f7ff fc69 	bl	80017f4 <SD_RxDataBlock>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d03b      	beq.n	8001fa0 <SD_disk_ioctl+0x238>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f2e:	e037      	b.n	8001fa0 <SD_disk_ioctl+0x238>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001f30:	2100      	movs	r1, #0
 8001f32:	204a      	movs	r0, #74	; 0x4a
 8001f34:	f7ff fccf 	bl	80018d6 <SD_SendCmd>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d132      	bne.n	8001fa4 <SD_disk_ioctl+0x23c>
 8001f3e:	2110      	movs	r1, #16
 8001f40:	6a38      	ldr	r0, [r7, #32]
 8001f42:	f7ff fc57 	bl	80017f4 <SD_RxDataBlock>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d02b      	beq.n	8001fa4 <SD_disk_ioctl+0x23c>
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8001f52:	e027      	b.n	8001fa4 <SD_disk_ioctl+0x23c>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8001f54:	2100      	movs	r1, #0
 8001f56:	207a      	movs	r0, #122	; 0x7a
 8001f58:	f7ff fcbd 	bl	80018d6 <SD_SendCmd>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d116      	bne.n	8001f90 <SD_disk_ioctl+0x228>
			{
				for (n = 0; n < 4; n++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f68:	e00b      	b.n	8001f82 <SD_disk_ioctl+0x21a>
				{
					*ptr++ = SPI_RxByte();
 8001f6a:	6a3c      	ldr	r4, [r7, #32]
 8001f6c:	1c63      	adds	r3, r4, #1
 8001f6e:	623b      	str	r3, [r7, #32]
 8001f70:	f7ff fba4 	bl	80016bc <SPI_RxByte>
 8001f74:	4603      	mov	r3, r0
 8001f76:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001f78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001f82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d9ef      	bls.n	8001f6a <SD_disk_ioctl+0x202>
				}
				res = RES_OK;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			}
		default:
			res = RES_PARERR;
 8001f90:	2304      	movs	r3, #4
 8001f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f96:	e006      	b.n	8001fa6 <SD_disk_ioctl+0x23e>
			break;
 8001f98:	bf00      	nop
 8001f9a:	e004      	b.n	8001fa6 <SD_disk_ioctl+0x23e>
			break;
 8001f9c:	bf00      	nop
 8001f9e:	e002      	b.n	8001fa6 <SD_disk_ioctl+0x23e>
			break;
 8001fa0:	bf00      	nop
 8001fa2:	e000      	b.n	8001fa6 <SD_disk_ioctl+0x23e>
			break;
 8001fa4:	bf00      	nop
		}

		DESELECT();
 8001fa6:	f7ff fb49 	bl	800163c <DESELECT>
		SPI_RxByte();
 8001faa:	f7ff fb87 	bl	80016bc <SPI_RxByte>
	}

	return res;
 8001fae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	372c      	adds	r7, #44	; 0x2c
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd90      	pop	{r4, r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <ob_malloc>:
static bool     is_used[8] = {0, };
static FIL      fil_buf[8];


void *ob_malloc(size_t size)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  void *ret = NULL;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]

  for (int i=0; i<8; i++)
 8001fcc:	2300      	movs	r3, #0
 8001fce:	60bb      	str	r3, [r7, #8]
 8001fd0:	e019      	b.n	8002006 <ob_malloc+0x46>
  {
    if (is_used[i] == false)
 8001fd2:	4a12      	ldr	r2, [pc, #72]	; (800201c <ob_malloc+0x5c>)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	f083 0301 	eor.w	r3, r3, #1
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00d      	beq.n	8002000 <ob_malloc+0x40>
    {
      is_used[i] = true;
 8001fe4:	4a0d      	ldr	r2, [pc, #52]	; (800201c <ob_malloc+0x5c>)
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	4413      	add	r3, r2
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
      ret = (void *)&fil_buf[i];
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f241 0230 	movw	r2, #4144	; 0x1030
 8001ff4:	fb02 f303 	mul.w	r3, r2, r3
 8001ff8:	4a09      	ldr	r2, [pc, #36]	; (8002020 <ob_malloc+0x60>)
 8001ffa:	4413      	add	r3, r2
 8001ffc:	60fb      	str	r3, [r7, #12]
      break;
 8001ffe:	e005      	b.n	800200c <ob_malloc+0x4c>
  for (int i=0; i<8; i++)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	3301      	adds	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	2b07      	cmp	r3, #7
 800200a:	dde2      	ble.n	8001fd2 <ob_malloc+0x12>
    }
  }

  return ret;
 800200c:	68fb      	ldr	r3, [r7, #12]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	20006214 	.word	0x20006214
 8002020:	2000621c 	.word	0x2000621c

08002024 <ob_free>:

void ob_free(void *addr)
{
 8002024:	b480      	push	{r7}
 8002026:	b085      	sub	sp, #20
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  for (int i=0; i<8; i++)
 800202c:	2300      	movs	r3, #0
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	e018      	b.n	8002064 <ob_free+0x40>
  {
    if (is_used[i] == true && addr == (void *)&fil_buf[i])
 8002032:	4a11      	ldr	r2, [pc, #68]	; (8002078 <ob_free+0x54>)
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4413      	add	r3, r2
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00f      	beq.n	800205e <ob_free+0x3a>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f241 0230 	movw	r2, #4144	; 0x1030
 8002044:	fb02 f303 	mul.w	r3, r2, r3
 8002048:	4a0c      	ldr	r2, [pc, #48]	; (800207c <ob_free+0x58>)
 800204a:	4413      	add	r3, r2
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	d105      	bne.n	800205e <ob_free+0x3a>
    {
      is_used[i] = false;
 8002052:	4a09      	ldr	r2, [pc, #36]	; (8002078 <ob_free+0x54>)
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4413      	add	r3, r2
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
      break;
 800205c:	e006      	b.n	800206c <ob_free+0x48>
  for (int i=0; i<8; i++)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2b07      	cmp	r3, #7
 8002068:	dde3      	ble.n	8002032 <ob_free+0xe>
    }
  }
}
 800206a:	bf00      	nop
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20006214 	.word	0x20006214
 800207c:	2000621c 	.word	0x2000621c

08002080 <ob_fopen>:

FILE *ob_fopen(const char *filename, const char *mode)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b086      	sub	sp, #24
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  FRESULT res;
  BYTE flags = 0;
 800208a:	2300      	movs	r3, #0
 800208c:	75fb      	strb	r3, [r7, #23]
  FIL *fil;
  int i;

  fil = ob_malloc(sizeof(FIL));
 800208e:	f241 0030 	movw	r0, #4144	; 0x1030
 8002092:	f7ff ff95 	bl	8001fc0 <ob_malloc>
 8002096:	60f8      	str	r0, [r7, #12]
  if (!fil)
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d104      	bne.n	80020a8 <ob_fopen+0x28>
  {
    printf("ob_fopen malloc fail\n");
 800209e:	4821      	ldr	r0, [pc, #132]	; (8002124 <ob_fopen+0xa4>)
 80020a0:	f01c faec 	bl	801e67c <puts>
    return NULL;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e038      	b.n	800211a <ob_fopen+0x9a>
  }


  for (i=0; mode[i] != 0; i++) {
 80020a8:	2300      	movs	r3, #0
 80020aa:	613b      	str	r3, [r7, #16]
 80020ac:	e01e      	b.n	80020ec <ob_fopen+0x6c>
    switch (mode[i]) {
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b77      	cmp	r3, #119	; 0x77
 80020b8:	d006      	beq.n	80020c8 <ob_fopen+0x48>
 80020ba:	2b77      	cmp	r3, #119	; 0x77
 80020bc:	dc13      	bgt.n	80020e6 <ob_fopen+0x66>
 80020be:	2b2b      	cmp	r3, #43	; 0x2b
 80020c0:	d00c      	beq.n	80020dc <ob_fopen+0x5c>
 80020c2:	2b72      	cmp	r3, #114	; 0x72
 80020c4:	d005      	beq.n	80020d2 <ob_fopen+0x52>
 80020c6:	e00e      	b.n	80020e6 <ob_fopen+0x66>
      case 'w':
        flags |= FA_WRITE | FA_CREATE_ALWAYS;
 80020c8:	7dfb      	ldrb	r3, [r7, #23]
 80020ca:	f043 030a 	orr.w	r3, r3, #10
 80020ce:	75fb      	strb	r3, [r7, #23]
        break;
 80020d0:	e009      	b.n	80020e6 <ob_fopen+0x66>
      case 'r':
        flags |= FA_READ;
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	f043 0301 	orr.w	r3, r3, #1
 80020d8:	75fb      	strb	r3, [r7, #23]
        break;
 80020da:	e004      	b.n	80020e6 <ob_fopen+0x66>
      case '+':
        flags |= FA_READ | FA_WRITE;
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	f043 0303 	orr.w	r3, r3, #3
 80020e2:	75fb      	strb	r3, [r7, #23]
        break;
 80020e4:	bf00      	nop
  for (i=0; mode[i] != 0; i++) {
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	3301      	adds	r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	4413      	add	r3, r2
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1da      	bne.n	80020ae <ob_fopen+0x2e>
    }
  }

  res = f_open(fil, filename, flags);
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	461a      	mov	r2, r3
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	68f8      	ldr	r0, [r7, #12]
 8002100:	f011 fe26 	bl	8013d50 <f_open>
 8002104:	4603      	mov	r3, r0
 8002106:	72fb      	strb	r3, [r7, #11]
  if (res != FR_OK) {
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d004      	beq.n	8002118 <ob_fopen+0x98>
    ob_free(fil);
 800210e:	68f8      	ldr	r0, [r7, #12]
 8002110:	f7ff ff88 	bl	8002024 <ob_free>
    return NULL;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <ob_fopen+0x9a>
  }

  return (FILE *) fil;
 8002118:	68fb      	ldr	r3, [r7, #12]
}
 800211a:	4618      	mov	r0, r3
 800211c:	3718      	adds	r7, #24
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	0801f838 	.word	0x0801f838

08002128 <ob_fclose>:

int ob_fclose(FILE *stream)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  FRESULT res;
  FIL *fil = (FIL *) stream;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	60fb      	str	r3, [r7, #12]
  res = f_close(fil);
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f012 fcb5 	bl	8014aa4 <f_close>
 800213a:	4603      	mov	r3, r0
 800213c:	72fb      	strb	r3, [r7, #11]
  if (res != FR_OK)
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <ob_fclose+0x22>
    return -1;
 8002144:	f04f 33ff 	mov.w	r3, #4294967295
 8002148:	e003      	b.n	8002152 <ob_fclose+0x2a>

  ob_free(fil);
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f7ff ff6a 	bl	8002024 <ob_free>
  return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <ob_fread>:
size_t ob_fread(void *ptr, size_t size, size_t count, FILE *stream)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b088      	sub	sp, #32
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	603b      	str	r3, [r7, #0]
  FRESULT res;
  FIL *fil = (FIL *) stream;
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	61fb      	str	r3, [r7, #28]
  UINT bread;
  res = f_read(fil, ptr, size * count, &bread);
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	fb03 f202 	mul.w	r2, r3, r2
 8002174:	f107 0314 	add.w	r3, r7, #20
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	69f8      	ldr	r0, [r7, #28]
 800217c:	f012 f8b8 	bl	80142f0 <f_read>
 8002180:	4603      	mov	r3, r0
 8002182:	76fb      	strb	r3, [r7, #27]
  if (res != FR_OK)
 8002184:	7efb      	ldrb	r3, [r7, #27]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <ob_fread+0x34>
    return 0;
 800218a:	2300      	movs	r3, #0
 800218c:	e000      	b.n	8002190 <ob_fread+0x36>

  return bread;
 800218e:	697b      	ldr	r3, [r7, #20]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3720      	adds	r7, #32
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <ob_fseek>:
{
  FIL *fil = (FIL *) stream;
  return f_eof(fil);
}
int ob_fseek(FILE *stream, long offset, int whence)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  FRESULT res;
  FIL *fil = (FIL *) stream;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	61bb      	str	r3, [r7, #24]
  long o;
  switch (whence) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d012      	beq.n	80021d4 <ob_fseek+0x3c>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	dc1a      	bgt.n	80021ea <ob_fseek+0x52>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <ob_fseek+0x2a>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d003      	beq.n	80021c8 <ob_fseek+0x30>
 80021c0:	e013      	b.n	80021ea <ob_fseek+0x52>
    case SEEK_SET:
      o = offset;
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	61fb      	str	r3, [r7, #28]
      break;
 80021c6:	e014      	b.n	80021f2 <ob_fseek+0x5a>
    case SEEK_CUR:
      o = offset + f_tell(fil);
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	4413      	add	r3, r2
 80021d0:	61fb      	str	r3, [r7, #28]
      break;
 80021d2:	e00e      	b.n	80021f2 <ob_fseek+0x5a>
    case SEEK_END:
      o = f_size(fil) + offset;
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4413      	add	r3, r2
 80021dc:	61fb      	str	r3, [r7, #28]
      if (o < 0)
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	da05      	bge.n	80021f0 <ob_fseek+0x58>
        o = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	61fb      	str	r3, [r7, #28]
      break;
 80021e8:	e002      	b.n	80021f0 <ob_fseek+0x58>
    default:
      return -1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e00e      	b.n	800220e <ob_fseek+0x76>
      break;
 80021f0:	bf00      	nop
  }
  res = f_lseek(fil, o);
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	4619      	mov	r1, r3
 80021f6:	69b8      	ldr	r0, [r7, #24]
 80021f8:	f012 fc83 	bl	8014b02 <f_lseek>
 80021fc:	4603      	mov	r3, r0
 80021fe:	75fb      	strb	r3, [r7, #23]
  if (res != FR_OK)
 8002200:	7dfb      	ldrb	r3, [r7, #23]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d002      	beq.n	800220c <ob_fseek+0x74>
    return -1;
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	e000      	b.n	800220e <ob_fseek+0x76>

  return 0;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
	...

08002218 <StartLcdUartReceiveProc>:
#define FAN_OFF 0

bool playingTrack = false;

void StartLcdUartReceiveProc(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  if (HAL_UART_Receive_IT(&huart1, lcdRxBuffer, 1) != HAL_OK)
 800221c:	2201      	movs	r2, #1
 800221e:	4905      	ldr	r1, [pc, #20]	; (8002234 <StartLcdUartReceiveProc+0x1c>)
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <StartLcdUartReceiveProc+0x20>)
 8002222:	f009 ffa2 	bl	800c16a <HAL_UART_Receive_IT>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <StartLcdUartReceiveProc+0x18>
    Error_Handler();
 800222c:	f003 f8a4 	bl	8005378 <Error_Handler>
}
 8002230:	bf00      	nop
 8002232:	bd80      	pop	{r7, pc}
 8002234:	2000e424 	.word	0x2000e424
 8002238:	2000e8d0 	.word	0x2000e8d0

0800223c <LcdUartReceiveCallback>:

void LcdUartReceiveCallback(UART_HandleTypeDef *huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a0f      	ldr	r2, [pc, #60]	; (8002288 <LcdUartReceiveCallback+0x4c>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d118      	bne.n	8002280 <LcdUartReceiveCallback+0x44>
	{
		lcdUartRBuffer[lcdUartS] = lcdRxBuffer[0];
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <LcdUartReceiveCallback+0x50>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <LcdUartReceiveCallback+0x54>)
 8002254:	7811      	ldrb	r1, [r2, #0]
 8002256:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <LcdUartReceiveCallback+0x58>)
 8002258:	54d1      	strb	r1, [r2, r3]
		lcdUartS++;
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <LcdUartReceiveCallback+0x50>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	3301      	adds	r3, #1
 8002260:	4a0a      	ldr	r2, [pc, #40]	; (800228c <LcdUartReceiveCallback+0x50>)
 8002262:	6013      	str	r3, [r2, #0]
		if (lcdUartS >= LCDUARTBUFFERSIZE)
 8002264:	4b09      	ldr	r3, [pc, #36]	; (800228c <LcdUartReceiveCallback+0x50>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b7f      	cmp	r3, #127	; 0x7f
 800226a:	dd04      	ble.n	8002276 <LcdUartReceiveCallback+0x3a>
			lcdUartS -= LCDUARTBUFFERSIZE;
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <LcdUartReceiveCallback+0x50>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3b80      	subs	r3, #128	; 0x80
 8002272:	4a06      	ldr	r2, [pc, #24]	; (800228c <LcdUartReceiveCallback+0x50>)
 8002274:	6013      	str	r3, [r2, #0]

		HAL_UART_Receive_IT(&huart1, lcdRxBuffer, 1);
 8002276:	2201      	movs	r2, #1
 8002278:	4905      	ldr	r1, [pc, #20]	; (8002290 <LcdUartReceiveCallback+0x54>)
 800227a:	4807      	ldr	r0, [pc, #28]	; (8002298 <LcdUartReceiveCallback+0x5c>)
 800227c:	f009 ff75 	bl	800c16a <HAL_UART_Receive_IT>
	}
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40011000 	.word	0x40011000
 800228c:	2000e39c 	.word	0x2000e39c
 8002290:	2000e424 	.word	0x2000e424
 8002294:	2000e3a4 	.word	0x2000e3a4
 8002298:	2000e8d0 	.word	0x2000e8d0

0800229c <GetRBufferSize>:

static int GetRBufferSize(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
	return (lcdUartS + LCDUARTBUFFERSIZE - lcdUartE) % LCDUARTBUFFERSIZE;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <GetRBufferSize+0x2c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <GetRBufferSize+0x30>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	425a      	negs	r2, r3
 80022b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022b8:	bf58      	it	pl
 80022ba:	4253      	negpl	r3, r2
}
 80022bc:	4618      	mov	r0, r3
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
 80022c6:	bf00      	nop
 80022c8:	2000e39c 	.word	0x2000e39c
 80022cc:	2000e3a0 	.word	0x2000e3a0

080022d0 <GetRBuffer>:

static uint8_t GetRBuffer(int idx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	return lcdUartRBuffer[(lcdUartE + idx) % LCDUARTBUFFERSIZE];
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <GetRBuffer+0x30>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	425a      	negs	r2, r3
 80022e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80022e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022ea:	bf58      	it	pl
 80022ec:	4253      	negpl	r3, r2
 80022ee:	4a05      	ldr	r2, [pc, #20]	; (8002304 <GetRBuffer+0x34>)
 80022f0:	5cd3      	ldrb	r3, [r2, r3]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	2000e3a0 	.word	0x2000e3a0
 8002304:	2000e3a4 	.word	0x2000e3a4

08002308 <SetRBufferIndex>:

static void SetRBufferIndex(int size)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	lcdUartE += size;
 8002310:	4b0a      	ldr	r3, [pc, #40]	; (800233c <SetRBufferIndex+0x34>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4413      	add	r3, r2
 8002318:	4a08      	ldr	r2, [pc, #32]	; (800233c <SetRBufferIndex+0x34>)
 800231a:	6013      	str	r3, [r2, #0]
	if (lcdUartE >= LCDUARTBUFFERSIZE)
 800231c:	4b07      	ldr	r3, [pc, #28]	; (800233c <SetRBufferIndex+0x34>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2b7f      	cmp	r3, #127	; 0x7f
 8002322:	dd04      	ble.n	800232e <SetRBufferIndex+0x26>
		lcdUartE -= LCDUARTBUFFERSIZE;
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SetRBufferIndex+0x34>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	3b80      	subs	r3, #128	; 0x80
 800232a:	4a04      	ldr	r2, [pc, #16]	; (800233c <SetRBufferIndex+0x34>)
 800232c:	6013      	str	r3, [r2, #0]
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr
 800233a:	bf00      	nop
 800233c:	2000e3a0 	.word	0x2000e3a0

08002340 <SetAudioVolume>:

uint32_t lastVolumeTime = 0;
uint8_t lastVolumeSetFlag = 0;

static void SetAudioVolume(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
//	printf("Set volume %d \r\n", select);
	sgtl5000_stop_play();
 8002344:	f003 f8e2 	bl	800550c <sgtl5000_stop_play>
	printf("Audio Driver Stopped for Volume \r\n");
 8002348:	4807      	ldr	r0, [pc, #28]	; (8002368 <SetAudioVolume+0x28>)
 800234a:	f01c f997 	bl	801e67c <puts>
	sgtl5000_set_volume(systemVolume);
 800234e:	4b07      	ldr	r3, [pc, #28]	; (800236c <SetAudioVolume+0x2c>)
 8002350:	781b      	ldrb	r3, [r3, #0]
 8002352:	4618      	mov	r0, r3
 8002354:	f003 f876 	bl	8005444 <sgtl5000_set_volume>
	sgtl5000_start_play();
 8002358:	f003 f8b6 	bl	80054c8 <sgtl5000_start_play>
	printf("Audio Driver Started for Volume \r\n");
 800235c:	4804      	ldr	r0, [pc, #16]	; (8002370 <SetAudioVolume+0x30>)
 800235e:	f01c f98d 	bl	801e67c <puts>
}
 8002362:	bf00      	nop
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	0801f850 	.word	0x0801f850
 800236c:	20000008 	.word	0x20000008
 8002370:	0801f874 	.word	0x0801f874

08002374 <EsimationLcdUartComm>:

void EsimationLcdUartComm(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af02      	add	r7, sp, #8
	uint8_t reg_count;
	uint16_t reg_data;
	uint8_t checkCode;
	static uint8_t endCheck = 0;

	if (GetRBufferSize() >= 3)
 800237a:	f7ff ff8f 	bl	800229c <GetRBufferSize>
 800237e:	4603      	mov	r3, r0
 8002380:	2b02      	cmp	r3, #2
 8002382:	f340 837b 	ble.w	8002a7c <EsimationLcdUartComm+0x708>
	{
		char command = GetRBuffer(0);
 8002386:	2000      	movs	r0, #0
 8002388:	f7ff ffa2 	bl	80022d0 <GetRBuffer>
 800238c:	4603      	mov	r3, r0
 800238e:	71fb      	strb	r3, [r7, #7]
		char status = GetRBuffer(1);
 8002390:	2001      	movs	r0, #1
 8002392:	f7ff ff9d 	bl	80022d0 <GetRBuffer>
 8002396:	4603      	mov	r3, r0
 8002398:	71bb      	strb	r3, [r7, #6]
		char select = GetRBuffer(2);
 800239a:	2002      	movs	r0, #2
 800239c:	f7ff ff98 	bl	80022d0 <GetRBuffer>
 80023a0:	4603      	mov	r3, r0
 80023a2:	717b      	strb	r3, [r7, #5]

		printf("Received command is %c \r\n", command);
 80023a4:	79fb      	ldrb	r3, [r7, #7]
 80023a6:	4619      	mov	r1, r3
 80023a8:	486d      	ldr	r0, [pc, #436]	; (8002560 <EsimationLcdUartComm+0x1ec>)
 80023aa:	f01c f8cb 	bl	801e544 <iprintf>
		printf("Received status is %c \r\n", status);
 80023ae:	79bb      	ldrb	r3, [r7, #6]
 80023b0:	4619      	mov	r1, r3
 80023b2:	486c      	ldr	r0, [pc, #432]	; (8002564 <EsimationLcdUartComm+0x1f0>)
 80023b4:	f01c f8c6 	bl	801e544 <iprintf>
		printf("Received select is %c \r\n", select);
 80023b8:	797b      	ldrb	r3, [r7, #5]
 80023ba:	4619      	mov	r1, r3
 80023bc:	486a      	ldr	r0, [pc, #424]	; (8002568 <EsimationLcdUartComm+0x1f4>)
 80023be:	f01c f8c1 	bl	801e544 <iprintf>

		if (/*command == COMMAND || */ command == 'c')
 80023c2:	79fb      	ldrb	r3, [r7, #7]
 80023c4:	2b63      	cmp	r3, #99	; 0x63
 80023c6:	f040 8356 	bne.w	8002a76 <EsimationLcdUartComm+0x702>
		{
			if(status == 'f'){
 80023ca:	79bb      	ldrb	r3, [r7, #6]
 80023cc:	2b66      	cmp	r3, #102	; 0x66
 80023ce:	d112      	bne.n	80023f6 <EsimationLcdUartComm+0x82>
				if (select == '1') endCheck = endCheck | 0x01;// 0b00000001	// FAN OFF
 80023d0:	797b      	ldrb	r3, [r7, #5]
 80023d2:	2b31      	cmp	r3, #49	; 0x31
 80023d4:	d107      	bne.n	80023e6 <EsimationLcdUartComm+0x72>
 80023d6:	4b65      	ldr	r3, [pc, #404]	; (800256c <EsimationLcdUartComm+0x1f8>)
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	f043 0301 	orr.w	r3, r3, #1
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b62      	ldr	r3, [pc, #392]	; (800256c <EsimationLcdUartComm+0x1f8>)
 80023e2:	701a      	strb	r2, [r3, #0]
 80023e4:	e032      	b.n	800244c <EsimationLcdUartComm+0xd8>
				else endCheck = endCheck & 0x06; // 0b00000110				// FAN ON
 80023e6:	4b61      	ldr	r3, [pc, #388]	; (800256c <EsimationLcdUartComm+0x1f8>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f003 0306 	and.w	r3, r3, #6
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b5e      	ldr	r3, [pc, #376]	; (800256c <EsimationLcdUartComm+0x1f8>)
 80023f2:	701a      	strb	r2, [r3, #0]
 80023f4:	e02a      	b.n	800244c <EsimationLcdUartComm+0xd8>
			}
			else if(status == 's') {
 80023f6:	79bb      	ldrb	r3, [r7, #6]
 80023f8:	2b73      	cmp	r3, #115	; 0x73
 80023fa:	d112      	bne.n	8002422 <EsimationLcdUartComm+0xae>
				if(select == 'w') endCheck = endCheck | 0x02;// 0b00000010	// LED Light ON
 80023fc:	797b      	ldrb	r3, [r7, #5]
 80023fe:	2b77      	cmp	r3, #119	; 0x77
 8002400:	d107      	bne.n	8002412 <EsimationLcdUartComm+0x9e>
 8002402:	4b5a      	ldr	r3, [pc, #360]	; (800256c <EsimationLcdUartComm+0x1f8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	f043 0302 	orr.w	r3, r3, #2
 800240a:	b2da      	uxtb	r2, r3
 800240c:	4b57      	ldr	r3, [pc, #348]	; (800256c <EsimationLcdUartComm+0x1f8>)
 800240e:	701a      	strb	r2, [r3, #0]
 8002410:	e01c      	b.n	800244c <EsimationLcdUartComm+0xd8>
				else endCheck = endCheck & 0x05; // 0b00000101				// LED Light OFF
 8002412:	4b56      	ldr	r3, [pc, #344]	; (800256c <EsimationLcdUartComm+0x1f8>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	f003 0305 	and.w	r3, r3, #5
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b53      	ldr	r3, [pc, #332]	; (800256c <EsimationLcdUartComm+0x1f8>)
 800241e:	701a      	strb	r2, [r3, #0]
 8002420:	e014      	b.n	800244c <EsimationLcdUartComm+0xd8>
			}
			else if(status == 't') {
 8002422:	79bb      	ldrb	r3, [r7, #6]
 8002424:	2b74      	cmp	r3, #116	; 0x74
 8002426:	d111      	bne.n	800244c <EsimationLcdUartComm+0xd8>
				if(select == 's') endCheck = endCheck & 0x03; // 0b00000011	// Stop Playing Audio
 8002428:	797b      	ldrb	r3, [r7, #5]
 800242a:	2b73      	cmp	r3, #115	; 0x73
 800242c:	d107      	bne.n	800243e <EsimationLcdUartComm+0xca>
 800242e:	4b4f      	ldr	r3, [pc, #316]	; (800256c <EsimationLcdUartComm+0x1f8>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	b2da      	uxtb	r2, r3
 8002438:	4b4c      	ldr	r3, [pc, #304]	; (800256c <EsimationLcdUartComm+0x1f8>)
 800243a:	701a      	strb	r2, [r3, #0]
 800243c:	e006      	b.n	800244c <EsimationLcdUartComm+0xd8>
				else endCheck = endCheck | 0x04;// 0b00000100				// Start Playing Audio
 800243e:	4b4b      	ldr	r3, [pc, #300]	; (800256c <EsimationLcdUartComm+0x1f8>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	b2da      	uxtb	r2, r3
 8002448:	4b48      	ldr	r3, [pc, #288]	; (800256c <EsimationLcdUartComm+0x1f8>)
 800244a:	701a      	strb	r2, [r3, #0]
			}

			printf("endCheck : %d  \r\n", endCheck);
 800244c:	4b47      	ldr	r3, [pc, #284]	; (800256c <EsimationLcdUartComm+0x1f8>)
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4619      	mov	r1, r3
 8002452:	4847      	ldr	r0, [pc, #284]	; (8002570 <EsimationLcdUartComm+0x1fc>)
 8002454:	f01c f876 	bl	801e544 <iprintf>




			if (/*status == BREATHING ||*/ status == 'b')
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	2b62      	cmp	r3, #98	; 0x62
 800245c:	d145      	bne.n	80024ea <EsimationLcdUartComm+0x176>
			{
				if (/*select == TRACK1 ||*/ select == 'l')
 800245e:	797b      	ldrb	r3, [r7, #5]
 8002460:	2b6c      	cmp	r3, #108	; 0x6c
 8002462:	d10a      	bne.n	800247a <EsimationLcdUartComm+0x106>
				{
					// Focus
					pwm_update_duty_cycle(0,255,255,127,0); // light blue
 8002464:	2300      	movs	r3, #0
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	237f      	movs	r3, #127	; 0x7f
 800246a:	22ff      	movs	r2, #255	; 0xff
 800246c:	21ff      	movs	r1, #255	; 0xff
 800246e:	2000      	movs	r0, #0
 8002470:	f000 fc4c 	bl	8002d0c <pwm_update_duty_cycle>
					printf("Light Focus \r\n");
 8002474:	483f      	ldr	r0, [pc, #252]	; (8002574 <EsimationLcdUartComm+0x200>)
 8002476:	f01c f901 	bl	801e67c <puts>
				}
				if(/*select == TRACK2 ||*/ select == 'b') {
 800247a:	797b      	ldrb	r3, [r7, #5]
 800247c:	2b62      	cmp	r3, #98	; 0x62
 800247e:	d10a      	bne.n	8002496 <EsimationLcdUartComm+0x122>
					// Blue
					pwm_update_duty_cycle(0,0,255,0,0);
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	2300      	movs	r3, #0
 8002486:	22ff      	movs	r2, #255	; 0xff
 8002488:	2100      	movs	r1, #0
 800248a:	2000      	movs	r0, #0
 800248c:	f000 fc3e 	bl	8002d0c <pwm_update_duty_cycle>
					printf("Led Blue \r\n");
 8002490:	4839      	ldr	r0, [pc, #228]	; (8002578 <EsimationLcdUartComm+0x204>)
 8002492:	f01c f8f3 	bl	801e67c <puts>
				}
				if(/*select == TRACK3 ||*/ select == 'p') {
 8002496:	797b      	ldrb	r3, [r7, #5]
 8002498:	2b70      	cmp	r3, #112	; 0x70
 800249a:	d10a      	bne.n	80024b2 <EsimationLcdUartComm+0x13e>
					// Fuschia
					pwm_update_duty_cycle(255,0,255,0,0);
 800249c:	2300      	movs	r3, #0
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2300      	movs	r3, #0
 80024a2:	22ff      	movs	r2, #255	; 0xff
 80024a4:	2100      	movs	r1, #0
 80024a6:	20ff      	movs	r0, #255	; 0xff
 80024a8:	f000 fc30 	bl	8002d0c <pwm_update_duty_cycle>
					printf("Light Fuschia \r\n");
 80024ac:	4833      	ldr	r0, [pc, #204]	; (800257c <EsimationLcdUartComm+0x208>)
 80024ae:	f01c f8e5 	bl	801e67c <puts>
				}
				if(/*select == TRACK4 ||*/ select == 'g') {
 80024b2:	797b      	ldrb	r3, [r7, #5]
 80024b4:	2b67      	cmp	r3, #103	; 0x67
 80024b6:	d10a      	bne.n	80024ce <EsimationLcdUartComm+0x15a>
					// Green
					pwm_update_duty_cycle(0,255,0,0,0);
 80024b8:	2300      	movs	r3, #0
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	2300      	movs	r3, #0
 80024be:	2200      	movs	r2, #0
 80024c0:	21ff      	movs	r1, #255	; 0xff
 80024c2:	2000      	movs	r0, #0
 80024c4:	f000 fc22 	bl	8002d0c <pwm_update_duty_cycle>
					printf("Light Green \r\n");
 80024c8:	482d      	ldr	r0, [pc, #180]	; (8002580 <EsimationLcdUartComm+0x20c>)
 80024ca:	f01c f8d7 	bl	801e67c <puts>
				}
				if(/*select == TRACK5 ||*/ select == 'k') {
 80024ce:	797b      	ldrb	r3, [r7, #5]
 80024d0:	2b6b      	cmp	r3, #107	; 0x6b
 80024d2:	d10a      	bne.n	80024ea <EsimationLcdUartComm+0x176>
					// Low K white
					pwm_update_duty_cycle(0,0,0,0,255);
 80024d4:	23ff      	movs	r3, #255	; 0xff
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2300      	movs	r3, #0
 80024da:	2200      	movs	r2, #0
 80024dc:	2100      	movs	r1, #0
 80024de:	2000      	movs	r0, #0
 80024e0:	f000 fc14 	bl	8002d0c <pwm_update_duty_cycle>
					printf("Light Low K White \r\n");
 80024e4:	4827      	ldr	r0, [pc, #156]	; (8002584 <EsimationLcdUartComm+0x210>)
 80024e6:	f01c f8c9 	bl	801e67c <puts>
				}
			}
			if(/*status == STANDBY ||*/ status == 's')
 80024ea:	79bb      	ldrb	r3, [r7, #6]
 80024ec:	2b73      	cmp	r3, #115	; 0x73
 80024ee:	d127      	bne.n	8002540 <EsimationLcdUartComm+0x1cc>
			{
				if(/*select == TRACK2 ||*/ select == 'w') {
 80024f0:	797b      	ldrb	r3, [r7, #5]
 80024f2:	2b77      	cmp	r3, #119	; 0x77
 80024f4:	d10a      	bne.n	800250c <EsimationLcdUartComm+0x198>
					// White
					pwm_update_duty_cycle(255,255,255,0,0);
 80024f6:	2300      	movs	r3, #0
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	2300      	movs	r3, #0
 80024fc:	22ff      	movs	r2, #255	; 0xff
 80024fe:	21ff      	movs	r1, #255	; 0xff
 8002500:	20ff      	movs	r0, #255	; 0xff
 8002502:	f000 fc03 	bl	8002d0c <pwm_update_duty_cycle>
					printf("Light White \r\n");
 8002506:	4820      	ldr	r0, [pc, #128]	; (8002588 <EsimationLcdUartComm+0x214>)
 8002508:	f01c f8b8 	bl	801e67c <puts>
				}
				if(/*select == OFF ||*/ select == 'o') {
 800250c:	797b      	ldrb	r3, [r7, #5]
 800250e:	2b6f      	cmp	r3, #111	; 0x6f
 8002510:	d10a      	bne.n	8002528 <EsimationLcdUartComm+0x1b4>
					pwm_update_duty_cycle(0,0,0,0,0);
 8002512:	2300      	movs	r3, #0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	2300      	movs	r3, #0
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	2000      	movs	r0, #0
 800251e:	f000 fbf5 	bl	8002d0c <pwm_update_duty_cycle>
					printf("Light Off \r\n");
 8002522:	481a      	ldr	r0, [pc, #104]	; (800258c <EsimationLcdUartComm+0x218>)
 8002524:	f01c f8aa 	bl	801e67c <puts>
				}
				if(select == 'b') {
 8002528:	797b      	ldrb	r3, [r7, #5]
 800252a:	2b62      	cmp	r3, #98	; 0x62
 800252c:	d102      	bne.n	8002534 <EsimationLcdUartComm+0x1c0>
//					err_code = app_timer_start(burn_in_timer_id, APP_TIMER_TICKS(1000), NULL);
//					APP_ERROR_CHECK(err_code);
					printf("Start App Timer \r\n");
 800252e:	4818      	ldr	r0, [pc, #96]	; (8002590 <EsimationLcdUartComm+0x21c>)
 8002530:	f01c f8a4 	bl	801e67c <puts>
				}
				if(select == 's') {
 8002534:	797b      	ldrb	r3, [r7, #5]
 8002536:	2b73      	cmp	r3, #115	; 0x73
 8002538:	d102      	bne.n	8002540 <EsimationLcdUartComm+0x1cc>
//					err_code = app_timer_stop(burn_in_timer_id);
//					APP_ERROR_CHECK(err_code);
					printf("Stop App Timer \r\n");
 800253a:	4816      	ldr	r0, [pc, #88]	; (8002594 <EsimationLcdUartComm+0x220>)
 800253c:	f01c f89e 	bl	801e67c <puts>
				}
			}
			if(/*status == FAN ||*/ status == 'f')
 8002540:	79bb      	ldrb	r3, [r7, #6]
 8002542:	2b66      	cmp	r3, #102	; 0x66
 8002544:	d138      	bne.n	80025b8 <EsimationLcdUartComm+0x244>
			{
				if(/*select == FAN_OFF ||*/ select == '1') {
 8002546:	797b      	ldrb	r3, [r7, #5]
 8002548:	2b31      	cmp	r3, #49	; 0x31
 800254a:	d129      	bne.n	80025a0 <EsimationLcdUartComm+0x22c>
					HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_RESET);
 800254c:	2200      	movs	r2, #0
 800254e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002552:	4811      	ldr	r0, [pc, #68]	; (8002598 <EsimationLcdUartComm+0x224>)
 8002554:	f004 ff12 	bl	800737c <HAL_GPIO_WritePin>
					printf("Fan Off \r\n");
 8002558:	4810      	ldr	r0, [pc, #64]	; (800259c <EsimationLcdUartComm+0x228>)
 800255a:	f01c f88f 	bl	801e67c <puts>
 800255e:	e02b      	b.n	80025b8 <EsimationLcdUartComm+0x244>
 8002560:	0801f898 	.word	0x0801f898
 8002564:	0801f8b4 	.word	0x0801f8b4
 8002568:	0801f8d0 	.word	0x0801f8d0
 800256c:	2000e42d 	.word	0x2000e42d
 8002570:	0801f8ec 	.word	0x0801f8ec
 8002574:	0801f900 	.word	0x0801f900
 8002578:	0801f910 	.word	0x0801f910
 800257c:	0801f91c 	.word	0x0801f91c
 8002580:	0801f92c 	.word	0x0801f92c
 8002584:	0801f93c 	.word	0x0801f93c
 8002588:	0801f950 	.word	0x0801f950
 800258c:	0801f960 	.word	0x0801f960
 8002590:	0801f96c 	.word	0x0801f96c
 8002594:	0801f980 	.word	0x0801f980
 8002598:	40020000 	.word	0x40020000
 800259c:	0801f994 	.word	0x0801f994

				}
				else if (/*select == FAN_ON ||*/ select == '2') {
 80025a0:	797b      	ldrb	r3, [r7, #5]
 80025a2:	2b32      	cmp	r3, #50	; 0x32
 80025a4:	d108      	bne.n	80025b8 <EsimationLcdUartComm+0x244>
					HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_SET);
 80025a6:	2201      	movs	r2, #1
 80025a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80025ac:	48ae      	ldr	r0, [pc, #696]	; (8002868 <EsimationLcdUartComm+0x4f4>)
 80025ae:	f004 fee5 	bl	800737c <HAL_GPIO_WritePin>
					printf("Fan On \r\n");
 80025b2:	48ae      	ldr	r0, [pc, #696]	; (800286c <EsimationLcdUartComm+0x4f8>)
 80025b4:	f01c f862 	bl	801e67c <puts>
				}
			}
			if(/*status == REMOTE ||*/ status == 'r')
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	2b72      	cmp	r3, #114	; 0x72
 80025bc:	d117      	bne.n	80025ee <EsimationLcdUartComm+0x27a>
			{
				if(select == START || select == 's') {
 80025be:	797b      	ldrb	r3, [r7, #5]
 80025c0:	2b0e      	cmp	r3, #14
 80025c2:	d002      	beq.n	80025ca <EsimationLcdUartComm+0x256>
 80025c4:	797b      	ldrb	r3, [r7, #5]
 80025c6:	2b73      	cmp	r3, #115	; 0x73
 80025c8:	d111      	bne.n	80025ee <EsimationLcdUartComm+0x27a>
					HAL_GPIO_WritePin(PLAY_OUT_GPIO_Port, PLAY_OUT_Pin, GPIO_PIN_SET);
 80025ca:	2201      	movs	r2, #1
 80025cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025d0:	48a5      	ldr	r0, [pc, #660]	; (8002868 <EsimationLcdUartComm+0x4f4>)
 80025d2:	f004 fed3 	bl	800737c <HAL_GPIO_WritePin>
					osDelay(50);
 80025d6:	2032      	movs	r0, #50	; 0x32
 80025d8:	f013 f920 	bl	801581c <osDelay>
					HAL_GPIO_WritePin(PLAY_OUT_GPIO_Port, PLAY_OUT_Pin, GPIO_PIN_RESET);
 80025dc:	2200      	movs	r2, #0
 80025de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025e2:	48a1      	ldr	r0, [pc, #644]	; (8002868 <EsimationLcdUartComm+0x4f4>)
 80025e4:	f004 feca 	bl	800737c <HAL_GPIO_WritePin>
					printf("Remote Start pressed \r\n");
 80025e8:	48a1      	ldr	r0, [pc, #644]	; (8002870 <EsimationLcdUartComm+0x4fc>)
 80025ea:	f01c f847 	bl	801e67c <puts>

				}
			}
			if (/*status == VOLUME ||*/ status == 'v')
 80025ee:	79bb      	ldrb	r3, [r7, #6]
 80025f0:	2b76      	cmp	r3, #118	; 0x76
 80025f2:	d122      	bne.n	800263a <EsimationLcdUartComm+0x2c6>
			{
				if (select > 0 && select < 64) {
 80025f4:	797b      	ldrb	r3, [r7, #5]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d01f      	beq.n	800263a <EsimationLcdUartComm+0x2c6>
 80025fa:	797b      	ldrb	r3, [r7, #5]
 80025fc:	2b3f      	cmp	r3, #63	; 0x3f
 80025fe:	d81c      	bhi.n	800263a <EsimationLcdUartComm+0x2c6>
					systemVolume = (((127 - MAX_VOLUME) * select) >> 6) + MAX_VOLUME;
 8002600:	797b      	ldrb	r3, [r7, #5]
 8002602:	2273      	movs	r2, #115	; 0x73
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	119b      	asrs	r3, r3, #6
 800260a:	b2db      	uxtb	r3, r3
 800260c:	330c      	adds	r3, #12
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b98      	ldr	r3, [pc, #608]	; (8002874 <EsimationLcdUartComm+0x500>)
 8002612:	701a      	strb	r2, [r3, #0]
					printf("Set volume %d \r\n", select);
 8002614:	797b      	ldrb	r3, [r7, #5]
 8002616:	4619      	mov	r1, r3
 8002618:	4897      	ldr	r0, [pc, #604]	; (8002878 <EsimationLcdUartComm+0x504>)
 800261a:	f01b ff93 	bl	801e544 <iprintf>
					sgtl5000_stop_play();
 800261e:	f002 ff75 	bl	800550c <sgtl5000_stop_play>
					printf("Audio Driver Stopped for Volume \r\n");
 8002622:	4896      	ldr	r0, [pc, #600]	; (800287c <EsimationLcdUartComm+0x508>)
 8002624:	f01c f82a 	bl	801e67c <puts>
					sgtl5000_set_volume(select);
 8002628:	797b      	ldrb	r3, [r7, #5]
 800262a:	4618      	mov	r0, r3
 800262c:	f002 ff0a 	bl	8005444 <sgtl5000_set_volume>
					sgtl5000_start_play();
 8002630:	f002 ff4a 	bl	80054c8 <sgtl5000_start_play>
					printf("Audio Driver Started for Volume \r\n");
 8002634:	4892      	ldr	r0, [pc, #584]	; (8002880 <EsimationLcdUartComm+0x50c>)
 8002636:	f01c f821 	bl	801e67c <puts>
				}
			}
			if ((/*status == PLAY ||*/ status == 't'))
 800263a:	79bb      	ldrb	r3, [r7, #6]
 800263c:	2b74      	cmp	r3, #116	; 0x74
 800263e:	f040 8216 	bne.w	8002a6e <EsimationLcdUartComm+0x6fa>
			{
				if (select == 's') {
 8002642:	797b      	ldrb	r3, [r7, #5]
 8002644:	2b73      	cmp	r3, #115	; 0x73
 8002646:	d10e      	bne.n	8002666 <EsimationLcdUartComm+0x2f2>
					if (playingTrack) {
 8002648:	4b8e      	ldr	r3, [pc, #568]	; (8002884 <EsimationLcdUartComm+0x510>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <EsimationLcdUartComm+0x2f2>
						printf("Audio Driver Stopped on Track Change \r\n");
 8002650:	488d      	ldr	r0, [pc, #564]	; (8002888 <EsimationLcdUartComm+0x514>)
 8002652:	f01c f813 	bl	801e67c <puts>
						sgtl5000_stop_play();
 8002656:	f002 ff59 	bl	800550c <sgtl5000_stop_play>
						SetPlayState(PLAY_NONE);
 800265a:	2000      	movs	r0, #0
 800265c:	f000 fc6a 	bl	8002f34 <SetPlayState>
						playingTrack = false;
 8002660:	4b88      	ldr	r3, [pc, #544]	; (8002884 <EsimationLcdUartComm+0x510>)
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
					}
				}
				if (/*select == INTRO ||*/ select == 'k') {
 8002666:	797b      	ldrb	r3, [r7, #5]
 8002668:	2b6b      	cmp	r3, #107	; 0x6b
 800266a:	d110      	bne.n	800268e <EsimationLcdUartComm+0x31a>
					printf("Playing Intro \r\n");
 800266c:	4887      	ldr	r0, [pc, #540]	; (800288c <EsimationLcdUartComm+0x518>)
 800266e:	f01c f805 	bl	801e67c <puts>
					StartPlayAudioFile("_Intro.mp3");
 8002672:	4887      	ldr	r0, [pc, #540]	; (8002890 <EsimationLcdUartComm+0x51c>)
 8002674:	f000 fb74 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002678:	4b82      	ldr	r3, [pc, #520]	; (8002884 <EsimationLcdUartComm+0x510>)
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800267e:	f003 ff8b 	bl	8006598 <HAL_GetTick>
 8002682:	4603      	mov	r3, r0
 8002684:	4a83      	ldr	r2, [pc, #524]	; (8002894 <EsimationLcdUartComm+0x520>)
 8002686:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002688:	4b83      	ldr	r3, [pc, #524]	; (8002898 <EsimationLcdUartComm+0x524>)
 800268a:	2201      	movs	r2, #1
 800268c:	701a      	strb	r2, [r3, #0]
				}
				if (/*select == TEST ||*/ select == 'l')
 800268e:	797b      	ldrb	r3, [r7, #5]
 8002690:	2b6c      	cmp	r3, #108	; 0x6c
 8002692:	d110      	bne.n	80026b6 <EsimationLcdUartComm+0x342>
				{
					printf("Playing Test Bell \r\n");
 8002694:	4881      	ldr	r0, [pc, #516]	; (800289c <EsimationLcdUartComm+0x528>)
 8002696:	f01b fff1 	bl	801e67c <puts>
					StartPlayAudioFile("_TestBell.mp3");
 800269a:	4881      	ldr	r0, [pc, #516]	; (80028a0 <EsimationLcdUartComm+0x52c>)
 800269c:	f000 fb60 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 80026a0:	4b78      	ldr	r3, [pc, #480]	; (8002884 <EsimationLcdUartComm+0x510>)
 80026a2:	2201      	movs	r2, #1
 80026a4:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80026a6:	f003 ff77 	bl	8006598 <HAL_GetTick>
 80026aa:	4603      	mov	r3, r0
 80026ac:	4a79      	ldr	r2, [pc, #484]	; (8002894 <EsimationLcdUartComm+0x520>)
 80026ae:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80026b0:	4b79      	ldr	r3, [pc, #484]	; (8002898 <EsimationLcdUartComm+0x524>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	701a      	strb	r2, [r3, #0]
				}
				if (select == '1') {
 80026b6:	797b      	ldrb	r3, [r7, #5]
 80026b8:	2b31      	cmp	r3, #49	; 0x31
 80026ba:	d110      	bne.n	80026de <EsimationLcdUartComm+0x36a>
					printf("Playing Focus \r\n");
 80026bc:	4879      	ldr	r0, [pc, #484]	; (80028a4 <EsimationLcdUartComm+0x530>)
 80026be:	f01b ffdd 	bl	801e67c <puts>
					StartPlayAudioFile("Focus.mp3");
 80026c2:	4879      	ldr	r0, [pc, #484]	; (80028a8 <EsimationLcdUartComm+0x534>)
 80026c4:	f000 fb4c 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 80026c8:	4b6e      	ldr	r3, [pc, #440]	; (8002884 <EsimationLcdUartComm+0x510>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80026ce:	f003 ff63 	bl	8006598 <HAL_GetTick>
 80026d2:	4603      	mov	r3, r0
 80026d4:	4a6f      	ldr	r2, [pc, #444]	; (8002894 <EsimationLcdUartComm+0x520>)
 80026d6:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80026d8:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <EsimationLcdUartComm+0x524>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
				}
				if ( select == '2') {
 80026de:	797b      	ldrb	r3, [r7, #5]
 80026e0:	2b32      	cmp	r3, #50	; 0x32
 80026e2:	d110      	bne.n	8002706 <EsimationLcdUartComm+0x392>
					printf("Playing Motivate \r\n");
 80026e4:	4871      	ldr	r0, [pc, #452]	; (80028ac <EsimationLcdUartComm+0x538>)
 80026e6:	f01b ffc9 	bl	801e67c <puts>
					StartPlayAudioFile("Motivate.mp3");
 80026ea:	4871      	ldr	r0, [pc, #452]	; (80028b0 <EsimationLcdUartComm+0x53c>)
 80026ec:	f000 fb38 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 80026f0:	4b64      	ldr	r3, [pc, #400]	; (8002884 <EsimationLcdUartComm+0x510>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80026f6:	f003 ff4f 	bl	8006598 <HAL_GetTick>
 80026fa:	4603      	mov	r3, r0
 80026fc:	4a65      	ldr	r2, [pc, #404]	; (8002894 <EsimationLcdUartComm+0x520>)
 80026fe:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002700:	4b65      	ldr	r3, [pc, #404]	; (8002898 <EsimationLcdUartComm+0x524>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
				}
				if ( select == '3') {
 8002706:	797b      	ldrb	r3, [r7, #5]
 8002708:	2b33      	cmp	r3, #51	; 0x33
 800270a:	d110      	bne.n	800272e <EsimationLcdUartComm+0x3ba>
					printf("Playing Fit \r\n");
 800270c:	4869      	ldr	r0, [pc, #420]	; (80028b4 <EsimationLcdUartComm+0x540>)
 800270e:	f01b ffb5 	bl	801e67c <puts>
					StartPlayAudioFile("Fit.mp3");
 8002712:	4869      	ldr	r0, [pc, #420]	; (80028b8 <EsimationLcdUartComm+0x544>)
 8002714:	f000 fb24 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002718:	4b5a      	ldr	r3, [pc, #360]	; (8002884 <EsimationLcdUartComm+0x510>)
 800271a:	2201      	movs	r2, #1
 800271c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800271e:	f003 ff3b 	bl	8006598 <HAL_GetTick>
 8002722:	4603      	mov	r3, r0
 8002724:	4a5b      	ldr	r2, [pc, #364]	; (8002894 <EsimationLcdUartComm+0x520>)
 8002726:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002728:	4b5b      	ldr	r3, [pc, #364]	; (8002898 <EsimationLcdUartComm+0x524>)
 800272a:	2201      	movs	r2, #1
 800272c:	701a      	strb	r2, [r3, #0]
				}
				if ( select == '4') {
 800272e:	797b      	ldrb	r3, [r7, #5]
 8002730:	2b34      	cmp	r3, #52	; 0x34
 8002732:	d110      	bne.n	8002756 <EsimationLcdUartComm+0x3e2>
					printf("Playing Perform \r\n");
 8002734:	4861      	ldr	r0, [pc, #388]	; (80028bc <EsimationLcdUartComm+0x548>)
 8002736:	f01b ffa1 	bl	801e67c <puts>
					StartPlayAudioFile("Perform.mp3");
 800273a:	4861      	ldr	r0, [pc, #388]	; (80028c0 <EsimationLcdUartComm+0x54c>)
 800273c:	f000 fb10 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002740:	4b50      	ldr	r3, [pc, #320]	; (8002884 <EsimationLcdUartComm+0x510>)
 8002742:	2201      	movs	r2, #1
 8002744:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002746:	f003 ff27 	bl	8006598 <HAL_GetTick>
 800274a:	4603      	mov	r3, r0
 800274c:	4a51      	ldr	r2, [pc, #324]	; (8002894 <EsimationLcdUartComm+0x520>)
 800274e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002750:	4b51      	ldr	r3, [pc, #324]	; (8002898 <EsimationLcdUartComm+0x524>)
 8002752:	2201      	movs	r2, #1
 8002754:	701a      	strb	r2, [r3, #0]
				}
				if (select == '5') {
 8002756:	797b      	ldrb	r3, [r7, #5]
 8002758:	2b35      	cmp	r3, #53	; 0x35
 800275a:	d110      	bne.n	800277e <EsimationLcdUartComm+0x40a>
					printf("Playing Heal \r\n");
 800275c:	4859      	ldr	r0, [pc, #356]	; (80028c4 <EsimationLcdUartComm+0x550>)
 800275e:	f01b ff8d 	bl	801e67c <puts>
					StartPlayAudioFile("Heal.mp3");
 8002762:	4859      	ldr	r0, [pc, #356]	; (80028c8 <EsimationLcdUartComm+0x554>)
 8002764:	f000 fafc 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <EsimationLcdUartComm+0x510>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800276e:	f003 ff13 	bl	8006598 <HAL_GetTick>
 8002772:	4603      	mov	r3, r0
 8002774:	4a47      	ldr	r2, [pc, #284]	; (8002894 <EsimationLcdUartComm+0x520>)
 8002776:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002778:	4b47      	ldr	r3, [pc, #284]	; (8002898 <EsimationLcdUartComm+0x524>)
 800277a:	2201      	movs	r2, #1
 800277c:	701a      	strb	r2, [r3, #0]
				}
				if ( select == '6') {
 800277e:	797b      	ldrb	r3, [r7, #5]
 8002780:	2b36      	cmp	r3, #54	; 0x36
 8002782:	d110      	bne.n	80027a6 <EsimationLcdUartComm+0x432>
					printf("Playing Recharge \r\n");
 8002784:	4851      	ldr	r0, [pc, #324]	; (80028cc <EsimationLcdUartComm+0x558>)
 8002786:	f01b ff79 	bl	801e67c <puts>
					StartPlayAudioFile("Recharge.mp3");
 800278a:	4851      	ldr	r0, [pc, #324]	; (80028d0 <EsimationLcdUartComm+0x55c>)
 800278c:	f000 fae8 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002790:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <EsimationLcdUartComm+0x510>)
 8002792:	2201      	movs	r2, #1
 8002794:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002796:	f003 feff 	bl	8006598 <HAL_GetTick>
 800279a:	4603      	mov	r3, r0
 800279c:	4a3d      	ldr	r2, [pc, #244]	; (8002894 <EsimationLcdUartComm+0x520>)
 800279e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80027a0:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <EsimationLcdUartComm+0x524>)
 80027a2:	2201      	movs	r2, #1
 80027a4:	701a      	strb	r2, [r3, #0]
				}
				if (select == '7') {
 80027a6:	797b      	ldrb	r3, [r7, #5]
 80027a8:	2b37      	cmp	r3, #55	; 0x37
 80027aa:	d110      	bne.n	80027ce <EsimationLcdUartComm+0x45a>
					printf("Playing Relax \r\n");
 80027ac:	4849      	ldr	r0, [pc, #292]	; (80028d4 <EsimationLcdUartComm+0x560>)
 80027ae:	f01b ff65 	bl	801e67c <puts>
					StartPlayAudioFile("Relax.mp3");
 80027b2:	4849      	ldr	r0, [pc, #292]	; (80028d8 <EsimationLcdUartComm+0x564>)
 80027b4:	f000 fad4 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 80027b8:	4b32      	ldr	r3, [pc, #200]	; (8002884 <EsimationLcdUartComm+0x510>)
 80027ba:	2201      	movs	r2, #1
 80027bc:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80027be:	f003 feeb 	bl	8006598 <HAL_GetTick>
 80027c2:	4603      	mov	r3, r0
 80027c4:	4a33      	ldr	r2, [pc, #204]	; (8002894 <EsimationLcdUartComm+0x520>)
 80027c6:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80027c8:	4b33      	ldr	r3, [pc, #204]	; (8002898 <EsimationLcdUartComm+0x524>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	701a      	strb	r2, [r3, #0]
				}
				if (select == '8') {
 80027ce:	797b      	ldrb	r3, [r7, #5]
 80027d0:	2b38      	cmp	r3, #56	; 0x38
 80027d2:	d110      	bne.n	80027f6 <EsimationLcdUartComm+0x482>
					printf("Playing Snooze \r\n");
 80027d4:	4841      	ldr	r0, [pc, #260]	; (80028dc <EsimationLcdUartComm+0x568>)
 80027d6:	f01b ff51 	bl	801e67c <puts>
					StartPlayAudioFile("Snooze.mp3");
 80027da:	4841      	ldr	r0, [pc, #260]	; (80028e0 <EsimationLcdUartComm+0x56c>)
 80027dc:	f000 fac0 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 80027e0:	4b28      	ldr	r3, [pc, #160]	; (8002884 <EsimationLcdUartComm+0x510>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80027e6:	f003 fed7 	bl	8006598 <HAL_GetTick>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4a29      	ldr	r2, [pc, #164]	; (8002894 <EsimationLcdUartComm+0x520>)
 80027ee:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80027f0:	4b29      	ldr	r3, [pc, #164]	; (8002898 <EsimationLcdUartComm+0x524>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	701a      	strb	r2, [r3, #0]
				}
				if (select == '9') {
 80027f6:	797b      	ldrb	r3, [r7, #5]
 80027f8:	2b39      	cmp	r3, #57	; 0x39
 80027fa:	d110      	bne.n	800281e <EsimationLcdUartComm+0x4aa>
					printf("Playing Create \r\n");
 80027fc:	4839      	ldr	r0, [pc, #228]	; (80028e4 <EsimationLcdUartComm+0x570>)
 80027fe:	f01b ff3d 	bl	801e67c <puts>
					StartPlayAudioFile("Creativity.mp3");
 8002802:	4839      	ldr	r0, [pc, #228]	; (80028e8 <EsimationLcdUartComm+0x574>)
 8002804:	f000 faac 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <EsimationLcdUartComm+0x510>)
 800280a:	2201      	movs	r2, #1
 800280c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800280e:	f003 fec3 	bl	8006598 <HAL_GetTick>
 8002812:	4603      	mov	r3, r0
 8002814:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <EsimationLcdUartComm+0x520>)
 8002816:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002818:	4b1f      	ldr	r3, [pc, #124]	; (8002898 <EsimationLcdUartComm+0x524>)
 800281a:	2201      	movs	r2, #1
 800281c:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'a') {
 800281e:	797b      	ldrb	r3, [r7, #5]
 8002820:	2b61      	cmp	r3, #97	; 0x61
 8002822:	d110      	bne.n	8002846 <EsimationLcdUartComm+0x4d2>
					printf("Playing Overcome \r\n");
 8002824:	4831      	ldr	r0, [pc, #196]	; (80028ec <EsimationLcdUartComm+0x578>)
 8002826:	f01b ff29 	bl	801e67c <puts>
					StartPlayAudioFile("Overcome.mp3");
 800282a:	4831      	ldr	r0, [pc, #196]	; (80028f0 <EsimationLcdUartComm+0x57c>)
 800282c:	f000 fa98 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002830:	4b14      	ldr	r3, [pc, #80]	; (8002884 <EsimationLcdUartComm+0x510>)
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002836:	f003 feaf 	bl	8006598 <HAL_GetTick>
 800283a:	4603      	mov	r3, r0
 800283c:	4a15      	ldr	r2, [pc, #84]	; (8002894 <EsimationLcdUartComm+0x520>)
 800283e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002840:	4b15      	ldr	r3, [pc, #84]	; (8002898 <EsimationLcdUartComm+0x524>)
 8002842:	2201      	movs	r2, #1
 8002844:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'b') {
 8002846:	797b      	ldrb	r3, [r7, #5]
 8002848:	2b62      	cmp	r3, #98	; 0x62
 800284a:	d15c      	bne.n	8002906 <EsimationLcdUartComm+0x592>
					printf("Playing Succeed \r\n");
 800284c:	4829      	ldr	r0, [pc, #164]	; (80028f4 <EsimationLcdUartComm+0x580>)
 800284e:	f01b ff15 	bl	801e67c <puts>
					StartPlayAudioFile("Succeed.mp3");
 8002852:	4829      	ldr	r0, [pc, #164]	; (80028f8 <EsimationLcdUartComm+0x584>)
 8002854:	f000 fa84 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002858:	4b0a      	ldr	r3, [pc, #40]	; (8002884 <EsimationLcdUartComm+0x510>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800285e:	f003 fe9b 	bl	8006598 <HAL_GetTick>
 8002862:	4603      	mov	r3, r0
 8002864:	e04a      	b.n	80028fc <EsimationLcdUartComm+0x588>
 8002866:	bf00      	nop
 8002868:	40020000 	.word	0x40020000
 800286c:	0801f9a0 	.word	0x0801f9a0
 8002870:	0801f9ac 	.word	0x0801f9ac
 8002874:	20000008 	.word	0x20000008
 8002878:	0801f9c4 	.word	0x0801f9c4
 800287c:	0801f850 	.word	0x0801f850
 8002880:	0801f874 	.word	0x0801f874
 8002884:	2000e425 	.word	0x2000e425
 8002888:	0801f9d8 	.word	0x0801f9d8
 800288c:	0801fa00 	.word	0x0801fa00
 8002890:	0801fa10 	.word	0x0801fa10
 8002894:	2000e428 	.word	0x2000e428
 8002898:	2000e42c 	.word	0x2000e42c
 800289c:	0801fa1c 	.word	0x0801fa1c
 80028a0:	0801fa30 	.word	0x0801fa30
 80028a4:	0801fa40 	.word	0x0801fa40
 80028a8:	0801fa50 	.word	0x0801fa50
 80028ac:	0801fa5c 	.word	0x0801fa5c
 80028b0:	0801fa70 	.word	0x0801fa70
 80028b4:	0801fa80 	.word	0x0801fa80
 80028b8:	0801fa90 	.word	0x0801fa90
 80028bc:	0801fa98 	.word	0x0801fa98
 80028c0:	0801faac 	.word	0x0801faac
 80028c4:	0801fab8 	.word	0x0801fab8
 80028c8:	0801fac8 	.word	0x0801fac8
 80028cc:	0801fad4 	.word	0x0801fad4
 80028d0:	0801fae8 	.word	0x0801fae8
 80028d4:	0801faf8 	.word	0x0801faf8
 80028d8:	0801fb08 	.word	0x0801fb08
 80028dc:	0801fb14 	.word	0x0801fb14
 80028e0:	0801fb28 	.word	0x0801fb28
 80028e4:	0801fb34 	.word	0x0801fb34
 80028e8:	0801fb48 	.word	0x0801fb48
 80028ec:	0801fb58 	.word	0x0801fb58
 80028f0:	0801fb6c 	.word	0x0801fb6c
 80028f4:	0801fb7c 	.word	0x0801fb7c
 80028f8:	0801fb90 	.word	0x0801fb90
 80028fc:	4a6a      	ldr	r2, [pc, #424]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 80028fe:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <EsimationLcdUartComm+0x738>)
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'c') {
 8002906:	797b      	ldrb	r3, [r7, #5]
 8002908:	2b63      	cmp	r3, #99	; 0x63
 800290a:	d110      	bne.n	800292e <EsimationLcdUartComm+0x5ba>
					printf("Playing Ascend \r\n");
 800290c:	4868      	ldr	r0, [pc, #416]	; (8002ab0 <EsimationLcdUartComm+0x73c>)
 800290e:	f01b feb5 	bl	801e67c <puts>
					StartPlayAudioFile("Ascend.mp3");
 8002912:	4868      	ldr	r0, [pc, #416]	; (8002ab4 <EsimationLcdUartComm+0x740>)
 8002914:	f000 fa24 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002918:	4b67      	ldr	r3, [pc, #412]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800291e:	f003 fe3b 	bl	8006598 <HAL_GetTick>
 8002922:	4603      	mov	r3, r0
 8002924:	4a60      	ldr	r2, [pc, #384]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 8002926:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002928:	4b60      	ldr	r3, [pc, #384]	; (8002aac <EsimationLcdUartComm+0x738>)
 800292a:	2201      	movs	r2, #1
 800292c:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'd') {
 800292e:	797b      	ldrb	r3, [r7, #5]
 8002930:	2b64      	cmp	r3, #100	; 0x64
 8002932:	d110      	bne.n	8002956 <EsimationLcdUartComm+0x5e2>
					printf("Playing Aspire \r\n");
 8002934:	4861      	ldr	r0, [pc, #388]	; (8002abc <EsimationLcdUartComm+0x748>)
 8002936:	f01b fea1 	bl	801e67c <puts>
					StartPlayAudioFile("Aspire.mp3");
 800293a:	4861      	ldr	r0, [pc, #388]	; (8002ac0 <EsimationLcdUartComm+0x74c>)
 800293c:	f000 fa10 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002940:	4b5d      	ldr	r3, [pc, #372]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002946:	f003 fe27 	bl	8006598 <HAL_GetTick>
 800294a:	4603      	mov	r3, r0
 800294c:	4a56      	ldr	r2, [pc, #344]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 800294e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002950:	4b56      	ldr	r3, [pc, #344]	; (8002aac <EsimationLcdUartComm+0x738>)
 8002952:	2201      	movs	r2, #1
 8002954:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'e') {
 8002956:	797b      	ldrb	r3, [r7, #5]
 8002958:	2b65      	cmp	r3, #101	; 0x65
 800295a:	d110      	bne.n	800297e <EsimationLcdUartComm+0x60a>
					printf("Playing Bliss \r\n");
 800295c:	4859      	ldr	r0, [pc, #356]	; (8002ac4 <EsimationLcdUartComm+0x750>)
 800295e:	f01b fe8d 	bl	801e67c <puts>
					StartPlayAudioFile("Bliss.mp3");
 8002962:	4859      	ldr	r0, [pc, #356]	; (8002ac8 <EsimationLcdUartComm+0x754>)
 8002964:	f000 f9fc 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002968:	4b53      	ldr	r3, [pc, #332]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 800296a:	2201      	movs	r2, #1
 800296c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 800296e:	f003 fe13 	bl	8006598 <HAL_GetTick>
 8002972:	4603      	mov	r3, r0
 8002974:	4a4c      	ldr	r2, [pc, #304]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 8002976:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002978:	4b4c      	ldr	r3, [pc, #304]	; (8002aac <EsimationLcdUartComm+0x738>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'f') {
 800297e:	797b      	ldrb	r3, [r7, #5]
 8002980:	2b66      	cmp	r3, #102	; 0x66
 8002982:	d110      	bne.n	80029a6 <EsimationLcdUartComm+0x632>
					printf("Playing Clarity \r\n");
 8002984:	4851      	ldr	r0, [pc, #324]	; (8002acc <EsimationLcdUartComm+0x758>)
 8002986:	f01b fe79 	bl	801e67c <puts>
					StartPlayAudioFile("Clarity.mp3");
 800298a:	4851      	ldr	r0, [pc, #324]	; (8002ad0 <EsimationLcdUartComm+0x75c>)
 800298c:	f000 f9e8 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002990:	4b49      	ldr	r3, [pc, #292]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 8002992:	2201      	movs	r2, #1
 8002994:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002996:	f003 fdff 	bl	8006598 <HAL_GetTick>
 800299a:	4603      	mov	r3, r0
 800299c:	4a42      	ldr	r2, [pc, #264]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 800299e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80029a0:	4b42      	ldr	r3, [pc, #264]	; (8002aac <EsimationLcdUartComm+0x738>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'g') {
 80029a6:	797b      	ldrb	r3, [r7, #5]
 80029a8:	2b67      	cmp	r3, #103	; 0x67
 80029aa:	d110      	bne.n	80029ce <EsimationLcdUartComm+0x65a>
					printf("Playing Confidence \r\n");
 80029ac:	4849      	ldr	r0, [pc, #292]	; (8002ad4 <EsimationLcdUartComm+0x760>)
 80029ae:	f01b fe65 	bl	801e67c <puts>
					StartPlayAudioFile("Confidence.mp3");
 80029b2:	4849      	ldr	r0, [pc, #292]	; (8002ad8 <EsimationLcdUartComm+0x764>)
 80029b4:	f000 f9d4 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 80029b8:	4b3f      	ldr	r3, [pc, #252]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 80029ba:	2201      	movs	r2, #1
 80029bc:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80029be:	f003 fdeb 	bl	8006598 <HAL_GetTick>
 80029c2:	4603      	mov	r3, r0
 80029c4:	4a38      	ldr	r2, [pc, #224]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 80029c6:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80029c8:	4b38      	ldr	r3, [pc, #224]	; (8002aac <EsimationLcdUartComm+0x738>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'h') {
 80029ce:	797b      	ldrb	r3, [r7, #5]
 80029d0:	2b68      	cmp	r3, #104	; 0x68
 80029d2:	d110      	bne.n	80029f6 <EsimationLcdUartComm+0x682>
					printf("Playing Love \r\n");
 80029d4:	4841      	ldr	r0, [pc, #260]	; (8002adc <EsimationLcdUartComm+0x768>)
 80029d6:	f01b fe51 	bl	801e67c <puts>
					StartPlayAudioFile("Love.mp3");
 80029da:	4841      	ldr	r0, [pc, #260]	; (8002ae0 <EsimationLcdUartComm+0x76c>)
 80029dc:	f000 f9c0 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 80029e0:	4b35      	ldr	r3, [pc, #212]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 80029e2:	2201      	movs	r2, #1
 80029e4:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 80029e6:	f003 fdd7 	bl	8006598 <HAL_GetTick>
 80029ea:	4603      	mov	r3, r0
 80029ec:	4a2e      	ldr	r2, [pc, #184]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 80029ee:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 80029f0:	4b2e      	ldr	r3, [pc, #184]	; (8002aac <EsimationLcdUartComm+0x738>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]
				}
				if (select == 'i') {
 80029f6:	797b      	ldrb	r3, [r7, #5]
 80029f8:	2b69      	cmp	r3, #105	; 0x69
 80029fa:	d110      	bne.n	8002a1e <EsimationLcdUartComm+0x6aa>
					printf("Playing Manifest \r\n");
 80029fc:	4839      	ldr	r0, [pc, #228]	; (8002ae4 <EsimationLcdUartComm+0x770>)
 80029fe:	f01b fe3d 	bl	801e67c <puts>
					StartPlayAudioFile("Manifest.mp3");
 8002a02:	4839      	ldr	r0, [pc, #228]	; (8002ae8 <EsimationLcdUartComm+0x774>)
 8002a04:	f000 f9ac 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002a08:	4b2b      	ldr	r3, [pc, #172]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002a0e:	f003 fdc3 	bl	8006598 <HAL_GetTick>
 8002a12:	4603      	mov	r3, r0
 8002a14:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 8002a16:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002a18:	4b24      	ldr	r3, [pc, #144]	; (8002aac <EsimationLcdUartComm+0x738>)
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	701a      	strb	r2, [r3, #0]
				}
				if ( select == 'j') {
 8002a1e:	797b      	ldrb	r3, [r7, #5]
 8002a20:	2b6a      	cmp	r3, #106	; 0x6a
 8002a22:	d110      	bne.n	8002a46 <EsimationLcdUartComm+0x6d2>
					printf("Playing Prosper \r\n");
 8002a24:	4831      	ldr	r0, [pc, #196]	; (8002aec <EsimationLcdUartComm+0x778>)
 8002a26:	f01b fe29 	bl	801e67c <puts>
					StartPlayAudioFile("Prosperity.mp3");
 8002a2a:	4831      	ldr	r0, [pc, #196]	; (8002af0 <EsimationLcdUartComm+0x77c>)
 8002a2c:	f000 f998 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002a36:	f003 fdaf 	bl	8006598 <HAL_GetTick>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 8002a3e:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002a40:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <EsimationLcdUartComm+0x738>)
 8002a42:	2201      	movs	r2, #1
 8002a44:	701a      	strb	r2, [r3, #0]
				}
				if (select == '0') {
 8002a46:	797b      	ldrb	r3, [r7, #5]
 8002a48:	2b30      	cmp	r3, #48	; 0x30
 8002a4a:	d110      	bne.n	8002a6e <EsimationLcdUartComm+0x6fa>
					printf("Playing Reclaim \r\n");
 8002a4c:	4829      	ldr	r0, [pc, #164]	; (8002af4 <EsimationLcdUartComm+0x780>)
 8002a4e:	f01b fe15 	bl	801e67c <puts>
					StartPlayAudioFile("Reclaim.mp3");
 8002a52:	4829      	ldr	r0, [pc, #164]	; (8002af8 <EsimationLcdUartComm+0x784>)
 8002a54:	f000 f984 	bl	8002d60 <StartPlayAudioFile>
					playingTrack = true;
 8002a58:	4b17      	ldr	r3, [pc, #92]	; (8002ab8 <EsimationLcdUartComm+0x744>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	701a      	strb	r2, [r3, #0]
					lastVolumeTime = HAL_GetTick();
 8002a5e:	f003 fd9b 	bl	8006598 <HAL_GetTick>
 8002a62:	4603      	mov	r3, r0
 8002a64:	4a10      	ldr	r2, [pc, #64]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 8002a66:	6013      	str	r3, [r2, #0]
					lastVolumeSetFlag = 1;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <EsimationLcdUartComm+0x738>)
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	701a      	strb	r2, [r3, #0]
				}
			} // end PLAY status
			SetRBufferIndex(3);
 8002a6e:	2003      	movs	r0, #3
 8002a70:	f7ff fc4a 	bl	8002308 <SetRBufferIndex>
 8002a74:	e002      	b.n	8002a7c <EsimationLcdUartComm+0x708>
		} // end command
		else
		{
			SetRBufferIndex(1);
 8002a76:	2001      	movs	r0, #1
 8002a78:	f7ff fc46 	bl	8002308 <SetRBufferIndex>
		}
	}

	if (lastVolumeSetFlag == 1)
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <EsimationLcdUartComm+0x738>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10c      	bne.n	8002a9e <EsimationLcdUartComm+0x72a>
	{
		if (HAL_GetTick() - lastVolumeTime > 200) {
 8002a84:	f003 fd88 	bl	8006598 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b07      	ldr	r3, [pc, #28]	; (8002aa8 <EsimationLcdUartComm+0x734>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2bc8      	cmp	r3, #200	; 0xc8
 8002a92:	d904      	bls.n	8002a9e <EsimationLcdUartComm+0x72a>
			SetAudioVolume();
 8002a94:	f7ff fc54 	bl	8002340 <SetAudioVolume>
			lastVolumeSetFlag = 0;
 8002a98:	4b04      	ldr	r3, [pc, #16]	; (8002aac <EsimationLcdUartComm+0x738>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	3708      	adds	r7, #8
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	2000e428 	.word	0x2000e428
 8002aac:	2000e42c 	.word	0x2000e42c
 8002ab0:	0801fb9c 	.word	0x0801fb9c
 8002ab4:	0801fbb0 	.word	0x0801fbb0
 8002ab8:	2000e425 	.word	0x2000e425
 8002abc:	0801fbbc 	.word	0x0801fbbc
 8002ac0:	0801fbd0 	.word	0x0801fbd0
 8002ac4:	0801fbdc 	.word	0x0801fbdc
 8002ac8:	0801fbec 	.word	0x0801fbec
 8002acc:	0801fbf8 	.word	0x0801fbf8
 8002ad0:	0801fc0c 	.word	0x0801fc0c
 8002ad4:	0801fc18 	.word	0x0801fc18
 8002ad8:	0801fc30 	.word	0x0801fc30
 8002adc:	0801fc40 	.word	0x0801fc40
 8002ae0:	0801fc50 	.word	0x0801fc50
 8002ae4:	0801fc5c 	.word	0x0801fc5c
 8002ae8:	0801fc70 	.word	0x0801fc70
 8002aec:	0801fc80 	.word	0x0801fc80
 8002af0:	0801fc94 	.word	0x0801fc94
 8002af4:	0801fca4 	.word	0x0801fca4
 8002af8:	0801fcb8 	.word	0x0801fcb8

08002afc <m2m_ble_wifi_callback>:
 {
	 while (m2m_wifi_handle_events(NULL) != M2M_SUCCESS);
 }

 static void m2m_ble_wifi_callback(uint8 u8MsgType, void * pvMsg)
 {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	4603      	mov	r3, r0
 8002b04:	6039      	str	r1, [r7, #0]
 8002b06:	71fb      	strb	r3, [r7, #7]
	 if (u8MsgType == M2M_WIFI_RESP_BLE_API_RECV)
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b22      	cmp	r3, #34	; 0x22
 8002b0c:	d10a      	bne.n	8002b24 <m2m_ble_wifi_callback+0x28>
	 {
		 tstrM2mBleApiMsg* rx = (tstrM2mBleApiMsg*)pvMsg;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	60fb      	str	r3, [r7, #12]
#ifdef BLE_API_DBG
		 M2M_INFO("BLE_API_RECV:%x:%x:%x:%x:%x:%x\n", \
			rx->u16Len, rx->data[0], rx->data[1], rx->data[2], rx->data[3], rx->data[4]);
#endif
		 platform_receive(rx->data, rx->u16Len);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	1c9a      	adds	r2, r3, #2
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	4610      	mov	r0, r2
 8002b1e:	f01b fa44 	bl	801dfaa <platform_receive>
		 return;
 8002b22:	e009      	b.n	8002b38 <m2m_ble_wifi_callback+0x3c>
	 }

	 if (gpfBleAppWifiCb) {
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <m2m_ble_wifi_callback+0x44>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <m2m_ble_wifi_callback+0x3c>
		 gpfBleAppWifiCb(u8MsgType, pvMsg);
 8002b2c:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <m2m_ble_wifi_callback+0x44>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	79fa      	ldrb	r2, [r7, #7]
 8002b32:	6839      	ldr	r1, [r7, #0]
 8002b34:	4610      	mov	r0, r2
 8002b36:	4798      	blx	r3
	 }
 }
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	2000e430 	.word	0x2000e430

08002b44 <m2m_ble_wifi_init>:
	return AT_BLE_SUCCESS;
}


sint8 m2m_ble_wifi_init(tstrWifiInitParam * param)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
	gpfBleAppWifiCb = param->pfAppWifiCb;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a06      	ldr	r2, [pc, #24]	; (8002b6c <m2m_ble_wifi_init+0x28>)
 8002b52:	6013      	str	r3, [r2, #0]
	param->pfAppWifiCb = m2m_ble_wifi_callback;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a06      	ldr	r2, [pc, #24]	; (8002b70 <m2m_ble_wifi_init+0x2c>)
 8002b58:	601a      	str	r2, [r3, #0]
#ifdef ETH_MODE
	param->strEthInitParam.pfAppWifiCb = m2m_ble_wifi_callback;
#endif
	return m2m_wifi_init(param);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f017 fca4 	bl	801a4a8 <m2m_wifi_init>
 8002b60:	4603      	mov	r3, r0

}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	2000e430 	.word	0x2000e430
 8002b70:	08002afd 	.word	0x08002afd

08002b74 <__io_putchar>:

/* USER CODE BEGIN PFP */
void StartCommTask(void *argument);
void StartWiFiProvTask(void *argument);

int __io_putchar(int ch) {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
	(void) HAL_UART_Transmit(&huart7, (uint8_t*) &ch, 1, 100);
 8002b7c:	1d39      	adds	r1, r7, #4
 8002b7e:	2364      	movs	r3, #100	; 0x64
 8002b80:	2201      	movs	r2, #1
 8002b82:	4804      	ldr	r0, [pc, #16]	; (8002b94 <__io_putchar+0x20>)
 8002b84:	f009 fa5f 	bl	800c046 <HAL_UART_Transmit>
	return ch;
 8002b88:	687b      	ldr	r3, [r7, #4]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	2000e88c 	.word	0x2000e88c

08002b98 <B2D>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t B2D(uint8_t byte) {
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	71fb      	strb	r3, [r7, #7]
	uint8_t low, high;
	low = byte & 0x0F;
 8002ba2:	79fb      	ldrb	r3, [r7, #7]
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	73fb      	strb	r3, [r7, #15]
	high = ((byte >> 4) & 0x0F) * 10;
 8002baa:	79fb      	ldrb	r3, [r7, #7]
 8002bac:	091b      	lsrs	r3, r3, #4
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	0092      	lsls	r2, r2, #2
 8002bb4:	4413      	add	r3, r2
 8002bb6:	005b      	lsls	r3, r3, #1
 8002bb8:	73bb      	strb	r3, [r7, #14]
	return high + low;
 8002bba:	7bba      	ldrb	r2, [r7, #14]
 8002bbc:	7bfb      	ldrb	r3, [r7, #15]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	b2db      	uxtb	r3, r3
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <D2B>:

uint8_t D2B(uint8_t byte) {
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	71fb      	strb	r3, [r7, #7]
	return ((byte / 10) << 4) + (byte % 10);
 8002bda:	79fb      	ldrb	r3, [r7, #7]
 8002bdc:	4a0c      	ldr	r2, [pc, #48]	; (8002c10 <D2B+0x40>)
 8002bde:	fba2 2303 	umull	r2, r3, r2, r3
 8002be2:	08db      	lsrs	r3, r3, #3
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	011b      	lsls	r3, r3, #4
 8002be8:	b2d8      	uxtb	r0, r3
 8002bea:	79fa      	ldrb	r2, [r7, #7]
 8002bec:	4b08      	ldr	r3, [pc, #32]	; (8002c10 <D2B+0x40>)
 8002bee:	fba3 1302 	umull	r1, r3, r3, r2
 8002bf2:	08d9      	lsrs	r1, r3, #3
 8002bf4:	460b      	mov	r3, r1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	4403      	add	r3, r0
 8002c02:	b2db      	uxtb	r3, r3
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	cccccccd 	.word	0xcccccccd

08002c14 <StartBTUartReceiveProc>:

static uint8_t btRxBuffer[1];
static uint8_t wifiRxBuffer[1];

void StartBTUartReceiveProc(void) {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart2, btRxBuffer, 1) != HAL_OK)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4905      	ldr	r1, [pc, #20]	; (8002c30 <StartBTUartReceiveProc+0x1c>)
 8002c1c:	4805      	ldr	r0, [pc, #20]	; (8002c34 <StartBTUartReceiveProc+0x20>)
 8002c1e:	f009 faa4 	bl	800c16a <HAL_UART_Receive_IT>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <StartBTUartReceiveProc+0x18>
		Error_Handler();
 8002c28:	f002 fba6 	bl	8005378 <Error_Handler>
}
 8002c2c:	bf00      	nop
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	200133d4 	.word	0x200133d4
 8002c34:	2000e914 	.word	0x2000e914

08002c38 <BTUartReceiveCallback>:

void BTUartReceiveCallback(UART_HandleTypeDef *huart) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a05      	ldr	r2, [pc, #20]	; (8002c5c <BTUartReceiveCallback+0x24>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d104      	bne.n	8002c54 <BTUartReceiveCallback+0x1c>
//		HAL_UART_Transmit(&huart7, (uint8_t*) &btRxBuffer, 1, 100);
		HAL_UART_Receive_IT(&huart2, btRxBuffer, 1);
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	4904      	ldr	r1, [pc, #16]	; (8002c60 <BTUartReceiveCallback+0x28>)
 8002c4e:	4805      	ldr	r0, [pc, #20]	; (8002c64 <BTUartReceiveCallback+0x2c>)
 8002c50:	f009 fa8b 	bl	800c16a <HAL_UART_Receive_IT>
	}
}
 8002c54:	bf00      	nop
 8002c56:	3708      	adds	r7, #8
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	40004400 	.word	0x40004400
 8002c60:	200133d4 	.word	0x200133d4
 8002c64:	2000e914 	.word	0x2000e914

08002c68 <StartWiFiUartReceiveProc>:

void StartWiFiUartReceiveProc(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	if (HAL_UART_Receive_IT(&huart3, wifiRxBuffer, 1) != HAL_OK)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4905      	ldr	r1, [pc, #20]	; (8002c84 <StartWiFiUartReceiveProc+0x1c>)
 8002c70:	4805      	ldr	r0, [pc, #20]	; (8002c88 <StartWiFiUartReceiveProc+0x20>)
 8002c72:	f009 fa7a 	bl	800c16a <HAL_UART_Receive_IT>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <StartWiFiUartReceiveProc+0x18>
		Error_Handler();
 8002c7c:	f002 fb7c 	bl	8005378 <Error_Handler>
}
 8002c80:	bf00      	nop
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	200133d8 	.word	0x200133d8
 8002c88:	2000e958 	.word	0x2000e958

08002c8c <WiFiUartReceiveCallback>:

void WiFiUartReceiveCallback(UART_HandleTypeDef *huart) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a05      	ldr	r2, [pc, #20]	; (8002cb0 <WiFiUartReceiveCallback+0x24>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d104      	bne.n	8002ca8 <WiFiUartReceiveCallback+0x1c>
//		HAL_UART_Transmit(&huart7, (uint8_t*) &wifiRxBuffer, 1, 100);
		HAL_UART_Receive_IT(&huart3, wifiRxBuffer, 1);
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	4904      	ldr	r1, [pc, #16]	; (8002cb4 <WiFiUartReceiveCallback+0x28>)
 8002ca2:	4805      	ldr	r0, [pc, #20]	; (8002cb8 <WiFiUartReceiveCallback+0x2c>)
 8002ca4:	f009 fa61 	bl	800c16a <HAL_UART_Receive_IT>
	}
}
 8002ca8:	bf00      	nop
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	200133d8 	.word	0x200133d8
 8002cb8:	2000e958 	.word	0x2000e958

08002cbc <SetLedStrip>:
	uint16_t blue;
	uint16_t w6500;
	uint16_t w2400;
} LedStrip;

void SetLedStrip(LedStrip led) {
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	1d3b      	adds	r3, r7, #4
 8002cc4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, led.blue);
 8002cc8:	893a      	ldrh	r2, [r7, #8]
 8002cca:	4b0c      	ldr	r3, [pc, #48]	; (8002cfc <SetLedStrip+0x40>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, led.red);
 8002cd0:	88ba      	ldrh	r2, [r7, #4]
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <SetLedStrip+0x44>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, led.w2400);
 8002cd8:	89ba      	ldrh	r2, [r7, #12]
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <SetLedStrip+0x48>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, led.w6500);
 8002ce0:	897a      	ldrh	r2, [r7, #10]
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <SetLedStrip+0x4c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_3, led.green);
 8002ce8:	88fa      	ldrh	r2, [r7, #6]
 8002cea:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <SetLedStrip+0x4c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002cf0:	bf00      	nop
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	2000e76c 	.word	0x2000e76c
 8002d00:	2000e7b4 	.word	0x2000e7b4
 8002d04:	2000e7fc 	.word	0x2000e7fc
 8002d08:	2000e844 	.word	0x2000e844

08002d0c <pwm_update_duty_cycle>:

void pwm_update_duty_cycle(uint8_t red, uint8_t green, uint8_t blue,
		uint8_t white, uint8_t w_white) {
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4604      	mov	r4, r0
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4623      	mov	r3, r4
 8002d1c:	71fb      	strb	r3, [r7, #7]
 8002d1e:	4603      	mov	r3, r0
 8002d20:	71bb      	strb	r3, [r7, #6]
 8002d22:	460b      	mov	r3, r1
 8002d24:	717b      	strb	r3, [r7, #5]
 8002d26:	4613      	mov	r3, r2
 8002d28:	713b      	strb	r3, [r7, #4]
	LedStrip ledstrip;
	ledstrip.red = red;
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	81bb      	strh	r3, [r7, #12]
	ledstrip.green = green;
 8002d30:	79bb      	ldrb	r3, [r7, #6]
 8002d32:	b29b      	uxth	r3, r3
 8002d34:	81fb      	strh	r3, [r7, #14]
	ledstrip.blue = blue;
 8002d36:	797b      	ldrb	r3, [r7, #5]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	823b      	strh	r3, [r7, #16]
	ledstrip.w2400 = white;
 8002d3c:	793b      	ldrb	r3, [r7, #4]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	82bb      	strh	r3, [r7, #20]
	ledstrip.w6500 = w_white;
 8002d42:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	827b      	strh	r3, [r7, #18]
	SetLedStrip(ledstrip);
 8002d4a:	f107 030c 	add.w	r3, r7, #12
 8002d4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002d52:	f7ff ffb3 	bl	8002cbc <SetLedStrip>
}
 8002d56:	bf00      	nop
 8002d58:	371c      	adds	r7, #28
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd90      	pop	{r4, r7, pc}
	...

08002d60 <StartPlayAudioFile>:

void StartPlayAudioFile(char *filename) {
 8002d60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d62:	b08b      	sub	sp, #44	; 0x2c
 8002d64:	af06      	add	r7, sp, #24
 8002d66:	60f8      	str	r0, [r7, #12]
	if (playState == PLAY_STARTED)
 8002d68:	4b60      	ldr	r3, [pc, #384]	; (8002eec <StartPlayAudioFile+0x18c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d101      	bne.n	8002d74 <StartPlayAudioFile+0x14>
		sgtl5000_stop_play();
 8002d70:	f002 fbcc 	bl	800550c <sgtl5000_stop_play>

	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BCD);
 8002d74:	2201      	movs	r2, #1
 8002d76:	495e      	ldr	r1, [pc, #376]	; (8002ef0 <StartPlayAudioFile+0x190>)
 8002d78:	485e      	ldr	r0, [pc, #376]	; (8002ef4 <StartPlayAudioFile+0x194>)
 8002d7a:	f007 f91b 	bl	8009fb4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BCD);
 8002d7e:	2201      	movs	r2, #1
 8002d80:	495d      	ldr	r1, [pc, #372]	; (8002ef8 <StartPlayAudioFile+0x198>)
 8002d82:	485c      	ldr	r0, [pc, #368]	; (8002ef4 <StartPlayAudioFile+0x194>)
 8002d84:	f007 f9f8 	bl	800a178 <HAL_RTC_GetDate>

	/* Mount SDCARD */
	if (f_mount(&fs, "", 0) != FR_OK)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	495c      	ldr	r1, [pc, #368]	; (8002efc <StartPlayAudioFile+0x19c>)
 8002d8c:	485c      	ldr	r0, [pc, #368]	; (8002f00 <StartPlayAudioFile+0x1a0>)
 8002d8e:	f010 ff7b 	bl	8013c88 <f_mount>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <StartPlayAudioFile+0x3c>
		Error_Handler();
 8002d98:	f002 faee 	bl	8005378 <Error_Handler>

	/* Open file to write */
	if (f_open(&fil, "logTXT.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE)
 8002d9c:	2233      	movs	r2, #51	; 0x33
 8002d9e:	4959      	ldr	r1, [pc, #356]	; (8002f04 <StartPlayAudioFile+0x1a4>)
 8002da0:	4859      	ldr	r0, [pc, #356]	; (8002f08 <StartPlayAudioFile+0x1a8>)
 8002da2:	f010 ffd5 	bl	8013d50 <f_open>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <StartPlayAudioFile+0x50>
			!= FR_OK)
		Error_Handler();
 8002dac:	f002 fae4 	bl	8005378 <Error_Handler>

	/* Check freeSpace space */
	if (f_getfree("", &fre_clust, &pfs) != FR_OK)
 8002db0:	4a56      	ldr	r2, [pc, #344]	; (8002f0c <StartPlayAudioFile+0x1ac>)
 8002db2:	4957      	ldr	r1, [pc, #348]	; (8002f10 <StartPlayAudioFile+0x1b0>)
 8002db4:	4851      	ldr	r0, [pc, #324]	; (8002efc <StartPlayAudioFile+0x19c>)
 8002db6:	f012 f912 	bl	8014fde <f_getfree>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d001      	beq.n	8002dc4 <StartPlayAudioFile+0x64>
		Error_Handler();
 8002dc0:	f002 fada 	bl	8005378 <Error_Handler>

	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8002dc4:	4b51      	ldr	r3, [pc, #324]	; (8002f0c <StartPlayAudioFile+0x1ac>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	3b02      	subs	r3, #2
 8002dcc:	4a4f      	ldr	r2, [pc, #316]	; (8002f0c <StartPlayAudioFile+0x1ac>)
 8002dce:	6812      	ldr	r2, [r2, #0]
 8002dd0:	8952      	ldrh	r2, [r2, #10]
 8002dd2:	fb02 f303 	mul.w	r3, r2, r3
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fcde 	bl	8000798 <__aeabi_ui2d>
 8002ddc:	f04f 0200 	mov.w	r2, #0
 8002de0:	4b4c      	ldr	r3, [pc, #304]	; (8002f14 <StartPlayAudioFile+0x1b4>)
 8002de2:	f7fd fa6d 	bl	80002c0 <__aeabi_dmul>
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	f7fd fd4d 	bl	800088c <__aeabi_d2uiz>
 8002df2:	4603      	mov	r3, r0
 8002df4:	4a48      	ldr	r2, [pc, #288]	; (8002f18 <StartPlayAudioFile+0x1b8>)
 8002df6:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8002df8:	4b44      	ldr	r3, [pc, #272]	; (8002f0c <StartPlayAudioFile+0x1ac>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	895b      	ldrh	r3, [r3, #10]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b43      	ldr	r3, [pc, #268]	; (8002f10 <StartPlayAudioFile+0x1b0>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	fb02 f303 	mul.w	r3, r2, r3
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7fd fcc5 	bl	8000798 <__aeabi_ui2d>
 8002e0e:	f04f 0200 	mov.w	r2, #0
 8002e12:	4b40      	ldr	r3, [pc, #256]	; (8002f14 <StartPlayAudioFile+0x1b4>)
 8002e14:	f7fd fa54 	bl	80002c0 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f7fd fd34 	bl	800088c <__aeabi_d2uiz>
 8002e24:	4603      	mov	r3, r0
 8002e26:	4a3d      	ldr	r2, [pc, #244]	; (8002f1c <StartPlayAudioFile+0x1bc>)
 8002e28:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if (freeSpace < 1)
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <StartPlayAudioFile+0x1bc>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <StartPlayAudioFile+0xd6>
		Error_Handler();
 8002e32:	f002 faa1 	bl	8005378 <Error_Handler>

	/* Writing text */

	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
			filename, B2D(rtc_date.Year) + 2000, B2D(rtc_date.Month),
 8002e36:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <StartPlayAudioFile+0x198>)
 8002e38:	78db      	ldrb	r3, [r3, #3]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff feac 	bl	8002b98 <B2D>
 8002e40:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e42:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
			filename, B2D(rtc_date.Year) + 2000, B2D(rtc_date.Month),
 8002e46:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <StartPlayAudioFile+0x198>)
 8002e48:	785b      	ldrb	r3, [r3, #1]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7ff fea4 	bl	8002b98 <B2D>
 8002e50:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e52:	461d      	mov	r5, r3
			B2D(rtc_date.Date), B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 8002e54:	4b28      	ldr	r3, [pc, #160]	; (8002ef8 <StartPlayAudioFile+0x198>)
 8002e56:	789b      	ldrb	r3, [r3, #2]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff fe9d 	bl	8002b98 <B2D>
 8002e5e:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e60:	461e      	mov	r6, r3
			B2D(rtc_date.Date), B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 8002e62:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <StartPlayAudioFile+0x190>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fe96 	bl	8002b98 <B2D>
 8002e6c:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e6e:	60bb      	str	r3, [r7, #8]
			B2D(rtc_date.Date), B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 8002e70:	4b1f      	ldr	r3, [pc, #124]	; (8002ef0 <StartPlayAudioFile+0x190>)
 8002e72:	785b      	ldrb	r3, [r3, #1]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fe8f 	bl	8002b98 <B2D>
 8002e7a:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e7c:	607b      	str	r3, [r7, #4]
			B2D(rtc_time.Seconds));
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <StartPlayAudioFile+0x190>)
 8002e80:	789b      	ldrb	r3, [r3, #2]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7ff fe88 	bl	8002b98 <B2D>
 8002e88:	4603      	mov	r3, r0
	sprintf(strLogBuffer, "Play %s file : %04d-%02d-%02d %02d:%02d:%02d \r\n",
 8002e8a:	9304      	str	r3, [sp, #16]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	9203      	str	r2, [sp, #12]
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	9601      	str	r6, [sp, #4]
 8002e96:	9500      	str	r5, [sp, #0]
 8002e98:	4623      	mov	r3, r4
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	4920      	ldr	r1, [pc, #128]	; (8002f20 <StartPlayAudioFile+0x1c0>)
 8002e9e:	4821      	ldr	r0, [pc, #132]	; (8002f24 <StartPlayAudioFile+0x1c4>)
 8002ea0:	f01b fc6e 	bl	801e780 <siprintf>
	f_puts(strLogBuffer, &fil);
 8002ea4:	4918      	ldr	r1, [pc, #96]	; (8002f08 <StartPlayAudioFile+0x1a8>)
 8002ea6:	481f      	ldr	r0, [pc, #124]	; (8002f24 <StartPlayAudioFile+0x1c4>)
 8002ea8:	f012 fa09 	bl	80152be <f_puts>

	/* Close file */
	if (f_close(&fil) != FR_OK)
 8002eac:	4816      	ldr	r0, [pc, #88]	; (8002f08 <StartPlayAudioFile+0x1a8>)
 8002eae:	f011 fdf9 	bl	8014aa4 <f_close>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <StartPlayAudioFile+0x15c>
		Error_Handler();
 8002eb8:	f002 fa5e 	bl	8005378 <Error_Handler>

	/* Unmount SDCARD */
	if (f_mount(NULL, "", 1) != FR_OK)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	490f      	ldr	r1, [pc, #60]	; (8002efc <StartPlayAudioFile+0x19c>)
 8002ec0:	2000      	movs	r0, #0
 8002ec2:	f010 fee1 	bl	8013c88 <f_mount>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d001      	beq.n	8002ed0 <StartPlayAudioFile+0x170>
		Error_Handler();
 8002ecc:	f002 fa54 	bl	8005378 <Error_Handler>

	sprintf(audioFileName, "%s%s", "0:/", filename);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4a15      	ldr	r2, [pc, #84]	; (8002f28 <StartPlayAudioFile+0x1c8>)
 8002ed4:	4915      	ldr	r1, [pc, #84]	; (8002f2c <StartPlayAudioFile+0x1cc>)
 8002ed6:	4816      	ldr	r0, [pc, #88]	; (8002f30 <StartPlayAudioFile+0x1d0>)
 8002ed8:	f01b fc52 	bl	801e780 <siprintf>
	playState = PLAY_READY;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <StartPlayAudioFile+0x18c>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	701a      	strb	r2, [r3, #0]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eea:	bf00      	nop
 8002eec:	2000e9a8 	.word	0x2000e9a8
 8002ef0:	200133bc 	.word	0x200133bc
 8002ef4:	2000e5e4 	.word	0x2000e5e4
 8002ef8:	200133b8 	.word	0x200133b8
 8002efc:	0801fcec 	.word	0x0801fcec
 8002f00:	2000ea2c 	.word	0x2000ea2c
 8002f04:	0801fcf0 	.word	0x0801fcf0
 8002f08:	2000fa6c 	.word	0x2000fa6c
 8002f0c:	2000fa68 	.word	0x2000fa68
 8002f10:	20010a9c 	.word	0x20010a9c
 8002f14:	3fe00000 	.word	0x3fe00000
 8002f18:	20010aa0 	.word	0x20010aa0
 8002f1c:	20010aa4 	.word	0x20010aa4
 8002f20:	0801fcfc 	.word	0x0801fcfc
 8002f24:	200113b8 	.word	0x200113b8
 8002f28:	0801fd2c 	.word	0x0801fd2c
 8002f2c:	0801fd30 	.word	0x0801fd30
 8002f30:	2000e9ac 	.word	0x2000e9ac

08002f34 <SetPlayState>:

void SetPlayState(PlayState playstate) {
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	71fb      	strb	r3, [r7, #7]
	playState = playstate;
 8002f3e:	4a04      	ldr	r2, [pc, #16]	; (8002f50 <SetPlayState+0x1c>)
 8002f40:	79fb      	ldrb	r3, [r7, #7]
 8002f42:	7013      	strb	r3, [r2, #0]
}
 8002f44:	bf00      	nop
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	2000e9a8 	.word	0x2000e9a8

08002f54 <app_wifi_init>:

static void app_wifi_init(tpfAppWifiCb wifi_cb_func) {
 8002f54:	b5b0      	push	{r4, r5, r7, lr}
 8002f56:	b098      	sub	sp, #96	; 0x60
 8002f58:	af04      	add	r7, sp, #16
 8002f5a:	6078      	str	r0, [r7, #4]
	tstrWifiInitParam param;
	uint32 pinmask = (M2M_PERIPH_PULLUP_DIS_HOST_WAKEUP
 8002f5c:	f240 3301 	movw	r3, #769	; 0x301
 8002f60:	64fb      	str	r3, [r7, #76]	; 0x4c

	sint8 ret;

	uint8 mac_addr[6];
	uint8 u8IsMacAddrValid;
	uint8 deviceName[] = M2M_DEVICE_NAME;
 8002f62:	4b93      	ldr	r3, [pc, #588]	; (80031b0 <app_wifi_init+0x25c>)
 8002f64:	f107 0414 	add.w	r4, r7, #20
 8002f68:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f6a:	c407      	stmia	r4!, {r0, r1, r2}
 8002f6c:	8023      	strh	r3, [r4, #0]
 8002f6e:	3402      	adds	r4, #2
 8002f70:	0c1b      	lsrs	r3, r3, #16
 8002f72:	7023      	strb	r3, [r4, #0]

#ifdef _STATIC_PS_
	nm_bsp_register_wake_isr(wake_cb, PS_SLEEP_TIME_MS);
#endif

	m2m_memset((uint8*) &param, 0, sizeof(param));
 8002f74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f78:	221c      	movs	r2, #28
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f015 ffd5 	bl	8018f2c <m2m_memset>
	param.pfAppWifiCb = wifi_cb_func;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
#ifdef ETH_MODE
	param.strEthInitParam.pfAppEthCb = ethernet_demo_cb;
	param.strEthInitParam.au8ethRcvBuf = gau8ethRcvBuf;
	param.strEthInitParam.u16ethRcvBufSize = sizeof(gau8ethRcvBuf);
#endif
	ret = m2m_ble_wifi_init(&param);
 8002f86:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fdda 	bl	8002b44 <m2m_ble_wifi_init>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	if (M2M_SUCCESS != ret) {
 8002f96:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01b      	beq.n	8002fd6 <app_wifi_init+0x82>
		M2M_ERR("Driver Init Failed <%d>\n", ret);
 8002f9e:	f240 128f 	movw	r2, #399	; 0x18f
 8002fa2:	4984      	ldr	r1, [pc, #528]	; (80031b4 <app_wifi_init+0x260>)
 8002fa4:	4884      	ldr	r0, [pc, #528]	; (80031b8 <app_wifi_init+0x264>)
 8002fa6:	f01b facd 	bl	801e544 <iprintf>
 8002faa:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4882      	ldr	r0, [pc, #520]	; (80031bc <app_wifi_init+0x268>)
 8002fb2:	f01b fac7 	bl	801e544 <iprintf>
 8002fb6:	200d      	movs	r0, #13
 8002fb8:	f01b fadc 	bl	801e574 <putchar>
		M2M_ERR("Resetting\n");
 8002fbc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002fc0:	497c      	ldr	r1, [pc, #496]	; (80031b4 <app_wifi_init+0x260>)
 8002fc2:	487d      	ldr	r0, [pc, #500]	; (80031b8 <app_wifi_init+0x264>)
 8002fc4:	f01b fabe 	bl	801e544 <iprintf>
 8002fc8:	487d      	ldr	r0, [pc, #500]	; (80031c0 <app_wifi_init+0x26c>)
 8002fca:	f01b fb57 	bl	801e67c <puts>
 8002fce:	200d      	movs	r0, #13
 8002fd0:	f01b fad0 	bl	801e574 <putchar>
		// Catastrophe - problem with booting. Nothing but to try and reset
		//system_reset(); //ToDo TF

		while (1) {
 8002fd4:	e7fe      	b.n	8002fd4 <app_wifi_init+0x80>
		}
	}

	m2m_periph_pullup_ctrl(pinmask, 0);
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002fda:	f016 ff6d 	bl	8019eb8 <m2m_periph_pullup_ctrl>

	m2m_wifi_get_otp_mac_address(mac_addr, &u8IsMacAddrValid);
 8002fde:	f107 0223 	add.w	r2, r7, #35	; 0x23
 8002fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f017 fe3d 	bl	801ac68 <m2m_wifi_get_otp_mac_address>
	if (!u8IsMacAddrValid) {
 8002fee:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d116      	bne.n	8003024 <app_wifi_init+0xd0>
		uint8 DEFAULT_MAC[] = MAC_ADDRESS;
 8002ff6:	4a73      	ldr	r2, [pc, #460]	; (80031c4 <app_wifi_init+0x270>)
 8002ff8:	f107 030c 	add.w	r3, r7, #12
 8002ffc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003000:	6018      	str	r0, [r3, #0]
 8003002:	3304      	adds	r3, #4
 8003004:	8019      	strh	r1, [r3, #0]
		M2M_INFO("Default MAC\n");
 8003006:	4870      	ldr	r0, [pc, #448]	; (80031c8 <app_wifi_init+0x274>)
 8003008:	f01b fa9c 	bl	801e544 <iprintf>
 800300c:	486f      	ldr	r0, [pc, #444]	; (80031cc <app_wifi_init+0x278>)
 800300e:	f01b fb35 	bl	801e67c <puts>
 8003012:	200d      	movs	r0, #13
 8003014:	f01b faae 	bl	801e574 <putchar>
		m2m_wifi_set_mac_address(DEFAULT_MAC);
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	4618      	mov	r0, r3
 800301e:	f017 fe06 	bl	801ac2e <m2m_wifi_set_mac_address>
 8003022:	e008      	b.n	8003036 <app_wifi_init+0xe2>
	} else {
		M2M_INFO("OTP MAC\n");
 8003024:	4868      	ldr	r0, [pc, #416]	; (80031c8 <app_wifi_init+0x274>)
 8003026:	f01b fa8d 	bl	801e544 <iprintf>
 800302a:	4869      	ldr	r0, [pc, #420]	; (80031d0 <app_wifi_init+0x27c>)
 800302c:	f01b fb26 	bl	801e67c <puts>
 8003030:	200d      	movs	r0, #13
 8003032:	f01b fa9f 	bl	801e574 <putchar>
	}
	m2m_wifi_get_mac_address(mac_addr);
 8003036:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800303a:	4618      	mov	r0, r3
 800303c:	f017 fe31 	bl	801aca2 <m2m_wifi_get_mac_address>
	M2M_INFO("MAC Address: %02X:%02X:%02X:%02X:%02X:%02X\n", mac_addr[0],
 8003040:	4861      	ldr	r0, [pc, #388]	; (80031c8 <app_wifi_init+0x274>)
 8003042:	f01b fa7f 	bl	801e544 <iprintf>
 8003046:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800304a:	4618      	mov	r0, r3
 800304c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003050:	461c      	mov	r4, r3
 8003052:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003056:	461d      	mov	r5, r3
 8003058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800305c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003060:	f897 1029 	ldrb.w	r1, [r7, #41]	; 0x29
 8003064:	9102      	str	r1, [sp, #8]
 8003066:	9201      	str	r2, [sp, #4]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	462b      	mov	r3, r5
 800306c:	4622      	mov	r2, r4
 800306e:	4601      	mov	r1, r0
 8003070:	4858      	ldr	r0, [pc, #352]	; (80031d4 <app_wifi_init+0x280>)
 8003072:	f01b fa67 	bl	801e544 <iprintf>
 8003076:	200d      	movs	r0, #13
 8003078:	f01b fa7c 	bl	801e574 <putchar>
	/* Name must be in the format WINC3400_00:00 */
	{
#define HEX2ASCII(x) (((x)>=10)? (((x)-10)+'A') : ((x)+'0'))

		uint16 len;
		len = m2m_strlen(deviceName);
 800307c:	f107 0314 	add.w	r3, r7, #20
 8003080:	4618      	mov	r0, r3
 8003082:	f015 ff70 	bl	8018f66 <m2m_strlen>
 8003086:	4603      	mov	r3, r0
 8003088:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
		if (len >= 5) {
 800308c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003090:	2b04      	cmp	r3, #4
 8003092:	d96f      	bls.n	8003174 <app_wifi_init+0x220>
			deviceName[len - 1] = HEX2ASCII((mac_addr[5] >> 0) & 0x0f);
 8003094:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003098:	f003 030f 	and.w	r3, r3, #15
 800309c:	2b09      	cmp	r3, #9
 800309e:	dd07      	ble.n	80030b0 <app_wifi_init+0x15c>
 80030a0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	3337      	adds	r3, #55	; 0x37
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	e006      	b.n	80030be <app_wifi_init+0x16a>
 80030b0:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	3330      	adds	r3, #48	; 0x30
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030c2:	3a01      	subs	r2, #1
 80030c4:	3250      	adds	r2, #80	; 0x50
 80030c6:	443a      	add	r2, r7
 80030c8:	f802 3c3c 	strb.w	r3, [r2, #-60]
			deviceName[len - 2] = HEX2ASCII((mac_addr[5] >> 4) & 0x0f);
 80030cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030d0:	091b      	lsrs	r3, r3, #4
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	f003 030f 	and.w	r3, r3, #15
 80030d8:	2b09      	cmp	r3, #9
 80030da:	dd06      	ble.n	80030ea <app_wifi_init+0x196>
 80030dc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030e0:	091b      	lsrs	r3, r3, #4
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	3337      	adds	r3, #55	; 0x37
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	e005      	b.n	80030f6 <app_wifi_init+0x1a2>
 80030ea:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80030ee:	091b      	lsrs	r3, r3, #4
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	3330      	adds	r3, #48	; 0x30
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80030fa:	3a02      	subs	r2, #2
 80030fc:	3250      	adds	r2, #80	; 0x50
 80030fe:	443a      	add	r2, r7
 8003100:	f802 3c3c 	strb.w	r3, [r2, #-60]
			deviceName[len - 4] = HEX2ASCII((mac_addr[4] >> 0) & 0x0f);
 8003104:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003108:	f003 030f 	and.w	r3, r3, #15
 800310c:	2b09      	cmp	r3, #9
 800310e:	dd07      	ble.n	8003120 <app_wifi_init+0x1cc>
 8003110:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003114:	f003 030f 	and.w	r3, r3, #15
 8003118:	b2db      	uxtb	r3, r3
 800311a:	3337      	adds	r3, #55	; 0x37
 800311c:	b2db      	uxtb	r3, r3
 800311e:	e006      	b.n	800312e <app_wifi_init+0x1da>
 8003120:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	b2db      	uxtb	r3, r3
 800312a:	3330      	adds	r3, #48	; 0x30
 800312c:	b2db      	uxtb	r3, r3
 800312e:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003132:	3a04      	subs	r2, #4
 8003134:	3250      	adds	r2, #80	; 0x50
 8003136:	443a      	add	r2, r7
 8003138:	f802 3c3c 	strb.w	r3, [r2, #-60]
			deviceName[len - 5] = HEX2ASCII((mac_addr[4] >> 4) & 0x0f);
 800313c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003140:	091b      	lsrs	r3, r3, #4
 8003142:	b2db      	uxtb	r3, r3
 8003144:	f003 030f 	and.w	r3, r3, #15
 8003148:	2b09      	cmp	r3, #9
 800314a:	dd06      	ble.n	800315a <app_wifi_init+0x206>
 800314c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	b2db      	uxtb	r3, r3
 8003154:	3337      	adds	r3, #55	; 0x37
 8003156:	b2db      	uxtb	r3, r3
 8003158:	e005      	b.n	8003166 <app_wifi_init+0x212>
 800315a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800315e:	091b      	lsrs	r3, r3, #4
 8003160:	b2db      	uxtb	r3, r3
 8003162:	3330      	adds	r3, #48	; 0x30
 8003164:	b2db      	uxtb	r3, r3
 8003166:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800316a:	3a05      	subs	r2, #5
 800316c:	3250      	adds	r2, #80	; 0x50
 800316e:	443a      	add	r2, r7
 8003170:	f802 3c3c 	strb.w	r3, [r2, #-60]
		}
	}
	m2m_wifi_set_device_name((uint8*) deviceName,
			(uint8) m2m_strlen((uint8*) deviceName));
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4618      	mov	r0, r3
 800317a:	f015 fef4 	bl	8018f66 <m2m_strlen>
 800317e:	4603      	mov	r3, r0
	m2m_wifi_set_device_name((uint8*) deviceName,
 8003180:	b2da      	uxtb	r2, r3
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4611      	mov	r1, r2
 8003188:	4618      	mov	r0, r3
 800318a:	f017 fe05 	bl	801ad98 <m2m_wifi_set_device_name>
	}
#elif (defined _STATIC_PS_)
	M2M_INFO("M2M_PS_MANUAL\r\n");
	m2m_wifi_set_sleep_mode(M2M_PS_MANUAL, 1);
#else
	M2M_INFO("M2M_NO_PS\r\n");
 800318e:	480e      	ldr	r0, [pc, #56]	; (80031c8 <app_wifi_init+0x274>)
 8003190:	f01b f9d8 	bl	801e544 <iprintf>
 8003194:	4810      	ldr	r0, [pc, #64]	; (80031d8 <app_wifi_init+0x284>)
 8003196:	f01b fa71 	bl	801e67c <puts>
 800319a:	200d      	movs	r0, #13
 800319c:	f01b f9ea 	bl	801e574 <putchar>
	m2m_wifi_set_sleep_mode(M2M_NO_PS, 1);
 80031a0:	2101      	movs	r1, #1
 80031a2:	2000      	movs	r0, #0
 80031a4:	f017 fdc2 	bl	801ad2c <m2m_wifi_set_sleep_mode>
#endif
}
 80031a8:	bf00      	nop
 80031aa:	3750      	adds	r7, #80	; 0x50
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bdb0      	pop	{r4, r5, r7, pc}
 80031b0:	0801fdcc 	.word	0x0801fdcc
 80031b4:	08025864 	.word	0x08025864
 80031b8:	0801fd38 	.word	0x0801fd38
 80031bc:	0801fd4c 	.word	0x0801fd4c
 80031c0:	0801fd68 	.word	0x0801fd68
 80031c4:	0801fddc 	.word	0x0801fddc
 80031c8:	0801fd74 	.word	0x0801fd74
 80031cc:	0801fd80 	.word	0x0801fd80
 80031d0:	0801fd8c 	.word	0x0801fd8c
 80031d4:	0801fd94 	.word	0x0801fd94
 80031d8:	0801fdc0 	.word	0x0801fdc0

080031dc <app_wifi_handle_event>:
 *  - [M2M_WIFI_REQ_DHCP_CONF](@ref M2M_WIFI_REQ_DHCP_CONF)
 * \param[in] pvMsg A pointer to a buffer containing the notification parameters
 * (if any). It should be casted to the correct data type corresponding to the
 * notification type.
 */
static void app_wifi_handle_event(uint8 u8MsgType, void *pvMsg) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b094      	sub	sp, #80	; 0x50
 80031e0:	af02      	add	r7, sp, #8
 80031e2:	4603      	mov	r3, r0
 80031e4:	6039      	str	r1, [r7, #0]
 80031e6:	71fb      	strb	r3, [r7, #7]
	if (u8MsgType == M2M_WIFI_RESP_CON_STATE_CHANGED) {
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	2b2c      	cmp	r3, #44	; 0x2c
 80031ec:	d143      	bne.n	8003276 <app_wifi_handle_event+0x9a>
		tstrM2mWifiStateChanged *pstrWifiState =
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	627b      	str	r3, [r7, #36]	; 0x24
				(tstrM2mWifiStateChanged*) pvMsg;

		M2M_INFO("Wifi State :: %s ::\r\n",
 80031f2:	48a5      	ldr	r0, [pc, #660]	; (8003488 <app_wifi_handle_event+0x2ac>)
 80031f4:	f01b f9a6 	bl	801e544 <iprintf>
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <app_wifi_handle_event+0x28>
 8003200:	4ba2      	ldr	r3, [pc, #648]	; (800348c <app_wifi_handle_event+0x2b0>)
 8003202:	e000      	b.n	8003206 <app_wifi_handle_event+0x2a>
 8003204:	4ba2      	ldr	r3, [pc, #648]	; (8003490 <app_wifi_handle_event+0x2b4>)
 8003206:	4619      	mov	r1, r3
 8003208:	48a2      	ldr	r0, [pc, #648]	; (8003494 <app_wifi_handle_event+0x2b8>)
 800320a:	f01b f99b 	bl	801e544 <iprintf>
 800320e:	200d      	movs	r0, #13
 8003210:	f01b f9b0 	bl	801e574 <putchar>
				pstrWifiState->u8CurrState ? "CONNECTED" : "DISCONNECTED");

		if (pstrWifiState->u8CurrState == M2M_WIFI_DISCONNECTED) {
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d117      	bne.n	800324c <app_wifi_handle_event+0x70>
			gu8WiFiConnectionState = M2M_WIFI_DISCONNECTED;
 800321c:	4b9e      	ldr	r3, [pc, #632]	; (8003498 <app_wifi_handle_event+0x2bc>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
			gbConnectedWifi = false;
 8003222:	4b9e      	ldr	r3, [pc, #632]	; (800349c <app_wifi_handle_event+0x2c0>)
 8003224:	2200      	movs	r2, #0
 8003226:	701a      	strb	r2, [r3, #0]
			gbHostIpByName = false;
 8003228:	4b9d      	ldr	r3, [pc, #628]	; (80034a0 <app_wifi_handle_event+0x2c4>)
 800322a:	2200      	movs	r2, #0
 800322c:	701a      	strb	r2, [r3, #0]
			pwm_update_duty_cycle(255,255,255,0,0);
 800322e:	2300      	movs	r3, #0
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	22ff      	movs	r2, #255	; 0xff
 8003236:	21ff      	movs	r1, #255	; 0xff
 8003238:	20ff      	movs	r0, #255	; 0xff
 800323a:	f7ff fd67 	bl	8002d0c <pwm_update_duty_cycle>
			HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_RESET);
 800323e:	2200      	movs	r2, #0
 8003240:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003244:	4897      	ldr	r0, [pc, #604]	; (80034a4 <app_wifi_handle_event+0x2c8>)
 8003246:	f004 f899 	bl	800737c <HAL_GPIO_WritePin>

		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
			Error_Handler();
		}
	}
}
 800324a:	e118      	b.n	800347e <app_wifi_handle_event+0x2a2>
            pwm_update_duty_cycle(0,0,0,0,0);
 800324c:	2300      	movs	r3, #0
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	2300      	movs	r3, #0
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	2000      	movs	r0, #0
 8003258:	f7ff fd58 	bl	8002d0c <pwm_update_duty_cycle>
    		osDelay(500);
 800325c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003260:	f012 fadc 	bl	801581c <osDelay>
            pwm_update_duty_cycle(255,255,255,0,0);
 8003264:	2300      	movs	r3, #0
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	2300      	movs	r3, #0
 800326a:	22ff      	movs	r2, #255	; 0xff
 800326c:	21ff      	movs	r1, #255	; 0xff
 800326e:	20ff      	movs	r0, #255	; 0xff
 8003270:	f7ff fd4c 	bl	8002d0c <pwm_update_duty_cycle>
}
 8003274:	e103      	b.n	800347e <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_REQ_DHCP_CONF) {
 8003276:	79fb      	ldrb	r3, [r7, #7]
 8003278:	2b32      	cmp	r3, #50	; 0x32
 800327a:	d126      	bne.n	80032ca <app_wifi_handle_event+0xee>
		tstrM2MIPConfig *pstrM2MIpConfig = (tstrM2MIPConfig*) pvMsg;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint8 *pu8IPAddress = (uint8*) &pstrM2MIpConfig->u32StaticIP;
 8003280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003282:	62bb      	str	r3, [r7, #40]	; 0x28
		M2M_INFO("DHCP IP Address :: %u.%u.%u.%u ::\n", pu8IPAddress[0],
 8003284:	4880      	ldr	r0, [pc, #512]	; (8003488 <app_wifi_handle_event+0x2ac>)
 8003286:	f01b f95d 	bl	801e544 <iprintf>
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003292:	3301      	adds	r3, #1
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	461a      	mov	r2, r3
 8003298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329a:	3302      	adds	r3, #2
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	4618      	mov	r0, r3
 80032a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a2:	3303      	adds	r3, #3
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	4603      	mov	r3, r0
 80032aa:	487f      	ldr	r0, [pc, #508]	; (80034a8 <app_wifi_handle_event+0x2cc>)
 80032ac:	f01b f94a 	bl	801e544 <iprintf>
 80032b0:	200d      	movs	r0, #13
 80032b2:	f01b f95f 	bl	801e574 <putchar>
		gu8WiFiConnectionState = M2M_WIFI_CONNECTED;
 80032b6:	4b78      	ldr	r3, [pc, #480]	; (8003498 <app_wifi_handle_event+0x2bc>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	701a      	strb	r2, [r3, #0]
		gbConnectedWifi = true;
 80032bc:	4b77      	ldr	r3, [pc, #476]	; (800349c <app_wifi_handle_event+0x2c0>)
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
		gethostbyname((uint8_t*) MAIN_GMAIL_HOST_NAME);
 80032c2:	487a      	ldr	r0, [pc, #488]	; (80034ac <app_wifi_handle_event+0x2d0>)
 80032c4:	f01a fbea 	bl	801da9c <gethostbyname>
}
 80032c8:	e0d9      	b.n	800347e <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_SCAN_DONE) {
 80032ca:	79fb      	ldrb	r3, [r7, #7]
 80032cc:	2b13      	cmp	r3, #19
 80032ce:	d11b      	bne.n	8003308 <app_wifi_handle_event+0x12c>
		tstrM2mScanDone *pstrInfo = (tstrM2mScanDone*) pvMsg;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	633b      	str	r3, [r7, #48]	; 0x30
		if (gu8WiFiConnectionState != M2M_WIFI_CONNECTED) {
 80032d4:	4b70      	ldr	r3, [pc, #448]	; (8003498 <app_wifi_handle_event+0x2bc>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	f000 80cf 	beq.w	800347e <app_wifi_handle_event+0x2a2>
			gu8ScanIndex = 0;
 80032e0:	4b73      	ldr	r3, [pc, #460]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	701a      	strb	r2, [r3, #0]
			if (pstrInfo->u8NumofCh >= 1) {
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 80c7 	beq.w	800347e <app_wifi_handle_event+0x2a2>
				m2m_wifi_req_scan_result(gu8ScanIndex);
 80032f0:	4b6f      	ldr	r3, [pc, #444]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f017 fcef 	bl	801acd8 <m2m_wifi_req_scan_result>
				gu8ScanIndex++;
 80032fa:	4b6d      	ldr	r3, [pc, #436]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	b2da      	uxtb	r2, r3
 8003302:	4b6b      	ldr	r3, [pc, #428]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 8003304:	701a      	strb	r2, [r3, #0]
}
 8003306:	e0ba      	b.n	800347e <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_SCAN_RESULT) {
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b15      	cmp	r3, #21
 800330c:	d129      	bne.n	8003362 <app_wifi_handle_event+0x186>
		uint8 u8NumFoundAPs = m2m_wifi_get_num_ap_found();
 800330e:	f017 fd01 	bl	801ad14 <m2m_wifi_get_num_ap_found>
 8003312:	4603      	mov	r3, r0
 8003314:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if (gu8WiFiConnectionState != M2M_WIFI_CONNECTED) {
 8003318:	4b5f      	ldr	r3, [pc, #380]	; (8003498 <app_wifi_handle_event+0x2bc>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b2db      	uxtb	r3, r3
 800331e:	2b01      	cmp	r3, #1
 8003320:	f000 80ad 	beq.w	800347e <app_wifi_handle_event+0x2a2>
			tstrM2mWifiscanResult *pstrScanResult =
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
			ble_prov_scan_result(pstrScanResult, u8NumFoundAPs - gu8ScanIndex);
 8003328:	4b61      	ldr	r3, [pc, #388]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	b2db      	uxtb	r3, r3
 8003334:	4619      	mov	r1, r3
 8003336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003338:	f015 fc70 	bl	8018c1c <ble_prov_scan_result>
			if (gu8ScanIndex < u8NumFoundAPs) {
 800333c:	4b5c      	ldr	r3, [pc, #368]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003344:	429a      	cmp	r2, r3
 8003346:	f240 809a 	bls.w	800347e <app_wifi_handle_event+0x2a2>
				m2m_wifi_req_scan_result(gu8ScanIndex);
 800334a:	4b59      	ldr	r3, [pc, #356]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 800334c:	781b      	ldrb	r3, [r3, #0]
 800334e:	4618      	mov	r0, r3
 8003350:	f017 fcc2 	bl	801acd8 <m2m_wifi_req_scan_result>
				gu8ScanIndex++;
 8003354:	4b56      	ldr	r3, [pc, #344]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	3301      	adds	r3, #1
 800335a:	b2da      	uxtb	r2, r3
 800335c:	4b54      	ldr	r3, [pc, #336]	; (80034b0 <app_wifi_handle_event+0x2d4>)
 800335e:	701a      	strb	r2, [r3, #0]
}
 8003360:	e08d      	b.n	800347e <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_CURRENT_RSSI) {
 8003362:	79fb      	ldrb	r3, [r7, #7]
 8003364:	2b04      	cmp	r3, #4
 8003366:	d10f      	bne.n	8003388 <app_wifi_handle_event+0x1ac>
		sint8 *rssi = (sint8*) pvMsg;
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	63fb      	str	r3, [r7, #60]	; 0x3c
		M2M_INFO("rssi %d\n", *rssi);
 800336c:	4846      	ldr	r0, [pc, #280]	; (8003488 <app_wifi_handle_event+0x2ac>)
 800336e:	f01b f8e9 	bl	801e544 <iprintf>
 8003372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003374:	f993 3000 	ldrsb.w	r3, [r3]
 8003378:	4619      	mov	r1, r3
 800337a:	484e      	ldr	r0, [pc, #312]	; (80034b4 <app_wifi_handle_event+0x2d8>)
 800337c:	f01b f8e2 	bl	801e544 <iprintf>
 8003380:	200d      	movs	r0, #13
 8003382:	f01b f8f7 	bl	801e574 <putchar>
}
 8003386:	e07a      	b.n	800347e <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_SET_GAIN_TABLE) {
 8003388:	79fb      	ldrb	r3, [r7, #7]
 800338a:	2b24      	cmp	r3, #36	; 0x24
 800338c:	d112      	bne.n	80033b4 <app_wifi_handle_event+0x1d8>
		tstrM2MGainTableRsp *pstrRsp = (tstrM2MGainTableRsp*) pvMsg;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	643b      	str	r3, [r7, #64]	; 0x40
		M2M_ERR("Gain Table Load Fail %d\n", pstrRsp->s8ErrorCode);
 8003392:	f240 2211 	movw	r2, #529	; 0x211
 8003396:	4948      	ldr	r1, [pc, #288]	; (80034b8 <app_wifi_handle_event+0x2dc>)
 8003398:	4848      	ldr	r0, [pc, #288]	; (80034bc <app_wifi_handle_event+0x2e0>)
 800339a:	f01b f8d3 	bl	801e544 <iprintf>
 800339e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a0:	f993 3000 	ldrsb.w	r3, [r3]
 80033a4:	4619      	mov	r1, r3
 80033a6:	4846      	ldr	r0, [pc, #280]	; (80034c0 <app_wifi_handle_event+0x2e4>)
 80033a8:	f01b f8cc 	bl	801e544 <iprintf>
 80033ac:	200d      	movs	r0, #13
 80033ae:	f01b f8e1 	bl	801e574 <putchar>
}
 80033b2:	e064      	b.n	800347e <app_wifi_handle_event+0x2a2>
	} else if (u8MsgType == M2M_WIFI_RESP_GET_SYS_TIME) {
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	2b1d      	cmp	r3, #29
 80033b8:	d161      	bne.n	800347e <app_wifi_handle_event+0x2a2>
		tstrSystemTime *strSysTime_now = (tstrSystemTime*) pvMsg;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
				strSysTime_now->u8Hour, /* hour (86400 equals secs per day) */
 80033be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c0:	791b      	ldrb	r3, [r3, #4]
		printf("socket_cb: The GMT time is %u:%02u:%02u\r\n",
 80033c2:	4619      	mov	r1, r3
				strSysTime_now->u8Minute, /* minute (3600 equals secs per minute) */
 80033c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033c6:	795b      	ldrb	r3, [r3, #5]
		printf("socket_cb: The GMT time is %u:%02u:%02u\r\n",
 80033c8:	461a      	mov	r2, r3
				strSysTime_now->u8Second); /* second */
 80033ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033cc:	799b      	ldrb	r3, [r3, #6]
		printf("socket_cb: The GMT time is %u:%02u:%02u\r\n",
 80033ce:	483d      	ldr	r0, [pc, #244]	; (80034c4 <app_wifi_handle_event+0x2e8>)
 80033d0:	f01b f8b8 	bl	801e544 <iprintf>
		RTC_TimeTypeDef sTime = { 0 };
 80033d4:	f107 0310 	add.w	r3, r7, #16
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	60da      	str	r2, [r3, #12]
 80033e2:	611a      	str	r2, [r3, #16]
		RTC_DateTypeDef sDate = { 0 };
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
		sTime.Hours = D2B(strSysTime_now->u8Hour);
 80033e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033ea:	791b      	ldrb	r3, [r3, #4]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fbef 	bl	8002bd0 <D2B>
 80033f2:	4603      	mov	r3, r0
 80033f4:	743b      	strb	r3, [r7, #16]
		sTime.Minutes = D2B(strSysTime_now->u8Minute);
 80033f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f8:	795b      	ldrb	r3, [r3, #5]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff fbe8 	bl	8002bd0 <D2B>
 8003400:	4603      	mov	r3, r0
 8003402:	747b      	strb	r3, [r7, #17]
		sTime.Seconds = D2B(strSysTime_now->u8Second);
 8003404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003406:	799b      	ldrb	r3, [r3, #6]
 8003408:	4618      	mov	r0, r3
 800340a:	f7ff fbe1 	bl	8002bd0 <D2B>
 800340e:	4603      	mov	r3, r0
 8003410:	74bb      	strb	r3, [r7, #18]
		sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003412:	2300      	movs	r3, #0
 8003414:	61fb      	str	r3, [r7, #28]
		sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003416:	2300      	movs	r3, #0
 8003418:	623b      	str	r3, [r7, #32]
		if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 800341a:	f107 0310 	add.w	r3, r7, #16
 800341e:	2201      	movs	r2, #1
 8003420:	4619      	mov	r1, r3
 8003422:	4829      	ldr	r0, [pc, #164]	; (80034c8 <app_wifi_handle_event+0x2ec>)
 8003424:	f006 fd2c 	bl	8009e80 <HAL_RTC_SetTime>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <app_wifi_handle_event+0x256>
			Error_Handler();
 800342e:	f001 ffa3 	bl	8005378 <Error_Handler>
		sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 8003432:	2304      	movs	r3, #4
 8003434:	733b      	strb	r3, [r7, #12]
		sDate.Month = D2B(strSysTime_now->u8Month);
 8003436:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003438:	789b      	ldrb	r3, [r3, #2]
 800343a:	4618      	mov	r0, r3
 800343c:	f7ff fbc8 	bl	8002bd0 <D2B>
 8003440:	4603      	mov	r3, r0
 8003442:	737b      	strb	r3, [r7, #13]
		sDate.Date = D2B(strSysTime_now->u8Day);
 8003444:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003446:	78db      	ldrb	r3, [r3, #3]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fbc1 	bl	8002bd0 <D2B>
 800344e:	4603      	mov	r3, r0
 8003450:	73bb      	strb	r3, [r7, #14]
		sDate.Year = D2B(strSysTime_now->u16Year - 2000);
 8003452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	b2db      	uxtb	r3, r3
 8003458:	3330      	adds	r3, #48	; 0x30
 800345a:	b2db      	uxtb	r3, r3
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff fbb7 	bl	8002bd0 <D2B>
 8003462:	4603      	mov	r3, r0
 8003464:	73fb      	strb	r3, [r7, #15]
		if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8003466:	f107 030c 	add.w	r3, r7, #12
 800346a:	2201      	movs	r2, #1
 800346c:	4619      	mov	r1, r3
 800346e:	4816      	ldr	r0, [pc, #88]	; (80034c8 <app_wifi_handle_event+0x2ec>)
 8003470:	f006 fdfe 	bl	800a070 <HAL_RTC_SetDate>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <app_wifi_handle_event+0x2a2>
			Error_Handler();
 800347a:	f001 ff7d 	bl	8005378 <Error_Handler>
}
 800347e:	bf00      	nop
 8003480:	3748      	adds	r7, #72	; 0x48
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	0801fd74 	.word	0x0801fd74
 800348c:	0801fde4 	.word	0x0801fde4
 8003490:	0801fdf0 	.word	0x0801fdf0
 8003494:	0801fe00 	.word	0x0801fe00
 8003498:	20000005 	.word	0x20000005
 800349c:	200113b5 	.word	0x200113b5
 80034a0:	200113b6 	.word	0x200113b6
 80034a4:	40020000 	.word	0x40020000
 80034a8:	0801fe18 	.word	0x0801fe18
 80034ac:	0801fe3c 	.word	0x0801fe3c
 80034b0:	20010aa8 	.word	0x20010aa8
 80034b4:	0801fe4c 	.word	0x0801fe4c
 80034b8:	08025874 	.word	0x08025874
 80034bc:	0801fd38 	.word	0x0801fd38
 80034c0:	0801fe58 	.word	0x0801fe58
 80034c4:	0801fe74 	.word	0x0801fe74
 80034c8:	2000e5e4 	.word	0x2000e5e4

080034cc <smtpConnect>:
 *
 * \param[in] None.
 *
 * \return SOCK_ERR_NO_ERROR if success, -1 if socket create error, SOCK_ERR_INVALID if socket connect error.
 */
static int8_t smtpConnect(void) {
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
	struct sockaddr_in addr_in;

	addr_in.sin_family = AF_INET;
 80034d2:	2302      	movs	r3, #2
 80034d4:	803b      	strh	r3, [r7, #0]
	addr_in.sin_port = _htons(MAIN_GMAIL_HOST_PORT);
 80034d6:	f24d 1301 	movw	r3, #53505	; 0xd101
 80034da:	807b      	strh	r3, [r7, #2]
	addr_in.sin_addr.s_addr = gu32HostIp;
 80034dc:	4b1c      	ldr	r3, [pc, #112]	; (8003550 <smtpConnect+0x84>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	607b      	str	r3, [r7, #4]

	/* Create secure socket */
	if (tcp_client_socket < 0) {
 80034e2:	4b1c      	ldr	r3, [pc, #112]	; (8003554 <smtpConnect+0x88>)
 80034e4:	f993 3000 	ldrsb.w	r3, [r3]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	da08      	bge.n	80034fe <smtpConnect+0x32>
		tcp_client_socket = socket(AF_INET, SOCK_STREAM, SOCKET_FLAGS_SSL);
 80034ec:	2201      	movs	r2, #1
 80034ee:	2101      	movs	r1, #1
 80034f0:	2002      	movs	r0, #2
 80034f2:	f01a f80f 	bl	801d514 <socket>
 80034f6:	4603      	mov	r3, r0
 80034f8:	461a      	mov	r2, r3
 80034fa:	4b16      	ldr	r3, [pc, #88]	; (8003554 <smtpConnect+0x88>)
 80034fc:	701a      	strb	r2, [r3, #0]
	}

	/* Check if socket was created successfully */
	if (tcp_client_socket == -1) {
 80034fe:	4b15      	ldr	r3, [pc, #84]	; (8003554 <smtpConnect+0x88>)
 8003500:	f993 3000 	ldrsb.w	r3, [r3]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d10b      	bne.n	8003522 <smtpConnect+0x56>
		printf("socket error.\r\n");
 800350a:	4813      	ldr	r0, [pc, #76]	; (8003558 <smtpConnect+0x8c>)
 800350c:	f01b f8b6 	bl	801e67c <puts>
		close(tcp_client_socket);
 8003510:	4b10      	ldr	r3, [pc, #64]	; (8003554 <smtpConnect+0x88>)
 8003512:	f993 3000 	ldrsb.w	r3, [r3]
 8003516:	4618      	mov	r0, r3
 8003518:	f01a fa50 	bl	801d9bc <close>
		return -1;
 800351c:	f04f 33ff 	mov.w	r3, #4294967295
 8003520:	e011      	b.n	8003546 <smtpConnect+0x7a>
	}

	/* If success, connect to socket */
	if (connect(tcp_client_socket, (struct sockaddr*) &addr_in,
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <smtpConnect+0x88>)
 8003524:	f993 3000 	ldrsb.w	r3, [r3]
 8003528:	4639      	mov	r1, r7
 800352a:	2210      	movs	r2, #16
 800352c:	4618      	mov	r0, r3
 800352e:	f01a f8e1 	bl	801d6f4 <connect>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <smtpConnect+0x78>
			sizeof(struct sockaddr_in)) != SOCK_ERR_NO_ERROR) {
		printf("connect error.\r\n");
 8003538:	4808      	ldr	r0, [pc, #32]	; (800355c <smtpConnect+0x90>)
 800353a:	f01b f89f 	bl	801e67c <puts>
		return SOCK_ERR_INVALID;
 800353e:	f06f 0308 	mvn.w	r3, #8
 8003542:	e000      	b.n	8003546 <smtpConnect+0x7a>
	}

	/* Success */
	return SOCK_ERR_NO_ERROR;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	20010aac 	.word	0x20010aac
 8003554:	20000007 	.word	0x20000007
 8003558:	0801ff2c 	.word	0x0801ff2c
 800355c:	0801ff3c 	.word	0x0801ff3c

08003560 <generateBase64Key>:
 * \param[in] input is the string to be converted to base64.
 * \param[in] basekey1 is the base64 converted output.
 *
 * \return None.
 */
static void generateBase64Key(char *input, char *basekey) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b0a4      	sub	sp, #144	; 0x90
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
	/* In case the input string needs to be modified before conversion, define */
	/*  new string to pass-through Use InputStr and *pIn */
	int16_t InputLen = strlen(input);
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f7fc fe4a 	bl	8000204 <strlen>
 8003570:	4603      	mov	r3, r0
 8003572:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	char InputStr[128];
	char *pIn = (char*) InputStr;
 8003576:	f107 0308 	add.w	r3, r7, #8
 800357a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	/* Generate Base64 string, right now is only the function input parameter */
	memcpy(pIn, input, InputLen);
 800357e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003582:	461a      	mov	r2, r3
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800358a:	f01a fecb 	bl	801e324 <memcpy>
	pIn += InputLen;
 800358e:	f9b7 308e 	ldrsh.w	r3, [r7, #142]	; 0x8e
 8003592:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003596:	4413      	add	r3, r2
 8003598:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

	/* to64frombits function */
	ConvertToBase64(basekey, (void*) InputStr, InputLen);
 800359c:	f9b7 208e 	ldrsh.w	r2, [r7, #142]	; 0x8e
 80035a0:	f107 0308 	add.w	r3, r7, #8
 80035a4:	4619      	mov	r1, r3
 80035a6:	6838      	ldr	r0, [r7, #0]
 80035a8:	f7fd ff98 	bl	80014dc <ConvertToBase64>
}
 80035ac:	bf00      	nop
 80035ae:	3790      	adds	r7, #144	; 0x90
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <smtpSendRecv>:
 * \param[in] cmdpara is the command parameter.
 * \param[in] respBuf is a pointer to the SMTP response from the server.
 *
 * \return None.
 */
static void smtpSendRecv(long socket, char *cmd, char *cmdparam, char *respBuf) {
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
 80035c0:	603b      	str	r3, [r7, #0]
	uint16_t sendLen = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	82fb      	strh	r3, [r7, #22]
	memset(gcSendRecvBuffer, 0, sizeof(gcSendRecvBuffer));
 80035c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035ca:	2100      	movs	r1, #0
 80035cc:	4828      	ldr	r0, [pc, #160]	; (8003670 <smtpSendRecv+0xbc>)
 80035ce:	f01a fed1 	bl	801e374 <memset>

	if (cmd != NULL) {
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00d      	beq.n	80035f4 <smtpSendRecv+0x40>
		sendLen = strlen(cmd);
 80035d8:	68b8      	ldr	r0, [r7, #8]
 80035da:	f7fc fe13 	bl	8000204 <strlen>
 80035de:	4603      	mov	r3, r0
 80035e0:	82fb      	strh	r3, [r7, #22]
		memcpy(gcSendRecvBuffer, cmd, strlen(cmd));
 80035e2:	68b8      	ldr	r0, [r7, #8]
 80035e4:	f7fc fe0e 	bl	8000204 <strlen>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	68b9      	ldr	r1, [r7, #8]
 80035ee:	4820      	ldr	r0, [pc, #128]	; (8003670 <smtpSendRecv+0xbc>)
 80035f0:	f01a fe98 	bl	801e324 <memcpy>
	}

	if (cmdparam != NULL) {
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d013      	beq.n	8003622 <smtpSendRecv+0x6e>
		memcpy(&gcSendRecvBuffer[sendLen], cmdparam, strlen(cmdparam));
 80035fa:	8afb      	ldrh	r3, [r7, #22]
 80035fc:	4a1c      	ldr	r2, [pc, #112]	; (8003670 <smtpSendRecv+0xbc>)
 80035fe:	189c      	adds	r4, r3, r2
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7fc fdff 	bl	8000204 <strlen>
 8003606:	4603      	mov	r3, r0
 8003608:	461a      	mov	r2, r3
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4620      	mov	r0, r4
 800360e:	f01a fe89 	bl	801e324 <memcpy>
		sendLen += strlen(cmdparam);
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f7fc fdf6 	bl	8000204 <strlen>
 8003618:	4603      	mov	r3, r0
 800361a:	b29a      	uxth	r2, r3
 800361c:	8afb      	ldrh	r3, [r7, #22]
 800361e:	4413      	add	r3, r2
 8003620:	82fb      	strh	r3, [r7, #22]
	}

	memcpy(&gcSendRecvBuffer[sendLen], cSmtpCrlf, strlen(cSmtpCrlf));
 8003622:	8afb      	ldrh	r3, [r7, #22]
 8003624:	4a12      	ldr	r2, [pc, #72]	; (8003670 <smtpSendRecv+0xbc>)
 8003626:	4413      	add	r3, r2
 8003628:	2202      	movs	r2, #2
 800362a:	4912      	ldr	r1, [pc, #72]	; (8003674 <smtpSendRecv+0xc0>)
 800362c:	4618      	mov	r0, r3
 800362e:	f01a fe79 	bl	801e324 <memcpy>
	sendLen += strlen(cSmtpCrlf);
 8003632:	8afb      	ldrh	r3, [r7, #22]
 8003634:	3302      	adds	r3, #2
 8003636:	82fb      	strh	r3, [r7, #22]
	send(socket, gcSendRecvBuffer, sendLen, 0);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	b258      	sxtb	r0, r3
 800363c:	8afa      	ldrh	r2, [r7, #22]
 800363e:	2300      	movs	r3, #0
 8003640:	490b      	ldr	r1, [pc, #44]	; (8003670 <smtpSendRecv+0xbc>)
 8003642:	f01a f8bd 	bl	801d7c0 <send>

	if (respBuf != NULL) {
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <smtpSendRecv+0xb4>
		memset(respBuf, 0, MAIN_SMTP_BUF_LEN);
 800364c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003650:	2100      	movs	r1, #0
 8003652:	6838      	ldr	r0, [r7, #0]
 8003654:	f01a fe8e 	bl	801e374 <memset>
		recv(socket, respBuf, MAIN_SMTP_BUF_LEN, 0);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	b258      	sxtb	r0, r3
 800365c:	2300      	movs	r3, #0
 800365e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003662:	6839      	ldr	r1, [r7, #0]
 8003664:	f01a f922 	bl	801d8ac <recv>
	}
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd90      	pop	{r4, r7, pc}
 8003670:	20010ab4 	.word	0x20010ab4
 8003674:	08025834 	.word	0x08025834

08003678 <smtpStateHandler>:
 *
 * \param[in] None.
 *
 * \return MAIN_EMAIL_ERROR_NONE if success, MAIN_EMAIL_ERROR_FAILED if handler error.
 */
static int8_t smtpStateHandler(void) {
 8003678:	b580      	push	{r7, lr}
 800367a:	af00      	add	r7, sp, #0
	/* Check for acknowledge from SMTP server */
	switch (gu8SmtpStatus) {
 800367c:	4b5e      	ldr	r3, [pc, #376]	; (80037f8 <smtpStateHandler+0x180>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	3b02      	subs	r3, #2
 8003682:	2b0e      	cmp	r3, #14
 8003684:	f200 80b3 	bhi.w	80037ee <smtpStateHandler+0x176>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <smtpStateHandler+0x18>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036cd 	.word	0x080036cd
 8003694:	080036e1 	.word	0x080036e1
 8003698:	080036f5 	.word	0x080036f5
 800369c:	08003709 	.word	0x08003709
 80036a0:	0800371d 	.word	0x0800371d
 80036a4:	08003731 	.word	0x08003731
 80036a8:	08003745 	.word	0x08003745
 80036ac:	08003759 	.word	0x08003759
 80036b0:	0800376d 	.word	0x0800376d
 80036b4:	08003789 	.word	0x08003789
 80036b8:	0800379d 	.word	0x0800379d
 80036bc:	080037af 	.word	0x080037af
 80036c0:	080037c3 	.word	0x080037c3
 80036c4:	080037d7 	.word	0x080037d7
 80036c8:	080037e9 	.word	0x080037e9
	/* Send Introductory "HELO" to SMTP server */
	case SMTP_HELO:
		smtpSendRecv(tcp_client_socket, (char*) "HELO localhost", NULL,
 80036cc:	4b4b      	ldr	r3, [pc, #300]	; (80037fc <smtpStateHandler+0x184>)
 80036ce:	f993 3000 	ldrsb.w	r3, [r3]
 80036d2:	4618      	mov	r0, r3
 80036d4:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <smtpStateHandler+0x188>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	494a      	ldr	r1, [pc, #296]	; (8003804 <smtpStateHandler+0x18c>)
 80036da:	f7ff ff6b 	bl	80035b4 <smtpSendRecv>
				gcHandlerBuffer);
		break;
 80036de:	e087      	b.n	80037f0 <smtpStateHandler+0x178>

		/* Send request to server for authentication */
	case SMTP_AUTH:
		smtpSendRecv(tcp_client_socket, (char*) "AUTH LOGIN", NULL,
 80036e0:	4b46      	ldr	r3, [pc, #280]	; (80037fc <smtpStateHandler+0x184>)
 80036e2:	f993 3000 	ldrsb.w	r3, [r3]
 80036e6:	4618      	mov	r0, r3
 80036e8:	4b45      	ldr	r3, [pc, #276]	; (8003800 <smtpStateHandler+0x188>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	4946      	ldr	r1, [pc, #280]	; (8003808 <smtpStateHandler+0x190>)
 80036ee:	f7ff ff61 	bl	80035b4 <smtpSendRecv>
				gcHandlerBuffer);
		break;
 80036f2:	e07d      	b.n	80037f0 <smtpStateHandler+0x178>

		/* Handle Authentication with server username */
	case SMTP_AUTH_USERNAME:
		smtpSendRecv(tcp_client_socket, gcUserBasekey, NULL, gcHandlerBuffer);
 80036f4:	4b41      	ldr	r3, [pc, #260]	; (80037fc <smtpStateHandler+0x184>)
 80036f6:	f993 3000 	ldrsb.w	r3, [r3]
 80036fa:	4618      	mov	r0, r3
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <smtpStateHandler+0x188>)
 80036fe:	2200      	movs	r2, #0
 8003700:	4942      	ldr	r1, [pc, #264]	; (800380c <smtpStateHandler+0x194>)
 8003702:	f7ff ff57 	bl	80035b4 <smtpSendRecv>
		break;
 8003706:	e073      	b.n	80037f0 <smtpStateHandler+0x178>

		/* Handle Authentication with server password */
	case SMTP_AUTH_PASSWORD:
		smtpSendRecv(tcp_client_socket, gcPasswordBasekey, NULL,
 8003708:	4b3c      	ldr	r3, [pc, #240]	; (80037fc <smtpStateHandler+0x184>)
 800370a:	f993 3000 	ldrsb.w	r3, [r3]
 800370e:	4618      	mov	r0, r3
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <smtpStateHandler+0x188>)
 8003712:	2200      	movs	r2, #0
 8003714:	493e      	ldr	r1, [pc, #248]	; (8003810 <smtpStateHandler+0x198>)
 8003716:	f7ff ff4d 	bl	80035b4 <smtpSendRecv>
				gcHandlerBuffer);
		break;
 800371a:	e069      	b.n	80037f0 <smtpStateHandler+0x178>

		/* Send source email to the SMTP server */
	case SMTP_FROM:
		smtpSendRecv(tcp_client_socket, (char*) cSmtpMailFrom,
 800371c:	4b37      	ldr	r3, [pc, #220]	; (80037fc <smtpStateHandler+0x184>)
 800371e:	f993 3000 	ldrsb.w	r3, [r3]
 8003722:	4618      	mov	r0, r3
 8003724:	4b36      	ldr	r3, [pc, #216]	; (8003800 <smtpStateHandler+0x188>)
 8003726:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <smtpStateHandler+0x19c>)
 8003728:	493b      	ldr	r1, [pc, #236]	; (8003818 <smtpStateHandler+0x1a0>)
 800372a:	f7ff ff43 	bl	80035b4 <smtpSendRecv>
				(char*) MAIN_SENDER_RFC, gcHandlerBuffer);
		break;
 800372e:	e05f      	b.n	80037f0 <smtpStateHandler+0x178>

		/* Send the destination email to the SMTP server */
	case SMTP_RCPT:
		smtpSendRecv(tcp_client_socket, (char*) cSmtpRcpt,
 8003730:	4b32      	ldr	r3, [pc, #200]	; (80037fc <smtpStateHandler+0x184>)
 8003732:	f993 3000 	ldrsb.w	r3, [r3]
 8003736:	4618      	mov	r0, r3
 8003738:	4b31      	ldr	r3, [pc, #196]	; (8003800 <smtpStateHandler+0x188>)
 800373a:	4a38      	ldr	r2, [pc, #224]	; (800381c <smtpStateHandler+0x1a4>)
 800373c:	4938      	ldr	r1, [pc, #224]	; (8003820 <smtpStateHandler+0x1a8>)
 800373e:	f7ff ff39 	bl	80035b4 <smtpSendRecv>
				(char*) MAIN_RECIPIENT_RFC, gcHandlerBuffer);
		break;
 8003742:	e055      	b.n	80037f0 <smtpStateHandler+0x178>

		/* Send the "DATA" message to the server */
	case SMTP_DATA:
		smtpSendRecv(tcp_client_socket, (char*) cSmtpData, NULL,
 8003744:	4b2d      	ldr	r3, [pc, #180]	; (80037fc <smtpStateHandler+0x184>)
 8003746:	f993 3000 	ldrsb.w	r3, [r3]
 800374a:	4618      	mov	r0, r3
 800374c:	4b2c      	ldr	r3, [pc, #176]	; (8003800 <smtpStateHandler+0x188>)
 800374e:	2200      	movs	r2, #0
 8003750:	4934      	ldr	r1, [pc, #208]	; (8003824 <smtpStateHandler+0x1ac>)
 8003752:	f7ff ff2f 	bl	80035b4 <smtpSendRecv>
				gcHandlerBuffer);
		break;
 8003756:	e04b      	b.n	80037f0 <smtpStateHandler+0x178>

		/* Send actual Message, preceded by From, To and Subject */
	case SMTP_MESSAGE_SUBJECT:
		/* Start with E-Mail's "Subject:" field */
		smtpSendRecv(tcp_client_socket, (char*) cSmtpSubject,
 8003758:	4b28      	ldr	r3, [pc, #160]	; (80037fc <smtpStateHandler+0x184>)
 800375a:	f993 3000 	ldrsb.w	r3, [r3]
 800375e:	4618      	mov	r0, r3
 8003760:	2300      	movs	r3, #0
 8003762:	4a31      	ldr	r2, [pc, #196]	; (8003828 <smtpStateHandler+0x1b0>)
 8003764:	4931      	ldr	r1, [pc, #196]	; (800382c <smtpStateHandler+0x1b4>)
 8003766:	f7ff ff25 	bl	80035b4 <smtpSendRecv>
				(char*) MAIN_EMAIL_SUBJECT, NULL);
		break;
 800376a:	e041      	b.n	80037f0 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_TO:
		/* Add E-mail's "To:" field */
		printf("Recipient email address is %s\r\n", (char*) MAIN_TO_ADDRESS);
 800376c:	4930      	ldr	r1, [pc, #192]	; (8003830 <smtpStateHandler+0x1b8>)
 800376e:	4831      	ldr	r0, [pc, #196]	; (8003834 <smtpStateHandler+0x1bc>)
 8003770:	f01a fee8 	bl	801e544 <iprintf>
		smtpSendRecv(tcp_client_socket, (char*) cSmtpTo,
 8003774:	4b21      	ldr	r3, [pc, #132]	; (80037fc <smtpStateHandler+0x184>)
 8003776:	f993 3000 	ldrsb.w	r3, [r3]
 800377a:	4618      	mov	r0, r3
 800377c:	2300      	movs	r3, #0
 800377e:	4a2c      	ldr	r2, [pc, #176]	; (8003830 <smtpStateHandler+0x1b8>)
 8003780:	492d      	ldr	r1, [pc, #180]	; (8003838 <smtpStateHandler+0x1c0>)
 8003782:	f7ff ff17 	bl	80035b4 <smtpSendRecv>
				(char*) MAIN_TO_ADDRESS, NULL);
		break;
 8003786:	e033      	b.n	80037f0 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_FROM:
		/* Add E-mail's "From:" field */
		smtpSendRecv(tcp_client_socket, (char*) cSmtpFrom,
 8003788:	4b1c      	ldr	r3, [pc, #112]	; (80037fc <smtpStateHandler+0x184>)
 800378a:	f993 3000 	ldrsb.w	r3, [r3]
 800378e:	4618      	mov	r0, r3
 8003790:	2300      	movs	r3, #0
 8003792:	4a2a      	ldr	r2, [pc, #168]	; (800383c <smtpStateHandler+0x1c4>)
 8003794:	492a      	ldr	r1, [pc, #168]	; (8003840 <smtpStateHandler+0x1c8>)
 8003796:	f7ff ff0d 	bl	80035b4 <smtpSendRecv>
				(char*) MAIN_FROM_ADDRESS, NULL);
		break;
 800379a:	e029      	b.n	80037f0 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_CRLF:
		/* Send CRLF */
		send(tcp_client_socket, (char*) cSmtpCrlf, strlen(cSmtpCrlf), 0);
 800379c:	4b17      	ldr	r3, [pc, #92]	; (80037fc <smtpStateHandler+0x184>)
 800379e:	f993 0000 	ldrsb.w	r0, [r3]
 80037a2:	2300      	movs	r3, #0
 80037a4:	2202      	movs	r2, #2
 80037a6:	4927      	ldr	r1, [pc, #156]	; (8003844 <smtpStateHandler+0x1cc>)
 80037a8:	f01a f80a 	bl	801d7c0 <send>
		break;
 80037ac:	e020      	b.n	80037f0 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_BODY:
		/* Send body of message */
		smtpSendRecv(tcp_client_socket, (char*) strSendingEmail, NULL, NULL);
 80037ae:	4b13      	ldr	r3, [pc, #76]	; (80037fc <smtpStateHandler+0x184>)
 80037b0:	f993 3000 	ldrsb.w	r3, [r3]
 80037b4:	4618      	mov	r0, r3
 80037b6:	2300      	movs	r3, #0
 80037b8:	2200      	movs	r2, #0
 80037ba:	4923      	ldr	r1, [pc, #140]	; (8003848 <smtpStateHandler+0x1d0>)
 80037bc:	f7ff fefa 	bl	80035b4 <smtpSendRecv>
		break;
 80037c0:	e016      	b.n	80037f0 <smtpStateHandler+0x178>

	case SMTP_MESSAGE_DATAEND:
		/* End Message */
		smtpSendRecv(tcp_client_socket, (char*) cSmtpDataEnd, NULL,
 80037c2:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <smtpStateHandler+0x184>)
 80037c4:	f993 3000 	ldrsb.w	r3, [r3]
 80037c8:	4618      	mov	r0, r3
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <smtpStateHandler+0x188>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	491f      	ldr	r1, [pc, #124]	; (800384c <smtpStateHandler+0x1d4>)
 80037d0:	f7ff fef0 	bl	80035b4 <smtpSendRecv>
				gcHandlerBuffer);
		break;
 80037d4:	e00c      	b.n	80037f0 <smtpStateHandler+0x178>

	case SMTP_QUIT:
		send(tcp_client_socket, (char*) cSmtpQuit, strlen(cSmtpQuit), 0);
 80037d6:	4b09      	ldr	r3, [pc, #36]	; (80037fc <smtpStateHandler+0x184>)
 80037d8:	f993 0000 	ldrsb.w	r0, [r3]
 80037dc:	2300      	movs	r3, #0
 80037de:	2206      	movs	r2, #6
 80037e0:	491b      	ldr	r1, [pc, #108]	; (8003850 <smtpStateHandler+0x1d8>)
 80037e2:	f019 ffed 	bl	801d7c0 <send>
		break;
 80037e6:	e003      	b.n	80037f0 <smtpStateHandler+0x178>

		/* Error Handling for SMTP */
	case SMTP_ERROR:
		return MAIN_EMAIL_ERROR_FAILED;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295
 80037ec:	e001      	b.n	80037f2 <smtpStateHandler+0x17a>

	default:
		break;
 80037ee:	bf00      	nop
	}
	return MAIN_EMAIL_ERROR_NONE;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	20000006 	.word	0x20000006
 80037fc:	20000007 	.word	0x20000007
 8003800:	20010eb4 	.word	0x20010eb4
 8003804:	0801ff4c 	.word	0x0801ff4c
 8003808:	0801ff5c 	.word	0x0801ff5c
 800380c:	200112b4 	.word	0x200112b4
 8003810:	20011334 	.word	0x20011334
 8003814:	0801ff68 	.word	0x0801ff68
 8003818:	08025814 	.word	0x08025814
 800381c:	0801ff80 	.word	0x0801ff80
 8003820:	08025820 	.word	0x08025820
 8003824:	0802582c 	.word	0x0802582c
 8003828:	0801ff98 	.word	0x0801ff98
 800382c:	08025838 	.word	0x08025838
 8003830:	0801ffb0 	.word	0x0801ffb0
 8003834:	0801ffc8 	.word	0x0801ffc8
 8003838:	08025844 	.word	0x08025844
 800383c:	0801ffe8 	.word	0x0801ffe8
 8003840:	0802584c 	.word	0x0802584c
 8003844:	08025834 	.word	0x08025834
 8003848:	200123b8 	.word	0x200123b8
 800384c:	08025854 	.word	0x08025854
 8003850:	0802585c 	.word	0x0802585c

08003854 <resolve_cb>:
 * \param[in] hostName Domain name.
 * \param[in] hostIp Server IP.
 *
 * \return None.
 */
static void resolve_cb(uint8_t *hostName, uint32_t hostIp) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af02      	add	r7, sp, #8
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
	gu32HostIp = hostIp;
 800385e:	4a0e      	ldr	r2, [pc, #56]	; (8003898 <resolve_cb+0x44>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	6013      	str	r3, [r2, #0]
	gbHostIpByName = true;
 8003864:	4b0d      	ldr	r3, [pc, #52]	; (800389c <resolve_cb+0x48>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
	printf("Host IP is %d.%d.%d.%d\r\n", (int) IPV4_BYTE(hostIp, 0),
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	b2d9      	uxtb	r1, r3
			(int) IPV4_BYTE(hostIp, 1), (int) IPV4_BYTE(hostIp, 2),
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	0a1b      	lsrs	r3, r3, #8
	printf("Host IP is %d.%d.%d.%d\r\n", (int) IPV4_BYTE(hostIp, 0),
 8003872:	b2da      	uxtb	r2, r3
			(int) IPV4_BYTE(hostIp, 1), (int) IPV4_BYTE(hostIp, 2),
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	0c1b      	lsrs	r3, r3, #16
	printf("Host IP is %d.%d.%d.%d\r\n", (int) IPV4_BYTE(hostIp, 0),
 8003878:	b2d8      	uxtb	r0, r3
			(int) IPV4_BYTE(hostIp, 3));
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	0e1b      	lsrs	r3, r3, #24
	printf("Host IP is %d.%d.%d.%d\r\n", (int) IPV4_BYTE(hostIp, 0),
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	4603      	mov	r3, r0
 8003882:	4807      	ldr	r0, [pc, #28]	; (80038a0 <resolve_cb+0x4c>)
 8003884:	f01a fe5e 	bl	801e544 <iprintf>
	printf("Host Name is %s\r\n", hostName);
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4806      	ldr	r0, [pc, #24]	; (80038a4 <resolve_cb+0x50>)
 800388c:	f01a fe5a 	bl	801e544 <iprintf>
}
 8003890:	bf00      	nop
 8003892:	3708      	adds	r7, #8
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20010aac 	.word	0x20010aac
 800389c:	200113b6 	.word	0x200113b6
 80038a0:	08020000 	.word	0x08020000
 80038a4:	0802001c 	.word	0x0802001c

080038a8 <socket_cb>:
 * \param[in] u8Msg Type of Socket notification
 * \param[in] pvMsg A structure contains notification informations.
 *
 * \return None.
 */
static void socket_cb(SOCKET sock, uint8_t u8Msg, void *pvMsg) {
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	603a      	str	r2, [r7, #0]
 80038b2:	71fb      	strb	r3, [r7, #7]
 80038b4:	460b      	mov	r3, r1
 80038b6:	71bb      	strb	r3, [r7, #6]
	/* Check for socket event on TCP socket. */
	if (sock == tcp_client_socket) {
 80038b8:	4ba4      	ldr	r3, [pc, #656]	; (8003b4c <socket_cb+0x2a4>)
 80038ba:	f993 3000 	ldrsb.w	r3, [r3]
 80038be:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	f040 82c4 	bne.w	8003e50 <socket_cb+0x5a8>
		switch (u8Msg) {
 80038c8:	79bb      	ldrb	r3, [r7, #6]
 80038ca:	2b07      	cmp	r3, #7
 80038cc:	d028      	beq.n	8003920 <socket_cb+0x78>
 80038ce:	2b07      	cmp	r3, #7
 80038d0:	f300 82c0 	bgt.w	8003e54 <socket_cb+0x5ac>
 80038d4:	2b05      	cmp	r3, #5
 80038d6:	d002      	beq.n	80038de <socket_cb+0x36>
 80038d8:	2b06      	cmp	r3, #6
 80038da:	d063      	beq.n	80039a4 <socket_cb+0xfc>
			}
		}
			break;

		default:
			break;
 80038dc:	e2ba      	b.n	8003e54 <socket_cb+0x5ac>
			tstrSocketConnectMsg *pstrConnect = (tstrSocketConnectMsg*) pvMsg;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	60bb      	str	r3, [r7, #8]
			if (pstrConnect && pstrConnect->s8Error >= SOCK_ERR_NO_ERROR) {
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d014      	beq.n	8003912 <socket_cb+0x6a>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	db0f      	blt.n	8003912 <socket_cb+0x6a>
				memset(gcHandlerBuffer, 0, MAIN_SMTP_BUF_LEN);
 80038f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038f6:	2100      	movs	r1, #0
 80038f8:	4895      	ldr	r0, [pc, #596]	; (8003b50 <socket_cb+0x2a8>)
 80038fa:	f01a fd3b 	bl	801e374 <memset>
				recv(tcp_client_socket, gcHandlerBuffer,
 80038fe:	4b93      	ldr	r3, [pc, #588]	; (8003b4c <socket_cb+0x2a4>)
 8003900:	f993 0000 	ldrsb.w	r0, [r3]
 8003904:	2300      	movs	r3, #0
 8003906:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800390a:	4991      	ldr	r1, [pc, #580]	; (8003b50 <socket_cb+0x2a8>)
 800390c:	f019 ffce 	bl	801d8ac <recv>
			break;
 8003910:	e2a1      	b.n	8003e56 <socket_cb+0x5ae>
				printf("SOCKET_MSG_CONNECT : connect error!\r\n");
 8003912:	4890      	ldr	r0, [pc, #576]	; (8003b54 <socket_cb+0x2ac>)
 8003914:	f01a feb2 	bl	801e67c <puts>
				gu8SocketStatus = SocketError;
 8003918:	4b8f      	ldr	r3, [pc, #572]	; (8003b58 <socket_cb+0x2b0>)
 800391a:	2204      	movs	r2, #4
 800391c:	701a      	strb	r2, [r3, #0]
			break;
 800391e:	e29a      	b.n	8003e56 <socket_cb+0x5ae>
			switch (gu8SmtpStatus) {
 8003920:	4b8e      	ldr	r3, [pc, #568]	; (8003b5c <socket_cb+0x2b4>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	3b09      	subs	r3, #9
 8003926:	2b06      	cmp	r3, #6
 8003928:	d83a      	bhi.n	80039a0 <socket_cb+0xf8>
 800392a:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <socket_cb+0x88>)
 800392c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003930:	0800394d 	.word	0x0800394d
 8003934:	0800395b 	.word	0x0800395b
 8003938:	08003969 	.word	0x08003969
 800393c:	08003977 	.word	0x08003977
 8003940:	08003985 	.word	0x08003985
 8003944:	080039a1 	.word	0x080039a1
 8003948:	08003993 	.word	0x08003993
				gu8SocketStatus = SocketConnect;
 800394c:	4b82      	ldr	r3, [pc, #520]	; (8003b58 <socket_cb+0x2b0>)
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_TO;
 8003952:	4b82      	ldr	r3, [pc, #520]	; (8003b5c <socket_cb+0x2b4>)
 8003954:	220a      	movs	r2, #10
 8003956:	701a      	strb	r2, [r3, #0]
				break;
 8003958:	e023      	b.n	80039a2 <socket_cb+0xfa>
				gu8SocketStatus = SocketConnect;
 800395a:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <socket_cb+0x2b0>)
 800395c:	2201      	movs	r2, #1
 800395e:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_FROM;
 8003960:	4b7e      	ldr	r3, [pc, #504]	; (8003b5c <socket_cb+0x2b4>)
 8003962:	220b      	movs	r2, #11
 8003964:	701a      	strb	r2, [r3, #0]
				break;
 8003966:	e01c      	b.n	80039a2 <socket_cb+0xfa>
				gu8SocketStatus = SocketConnect;
 8003968:	4b7b      	ldr	r3, [pc, #492]	; (8003b58 <socket_cb+0x2b0>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_CRLF;
 800396e:	4b7b      	ldr	r3, [pc, #492]	; (8003b5c <socket_cb+0x2b4>)
 8003970:	220c      	movs	r2, #12
 8003972:	701a      	strb	r2, [r3, #0]
				break;
 8003974:	e015      	b.n	80039a2 <socket_cb+0xfa>
				gu8SocketStatus = SocketConnect;
 8003976:	4b78      	ldr	r3, [pc, #480]	; (8003b58 <socket_cb+0x2b0>)
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_BODY;
 800397c:	4b77      	ldr	r3, [pc, #476]	; (8003b5c <socket_cb+0x2b4>)
 800397e:	220d      	movs	r2, #13
 8003980:	701a      	strb	r2, [r3, #0]
				break;
 8003982:	e00e      	b.n	80039a2 <socket_cb+0xfa>
				gu8SocketStatus = SocketConnect;
 8003984:	4b74      	ldr	r3, [pc, #464]	; (8003b58 <socket_cb+0x2b0>)
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_MESSAGE_DATAEND;
 800398a:	4b74      	ldr	r3, [pc, #464]	; (8003b5c <socket_cb+0x2b4>)
 800398c:	220e      	movs	r2, #14
 800398e:	701a      	strb	r2, [r3, #0]
				break;
 8003990:	e007      	b.n	80039a2 <socket_cb+0xfa>
				gu8SocketStatus = SocketComplete;
 8003992:	4b71      	ldr	r3, [pc, #452]	; (8003b58 <socket_cb+0x2b0>)
 8003994:	2203      	movs	r2, #3
 8003996:	701a      	strb	r2, [r3, #0]
				gu8SmtpStatus = SMTP_INIT;
 8003998:	4b70      	ldr	r3, [pc, #448]	; (8003b5c <socket_cb+0x2b4>)
 800399a:	2201      	movs	r2, #1
 800399c:	701a      	strb	r2, [r3, #0]
				break;
 800399e:	e000      	b.n	80039a2 <socket_cb+0xfa>
				break;
 80039a0:	bf00      	nop
			break;
 80039a2:	e258      	b.n	8003e56 <socket_cb+0x5ae>
			tstrSocketRecvMsg *pstrRecv = (tstrSocketRecvMsg*) pvMsg;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	60fb      	str	r3, [r7, #12]
			if (gu8SocketStatus == SocketWaiting) {
 80039a8:	4b6b      	ldr	r3, [pc, #428]	; (8003b58 <socket_cb+0x2b0>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	f040 822b 	bne.w	8003e08 <socket_cb+0x560>
				gu8SocketStatus = SocketConnect;
 80039b2:	4b69      	ldr	r3, [pc, #420]	; (8003b58 <socket_cb+0x2b0>)
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]
				switch (gu8SmtpStatus) {
 80039b8:	4b68      	ldr	r3, [pc, #416]	; (8003b5c <socket_cb+0x2b4>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	3b01      	subs	r3, #1
 80039be:	2b0d      	cmp	r3, #13
 80039c0:	f200 8224 	bhi.w	8003e0c <socket_cb+0x564>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <socket_cb+0x124>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	08003a05 	.word	0x08003a05
 80039d0:	08003a6f 	.word	0x08003a6f
 80039d4:	08003ad9 	.word	0x08003ad9
 80039d8:	08003b85 	.word	0x08003b85
 80039dc:	08003bf7 	.word	0x08003bf7
 80039e0:	08003c61 	.word	0x08003c61
 80039e4:	08003ccb 	.word	0x08003ccb
 80039e8:	08003d35 	.word	0x08003d35
 80039ec:	08003e0d 	.word	0x08003e0d
 80039f0:	08003e0d 	.word	0x08003e0d
 80039f4:	08003e0d 	.word	0x08003e0d
 80039f8:	08003e0d 	.word	0x08003e0d
 80039fc:	08003e0d 	.word	0x08003e0d
 8003a00:	08003d9f 	.word	0x08003d9f
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d026      	beq.n	8003a58 <socket_cb+0x1b0>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	dd21      	ble.n	8003a58 <socket_cb+0x1b0>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeReady[0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2232      	movs	r2, #50	; 0x32
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d111      	bne.n	8003a44 <socket_cb+0x19c>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeReady[1]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	3301      	adds	r3, #1
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2232      	movs	r2, #50	; 0x32
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d10a      	bne.n	8003a44 <socket_cb+0x19c>
								&& pstrRecv->pu8Buffer[2]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	3302      	adds	r3, #2
 8003a34:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeReady[2]) {
 8003a36:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d103      	bne.n	8003a44 <socket_cb+0x19c>
							gu8SmtpStatus = SMTP_HELO;
 8003a3c:	4b47      	ldr	r3, [pc, #284]	; (8003b5c <socket_cb+0x2b4>)
 8003a3e:	2202      	movs	r2, #2
 8003a40:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeReady[0]
 8003a42:	e013      	b.n	8003a6c <socket_cb+0x1c4>
							printf("No response from server.\r\n");
 8003a44:	4846      	ldr	r0, [pc, #280]	; (8003b60 <socket_cb+0x2b8>)
 8003a46:	f01a fe19 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003a4a:	4b44      	ldr	r3, [pc, #272]	; (8003b5c <socket_cb+0x2b4>)
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_INIT;
 8003a50:	4b44      	ldr	r3, [pc, #272]	; (8003b64 <socket_cb+0x2bc>)
 8003a52:	2201      	movs	r2, #1
 8003a54:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeReady[0]
 8003a56:	e009      	b.n	8003a6c <socket_cb+0x1c4>
						printf("SMTP_INIT : recv error!\r\n");
 8003a58:	4843      	ldr	r0, [pc, #268]	; (8003b68 <socket_cb+0x2c0>)
 8003a5a:	f01a fe0f 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003a5e:	4b3f      	ldr	r3, [pc, #252]	; (8003b5c <socket_cb+0x2b4>)
 8003a60:	2210      	movs	r2, #16
 8003a62:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_INIT;
 8003a64:	4b3f      	ldr	r3, [pc, #252]	; (8003b64 <socket_cb+0x2bc>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
					break;
 8003a6a:	e1d0      	b.n	8003e0e <socket_cb+0x566>
 8003a6c:	e1cf      	b.n	8003e0e <socket_cb+0x566>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d026      	beq.n	8003ac2 <socket_cb+0x21a>
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	dd21      	ble.n	8003ac2 <socket_cb+0x21a>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	781b      	ldrb	r3, [r3, #0]
 8003a84:	2232      	movs	r2, #50	; 0x32
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d111      	bne.n	8003aae <socket_cb+0x206>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeOkReply[1]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3301      	adds	r3, #1
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2235      	movs	r2, #53	; 0x35
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d10a      	bne.n	8003aae <socket_cb+0x206>
								&& pstrRecv->pu8Buffer[2]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3302      	adds	r3, #2
 8003a9e:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeOkReply[2]) {
 8003aa0:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d103      	bne.n	8003aae <socket_cb+0x206>
							gu8SmtpStatus = SMTP_AUTH;
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	; (8003b5c <socket_cb+0x2b4>)
 8003aa8:	2203      	movs	r2, #3
 8003aaa:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003aac:	e013      	b.n	8003ad6 <socket_cb+0x22e>
							printf("No response for HELO.\r\n");
 8003aae:	482f      	ldr	r0, [pc, #188]	; (8003b6c <socket_cb+0x2c4>)
 8003ab0:	f01a fde4 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003ab4:	4b29      	ldr	r3, [pc, #164]	; (8003b5c <socket_cb+0x2b4>)
 8003ab6:	2210      	movs	r2, #16
 8003ab8:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_HELO;
 8003aba:	4b2a      	ldr	r3, [pc, #168]	; (8003b64 <socket_cb+0x2bc>)
 8003abc:	2202      	movs	r2, #2
 8003abe:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003ac0:	e009      	b.n	8003ad6 <socket_cb+0x22e>
						printf("SMTP_HELO : recv error!\r\n");
 8003ac2:	482b      	ldr	r0, [pc, #172]	; (8003b70 <socket_cb+0x2c8>)
 8003ac4:	f01a fdda 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003ac8:	4b24      	ldr	r3, [pc, #144]	; (8003b5c <socket_cb+0x2b4>)
 8003aca:	2210      	movs	r2, #16
 8003acc:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_HELO;
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <socket_cb+0x2bc>)
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	701a      	strb	r2, [r3, #0]
					break;
 8003ad4:	e19b      	b.n	8003e0e <socket_cb+0x566>
 8003ad6:	e19a      	b.n	8003e0e <socket_cb+0x566>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02a      	beq.n	8003b34 <socket_cb+0x28c>
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	dd25      	ble.n	8003b34 <socket_cb+0x28c>
						generateBase64Key((char*) MAIN_FROM_ADDRESS,
 8003ae8:	4922      	ldr	r1, [pc, #136]	; (8003b74 <socket_cb+0x2cc>)
 8003aea:	4823      	ldr	r0, [pc, #140]	; (8003b78 <socket_cb+0x2d0>)
 8003aec:	f7ff fd38 	bl	8003560 <generateBase64Key>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	2233      	movs	r2, #51	; 0x33
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d111      	bne.n	8003b20 <socket_cb+0x278>
								&& pstrRecv->pu8Buffer[1]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthReply[1]
 8003b04:	2233      	movs	r2, #51	; 0x33
								&& pstrRecv->pu8Buffer[1]
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d10a      	bne.n	8003b20 <socket_cb+0x278>
								&& pstrRecv->pu8Buffer[2]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3302      	adds	r3, #2
 8003b10:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthReply[2]) {
 8003b12:	2234      	movs	r2, #52	; 0x34
								&& pstrRecv->pu8Buffer[2]
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d103      	bne.n	8003b20 <socket_cb+0x278>
							gu8SmtpStatus = SMTP_AUTH_USERNAME;
 8003b18:	4b10      	ldr	r3, [pc, #64]	; (8003b5c <socket_cb+0x2b4>)
 8003b1a:	2204      	movs	r2, #4
 8003b1c:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003b1e:	e013      	b.n	8003b48 <socket_cb+0x2a0>
							printf("No response for authentication.\r\n");
 8003b20:	4816      	ldr	r0, [pc, #88]	; (8003b7c <socket_cb+0x2d4>)
 8003b22:	f01a fdab 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <socket_cb+0x2b4>)
 8003b28:	2210      	movs	r2, #16
 8003b2a:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_AUTH;
 8003b2c:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <socket_cb+0x2bc>)
 8003b2e:	2203      	movs	r2, #3
 8003b30:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003b32:	e009      	b.n	8003b48 <socket_cb+0x2a0>
						printf("SMTP_AUTH : recv error!\r\n");
 8003b34:	4812      	ldr	r0, [pc, #72]	; (8003b80 <socket_cb+0x2d8>)
 8003b36:	f01a fda1 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003b3a:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <socket_cb+0x2b4>)
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_AUTH;
 8003b40:	4b08      	ldr	r3, [pc, #32]	; (8003b64 <socket_cb+0x2bc>)
 8003b42:	2203      	movs	r2, #3
 8003b44:	701a      	strb	r2, [r3, #0]
					break;
 8003b46:	e162      	b.n	8003e0e <socket_cb+0x566>
 8003b48:	e161      	b.n	8003e0e <socket_cb+0x566>
 8003b4a:	bf00      	nop
 8003b4c:	20000007 	.word	0x20000007
 8003b50:	20010eb4 	.word	0x20010eb4
 8003b54:	08020030 	.word	0x08020030
 8003b58:	20010ab0 	.word	0x20010ab0
 8003b5c:	20000006 	.word	0x20000006
 8003b60:	08020058 	.word	0x08020058
 8003b64:	20010ab1 	.word	0x20010ab1
 8003b68:	08020074 	.word	0x08020074
 8003b6c:	08020090 	.word	0x08020090
 8003b70:	080200a8 	.word	0x080200a8
 8003b74:	200112b4 	.word	0x200112b4
 8003b78:	0801ffe8 	.word	0x0801ffe8
 8003b7c:	080200c4 	.word	0x080200c4
 8003b80:	080200e8 	.word	0x080200e8
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d02a      	beq.n	8003be0 <socket_cb+0x338>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	dd25      	ble.n	8003be0 <socket_cb+0x338>
						generateBase64Key((char*) MAIN_FROM_PASSWORD,
 8003b94:	499e      	ldr	r1, [pc, #632]	; (8003e10 <socket_cb+0x568>)
 8003b96:	489f      	ldr	r0, [pc, #636]	; (8003e14 <socket_cb+0x56c>)
 8003b98:	f7ff fce2 	bl	8003560 <generateBase64Key>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	781b      	ldrb	r3, [r3, #0]
 8003ba2:	2233      	movs	r2, #51	; 0x33
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d111      	bne.n	8003bcc <socket_cb+0x324>
								&& pstrRecv->pu8Buffer[1]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthReply[1]
 8003bb0:	2233      	movs	r2, #51	; 0x33
								&& pstrRecv->pu8Buffer[1]
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10a      	bne.n	8003bcc <socket_cb+0x324>
								&& pstrRecv->pu8Buffer[2]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	3302      	adds	r3, #2
 8003bbc:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthReply[2]) {
 8003bbe:	2234      	movs	r2, #52	; 0x34
								&& pstrRecv->pu8Buffer[2]
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d103      	bne.n	8003bcc <socket_cb+0x324>
							gu8SmtpStatus = SMTP_AUTH_PASSWORD;
 8003bc4:	4b94      	ldr	r3, [pc, #592]	; (8003e18 <socket_cb+0x570>)
 8003bc6:	2205      	movs	r2, #5
 8003bc8:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003bca:	e013      	b.n	8003bf4 <socket_cb+0x34c>
							printf(
 8003bcc:	4893      	ldr	r0, [pc, #588]	; (8003e1c <socket_cb+0x574>)
 8003bce:	f01a fd55 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003bd2:	4b91      	ldr	r3, [pc, #580]	; (8003e18 <socket_cb+0x570>)
 8003bd4:	2210      	movs	r2, #16
 8003bd6:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_AUTH_USERNAME;
 8003bd8:	4b91      	ldr	r3, [pc, #580]	; (8003e20 <socket_cb+0x578>)
 8003bda:	2204      	movs	r2, #4
 8003bdc:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthReply[0]
 8003bde:	e009      	b.n	8003bf4 <socket_cb+0x34c>
						printf("SMTP_AUTH_USERNAME : recv error!\r\n");
 8003be0:	4890      	ldr	r0, [pc, #576]	; (8003e24 <socket_cb+0x57c>)
 8003be2:	f01a fd4b 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003be6:	4b8c      	ldr	r3, [pc, #560]	; (8003e18 <socket_cb+0x570>)
 8003be8:	2210      	movs	r2, #16
 8003bea:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_AUTH_USERNAME;
 8003bec:	4b8c      	ldr	r3, [pc, #560]	; (8003e20 <socket_cb+0x578>)
 8003bee:	2204      	movs	r2, #4
 8003bf0:	701a      	strb	r2, [r3, #0]
					break;
 8003bf2:	e10c      	b.n	8003e0e <socket_cb+0x566>
 8003bf4:	e10b      	b.n	8003e0e <socket_cb+0x566>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d026      	beq.n	8003c4a <socket_cb+0x3a2>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	dd21      	ble.n	8003c4a <socket_cb+0x3a2>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthSuccess[0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2232      	movs	r2, #50	; 0x32
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d111      	bne.n	8003c36 <socket_cb+0x38e>
								&& pstrRecv->pu8Buffer[1]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	3301      	adds	r3, #1
 8003c18:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthSuccess[1]
 8003c1a:	2233      	movs	r2, #51	; 0x33
								&& pstrRecv->pu8Buffer[1]
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d10a      	bne.n	8003c36 <socket_cb+0x38e>
								&& pstrRecv->pu8Buffer[2]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	3302      	adds	r3, #2
 8003c26:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeAuthSuccess[2]) {
 8003c28:	2235      	movs	r2, #53	; 0x35
								&& pstrRecv->pu8Buffer[2]
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d103      	bne.n	8003c36 <socket_cb+0x38e>
							gu8SmtpStatus = SMTP_FROM;
 8003c2e:	4b7a      	ldr	r3, [pc, #488]	; (8003e18 <socket_cb+0x570>)
 8003c30:	2206      	movs	r2, #6
 8003c32:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthSuccess[0]
 8003c34:	e013      	b.n	8003c5e <socket_cb+0x3b6>
							printf(
 8003c36:	487c      	ldr	r0, [pc, #496]	; (8003e28 <socket_cb+0x580>)
 8003c38:	f01a fd20 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003c3c:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <socket_cb+0x570>)
 8003c3e:	2210      	movs	r2, #16
 8003c40:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_AUTH_PASSWORD;
 8003c42:	4b77      	ldr	r3, [pc, #476]	; (8003e20 <socket_cb+0x578>)
 8003c44:	2205      	movs	r2, #5
 8003c46:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeAuthSuccess[0]
 8003c48:	e009      	b.n	8003c5e <socket_cb+0x3b6>
						printf("SMTP_AUTH_PASSWORD : recv error!\r\n");
 8003c4a:	4878      	ldr	r0, [pc, #480]	; (8003e2c <socket_cb+0x584>)
 8003c4c:	f01a fd16 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003c50:	4b71      	ldr	r3, [pc, #452]	; (8003e18 <socket_cb+0x570>)
 8003c52:	2210      	movs	r2, #16
 8003c54:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_AUTH_PASSWORD;
 8003c56:	4b72      	ldr	r3, [pc, #456]	; (8003e20 <socket_cb+0x578>)
 8003c58:	2205      	movs	r2, #5
 8003c5a:	701a      	strb	r2, [r3, #0]
					break;
 8003c5c:	e0d7      	b.n	8003e0e <socket_cb+0x566>
 8003c5e:	e0d6      	b.n	8003e0e <socket_cb+0x566>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d026      	beq.n	8003cb4 <socket_cb+0x40c>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	dd21      	ble.n	8003cb4 <socket_cb+0x40c>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	2232      	movs	r2, #50	; 0x32
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d111      	bne.n	8003ca0 <socket_cb+0x3f8>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeOkReply[1]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	3301      	adds	r3, #1
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	2235      	movs	r2, #53	; 0x35
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10a      	bne.n	8003ca0 <socket_cb+0x3f8>
								&& pstrRecv->pu8Buffer[2]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	3302      	adds	r3, #2
 8003c90:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeOkReply[2]) {
 8003c92:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d103      	bne.n	8003ca0 <socket_cb+0x3f8>
							gu8SmtpStatus = SMTP_RCPT;
 8003c98:	4b5f      	ldr	r3, [pc, #380]	; (8003e18 <socket_cb+0x570>)
 8003c9a:	2207      	movs	r2, #7
 8003c9c:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003c9e:	e013      	b.n	8003cc8 <socket_cb+0x420>
							printf("No response for sender transmission.\r\n");
 8003ca0:	4863      	ldr	r0, [pc, #396]	; (8003e30 <socket_cb+0x588>)
 8003ca2:	f01a fceb 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	; (8003e18 <socket_cb+0x570>)
 8003ca8:	2210      	movs	r2, #16
 8003caa:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_FROM;
 8003cac:	4b5c      	ldr	r3, [pc, #368]	; (8003e20 <socket_cb+0x578>)
 8003cae:	2206      	movs	r2, #6
 8003cb0:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003cb2:	e009      	b.n	8003cc8 <socket_cb+0x420>
						printf("SMTP_FROM : recv error!\r\n");
 8003cb4:	485f      	ldr	r0, [pc, #380]	; (8003e34 <socket_cb+0x58c>)
 8003cb6:	f01a fce1 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003cba:	4b57      	ldr	r3, [pc, #348]	; (8003e18 <socket_cb+0x570>)
 8003cbc:	2210      	movs	r2, #16
 8003cbe:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_FROM;
 8003cc0:	4b57      	ldr	r3, [pc, #348]	; (8003e20 <socket_cb+0x578>)
 8003cc2:	2206      	movs	r2, #6
 8003cc4:	701a      	strb	r2, [r3, #0]
					break;
 8003cc6:	e0a2      	b.n	8003e0e <socket_cb+0x566>
 8003cc8:	e0a1      	b.n	8003e0e <socket_cb+0x566>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d026      	beq.n	8003d1e <socket_cb+0x476>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	dd21      	ble.n	8003d1e <socket_cb+0x476>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	781b      	ldrb	r3, [r3, #0]
 8003ce0:	2232      	movs	r2, #50	; 0x32
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d111      	bne.n	8003d0a <socket_cb+0x462>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeOkReply[1]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	3301      	adds	r3, #1
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2235      	movs	r2, #53	; 0x35
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10a      	bne.n	8003d0a <socket_cb+0x462>
								&& pstrRecv->pu8Buffer[2]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	3302      	adds	r3, #2
 8003cfa:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeOkReply[2]) {
 8003cfc:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d103      	bne.n	8003d0a <socket_cb+0x462>
							gu8SmtpStatus = SMTP_DATA;
 8003d02:	4b45      	ldr	r3, [pc, #276]	; (8003e18 <socket_cb+0x570>)
 8003d04:	2208      	movs	r2, #8
 8003d06:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003d08:	e013      	b.n	8003d32 <socket_cb+0x48a>
							printf(
 8003d0a:	484b      	ldr	r0, [pc, #300]	; (8003e38 <socket_cb+0x590>)
 8003d0c:	f01a fcb6 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003d10:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <socket_cb+0x570>)
 8003d12:	2210      	movs	r2, #16
 8003d14:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_RCPT;
 8003d16:	4b42      	ldr	r3, [pc, #264]	; (8003e20 <socket_cb+0x578>)
 8003d18:	2207      	movs	r2, #7
 8003d1a:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003d1c:	e009      	b.n	8003d32 <socket_cb+0x48a>
						printf("SMTP_RCPT : recv error!\r\n");
 8003d1e:	4847      	ldr	r0, [pc, #284]	; (8003e3c <socket_cb+0x594>)
 8003d20:	f01a fcac 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003d24:	4b3c      	ldr	r3, [pc, #240]	; (8003e18 <socket_cb+0x570>)
 8003d26:	2210      	movs	r2, #16
 8003d28:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_RCPT;
 8003d2a:	4b3d      	ldr	r3, [pc, #244]	; (8003e20 <socket_cb+0x578>)
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	701a      	strb	r2, [r3, #0]
					break;
 8003d30:	e06d      	b.n	8003e0e <socket_cb+0x566>
 8003d32:	e06c      	b.n	8003e0e <socket_cb+0x566>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d026      	beq.n	8003d88 <socket_cb+0x4e0>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	dd21      	ble.n	8003d88 <socket_cb+0x4e0>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeIntermedReply[0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2233      	movs	r2, #51	; 0x33
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d111      	bne.n	8003d74 <socket_cb+0x4cc>
								&& pstrRecv->pu8Buffer[1]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	3301      	adds	r3, #1
 8003d56:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeIntermedReply[1]
 8003d58:	2235      	movs	r2, #53	; 0x35
								&& pstrRecv->pu8Buffer[1]
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d10a      	bne.n	8003d74 <socket_cb+0x4cc>
								&& pstrRecv->pu8Buffer[2]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3302      	adds	r3, #2
 8003d64:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeIntermedReply[2]) {
 8003d66:	2234      	movs	r2, #52	; 0x34
								&& pstrRecv->pu8Buffer[2]
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d103      	bne.n	8003d74 <socket_cb+0x4cc>
							gu8SmtpStatus = SMTP_MESSAGE_SUBJECT;
 8003d6c:	4b2a      	ldr	r3, [pc, #168]	; (8003e18 <socket_cb+0x570>)
 8003d6e:	2209      	movs	r2, #9
 8003d70:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeIntermedReply[0]
 8003d72:	e013      	b.n	8003d9c <socket_cb+0x4f4>
							printf("No response for data transmission.\r\n");
 8003d74:	4832      	ldr	r0, [pc, #200]	; (8003e40 <socket_cb+0x598>)
 8003d76:	f01a fc81 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003d7a:	4b27      	ldr	r3, [pc, #156]	; (8003e18 <socket_cb+0x570>)
 8003d7c:	2210      	movs	r2, #16
 8003d7e:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_DATA;
 8003d80:	4b27      	ldr	r3, [pc, #156]	; (8003e20 <socket_cb+0x578>)
 8003d82:	2208      	movs	r2, #8
 8003d84:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeIntermedReply[0]
 8003d86:	e009      	b.n	8003d9c <socket_cb+0x4f4>
						printf("SMTP_DATA : recv error!\r\n");
 8003d88:	482e      	ldr	r0, [pc, #184]	; (8003e44 <socket_cb+0x59c>)
 8003d8a:	f01a fc77 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003d8e:	4b22      	ldr	r3, [pc, #136]	; (8003e18 <socket_cb+0x570>)
 8003d90:	2210      	movs	r2, #16
 8003d92:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_DATA;
 8003d94:	4b22      	ldr	r3, [pc, #136]	; (8003e20 <socket_cb+0x578>)
 8003d96:	2208      	movs	r2, #8
 8003d98:	701a      	strb	r2, [r3, #0]
					break;
 8003d9a:	e038      	b.n	8003e0e <socket_cb+0x566>
 8003d9c:	e037      	b.n	8003e0e <socket_cb+0x566>
					if (pstrRecv && pstrRecv->s16BufferSize > 0) {
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d026      	beq.n	8003df2 <socket_cb+0x54a>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	dd21      	ble.n	8003df2 <socket_cb+0x54a>
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	2232      	movs	r2, #50	; 0x32
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d111      	bne.n	8003dde <socket_cb+0x536>
								&& pstrRecv->pu8Buffer[1] == cSmtpCodeOkReply[1]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	2235      	movs	r2, #53	; 0x35
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10a      	bne.n	8003dde <socket_cb+0x536>
								&& pstrRecv->pu8Buffer[2]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	3302      	adds	r3, #2
 8003dce:	781b      	ldrb	r3, [r3, #0]
										== cSmtpCodeOkReply[2]) {
 8003dd0:	2230      	movs	r2, #48	; 0x30
								&& pstrRecv->pu8Buffer[2]
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d103      	bne.n	8003dde <socket_cb+0x536>
							gu8SmtpStatus = SMTP_QUIT;
 8003dd6:	4b10      	ldr	r3, [pc, #64]	; (8003e18 <socket_cb+0x570>)
 8003dd8:	220f      	movs	r2, #15
 8003dda:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003ddc:	e013      	b.n	8003e06 <socket_cb+0x55e>
							printf("No response for dataend transmission.\r\n");
 8003dde:	481a      	ldr	r0, [pc, #104]	; (8003e48 <socket_cb+0x5a0>)
 8003de0:	f01a fc4c 	bl	801e67c <puts>
							gu8SmtpStatus = SMTP_ERROR;
 8003de4:	4b0c      	ldr	r3, [pc, #48]	; (8003e18 <socket_cb+0x570>)
 8003de6:	2210      	movs	r2, #16
 8003de8:	701a      	strb	r2, [r3, #0]
							gs8EmailError = MAIN_EMAIL_ERROR_MESSAGE;
 8003dea:	4b0d      	ldr	r3, [pc, #52]	; (8003e20 <socket_cb+0x578>)
 8003dec:	2209      	movs	r2, #9
 8003dee:	701a      	strb	r2, [r3, #0]
						if (pstrRecv->pu8Buffer[0] == cSmtpCodeOkReply[0]
 8003df0:	e009      	b.n	8003e06 <socket_cb+0x55e>
						printf("SMTP_MESSAGE_DATAEND : recv error!\r\n");
 8003df2:	4816      	ldr	r0, [pc, #88]	; (8003e4c <socket_cb+0x5a4>)
 8003df4:	f01a fc42 	bl	801e67c <puts>
						gu8SmtpStatus = SMTP_ERROR;
 8003df8:	4b07      	ldr	r3, [pc, #28]	; (8003e18 <socket_cb+0x570>)
 8003dfa:	2210      	movs	r2, #16
 8003dfc:	701a      	strb	r2, [r3, #0]
						gs8EmailError = MAIN_EMAIL_ERROR_MESSAGE;
 8003dfe:	4b08      	ldr	r3, [pc, #32]	; (8003e20 <socket_cb+0x578>)
 8003e00:	2209      	movs	r2, #9
 8003e02:	701a      	strb	r2, [r3, #0]
					break;
 8003e04:	e003      	b.n	8003e0e <socket_cb+0x566>
 8003e06:	e002      	b.n	8003e0e <socket_cb+0x566>
			}
 8003e08:	bf00      	nop
 8003e0a:	e024      	b.n	8003e56 <socket_cb+0x5ae>
					break;
 8003e0c:	bf00      	nop
			break;
 8003e0e:	e022      	b.n	8003e56 <socket_cb+0x5ae>
 8003e10:	20011334 	.word	0x20011334
 8003e14:	08020104 	.word	0x08020104
 8003e18:	20000006 	.word	0x20000006
 8003e1c:	08020118 	.word	0x08020118
 8003e20:	20010ab1 	.word	0x20010ab1
 8003e24:	08020144 	.word	0x08020144
 8003e28:	08020168 	.word	0x08020168
 8003e2c:	08020194 	.word	0x08020194
 8003e30:	080201b8 	.word	0x080201b8
 8003e34:	080201e0 	.word	0x080201e0
 8003e38:	080201fc 	.word	0x080201fc
 8003e3c:	08020228 	.word	0x08020228
 8003e40:	08020244 	.word	0x08020244
 8003e44:	08020268 	.word	0x08020268
 8003e48:	08020284 	.word	0x08020284
 8003e4c:	080202ac 	.word	0x080202ac
		}
	}
 8003e50:	bf00      	nop
 8003e52:	e000      	b.n	8003e56 <socket_cb+0x5ae>
			break;
 8003e54:	bf00      	nop
}
 8003e56:	bf00      	nop
 8003e58:	3710      	adds	r7, #16
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop

08003e60 <close_socket>:

/**
 * \brief Close socket function.
 * \return None.
 */
static void close_socket(void) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
	close(tcp_client_socket);
 8003e64:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <close_socket+0x1c>)
 8003e66:	f993 3000 	ldrsb.w	r3, [r3]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f019 fda6 	bl	801d9bc <close>
	tcp_client_socket = -1;
 8003e70:	4b02      	ldr	r3, [pc, #8]	; (8003e7c <close_socket+0x1c>)
 8003e72:	22ff      	movs	r2, #255	; 0xff
 8003e74:	701a      	strb	r2, [r3, #0]
}
 8003e76:	bf00      	nop
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000007 	.word	0x20000007

08003e80 <retry_smtp_server>:

/**
 * \brief Retry SMTP server function.
 * \return None.
 */
static void retry_smtp_server(void) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
	close_socket();
 8003e84:	f7ff ffec 	bl	8003e60 <close_socket>
	gu8SocketStatus = SocketInit;
 8003e88:	4b08      	ldr	r3, [pc, #32]	; (8003eac <retry_smtp_server+0x2c>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	701a      	strb	r2, [r3, #0]
	gu8SmtpStatus = SMTP_INIT;
 8003e8e:	4b08      	ldr	r3, [pc, #32]	; (8003eb0 <retry_smtp_server+0x30>)
 8003e90:	2201      	movs	r2, #1
 8003e92:	701a      	strb	r2, [r3, #0]
	gbHostIpByName = false;
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <retry_smtp_server+0x34>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	701a      	strb	r2, [r3, #0]
	osDelay(MAIN_WAITING_TIME);
 8003e9a:	f247 5030 	movw	r0, #30000	; 0x7530
 8003e9e:	f011 fcbd 	bl	801581c <osDelay>
	m2m_wifi_disconnect();
 8003ea2:	f016 feb1 	bl	801ac08 <m2m_wifi_disconnect>
}
 8003ea6:	bf00      	nop
 8003ea8:	bd80      	pop	{r7, pc}
 8003eaa:	bf00      	nop
 8003eac:	20010ab0 	.word	0x20010ab0
 8003eb0:	20000006 	.word	0x20000006
 8003eb4:	200113b6 	.word	0x200113b6

08003eb8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af02      	add	r7, sp, #8
	/* USER CODE BEGIN 1 */
	uint32_t tmpRGB = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
	uint8_t tmpFlag = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	72fb      	strb	r3, [r7, #11]
	LedStrip ledstrip;
	ledstrip.red = 0;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	803b      	strh	r3, [r7, #0]
	ledstrip.green = 0;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	807b      	strh	r3, [r7, #2]
	ledstrip.blue = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	80bb      	strh	r3, [r7, #4]
	ledstrip.w2400 = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	813b      	strh	r3, [r7, #8]
	ledstrip.w6500 = 0;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	80fb      	strh	r3, [r7, #6]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003eda:	f002 fb27 	bl	800652c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003ede:	f000 f95d 	bl	800419c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003ee2:	f000 fe2b 	bl	8004b3c <MX_GPIO_Init>
	MX_I2C1_Init();
 8003ee6:	f000 f9cb 	bl	8004280 <MX_I2C1_Init>
	MX_UART7_Init();
 8003eea:	f000 fd41 	bl	8004970 <MX_UART7_Init>
	MX_TIM1_Init();
 8003eee:	f000 fba7 	bl	8004640 <MX_TIM1_Init>
	MX_TIM3_Init();
 8003ef2:	f000 fc81 	bl	80047f8 <MX_TIM3_Init>
	MX_TIM4_Init();
 8003ef6:	f000 fcd7 	bl	80048a8 <MX_TIM4_Init>
	MX_DMA_Init();
 8003efa:	f000 fde1 	bl	8004ac0 <MX_DMA_Init>
	MX_I2S2_Init();
 8003efe:	f000 fa3f 	bl	8004380 <MX_I2S2_Init>
	MX_I2C2_Init();
 8003f02:	f000 f9fd 	bl	8004300 <MX_I2C2_Init>
	MX_SPI3_Init();
 8003f06:	f000 fb2f 	bl	8004568 <MX_SPI3_Init>
	MX_FATFS_Init();
 8003f0a:	f009 f8c7 	bl	800d09c <MX_FATFS_Init>
	MX_SPI1_Init();
 8003f0e:	f000 faf5 	bl	80044fc <MX_SPI1_Init>
	MX_TIM2_Init();
 8003f12:	f000 fc19 	bl	8004748 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8003f16:	f000 fd55 	bl	80049c4 <MX_USART1_UART_Init>
	MX_SPI5_Init();
 8003f1a:	f000 fb5b 	bl	80045d4 <MX_SPI5_Init>
	MX_USART2_UART_Init();
 8003f1e:	f000 fd7b 	bl	8004a18 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 8003f22:	f000 fda3 	bl	8004a6c <MX_USART3_UART_Init>
	MX_RTC_Init();
 8003f26:	f000 fa59 	bl	80043dc <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	487b      	ldr	r0, [pc, #492]	; (800411c <main+0x264>)
 8003f2e:	f007 fa2b 	bl	800b388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8003f32:	2100      	movs	r1, #0
 8003f34:	487a      	ldr	r0, [pc, #488]	; (8004120 <main+0x268>)
 8003f36:	f007 fa27 	bl	800b388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8003f3a:	2100      	movs	r1, #0
 8003f3c:	4879      	ldr	r0, [pc, #484]	; (8004124 <main+0x26c>)
 8003f3e:	f007 fa23 	bl	800b388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8003f42:	2100      	movs	r1, #0
 8003f44:	4878      	ldr	r0, [pc, #480]	; (8004128 <main+0x270>)
 8003f46:	f007 fa1f 	bl	800b388 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8003f4a:	2108      	movs	r1, #8
 8003f4c:	4876      	ldr	r0, [pc, #472]	; (8004128 <main+0x270>)
 8003f4e:	f007 fa1b 	bl	800b388 <HAL_TIM_PWM_Start>
	SetLedStrip(ledstrip);
 8003f52:	463b      	mov	r3, r7
 8003f54:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f58:	f7fe feb0 	bl	8002cbc <SetLedStrip>

	HAL_Delay(1000);
 8003f5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f60:	f002 fb26 	bl	80065b0 <HAL_Delay>
	/* Mount SD Card */
	if (f_mount(&fs, "", 0) != FR_OK)
 8003f64:	2200      	movs	r2, #0
 8003f66:	4971      	ldr	r1, [pc, #452]	; (800412c <main+0x274>)
 8003f68:	4871      	ldr	r0, [pc, #452]	; (8004130 <main+0x278>)
 8003f6a:	f00f fe8d 	bl	8013c88 <f_mount>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <main+0xc0>
		Error_Handler();
 8003f74:	f001 fa00 	bl	8005378 <Error_Handler>

	if (f_open(&fil, "logTXT.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK)
 8003f78:	220a      	movs	r2, #10
 8003f7a:	496e      	ldr	r1, [pc, #440]	; (8004134 <main+0x27c>)
 8003f7c:	486e      	ldr	r0, [pc, #440]	; (8004138 <main+0x280>)
 8003f7e:	f00f fee7 	bl	8013d50 <f_open>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <main+0xd4>
		Error_Handler();
 8003f88:	f001 f9f6 	bl	8005378 <Error_Handler>

	if (f_close(&fil) != FR_OK)
 8003f8c:	486a      	ldr	r0, [pc, #424]	; (8004138 <main+0x280>)
 8003f8e:	f010 fd89 	bl	8014aa4 <f_close>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <main+0xe4>
		Error_Handler();
 8003f98:	f001 f9ee 	bl	8005378 <Error_Handler>

	/* Unmount SDCARD */
	if (f_mount(NULL, "", 1) != FR_OK)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	4963      	ldr	r1, [pc, #396]	; (800412c <main+0x274>)
 8003fa0:	2000      	movs	r0, #0
 8003fa2:	f00f fe71 	bl	8013c88 <f_mount>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <main+0xf8>
		Error_Handler();
 8003fac:	f001 f9e4 	bl	8005378 <Error_Handler>

	HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_SET); // fan on
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003fb6:	4861      	ldr	r0, [pc, #388]	; (800413c <main+0x284>)
 8003fb8:	f003 f9e0 	bl	800737c <HAL_GPIO_WritePin>
	printf("Fan Test Started...will run for duration of POST\r\n");
 8003fbc:	4860      	ldr	r0, [pc, #384]	; (8004140 <main+0x288>)
 8003fbe:	f01a fb5d 	bl	801e67c <puts>
	HAL_Delay(1000);
 8003fc2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fc6:	f002 faf3 	bl	80065b0 <HAL_Delay>
	pwm_update_duty_cycle(0,255,255,0,0);  // light blue
 8003fca:	2300      	movs	r3, #0
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2300      	movs	r3, #0
 8003fd0:	22ff      	movs	r2, #255	; 0xff
 8003fd2:	21ff      	movs	r1, #255	; 0xff
 8003fd4:	2000      	movs	r0, #0
 8003fd6:	f7fe fe99 	bl	8002d0c <pwm_update_duty_cycle>
	printf("2000ms LED Light Blue Test Started.\r\n");
 8003fda:	485a      	ldr	r0, [pc, #360]	; (8004144 <main+0x28c>)
 8003fdc:	f01a fb4e 	bl	801e67c <puts>
	HAL_Delay(1000);
 8003fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003fe4:	f002 fae4 	bl	80065b0 <HAL_Delay>
	printf("2000ms LED Light Blue Test Completed.\r\n");
 8003fe8:	4857      	ldr	r0, [pc, #348]	; (8004148 <main+0x290>)
 8003fea:	f01a fb47 	bl	801e67c <puts>
	pwm_update_duty_cycle(0,0,255,0,0); // blue
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	22ff      	movs	r2, #255	; 0xff
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	2000      	movs	r0, #0
 8003ffa:	f7fe fe87 	bl	8002d0c <pwm_update_duty_cycle>
	printf("2000ms LED Blue Test Started.\r\n");
 8003ffe:	4853      	ldr	r0, [pc, #332]	; (800414c <main+0x294>)
 8004000:	f01a fb3c 	bl	801e67c <puts>
	HAL_Delay(1000);
 8004004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004008:	f002 fad2 	bl	80065b0 <HAL_Delay>
	printf("2000ms LED Blue Test Completed.\r\n");
 800400c:	4850      	ldr	r0, [pc, #320]	; (8004150 <main+0x298>)
 800400e:	f01a fb35 	bl	801e67c <puts>
	pwm_update_duty_cycle(255,0,255,0,0); // fuschia
 8004012:	2300      	movs	r3, #0
 8004014:	9300      	str	r3, [sp, #0]
 8004016:	2300      	movs	r3, #0
 8004018:	22ff      	movs	r2, #255	; 0xff
 800401a:	2100      	movs	r1, #0
 800401c:	20ff      	movs	r0, #255	; 0xff
 800401e:	f7fe fe75 	bl	8002d0c <pwm_update_duty_cycle>
	printf("2000ms LED Fuschia Test Started.\r\n");
 8004022:	484c      	ldr	r0, [pc, #304]	; (8004154 <main+0x29c>)
 8004024:	f01a fb2a 	bl	801e67c <puts>
	HAL_Delay(1000);
 8004028:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800402c:	f002 fac0 	bl	80065b0 <HAL_Delay>
	printf("2000ms LED Fuschia Test Completed.\r\n");
 8004030:	4849      	ldr	r0, [pc, #292]	; (8004158 <main+0x2a0>)
 8004032:	f01a fb23 	bl	801e67c <puts>
	pwm_update_duty_cycle(0,255,0,0,0); // green
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	2300      	movs	r3, #0
 800403c:	2200      	movs	r2, #0
 800403e:	21ff      	movs	r1, #255	; 0xff
 8004040:	2000      	movs	r0, #0
 8004042:	f7fe fe63 	bl	8002d0c <pwm_update_duty_cycle>
	printf("2000ms LED Green Test Started.\r\n");
 8004046:	4845      	ldr	r0, [pc, #276]	; (800415c <main+0x2a4>)
 8004048:	f01a fb18 	bl	801e67c <puts>
	HAL_Delay(1000);
 800404c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004050:	f002 faae 	bl	80065b0 <HAL_Delay>
	printf("2000ms LED Green Test Completed.\r\n");
 8004054:	4842      	ldr	r0, [pc, #264]	; (8004160 <main+0x2a8>)
 8004056:	f01a fb11 	bl	801e67c <puts>
	pwm_update_duty_cycle(0,0,0,255,0); // white
 800405a:	2300      	movs	r3, #0
 800405c:	9300      	str	r3, [sp, #0]
 800405e:	23ff      	movs	r3, #255	; 0xff
 8004060:	2200      	movs	r2, #0
 8004062:	2100      	movs	r1, #0
 8004064:	2000      	movs	r0, #0
 8004066:	f7fe fe51 	bl	8002d0c <pwm_update_duty_cycle>
	printf("2000ms LED White Test Started.\r\n");
 800406a:	483e      	ldr	r0, [pc, #248]	; (8004164 <main+0x2ac>)
 800406c:	f01a fb06 	bl	801e67c <puts>
	HAL_Delay(1000);
 8004070:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004074:	f002 fa9c 	bl	80065b0 <HAL_Delay>
	printf("2000ms LED White Test Completed.\r\n");
 8004078:	483b      	ldr	r0, [pc, #236]	; (8004168 <main+0x2b0>)
 800407a:	f01a faff 	bl	801e67c <puts>
	//pwm_update_duty_cycle(0,0,0,0,255); // warm white
	//printf("2000ms LED Warm White Test Started.\r\n");
	HAL_Delay(1000);
 800407e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004082:	f002 fa95 	bl	80065b0 <HAL_Delay>
	printf("2000ms LED Warm White Test Completed.\r\n");
 8004086:	4839      	ldr	r0, [pc, #228]	; (800416c <main+0x2b4>)
 8004088:	f01a faf8 	bl	801e67c <puts>
	pwm_update_duty_cycle(0,0,0,0,0); // LED off
 800408c:	2300      	movs	r3, #0
 800408e:	9300      	str	r3, [sp, #0]
 8004090:	2300      	movs	r3, #0
 8004092:	2200      	movs	r2, #0
 8004094:	2100      	movs	r1, #0
 8004096:	2000      	movs	r0, #0
 8004098:	f7fe fe38 	bl	8002d0c <pwm_update_duty_cycle>
	HAL_Delay(1000);
 800409c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040a0:	f002 fa86 	bl	80065b0 <HAL_Delay>
	printf("1000ms seat heater relay test started.\r\n");
 80040a4:	4832      	ldr	r0, [pc, #200]	; (8004170 <main+0x2b8>)
 80040a6:	f01a fae9 	bl	801e67c <puts>
	//nrf_gpio_pin_set(PLAY_OUT);
	HAL_Delay(1000);
 80040aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80040ae:	f002 fa7f 	bl	80065b0 <HAL_Delay>
	HAL_GPIO_WritePin(PLAY_OUT_GPIO_Port, PLAY_OUT_Pin, GPIO_PIN_RESET);
 80040b2:	2200      	movs	r2, #0
 80040b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80040b8:	4820      	ldr	r0, [pc, #128]	; (800413c <main+0x284>)
 80040ba:	f003 f95f 	bl	800737c <HAL_GPIO_WritePin>
	printf("1000ms power relay test completed.\r\n");
 80040be:	482d      	ldr	r0, [pc, #180]	; (8004174 <main+0x2bc>)
 80040c0:	f01a fadc 	bl	801e67c <puts>
	pwm_update_duty_cycle(255,255,255,255,0); // white
 80040c4:	2300      	movs	r3, #0
 80040c6:	9300      	str	r3, [sp, #0]
 80040c8:	23ff      	movs	r3, #255	; 0xff
 80040ca:	22ff      	movs	r2, #255	; 0xff
 80040cc:	21ff      	movs	r1, #255	; 0xff
 80040ce:	20ff      	movs	r0, #255	; 0xff
 80040d0:	f7fe fe1c 	bl	8002d0c <pwm_update_duty_cycle>
	// fan off
	HAL_GPIO_WritePin(FAN_ON_GPIO_Port, FAN_ON_Pin, GPIO_PIN_RESET); // fan on
 80040d4:	2200      	movs	r2, #0
 80040d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80040da:	4818      	ldr	r0, [pc, #96]	; (800413c <main+0x284>)
 80040dc:	f003 f94e 	bl	800737c <HAL_GPIO_WritePin>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80040e0:	f011 fac0 	bl	8015664 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 80040e4:	4a24      	ldr	r2, [pc, #144]	; (8004178 <main+0x2c0>)
 80040e6:	2100      	movs	r1, #0
 80040e8:	4824      	ldr	r0, [pc, #144]	; (800417c <main+0x2c4>)
 80040ea:	f011 fb05 	bl	80156f8 <osThreadNew>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4a23      	ldr	r2, [pc, #140]	; (8004180 <main+0x2c8>)
 80040f2:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	commTaskHandle = osThreadNew(StartCommTask, NULL, &commTask_attributes);
 80040f4:	4a23      	ldr	r2, [pc, #140]	; (8004184 <main+0x2cc>)
 80040f6:	2100      	movs	r1, #0
 80040f8:	4823      	ldr	r0, [pc, #140]	; (8004188 <main+0x2d0>)
 80040fa:	f011 fafd 	bl	80156f8 <osThreadNew>
 80040fe:	4603      	mov	r3, r0
 8004100:	4a22      	ldr	r2, [pc, #136]	; (800418c <main+0x2d4>)
 8004102:	6013      	str	r3, [r2, #0]
	wifiProvTaskHandle = osThreadNew(StartWiFiProvTask, NULL,
 8004104:	4a22      	ldr	r2, [pc, #136]	; (8004190 <main+0x2d8>)
 8004106:	2100      	movs	r1, #0
 8004108:	4822      	ldr	r0, [pc, #136]	; (8004194 <main+0x2dc>)
 800410a:	f011 faf5 	bl	80156f8 <osThreadNew>
 800410e:	4603      	mov	r3, r0
 8004110:	4a21      	ldr	r2, [pc, #132]	; (8004198 <main+0x2e0>)
 8004112:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8004114:	f011 faca 	bl	80156ac <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8004118:	e7fe      	b.n	8004118 <main+0x260>
 800411a:	bf00      	nop
 800411c:	2000e76c 	.word	0x2000e76c
 8004120:	2000e7b4 	.word	0x2000e7b4
 8004124:	2000e7fc 	.word	0x2000e7fc
 8004128:	2000e844 	.word	0x2000e844
 800412c:	0801fcec 	.word	0x0801fcec
 8004130:	2000ea2c 	.word	0x2000ea2c
 8004134:	0801fcf0 	.word	0x0801fcf0
 8004138:	2000fa6c 	.word	0x2000fa6c
 800413c:	40020000 	.word	0x40020000
 8004140:	080202d0 	.word	0x080202d0
 8004144:	08020304 	.word	0x08020304
 8004148:	0802032c 	.word	0x0802032c
 800414c:	08020354 	.word	0x08020354
 8004150:	08020374 	.word	0x08020374
 8004154:	08020398 	.word	0x08020398
 8004158:	080203bc 	.word	0x080203bc
 800415c:	080203e0 	.word	0x080203e0
 8004160:	08020400 	.word	0x08020400
 8004164:	08020424 	.word	0x08020424
 8004168:	08020444 	.word	0x08020444
 800416c:	08020468 	.word	0x08020468
 8004170:	08020490 	.word	0x08020490
 8004174:	080204b8 	.word	0x080204b8
 8004178:	080257a8 	.word	0x080257a8
 800417c:	08004ff9 	.word	0x08004ff9
 8004180:	2000e99c 	.word	0x2000e99c
 8004184:	080257cc 	.word	0x080257cc
 8004188:	08004d53 	.word	0x08004d53
 800418c:	2000e9a0 	.word	0x2000e9a0
 8004190:	080257f0 	.word	0x080257f0
 8004194:	08004d99 	.word	0x08004d99
 8004198:	2000e9a4 	.word	0x2000e9a4

0800419c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800419c:	b580      	push	{r7, lr}
 800419e:	b094      	sub	sp, #80	; 0x50
 80041a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80041a2:	f107 0320 	add.w	r3, r7, #32
 80041a6:	2230      	movs	r2, #48	; 0x30
 80041a8:	2100      	movs	r1, #0
 80041aa:	4618      	mov	r0, r3
 80041ac:	f01a f8e2 	bl	801e374 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80041b0:	f107 030c 	add.w	r3, r7, #12
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80041c0:	2300      	movs	r3, #0
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <SystemClock_Config+0xdc>)
 80041c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c8:	4a2b      	ldr	r2, [pc, #172]	; (8004278 <SystemClock_Config+0xdc>)
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6413      	str	r3, [r2, #64]	; 0x40
 80041d0:	4b29      	ldr	r3, [pc, #164]	; (8004278 <SystemClock_Config+0xdc>)
 80041d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80041dc:	2300      	movs	r3, #0
 80041de:	607b      	str	r3, [r7, #4]
 80041e0:	4b26      	ldr	r3, [pc, #152]	; (800427c <SystemClock_Config+0xe0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a25      	ldr	r2, [pc, #148]	; (800427c <SystemClock_Config+0xe0>)
 80041e6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ea:	6013      	str	r3, [r2, #0]
 80041ec:	4b23      	ldr	r3, [pc, #140]	; (800427c <SystemClock_Config+0xe0>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80041f4:	607b      	str	r3, [r7, #4]
 80041f6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE
 80041f8:	2305      	movs	r3, #5
 80041fa:	623b      	str	r3, [r7, #32]
			| RCC_OSCILLATORTYPE_LSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80041fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004200:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004202:	2301      	movs	r3, #1
 8004204:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004206:	2302      	movs	r3, #2
 8004208:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800420a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800420e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 8004210:	2304      	movs	r3, #4
 8004212:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 180;
 8004214:	23b4      	movs	r3, #180	; 0xb4
 8004216:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004218:	2302      	movs	r3, #2
 800421a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 800421c:	2304      	movs	r3, #4
 800421e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004220:	f107 0320 	add.w	r3, r7, #32
 8004224:	4618      	mov	r0, r3
 8004226:	f004 fecd 	bl	8008fc4 <HAL_RCC_OscConfig>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d001      	beq.n	8004234 <SystemClock_Config+0x98>
		Error_Handler();
 8004230:	f001 f8a2 	bl	8005378 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8004234:	f004 fe76 	bl	8008f24 <HAL_PWREx_EnableOverDrive>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <SystemClock_Config+0xa6>
		Error_Handler();
 800423e:	f001 f89b 	bl	8005378 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004242:	230f      	movs	r3, #15
 8004244:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004246:	2302      	movs	r3, #2
 8004248:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800424e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004252:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004258:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800425a:	f107 030c 	add.w	r3, r7, #12
 800425e:	2105      	movs	r1, #5
 8004260:	4618      	mov	r0, r3
 8004262:	f005 f927 	bl	80094b4 <HAL_RCC_ClockConfig>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d001      	beq.n	8004270 <SystemClock_Config+0xd4>
		Error_Handler();
 800426c:	f001 f884 	bl	8005378 <Error_Handler>
	}
}
 8004270:	bf00      	nop
 8004272:	3750      	adds	r7, #80	; 0x50
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}
 8004278:	40023800 	.word	0x40023800
 800427c:	40007000 	.word	0x40007000

08004280 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8004284:	4b1b      	ldr	r3, [pc, #108]	; (80042f4 <MX_I2C1_Init+0x74>)
 8004286:	4a1c      	ldr	r2, [pc, #112]	; (80042f8 <MX_I2C1_Init+0x78>)
 8004288:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800428a:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <MX_I2C1_Init+0x74>)
 800428c:	4a1b      	ldr	r2, [pc, #108]	; (80042fc <MX_I2C1_Init+0x7c>)
 800428e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004290:	4b18      	ldr	r3, [pc, #96]	; (80042f4 <MX_I2C1_Init+0x74>)
 8004292:	2200      	movs	r2, #0
 8004294:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8004296:	4b17      	ldr	r3, [pc, #92]	; (80042f4 <MX_I2C1_Init+0x74>)
 8004298:	2200      	movs	r2, #0
 800429a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800429c:	4b15      	ldr	r3, [pc, #84]	; (80042f4 <MX_I2C1_Init+0x74>)
 800429e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80042a2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80042a4:	4b13      	ldr	r3, [pc, #76]	; (80042f4 <MX_I2C1_Init+0x74>)
 80042a6:	2200      	movs	r2, #0
 80042a8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <MX_I2C1_Init+0x74>)
 80042ac:	2200      	movs	r2, #0
 80042ae:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80042b0:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <MX_I2C1_Init+0x74>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <MX_I2C1_Init+0x74>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80042bc:	480d      	ldr	r0, [pc, #52]	; (80042f4 <MX_I2C1_Init+0x74>)
 80042be:	f003 f88f 	bl	80073e0 <HAL_I2C_Init>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d001      	beq.n	80042cc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80042c8:	f001 f856 	bl	8005378 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 80042cc:	2100      	movs	r1, #0
 80042ce:	4809      	ldr	r0, [pc, #36]	; (80042f4 <MX_I2C1_Init+0x74>)
 80042d0:	f004 f81b 	bl	800830a <HAL_I2CEx_ConfigAnalogFilter>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <MX_I2C1_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 80042da:	f001 f84d 	bl	8005378 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 80042de:	2100      	movs	r1, #0
 80042e0:	4804      	ldr	r0, [pc, #16]	; (80042f4 <MX_I2C1_Init+0x74>)
 80042e2:	f004 f84e 	bl	8008382 <HAL_I2CEx_ConfigDigitalFilter>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <MX_I2C1_Init+0x70>
		Error_Handler();
 80042ec:	f001 f844 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80042f0:	bf00      	nop
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	2000e434 	.word	0x2000e434
 80042f8:	40005400 	.word	0x40005400
 80042fc:	000186a0 	.word	0x000186a0

08004300 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8004304:	4b1b      	ldr	r3, [pc, #108]	; (8004374 <MX_I2C2_Init+0x74>)
 8004306:	4a1c      	ldr	r2, [pc, #112]	; (8004378 <MX_I2C2_Init+0x78>)
 8004308:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800430a:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <MX_I2C2_Init+0x74>)
 800430c:	4a1b      	ldr	r2, [pc, #108]	; (800437c <MX_I2C2_Init+0x7c>)
 800430e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8004310:	4b18      	ldr	r3, [pc, #96]	; (8004374 <MX_I2C2_Init+0x74>)
 8004312:	2200      	movs	r2, #0
 8004314:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <MX_I2C2_Init+0x74>)
 8004318:	2200      	movs	r2, #0
 800431a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800431c:	4b15      	ldr	r3, [pc, #84]	; (8004374 <MX_I2C2_Init+0x74>)
 800431e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004322:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004324:	4b13      	ldr	r3, [pc, #76]	; (8004374 <MX_I2C2_Init+0x74>)
 8004326:	2200      	movs	r2, #0
 8004328:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <MX_I2C2_Init+0x74>)
 800432c:	2200      	movs	r2, #0
 800432e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004330:	4b10      	ldr	r3, [pc, #64]	; (8004374 <MX_I2C2_Init+0x74>)
 8004332:	2200      	movs	r2, #0
 8004334:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <MX_I2C2_Init+0x74>)
 8004338:	2200      	movs	r2, #0
 800433a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800433c:	480d      	ldr	r0, [pc, #52]	; (8004374 <MX_I2C2_Init+0x74>)
 800433e:	f003 f84f 	bl	80073e0 <HAL_I2C_Init>
 8004342:	4603      	mov	r3, r0
 8004344:	2b00      	cmp	r3, #0
 8004346:	d001      	beq.n	800434c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8004348:	f001 f816 	bl	8005378 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE)
 800434c:	2100      	movs	r1, #0
 800434e:	4809      	ldr	r0, [pc, #36]	; (8004374 <MX_I2C2_Init+0x74>)
 8004350:	f003 ffdb 	bl	800830a <HAL_I2CEx_ConfigAnalogFilter>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <MX_I2C2_Init+0x5e>
			!= HAL_OK) {
		Error_Handler();
 800435a:	f001 f80d 	bl	8005378 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 800435e:	2100      	movs	r1, #0
 8004360:	4804      	ldr	r0, [pc, #16]	; (8004374 <MX_I2C2_Init+0x74>)
 8004362:	f004 f80e 	bl	8008382 <HAL_I2CEx_ConfigDigitalFilter>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <MX_I2C2_Init+0x70>
		Error_Handler();
 800436c:	f001 f804 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8004370:	bf00      	nop
 8004372:	bd80      	pop	{r7, pc}
 8004374:	2000e488 	.word	0x2000e488
 8004378:	40005800 	.word	0x40005800
 800437c:	000186a0 	.word	0x000186a0

08004380 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8004384:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <MX_I2S2_Init+0x54>)
 8004386:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <MX_I2S2_Init+0x58>)
 8004388:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800438a:	4b12      	ldr	r3, [pc, #72]	; (80043d4 <MX_I2S2_Init+0x54>)
 800438c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004390:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8004392:	4b10      	ldr	r3, [pc, #64]	; (80043d4 <MX_I2S2_Init+0x54>)
 8004394:	2200      	movs	r2, #0
 8004396:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <MX_I2S2_Init+0x54>)
 800439a:	2200      	movs	r2, #0
 800439c:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800439e:	4b0d      	ldr	r3, [pc, #52]	; (80043d4 <MX_I2S2_Init+0x54>)
 80043a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a4:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <MX_I2S2_Init+0x54>)
 80043a8:	f64a 4244 	movw	r2, #44100	; 0xac44
 80043ac:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <MX_I2S2_Init+0x54>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80043b4:	4b07      	ldr	r3, [pc, #28]	; (80043d4 <MX_I2S2_Init+0x54>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80043ba:	4b06      	ldr	r3, [pc, #24]	; (80043d4 <MX_I2S2_Init+0x54>)
 80043bc:	2201      	movs	r2, #1
 80043be:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80043c0:	4804      	ldr	r0, [pc, #16]	; (80043d4 <MX_I2S2_Init+0x54>)
 80043c2:	f004 f81d 	bl	8008400 <HAL_I2S_Init>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <MX_I2S2_Init+0x50>
		Error_Handler();
 80043cc:	f000 ffd4 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 80043d0:	bf00      	nop
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	2000e4dc 	.word	0x2000e4dc
 80043d8:	40003800 	.word	0x40003800

080043dc <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b090      	sub	sp, #64	; 0x40
 80043e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 80043e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]
 80043ea:	605a      	str	r2, [r3, #4]
 80043ec:	609a      	str	r2, [r3, #8]
 80043ee:	60da      	str	r2, [r3, #12]
 80043f0:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 80043f2:	2300      	movs	r3, #0
 80043f4:	62bb      	str	r3, [r7, #40]	; 0x28
	RTC_AlarmTypeDef sAlarm = { 0 };
 80043f6:	463b      	mov	r3, r7
 80043f8:	2228      	movs	r2, #40	; 0x28
 80043fa:	2100      	movs	r1, #0
 80043fc:	4618      	mov	r0, r3
 80043fe:	f019 ffb9 	bl	801e374 <memset>

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 8004402:	4b3b      	ldr	r3, [pc, #236]	; (80044f0 <MX_RTC_Init+0x114>)
 8004404:	4a3b      	ldr	r2, [pc, #236]	; (80044f4 <MX_RTC_Init+0x118>)
 8004406:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004408:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <MX_RTC_Init+0x114>)
 800440a:	2200      	movs	r2, #0
 800440c:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 127;
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <MX_RTC_Init+0x114>)
 8004410:	227f      	movs	r2, #127	; 0x7f
 8004412:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 255;
 8004414:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <MX_RTC_Init+0x114>)
 8004416:	22ff      	movs	r2, #255	; 0xff
 8004418:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800441a:	4b35      	ldr	r3, [pc, #212]	; (80044f0 <MX_RTC_Init+0x114>)
 800441c:	2200      	movs	r2, #0
 800441e:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <MX_RTC_Init+0x114>)
 8004422:	2200      	movs	r2, #0
 8004424:	615a      	str	r2, [r3, #20]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004426:	4b32      	ldr	r3, [pc, #200]	; (80044f0 <MX_RTC_Init+0x114>)
 8004428:	2200      	movs	r2, #0
 800442a:	619a      	str	r2, [r3, #24]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 800442c:	4830      	ldr	r0, [pc, #192]	; (80044f0 <MX_RTC_Init+0x114>)
 800442e:	f005 fcb1 	bl	8009d94 <HAL_RTC_Init>
 8004432:	4603      	mov	r3, r0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d001      	beq.n	800443c <MX_RTC_Init+0x60>
		Error_Handler();
 8004438:	f000 ff9e 	bl	8005378 <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 800443c:	2300      	movs	r3, #0
 800443e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	sTime.Minutes = 0x0;
 8004442:	2300      	movs	r3, #0
 8004444:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	sTime.Seconds = 0x0;
 8004448:	2300      	movs	r3, #0
 800444a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800444e:	2300      	movs	r3, #0
 8004450:	63bb      	str	r3, [r7, #56]	; 0x38
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004452:	2300      	movs	r3, #0
 8004454:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 8004456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800445a:	2201      	movs	r2, #1
 800445c:	4619      	mov	r1, r3
 800445e:	4824      	ldr	r0, [pc, #144]	; (80044f0 <MX_RTC_Init+0x114>)
 8004460:	f005 fd0e 	bl	8009e80 <HAL_RTC_SetTime>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <MX_RTC_Init+0x92>
		Error_Handler();
 800446a:	f000 ff85 	bl	8005378 <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_THURSDAY;
 800446e:	2304      	movs	r3, #4
 8004470:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	sDate.Month = RTC_MONTH_JUNE;
 8004474:	2306      	movs	r3, #6
 8004476:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	sDate.Date = 0x23;
 800447a:	2323      	movs	r3, #35	; 0x23
 800447c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	sDate.Year = 0x22;
 8004480:	2322      	movs	r3, #34	; 0x22
 8004482:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8004486:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800448a:	2201      	movs	r2, #1
 800448c:	4619      	mov	r1, r3
 800448e:	4818      	ldr	r0, [pc, #96]	; (80044f0 <MX_RTC_Init+0x114>)
 8004490:	f005 fdee 	bl	800a070 <HAL_RTC_SetDate>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d001      	beq.n	800449e <MX_RTC_Init+0xc2>
		Error_Handler();
 800449a:	f000 ff6d 	bl	8005378 <Error_Handler>
	}

	/** Enable the Alarm A
	 */
	sAlarm.AlarmTime.Hours = 0x0;
 800449e:	2300      	movs	r3, #0
 80044a0:	703b      	strb	r3, [r7, #0]
	sAlarm.AlarmTime.Minutes = 0x0;
 80044a2:	2300      	movs	r3, #0
 80044a4:	707b      	strb	r3, [r7, #1]
	sAlarm.AlarmTime.Seconds = 0x0;
 80044a6:	2300      	movs	r3, #0
 80044a8:	70bb      	strb	r3, [r7, #2]
	sAlarm.AlarmTime.SubSeconds = 0x0;
 80044aa:	2300      	movs	r3, #0
 80044ac:	607b      	str	r3, [r7, #4]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60fb      	str	r3, [r7, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY | RTC_ALARMMASK_HOURS
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <MX_RTC_Init+0x11c>)
 80044b8:	617b      	str	r3, [r7, #20]
			| RTC_ALARMMASK_MINUTES;
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80044ba:	2300      	movs	r3, #0
 80044bc:	61bb      	str	r3, [r7, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80044be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80044c2:	61fb      	str	r3, [r7, #28]
	sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_TUESDAY;
 80044c4:	2302      	movs	r3, #2
 80044c6:	f887 3020 	strb.w	r3, [r7, #32]
	sAlarm.Alarm = RTC_ALARM_A;
 80044ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044ce:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK) {
 80044d0:	463b      	mov	r3, r7
 80044d2:	2201      	movs	r2, #1
 80044d4:	4619      	mov	r1, r3
 80044d6:	4806      	ldr	r0, [pc, #24]	; (80044f0 <MX_RTC_Init+0x114>)
 80044d8:	f005 fe9e 	bl	800a218 <HAL_RTC_SetAlarm_IT>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d001      	beq.n	80044e6 <MX_RTC_Init+0x10a>
		Error_Handler();
 80044e2:	f000 ff49 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 80044e6:	bf00      	nop
 80044e8:	3740      	adds	r7, #64	; 0x40
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	2000e5e4 	.word	0x2000e5e4
 80044f4:	40002800 	.word	0x40002800
 80044f8:	80808000 	.word	0x80808000

080044fc <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8004500:	4b17      	ldr	r3, [pc, #92]	; (8004560 <MX_SPI1_Init+0x64>)
 8004502:	4a18      	ldr	r2, [pc, #96]	; (8004564 <MX_SPI1_Init+0x68>)
 8004504:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8004506:	4b16      	ldr	r3, [pc, #88]	; (8004560 <MX_SPI1_Init+0x64>)
 8004508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800450c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800450e:	4b14      	ldr	r3, [pc, #80]	; (8004560 <MX_SPI1_Init+0x64>)
 8004510:	2200      	movs	r2, #0
 8004512:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004514:	4b12      	ldr	r3, [pc, #72]	; (8004560 <MX_SPI1_Init+0x64>)
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800451a:	4b11      	ldr	r3, [pc, #68]	; (8004560 <MX_SPI1_Init+0x64>)
 800451c:	2200      	movs	r2, #0
 800451e:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004520:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <MX_SPI1_Init+0x64>)
 8004522:	2200      	movs	r2, #0
 8004524:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8004526:	4b0e      	ldr	r3, [pc, #56]	; (8004560 <MX_SPI1_Init+0x64>)
 8004528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800452c:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800452e:	4b0c      	ldr	r3, [pc, #48]	; (8004560 <MX_SPI1_Init+0x64>)
 8004530:	2200      	movs	r2, #0
 8004532:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004534:	4b0a      	ldr	r3, [pc, #40]	; (8004560 <MX_SPI1_Init+0x64>)
 8004536:	2200      	movs	r2, #0
 8004538:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <MX_SPI1_Init+0x64>)
 800453c:	2200      	movs	r2, #0
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004540:	4b07      	ldr	r3, [pc, #28]	; (8004560 <MX_SPI1_Init+0x64>)
 8004542:	2200      	movs	r2, #0
 8004544:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <MX_SPI1_Init+0x64>)
 8004548:	220a      	movs	r2, #10
 800454a:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800454c:	4804      	ldr	r0, [pc, #16]	; (8004560 <MX_SPI1_Init+0x64>)
 800454e:	f006 f8b2 	bl	800a6b6 <HAL_SPI_Init>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d001      	beq.n	800455c <MX_SPI1_Init+0x60>
		Error_Handler();
 8004558:	f000 ff0e 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800455c:	bf00      	nop
 800455e:	bd80      	pop	{r7, pc}
 8004560:	2000e604 	.word	0x2000e604
 8004564:	40013000 	.word	0x40013000

08004568 <MX_SPI3_Init>:
/**
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void) {
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 800456c:	4b17      	ldr	r3, [pc, #92]	; (80045cc <MX_SPI3_Init+0x64>)
 800456e:	4a18      	ldr	r2, [pc, #96]	; (80045d0 <MX_SPI3_Init+0x68>)
 8004570:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8004572:	4b16      	ldr	r3, [pc, #88]	; (80045cc <MX_SPI3_Init+0x64>)
 8004574:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004578:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800457a:	4b14      	ldr	r3, [pc, #80]	; (80045cc <MX_SPI3_Init+0x64>)
 800457c:	2200      	movs	r2, #0
 800457e:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004580:	4b12      	ldr	r3, [pc, #72]	; (80045cc <MX_SPI3_Init+0x64>)
 8004582:	2200      	movs	r2, #0
 8004584:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004586:	4b11      	ldr	r3, [pc, #68]	; (80045cc <MX_SPI3_Init+0x64>)
 8004588:	2200      	movs	r2, #0
 800458a:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800458c:	4b0f      	ldr	r3, [pc, #60]	; (80045cc <MX_SPI3_Init+0x64>)
 800458e:	2200      	movs	r2, #0
 8004590:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8004592:	4b0e      	ldr	r3, [pc, #56]	; (80045cc <MX_SPI3_Init+0x64>)
 8004594:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004598:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <MX_SPI3_Init+0x64>)
 800459c:	2200      	movs	r2, #0
 800459e:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <MX_SPI3_Init+0x64>)
 80045a2:	2200      	movs	r2, #0
 80045a4:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80045a6:	4b09      	ldr	r3, [pc, #36]	; (80045cc <MX_SPI3_Init+0x64>)
 80045a8:	2200      	movs	r2, #0
 80045aa:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ac:	4b07      	ldr	r3, [pc, #28]	; (80045cc <MX_SPI3_Init+0x64>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 10;
 80045b2:	4b06      	ldr	r3, [pc, #24]	; (80045cc <MX_SPI3_Init+0x64>)
 80045b4:	220a      	movs	r2, #10
 80045b6:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 80045b8:	4804      	ldr	r0, [pc, #16]	; (80045cc <MX_SPI3_Init+0x64>)
 80045ba:	f006 f87c 	bl	800a6b6 <HAL_SPI_Init>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d001      	beq.n	80045c8 <MX_SPI3_Init+0x60>
		Error_Handler();
 80045c4:	f000 fed8 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80045c8:	bf00      	nop
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	2000e65c 	.word	0x2000e65c
 80045d0:	40003c00 	.word	0x40003c00

080045d4 <MX_SPI5_Init>:
/**
 * @brief SPI5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI5_Init(void) {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI5_Init 1 */

	/* USER CODE END SPI5_Init 1 */
	/* SPI5 parameter configuration*/
	hspi5.Instance = SPI5;
 80045d8:	4b17      	ldr	r3, [pc, #92]	; (8004638 <MX_SPI5_Init+0x64>)
 80045da:	4a18      	ldr	r2, [pc, #96]	; (800463c <MX_SPI5_Init+0x68>)
 80045dc:	601a      	str	r2, [r3, #0]
	hspi5.Init.Mode = SPI_MODE_MASTER;
 80045de:	4b16      	ldr	r3, [pc, #88]	; (8004638 <MX_SPI5_Init+0x64>)
 80045e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80045e4:	605a      	str	r2, [r3, #4]
	hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80045e6:	4b14      	ldr	r3, [pc, #80]	; (8004638 <MX_SPI5_Init+0x64>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	609a      	str	r2, [r3, #8]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80045ec:	4b12      	ldr	r3, [pc, #72]	; (8004638 <MX_SPI5_Init+0x64>)
 80045ee:	2200      	movs	r2, #0
 80045f0:	60da      	str	r2, [r3, #12]
	hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80045f2:	4b11      	ldr	r3, [pc, #68]	; (8004638 <MX_SPI5_Init+0x64>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	611a      	str	r2, [r3, #16]
	hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80045f8:	4b0f      	ldr	r3, [pc, #60]	; (8004638 <MX_SPI5_Init+0x64>)
 80045fa:	2200      	movs	r2, #0
 80045fc:	615a      	str	r2, [r3, #20]
	hspi5.Init.NSS = SPI_NSS_SOFT;
 80045fe:	4b0e      	ldr	r3, [pc, #56]	; (8004638 <MX_SPI5_Init+0x64>)
 8004600:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004604:	619a      	str	r2, [r3, #24]
	hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004606:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <MX_SPI5_Init+0x64>)
 8004608:	2210      	movs	r2, #16
 800460a:	61da      	str	r2, [r3, #28]
	hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <MX_SPI5_Init+0x64>)
 800460e:	2200      	movs	r2, #0
 8004610:	621a      	str	r2, [r3, #32]
	hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <MX_SPI5_Init+0x64>)
 8004614:	2200      	movs	r2, #0
 8004616:	625a      	str	r2, [r3, #36]	; 0x24
	hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004618:	4b07      	ldr	r3, [pc, #28]	; (8004638 <MX_SPI5_Init+0x64>)
 800461a:	2200      	movs	r2, #0
 800461c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi5.Init.CRCPolynomial = 10;
 800461e:	4b06      	ldr	r3, [pc, #24]	; (8004638 <MX_SPI5_Init+0x64>)
 8004620:	220a      	movs	r2, #10
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi5) != HAL_OK) {
 8004624:	4804      	ldr	r0, [pc, #16]	; (8004638 <MX_SPI5_Init+0x64>)
 8004626:	f006 f846 	bl	800a6b6 <HAL_SPI_Init>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <MX_SPI5_Init+0x60>
		Error_Handler();
 8004630:	f000 fea2 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN SPI5_Init 2 */

	/* USER CODE END SPI5_Init 2 */

}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	2000e6b4 	.word	0x2000e6b4
 800463c:	40015000 	.word	0x40015000

08004640 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b092      	sub	sp, #72	; 0x48
 8004644:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004646:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
 800464e:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004654:	2200      	movs	r2, #0
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	609a      	str	r2, [r3, #8]
 800465c:	60da      	str	r2, [r3, #12]
 800465e:	611a      	str	r2, [r3, #16]
 8004660:	615a      	str	r2, [r3, #20]
 8004662:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8004664:	1d3b      	adds	r3, r7, #4
 8004666:	2220      	movs	r2, #32
 8004668:	2100      	movs	r1, #0
 800466a:	4618      	mov	r0, r3
 800466c:	f019 fe82 	bl	801e374 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8004670:	4b33      	ldr	r3, [pc, #204]	; (8004740 <MX_TIM1_Init+0x100>)
 8004672:	4a34      	ldr	r2, [pc, #208]	; (8004744 <MX_TIM1_Init+0x104>)
 8004674:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 89;
 8004676:	4b32      	ldr	r3, [pc, #200]	; (8004740 <MX_TIM1_Init+0x100>)
 8004678:	2259      	movs	r2, #89	; 0x59
 800467a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800467c:	4b30      	ldr	r3, [pc, #192]	; (8004740 <MX_TIM1_Init+0x100>)
 800467e:	2200      	movs	r2, #0
 8004680:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 255;
 8004682:	4b2f      	ldr	r3, [pc, #188]	; (8004740 <MX_TIM1_Init+0x100>)
 8004684:	22ff      	movs	r2, #255	; 0xff
 8004686:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004688:	4b2d      	ldr	r3, [pc, #180]	; (8004740 <MX_TIM1_Init+0x100>)
 800468a:	2200      	movs	r2, #0
 800468c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800468e:	4b2c      	ldr	r3, [pc, #176]	; (8004740 <MX_TIM1_Init+0x100>)
 8004690:	2200      	movs	r2, #0
 8004692:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004694:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <MX_TIM1_Init+0x100>)
 8004696:	2280      	movs	r2, #128	; 0x80
 8004698:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 800469a:	4829      	ldr	r0, [pc, #164]	; (8004740 <MX_TIM1_Init+0x100>)
 800469c:	f006 fe24 	bl	800b2e8 <HAL_TIM_PWM_Init>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <MX_TIM1_Init+0x6a>
		Error_Handler();
 80046a6:	f000 fe67 	bl	8005378 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046aa:	2300      	movs	r3, #0
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046ae:	2300      	movs	r3, #0
 80046b0:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80046b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80046b6:	4619      	mov	r1, r3
 80046b8:	4821      	ldr	r0, [pc, #132]	; (8004740 <MX_TIM1_Init+0x100>)
 80046ba:	f007 fb95 	bl	800bde8 <HAL_TIMEx_MasterConfigSynchronization>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d001      	beq.n	80046c8 <MX_TIM1_Init+0x88>
			!= HAL_OK) {
		Error_Handler();
 80046c4:	f000 fe58 	bl	8005378 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80046c8:	2360      	movs	r3, #96	; 0x60
 80046ca:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80046d0:	2300      	movs	r3, #0
 80046d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80046d4:	2300      	movs	r3, #0
 80046d6:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80046d8:	2300      	movs	r3, #0
 80046da:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 80046dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046e0:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80046e2:	2300      	movs	r3, #0
 80046e4:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 80046e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046ea:	2200      	movs	r2, #0
 80046ec:	4619      	mov	r1, r3
 80046ee:	4814      	ldr	r0, [pc, #80]	; (8004740 <MX_TIM1_Init+0x100>)
 80046f0:	f007 f81a 	bl	800b728 <HAL_TIM_PWM_ConfigChannel>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 80046fa:	f000 fe3d 	bl	8005378 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80046fe:	2300      	movs	r3, #0
 8004700:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8004702:	2300      	movs	r3, #0
 8004704:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8004706:	2300      	movs	r3, #0
 8004708:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800470a:	2300      	movs	r3, #0
 800470c:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004712:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004716:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004718:	2300      	movs	r3, #0
 800471a:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 800471c:	1d3b      	adds	r3, r7, #4
 800471e:	4619      	mov	r1, r3
 8004720:	4807      	ldr	r0, [pc, #28]	; (8004740 <MX_TIM1_Init+0x100>)
 8004722:	f007 fbdd 	bl	800bee0 <HAL_TIMEx_ConfigBreakDeadTime>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d001      	beq.n	8004730 <MX_TIM1_Init+0xf0>
			!= HAL_OK) {
		Error_Handler();
 800472c:	f000 fe24 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8004730:	4803      	ldr	r0, [pc, #12]	; (8004740 <MX_TIM1_Init+0x100>)
 8004732:	f001 fb57 	bl	8005de4 <HAL_TIM_MspPostInit>

}
 8004736:	bf00      	nop
 8004738:	3748      	adds	r7, #72	; 0x48
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	2000e76c 	.word	0x2000e76c
 8004744:	40010000 	.word	0x40010000

08004748 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8004748:	b580      	push	{r7, lr}
 800474a:	b08a      	sub	sp, #40	; 0x28
 800474c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800474e:	f107 0320 	add.w	r3, r7, #32
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
 8004756:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004758:	1d3b      	adds	r3, r7, #4
 800475a:	2200      	movs	r2, #0
 800475c:	601a      	str	r2, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]
 8004760:	609a      	str	r2, [r3, #8]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	611a      	str	r2, [r3, #16]
 8004766:	615a      	str	r2, [r3, #20]
 8004768:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800476a:	4b22      	ldr	r3, [pc, #136]	; (80047f4 <MX_TIM2_Init+0xac>)
 800476c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004770:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 89;
 8004772:	4b20      	ldr	r3, [pc, #128]	; (80047f4 <MX_TIM2_Init+0xac>)
 8004774:	2259      	movs	r2, #89	; 0x59
 8004776:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <MX_TIM2_Init+0xac>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 255;
 800477e:	4b1d      	ldr	r3, [pc, #116]	; (80047f4 <MX_TIM2_Init+0xac>)
 8004780:	22ff      	movs	r2, #255	; 0xff
 8004782:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <MX_TIM2_Init+0xac>)
 8004786:	2200      	movs	r2, #0
 8004788:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800478a:	4b1a      	ldr	r3, [pc, #104]	; (80047f4 <MX_TIM2_Init+0xac>)
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8004790:	4818      	ldr	r0, [pc, #96]	; (80047f4 <MX_TIM2_Init+0xac>)
 8004792:	f006 fda9 	bl	800b2e8 <HAL_TIM_PWM_Init>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <MX_TIM2_Init+0x58>
		Error_Handler();
 800479c:	f000 fdec 	bl	8005378 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047a0:	2300      	movs	r3, #0
 80047a2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047a4:	2300      	movs	r3, #0
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 80047a8:	f107 0320 	add.w	r3, r7, #32
 80047ac:	4619      	mov	r1, r3
 80047ae:	4811      	ldr	r0, [pc, #68]	; (80047f4 <MX_TIM2_Init+0xac>)
 80047b0:	f007 fb1a 	bl	800bde8 <HAL_TIMEx_MasterConfigSynchronization>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <MX_TIM2_Init+0x76>
			!= HAL_OK) {
		Error_Handler();
 80047ba:	f000 fddd 	bl	8005378 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80047be:	2360      	movs	r3, #96	; 0x60
 80047c0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047c6:	2300      	movs	r3, #0
 80047c8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 80047ce:	1d3b      	adds	r3, r7, #4
 80047d0:	2200      	movs	r2, #0
 80047d2:	4619      	mov	r1, r3
 80047d4:	4807      	ldr	r0, [pc, #28]	; (80047f4 <MX_TIM2_Init+0xac>)
 80047d6:	f006 ffa7 	bl	800b728 <HAL_TIM_PWM_ConfigChannel>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d001      	beq.n	80047e4 <MX_TIM2_Init+0x9c>
			!= HAL_OK) {
		Error_Handler();
 80047e0:	f000 fdca 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80047e4:	4803      	ldr	r0, [pc, #12]	; (80047f4 <MX_TIM2_Init+0xac>)
 80047e6:	f001 fafd 	bl	8005de4 <HAL_TIM_MspPostInit>

}
 80047ea:	bf00      	nop
 80047ec:	3728      	adds	r7, #40	; 0x28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
 80047f2:	bf00      	nop
 80047f4:	2000e7b4 	.word	0x2000e7b4

080047f8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80047fe:	f107 0320 	add.w	r3, r7, #32
 8004802:	2200      	movs	r2, #0
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	2200      	movs	r2, #0
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	605a      	str	r2, [r3, #4]
 8004810:	609a      	str	r2, [r3, #8]
 8004812:	60da      	str	r2, [r3, #12]
 8004814:	611a      	str	r2, [r3, #16]
 8004816:	615a      	str	r2, [r3, #20]
 8004818:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800481a:	4b21      	ldr	r3, [pc, #132]	; (80048a0 <MX_TIM3_Init+0xa8>)
 800481c:	4a21      	ldr	r2, [pc, #132]	; (80048a4 <MX_TIM3_Init+0xac>)
 800481e:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 89;
 8004820:	4b1f      	ldr	r3, [pc, #124]	; (80048a0 <MX_TIM3_Init+0xa8>)
 8004822:	2259      	movs	r2, #89	; 0x59
 8004824:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004826:	4b1e      	ldr	r3, [pc, #120]	; (80048a0 <MX_TIM3_Init+0xa8>)
 8004828:	2200      	movs	r2, #0
 800482a:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 255;
 800482c:	4b1c      	ldr	r3, [pc, #112]	; (80048a0 <MX_TIM3_Init+0xa8>)
 800482e:	22ff      	movs	r2, #255	; 0xff
 8004830:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <MX_TIM3_Init+0xa8>)
 8004834:	2200      	movs	r2, #0
 8004836:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <MX_TIM3_Init+0xa8>)
 800483a:	2280      	movs	r2, #128	; 0x80
 800483c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 800483e:	4818      	ldr	r0, [pc, #96]	; (80048a0 <MX_TIM3_Init+0xa8>)
 8004840:	f006 fd52 	bl	800b2e8 <HAL_TIM_PWM_Init>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d001      	beq.n	800484e <MX_TIM3_Init+0x56>
		Error_Handler();
 800484a:	f000 fd95 	bl	8005378 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800484e:	2300      	movs	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004852:	2300      	movs	r3, #0
 8004854:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8004856:	f107 0320 	add.w	r3, r7, #32
 800485a:	4619      	mov	r1, r3
 800485c:	4810      	ldr	r0, [pc, #64]	; (80048a0 <MX_TIM3_Init+0xa8>)
 800485e:	f007 fac3 	bl	800bde8 <HAL_TIMEx_MasterConfigSynchronization>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <MX_TIM3_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8004868:	f000 fd86 	bl	8005378 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800486c:	2360      	movs	r3, #96	; 0x60
 800486e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004870:	2300      	movs	r3, #0
 8004872:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004878:	2300      	movs	r3, #0
 800487a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 800487c:	1d3b      	adds	r3, r7, #4
 800487e:	2200      	movs	r2, #0
 8004880:	4619      	mov	r1, r3
 8004882:	4807      	ldr	r0, [pc, #28]	; (80048a0 <MX_TIM3_Init+0xa8>)
 8004884:	f006 ff50 	bl	800b728 <HAL_TIM_PWM_ConfigChannel>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d001      	beq.n	8004892 <MX_TIM3_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800488e:	f000 fd73 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8004892:	4803      	ldr	r0, [pc, #12]	; (80048a0 <MX_TIM3_Init+0xa8>)
 8004894:	f001 faa6 	bl	8005de4 <HAL_TIM_MspPostInit>

}
 8004898:	bf00      	nop
 800489a:	3728      	adds	r7, #40	; 0x28
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	2000e7fc 	.word	0x2000e7fc
 80048a4:	40000400 	.word	0x40000400

080048a8 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b08a      	sub	sp, #40	; 0x28
 80048ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80048ae:	f107 0320 	add.w	r3, r7, #32
 80048b2:	2200      	movs	r2, #0
 80048b4:	601a      	str	r2, [r3, #0]
 80048b6:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80048b8:	1d3b      	adds	r3, r7, #4
 80048ba:	2200      	movs	r2, #0
 80048bc:	601a      	str	r2, [r3, #0]
 80048be:	605a      	str	r2, [r3, #4]
 80048c0:	609a      	str	r2, [r3, #8]
 80048c2:	60da      	str	r2, [r3, #12]
 80048c4:	611a      	str	r2, [r3, #16]
 80048c6:	615a      	str	r2, [r3, #20]
 80048c8:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 80048ca:	4b27      	ldr	r3, [pc, #156]	; (8004968 <MX_TIM4_Init+0xc0>)
 80048cc:	4a27      	ldr	r2, [pc, #156]	; (800496c <MX_TIM4_Init+0xc4>)
 80048ce:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 89;
 80048d0:	4b25      	ldr	r3, [pc, #148]	; (8004968 <MX_TIM4_Init+0xc0>)
 80048d2:	2259      	movs	r2, #89	; 0x59
 80048d4:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80048d6:	4b24      	ldr	r3, [pc, #144]	; (8004968 <MX_TIM4_Init+0xc0>)
 80048d8:	2200      	movs	r2, #0
 80048da:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 255;
 80048dc:	4b22      	ldr	r3, [pc, #136]	; (8004968 <MX_TIM4_Init+0xc0>)
 80048de:	22ff      	movs	r2, #255	; 0xff
 80048e0:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80048e2:	4b21      	ldr	r3, [pc, #132]	; (8004968 <MX_TIM4_Init+0xc0>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80048e8:	4b1f      	ldr	r3, [pc, #124]	; (8004968 <MX_TIM4_Init+0xc0>)
 80048ea:	2280      	movs	r2, #128	; 0x80
 80048ec:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80048ee:	481e      	ldr	r0, [pc, #120]	; (8004968 <MX_TIM4_Init+0xc0>)
 80048f0:	f006 fcfa 	bl	800b2e8 <HAL_TIM_PWM_Init>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <MX_TIM4_Init+0x56>
		Error_Handler();
 80048fa:	f000 fd3d 	bl	8005378 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80048fe:	2300      	movs	r3, #0
 8004900:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004902:	2300      	movs	r3, #0
 8004904:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8004906:	f107 0320 	add.w	r3, r7, #32
 800490a:	4619      	mov	r1, r3
 800490c:	4816      	ldr	r0, [pc, #88]	; (8004968 <MX_TIM4_Init+0xc0>)
 800490e:	f007 fa6b 	bl	800bde8 <HAL_TIMEx_MasterConfigSynchronization>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_TIM4_Init+0x74>
			!= HAL_OK) {
		Error_Handler();
 8004918:	f000 fd2e 	bl	8005378 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800491c:	2360      	movs	r3, #96	; 0x60
 800491e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8004920:	2300      	movs	r3, #0
 8004922:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004924:	2300      	movs	r3, #0
 8004926:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004928:	2300      	movs	r3, #0
 800492a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 800492c:	1d3b      	adds	r3, r7, #4
 800492e:	2200      	movs	r2, #0
 8004930:	4619      	mov	r1, r3
 8004932:	480d      	ldr	r0, [pc, #52]	; (8004968 <MX_TIM4_Init+0xc0>)
 8004934:	f006 fef8 	bl	800b728 <HAL_TIM_PWM_ConfigChannel>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <MX_TIM4_Init+0x9a>
			!= HAL_OK) {
		Error_Handler();
 800493e:	f000 fd1b 	bl	8005378 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3)
 8004942:	1d3b      	adds	r3, r7, #4
 8004944:	2208      	movs	r2, #8
 8004946:	4619      	mov	r1, r3
 8004948:	4807      	ldr	r0, [pc, #28]	; (8004968 <MX_TIM4_Init+0xc0>)
 800494a:	f006 feed 	bl	800b728 <HAL_TIM_PWM_ConfigChannel>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <MX_TIM4_Init+0xb0>
			!= HAL_OK) {
		Error_Handler();
 8004954:	f000 fd10 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8004958:	4803      	ldr	r0, [pc, #12]	; (8004968 <MX_TIM4_Init+0xc0>)
 800495a:	f001 fa43 	bl	8005de4 <HAL_TIM_MspPostInit>

}
 800495e:	bf00      	nop
 8004960:	3728      	adds	r7, #40	; 0x28
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	2000e844 	.word	0x2000e844
 800496c:	40000800 	.word	0x40000800

08004970 <MX_UART7_Init>:
/**
 * @brief UART7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_UART7_Init(void) {
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
	/* USER CODE END UART7_Init 0 */

	/* USER CODE BEGIN UART7_Init 1 */

	/* USER CODE END UART7_Init 1 */
	huart7.Instance = UART7;
 8004974:	4b11      	ldr	r3, [pc, #68]	; (80049bc <MX_UART7_Init+0x4c>)
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <MX_UART7_Init+0x50>)
 8004978:	601a      	str	r2, [r3, #0]
	huart7.Init.BaudRate = 115200;
 800497a:	4b10      	ldr	r3, [pc, #64]	; (80049bc <MX_UART7_Init+0x4c>)
 800497c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004980:	605a      	str	r2, [r3, #4]
	huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <MX_UART7_Init+0x4c>)
 8004984:	2200      	movs	r2, #0
 8004986:	609a      	str	r2, [r3, #8]
	huart7.Init.StopBits = UART_STOPBITS_1;
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <MX_UART7_Init+0x4c>)
 800498a:	2200      	movs	r2, #0
 800498c:	60da      	str	r2, [r3, #12]
	huart7.Init.Parity = UART_PARITY_NONE;
 800498e:	4b0b      	ldr	r3, [pc, #44]	; (80049bc <MX_UART7_Init+0x4c>)
 8004990:	2200      	movs	r2, #0
 8004992:	611a      	str	r2, [r3, #16]
	huart7.Init.Mode = UART_MODE_TX_RX;
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <MX_UART7_Init+0x4c>)
 8004996:	220c      	movs	r2, #12
 8004998:	615a      	str	r2, [r3, #20]
	huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800499a:	4b08      	ldr	r3, [pc, #32]	; (80049bc <MX_UART7_Init+0x4c>)
 800499c:	2200      	movs	r2, #0
 800499e:	619a      	str	r2, [r3, #24]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80049a0:	4b06      	ldr	r3, [pc, #24]	; (80049bc <MX_UART7_Init+0x4c>)
 80049a2:	2200      	movs	r2, #0
 80049a4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 80049a6:	4805      	ldr	r0, [pc, #20]	; (80049bc <MX_UART7_Init+0x4c>)
 80049a8:	f007 fb00 	bl	800bfac <HAL_UART_Init>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <MX_UART7_Init+0x46>
		Error_Handler();
 80049b2:	f000 fce1 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN UART7_Init 2 */

	/* USER CODE END UART7_Init 2 */

}
 80049b6:	bf00      	nop
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	2000e88c 	.word	0x2000e88c
 80049c0:	40007800 	.word	0x40007800

080049c4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80049c4:	b580      	push	{r7, lr}
 80049c6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80049c8:	4b11      	ldr	r3, [pc, #68]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049ca:	4a12      	ldr	r2, [pc, #72]	; (8004a14 <MX_USART1_UART_Init+0x50>)
 80049cc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 9600;
 80049ce:	4b10      	ldr	r3, [pc, #64]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049d0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80049d4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80049d6:	4b0e      	ldr	r3, [pc, #56]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80049dc:	4b0c      	ldr	r3, [pc, #48]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049de:	2200      	movs	r2, #0
 80049e0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80049e2:	4b0b      	ldr	r3, [pc, #44]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80049e8:	4b09      	ldr	r3, [pc, #36]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049ea:	220c      	movs	r2, #12
 80049ec:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80049ee:	4b08      	ldr	r3, [pc, #32]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80049f4:	4b06      	ldr	r3, [pc, #24]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 80049fa:	4805      	ldr	r0, [pc, #20]	; (8004a10 <MX_USART1_UART_Init+0x4c>)
 80049fc:	f007 fad6 	bl	800bfac <HAL_UART_Init>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8004a06:	f000 fcb7 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004a0a:	bf00      	nop
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	2000e8d0 	.word	0x2000e8d0
 8004a14:	40011000 	.word	0x40011000

08004a18 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a1e:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <MX_USART2_UART_Init+0x50>)
 8004a20:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 460800;
 8004a22:	4b10      	ldr	r3, [pc, #64]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a24:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004a28:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a2a:	4b0e      	ldr	r3, [pc, #56]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8004a30:	4b0c      	ldr	r3, [pc, #48]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8004a3c:	4b09      	ldr	r3, [pc, #36]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a3e:	220c      	movs	r2, #12
 8004a40:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a42:	4b08      	ldr	r3, [pc, #32]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a48:	4b06      	ldr	r3, [pc, #24]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8004a4e:	4805      	ldr	r0, [pc, #20]	; (8004a64 <MX_USART2_UART_Init+0x4c>)
 8004a50:	f007 faac 	bl	800bfac <HAL_UART_Init>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8004a5a:	f000 fc8d 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8004a5e:	bf00      	nop
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	2000e914 	.word	0x2000e914
 8004a68:	40004400 	.word	0x40004400

08004a6c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8004a70:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004a72:	4a12      	ldr	r2, [pc, #72]	; (8004abc <MX_USART3_UART_Init+0x50>)
 8004a74:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 460800;
 8004a76:	4b10      	ldr	r3, [pc, #64]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004a78:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8004a7c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8004a90:	4b09      	ldr	r3, [pc, #36]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004a92:	220c      	movs	r2, #12
 8004a94:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a96:	4b08      	ldr	r3, [pc, #32]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8004aa2:	4805      	ldr	r0, [pc, #20]	; (8004ab8 <MX_USART3_UART_Init+0x4c>)
 8004aa4:	f007 fa82 	bl	800bfac <HAL_UART_Init>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_USART3_UART_Init+0x46>
		Error_Handler();
 8004aae:	f000 fc63 	bl	8005378 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	2000e958 	.word	0x2000e958
 8004abc:	40004800 	.word	0x40004800

08004ac0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	4b1b      	ldr	r3, [pc, #108]	; (8004b38 <MX_DMA_Init+0x78>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ace:	4a1a      	ldr	r2, [pc, #104]	; (8004b38 <MX_DMA_Init+0x78>)
 8004ad0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <MX_DMA_Init+0x78>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <MX_DMA_Init+0x78>)
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	4a13      	ldr	r2, [pc, #76]	; (8004b38 <MX_DMA_Init+0x78>)
 8004aec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004af0:	6313      	str	r3, [r2, #48]	; 0x30
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <MX_DMA_Init+0x78>)
 8004af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 14, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	210e      	movs	r1, #14
 8004b02:	200e      	movs	r0, #14
 8004b04:	f001 fe54 	bl	80067b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004b08:	200e      	movs	r0, #14
 8004b0a:	f001 fe6d 	bl	80067e8 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 13, 0);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	210d      	movs	r1, #13
 8004b12:	200f      	movs	r0, #15
 8004b14:	f001 fe4c 	bl	80067b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004b18:	200f      	movs	r0, #15
 8004b1a:	f001 fe65 	bl	80067e8 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8004b1e:	2200      	movs	r2, #0
 8004b20:	2105      	movs	r1, #5
 8004b22:	203c      	movs	r0, #60	; 0x3c
 8004b24:	f001 fe44 	bl	80067b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004b28:	203c      	movs	r0, #60	; 0x3c
 8004b2a:	f001 fe5d 	bl	80067e8 <HAL_NVIC_EnableIRQ>

}
 8004b2e:	bf00      	nop
 8004b30:	3708      	adds	r7, #8
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800

08004b3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08c      	sub	sp, #48	; 0x30
 8004b40:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004b42:	f107 031c 	add.w	r3, r7, #28
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	609a      	str	r2, [r3, #8]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8004b52:	2300      	movs	r3, #0
 8004b54:	61bb      	str	r3, [r7, #24]
 8004b56:	4b70      	ldr	r3, [pc, #448]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	4a6f      	ldr	r2, [pc, #444]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b5c:	f043 0310 	orr.w	r3, r3, #16
 8004b60:	6313      	str	r3, [r2, #48]	; 0x30
 8004b62:	4b6d      	ldr	r3, [pc, #436]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	61bb      	str	r3, [r7, #24]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	617b      	str	r3, [r7, #20]
 8004b72:	4b69      	ldr	r3, [pc, #420]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	4a68      	ldr	r2, [pc, #416]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b78:	f043 0304 	orr.w	r3, r3, #4
 8004b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7e:	4b66      	ldr	r3, [pc, #408]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	613b      	str	r3, [r7, #16]
 8004b8e:	4b62      	ldr	r3, [pc, #392]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	4a61      	ldr	r2, [pc, #388]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b94:	f043 0320 	orr.w	r3, r3, #32
 8004b98:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9a:	4b5f      	ldr	r3, [pc, #380]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	f003 0320 	and.w	r3, r3, #32
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60fb      	str	r3, [r7, #12]
 8004baa:	4b5b      	ldr	r3, [pc, #364]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	4a5a      	ldr	r2, [pc, #360]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb6:	4b58      	ldr	r3, [pc, #352]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]
 8004bc6:	4b54      	ldr	r3, [pc, #336]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	4a53      	ldr	r2, [pc, #332]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bd2:	4b51      	ldr	r3, [pc, #324]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bd6:	f003 0301 	and.w	r3, r3, #1
 8004bda:	60bb      	str	r3, [r7, #8]
 8004bdc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8004bde:	2300      	movs	r3, #0
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	4b4d      	ldr	r3, [pc, #308]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004be6:	4a4c      	ldr	r2, [pc, #304]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004be8:	f043 0302 	orr.w	r3, r3, #2
 8004bec:	6313      	str	r3, [r2, #48]	; 0x30
 8004bee:	4b4a      	ldr	r3, [pc, #296]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	607b      	str	r3, [r7, #4]
 8004bf8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	603b      	str	r3, [r7, #0]
 8004bfe:	4b46      	ldr	r3, [pc, #280]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c02:	4a45      	ldr	r2, [pc, #276]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004c04:	f043 0308 	orr.w	r3, r3, #8
 8004c08:	6313      	str	r3, [r2, #48]	; 0x30
 8004c0a:	4b43      	ldr	r3, [pc, #268]	; (8004d18 <MX_GPIO_Init+0x1dc>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	603b      	str	r3, [r7, #0]
 8004c14:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BT_WIFI_SPI_CS_GPIO_Port, BT_WIFI_SPI_CS_Pin,
 8004c16:	2201      	movs	r2, #1
 8004c18:	2140      	movs	r1, #64	; 0x40
 8004c1a:	4840      	ldr	r0, [pc, #256]	; (8004d1c <MX_GPIO_Init+0x1e0>)
 8004c1c:	f002 fbae 	bl	800737c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BT_WIFI_CHIP_EN_GPIO_Port, BT_WIFI_CHIP_EN_Pin,
 8004c20:	2200      	movs	r2, #0
 8004c22:	2101      	movs	r1, #1
 8004c24:	483e      	ldr	r0, [pc, #248]	; (8004d20 <MX_GPIO_Init+0x1e4>)
 8004c26:	f002 fba9 	bl	800737c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SD_SPI3_CS_Pin | FAN_ON_Pin | PLAY_OUT_Pin,
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f641 0110 	movw	r1, #6160	; 0x1810
 8004c30:	483c      	ldr	r0, [pc, #240]	; (8004d24 <MX_GPIO_Init+0x1e8>)
 8004c32:	f002 fba3 	bl	800737c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BT_WIFI_RESETN_GPIO_Port, BT_WIFI_RESETN_Pin,
 8004c36:	2200      	movs	r2, #0
 8004c38:	2102      	movs	r1, #2
 8004c3a:	483b      	ldr	r0, [pc, #236]	; (8004d28 <MX_GPIO_Init+0x1ec>)
 8004c3c:	f002 fb9e 	bl	800737c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : BT_WIFI_IRQN_Pin */
	GPIO_InitStruct.Pin = BT_WIFI_IRQN_Pin;
 8004c40:	2310      	movs	r3, #16
 8004c42:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004c48:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BT_WIFI_IRQN_GPIO_Port, &GPIO_InitStruct);
 8004c4e:	f107 031c 	add.w	r3, r7, #28
 8004c52:	4619      	mov	r1, r3
 8004c54:	4835      	ldr	r0, [pc, #212]	; (8004d2c <MX_GPIO_Init+0x1f0>)
 8004c56:	f002 f9e5 	bl	8007024 <HAL_GPIO_Init>

	/*Configure GPIO pins : SD_DETECTS_Pin LID_UPDN_Pin SYS_LOCK_Pin */
	GPIO_InitStruct.Pin = SD_DETECTS_Pin | LID_UPDN_Pin | SYS_LOCK_Pin;
 8004c5a:	2361      	movs	r3, #97	; 0x61
 8004c5c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c62:	2301      	movs	r3, #1
 8004c64:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c66:	f107 031c 	add.w	r3, r7, #28
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	482f      	ldr	r0, [pc, #188]	; (8004d2c <MX_GPIO_Init+0x1f0>)
 8004c6e:	f002 f9d9 	bl	8007024 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT_WIFI_SPI_CS_Pin */
	GPIO_InitStruct.Pin = BT_WIFI_SPI_CS_Pin;
 8004c72:	2340      	movs	r3, #64	; 0x40
 8004c74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c76:	2301      	movs	r3, #1
 8004c78:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c7e:	2302      	movs	r3, #2
 8004c80:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BT_WIFI_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8004c82:	f107 031c 	add.w	r3, r7, #28
 8004c86:	4619      	mov	r1, r3
 8004c88:	4824      	ldr	r0, [pc, #144]	; (8004d1c <MX_GPIO_Init+0x1e0>)
 8004c8a:	f002 f9cb 	bl	8007024 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT_WIFI_CHIP_EN_Pin */
	GPIO_InitStruct.Pin = BT_WIFI_CHIP_EN_Pin;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c92:	2301      	movs	r3, #1
 8004c94:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BT_WIFI_CHIP_EN_GPIO_Port, &GPIO_InitStruct);
 8004c9e:	f107 031c 	add.w	r3, r7, #28
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	481e      	ldr	r0, [pc, #120]	; (8004d20 <MX_GPIO_Init+0x1e4>)
 8004ca6:	f002 f9bd 	bl	8007024 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_SPI3_CS_Pin */
	GPIO_InitStruct.Pin = SD_SPI3_CS_Pin;
 8004caa:	2310      	movs	r3, #16
 8004cac:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(SD_SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8004cba:	f107 031c 	add.w	r3, r7, #28
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	4818      	ldr	r0, [pc, #96]	; (8004d24 <MX_GPIO_Init+0x1e8>)
 8004cc2:	f002 f9af 	bl	8007024 <HAL_GPIO_Init>

	/*Configure GPIO pin : BT_WIFI_RESETN_Pin */
	GPIO_InitStruct.Pin = BT_WIFI_RESETN_Pin;
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(BT_WIFI_RESETN_GPIO_Port, &GPIO_InitStruct);
 8004cd6:	f107 031c 	add.w	r3, r7, #28
 8004cda:	4619      	mov	r1, r3
 8004cdc:	4812      	ldr	r0, [pc, #72]	; (8004d28 <MX_GPIO_Init+0x1ec>)
 8004cde:	f002 f9a1 	bl	8007024 <HAL_GPIO_Init>

	/*Configure GPIO pins : FAN_ON_Pin PLAY_OUT_Pin */
	GPIO_InitStruct.Pin = FAN_ON_Pin | PLAY_OUT_Pin;
 8004ce2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004ce6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cec:	2300      	movs	r3, #0
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf4:	f107 031c 	add.w	r3, r7, #28
 8004cf8:	4619      	mov	r1, r3
 8004cfa:	480a      	ldr	r0, [pc, #40]	; (8004d24 <MX_GPIO_Init+0x1e8>)
 8004cfc:	f002 f992 	bl	8007024 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI4_IRQn, 10, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	210a      	movs	r1, #10
 8004d04:	200a      	movs	r0, #10
 8004d06:	f001 fd53 	bl	80067b0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004d0a:	200a      	movs	r0, #10
 8004d0c:	f001 fd6c 	bl	80067e8 <HAL_NVIC_EnableIRQ>

}
 8004d10:	bf00      	nop
 8004d12:	3730      	adds	r7, #48	; 0x30
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40023800 	.word	0x40023800
 8004d1c:	40021400 	.word	0x40021400
 8004d20:	40020800 	.word	0x40020800
 8004d24:	40020000 	.word	0x40020000
 8004d28:	40020400 	.word	0x40020400
 8004d2c:	40021000 	.word	0x40021000

08004d30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	LcdUartReceiveCallback(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f7fd fa7f 	bl	800223c <LcdUartReceiveCallback>
	BTUartReceiveCallback(huart);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fd ff7a 	bl	8002c38 <BTUartReceiveCallback>
	WiFiUartReceiveCallback(huart);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7fd ffa1 	bl	8002c8c <WiFiUartReceiveCallback>
}
 8004d4a:	bf00      	nop
 8004d4c:	3708      	adds	r7, #8
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <StartCommTask>:

void StartCommTask(void *argument) {
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b082      	sub	sp, #8
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
	StartLcdUartReceiveProc();
 8004d5a:	f7fd fa5d 	bl	8002218 <StartLcdUartReceiveProc>

	StartBTUartReceiveProc();
 8004d5e:	f7fd ff59 	bl	8002c14 <StartBTUartReceiveProc>
	StartWiFiUartReceiveProc();
 8004d62:	f7fd ff81 	bl	8002c68 <StartWiFiUartReceiveProc>
	/* Initialize the BSP. */

	/* Infinite loop */
	for (;;) {
		EsimationLcdUartComm();
 8004d66:	f7fd fb05 	bl	8002374 <EsimationLcdUartComm>
		osDelay(5);
 8004d6a:	2005      	movs	r0, #5
 8004d6c:	f010 fd56 	bl	801581c <osDelay>
		EsimationLcdUartComm();
 8004d70:	e7f9      	b.n	8004d66 <StartCommTask+0x14>
	...

08004d74 <SendEmailInit>:
	}
}

void SendEmailInit(void) {
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	gu8RetryCount = 0;
 8004d78:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <SendEmailInit+0x1c>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	701a      	strb	r2, [r3, #0]
	gu8SocketStatus = SocketInit;
 8004d7e:	4b05      	ldr	r3, [pc, #20]	; (8004d94 <SendEmailInit+0x20>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	701a      	strb	r2, [r3, #0]
}
 8004d84:	bf00      	nop
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	200113b4 	.word	0x200113b4
 8004d94:	20010ab0 	.word	0x20010ab0

08004d98 <StartWiFiProvTask>:

void StartWiFiProvTask(void *argument) {
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af02      	add	r7, sp, #8
 8004d9e:	6078      	str	r0, [r7, #4]
	uint8_t app_state = APP_STATE_IDLE;
 8004da0:	2300      	movs	r3, #0
 8004da2:	77fb      	strb	r3, [r7, #31]
	uint8_t wifi_con_state = M2M_WIFI_UNDEF;
 8004da4:	23ff      	movs	r3, #255	; 0xff
 8004da6:	77bb      	strb	r3, [r7, #30]
	at_ble_events_t ble_event;

	int8_t ret;
	struct sockaddr_in addr;

	printf("This is BLE Test version\r\n");
 8004da8:	484b      	ldr	r0, [pc, #300]	; (8004ed8 <StartWiFiProvTask+0x140>)
 8004daa:	f019 fc67 	bl	801e67c <puts>
	sprintf(strSendingEmail, "This email is from SOMA Board\r\n");
 8004dae:	494b      	ldr	r1, [pc, #300]	; (8004edc <StartWiFiProvTask+0x144>)
 8004db0:	484b      	ldr	r0, [pc, #300]	; (8004ee0 <StartWiFiProvTask+0x148>)
 8004db2:	f019 fce5 	bl	801e780 <siprintf>
	nm_bsp_init();
 8004db6:	f013 ff84 	bl	8018cc2 <nm_bsp_init>
//	addr.sin_port = _htons(MAIN_WIFI_M2M_SERVER_PORT);
//	addr.sin_addr.s_addr = _htonl(MAIN_WIFI_M2M_SERVER_IP);

	/* Initialize WiFi interface first.
	 3400 WiFi HIF is used to convey BLE API primitives.*/
	app_wifi_init(app_wifi_handle_event);
 8004dba:	484a      	ldr	r0, [pc, #296]	; (8004ee4 <StartWiFiProvTask+0x14c>)
 8004dbc:	f7fe f8ca 	bl	8002f54 <app_wifi_init>
	//nm_bsp_btn_init(app_button_press_callback);

	// Init socket Module
	socketInit();
 8004dc0:	f018 fb72 	bl	801d4a8 <socketInit>
	registerSocketCallback(socket_cb, resolve_cb);
 8004dc4:	4948      	ldr	r1, [pc, #288]	; (8004ee8 <StartWiFiProvTask+0x150>)
 8004dc6:	4849      	ldr	r0, [pc, #292]	; (8004eec <StartWiFiProvTask+0x154>)
 8004dc8:	f018 fb8e 	bl	801d4e8 <registerSocketCallback>

	/* SNTP configuration */
	ret = m2m_wifi_configure_sntp((uint8_t*) MAIN_WORLDWIDE_NTP_POOL_HOSTNAME,
 8004dcc:	2201      	movs	r2, #1
 8004dce:	210e      	movs	r1, #14
 8004dd0:	4847      	ldr	r0, [pc, #284]	; (8004ef0 <StartWiFiProvTask+0x158>)
 8004dd2:	f016 f808 	bl	801ade6 <m2m_wifi_configure_sntp>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	777b      	strb	r3, [r7, #29]
			strlen(MAIN_WORLDWIDE_NTP_POOL_HOSTNAME), SNTP_ENABLE_DHCP);
	if (M2M_SUCCESS != ret) {
 8004dda:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <StartWiFiProvTask+0x52>
		printf("main: SNTP %s configuration Failure\r\n",
 8004de2:	4943      	ldr	r1, [pc, #268]	; (8004ef0 <StartWiFiProvTask+0x158>)
 8004de4:	4843      	ldr	r0, [pc, #268]	; (8004ef4 <StartWiFiProvTask+0x15c>)
 8004de6:	f019 fbad 	bl	801e544 <iprintf>
				MAIN_WORLDWIDE_NTP_POOL_HOSTNAME);
	}

	/* Connect to AP. */
	m2m_wifi_connect((char*) MAIN_WLAN_SSID, sizeof(MAIN_WLAN_SSID),
 8004dea:	23ff      	movs	r3, #255	; 0xff
 8004dec:	9300      	str	r3, [sp, #0]
 8004dee:	4b42      	ldr	r3, [pc, #264]	; (8004ef8 <StartWiFiProvTask+0x160>)
 8004df0:	2202      	movs	r2, #2
 8004df2:	211a      	movs	r1, #26
 8004df4:	4841      	ldr	r0, [pc, #260]	; (8004efc <StartWiFiProvTask+0x164>)
 8004df6:	f015 fe56 	bl	801aaa6 <m2m_wifi_connect>
//			}
//		}

		// SMTP Test
//		if (gu8WiFiConnectionState == M2M_WIFI_CONNECTED)
		m2m_wifi_handle_events(NULL);
 8004dfa:	2000      	movs	r0, #0
 8004dfc:	f015 fb84 	bl	801a508 <m2m_wifi_handle_events>

		if (flagOneMinute) {
 8004e00:	4b3f      	ldr	r3, [pc, #252]	; (8004f00 <StartWiFiProvTask+0x168>)
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d063      	beq.n	8004ed0 <StartWiFiProvTask+0x138>
			if (gbConnectedWifi && gbHostIpByName) {
 8004e08:	4b3e      	ldr	r3, [pc, #248]	; (8004f04 <StartWiFiProvTask+0x16c>)
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d05f      	beq.n	8004ed0 <StartWiFiProvTask+0x138>
 8004e10:	4b3d      	ldr	r3, [pc, #244]	; (8004f08 <StartWiFiProvTask+0x170>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05b      	beq.n	8004ed0 <StartWiFiProvTask+0x138>
				if (gu8SocketStatus == SocketInit) {
 8004e18:	4b3c      	ldr	r3, [pc, #240]	; (8004f0c <StartWiFiProvTask+0x174>)
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d110      	bne.n	8004e42 <StartWiFiProvTask+0xaa>
					if (tcp_client_socket < 0) {
 8004e20:	4b3b      	ldr	r3, [pc, #236]	; (8004f10 <StartWiFiProvTask+0x178>)
 8004e22:	f993 3000 	ldrsb.w	r3, [r3]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	da52      	bge.n	8004ed0 <StartWiFiProvTask+0x138>
						gu8SocketStatus = SocketWaiting;
 8004e2a:	4b38      	ldr	r3, [pc, #224]	; (8004f0c <StartWiFiProvTask+0x174>)
 8004e2c:	2202      	movs	r2, #2
 8004e2e:	701a      	strb	r2, [r3, #0]
						if (smtpConnect() != SOCK_ERR_NO_ERROR) {
 8004e30:	f7fe fb4c 	bl	80034cc <smtpConnect>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d04a      	beq.n	8004ed0 <StartWiFiProvTask+0x138>
							gu8SocketStatus = SocketInit;
 8004e3a:	4b34      	ldr	r3, [pc, #208]	; (8004f0c <StartWiFiProvTask+0x174>)
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	701a      	strb	r2, [r3, #0]
 8004e40:	e046      	b.n	8004ed0 <StartWiFiProvTask+0x138>
						}
					}
				} else if (gu8SocketStatus == SocketConnect) {
 8004e42:	4b32      	ldr	r3, [pc, #200]	; (8004f0c <StartWiFiProvTask+0x174>)
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d116      	bne.n	8004e78 <StartWiFiProvTask+0xe0>
					gu8SocketStatus = SocketWaiting;
 8004e4a:	4b30      	ldr	r3, [pc, #192]	; (8004f0c <StartWiFiProvTask+0x174>)
 8004e4c:	2202      	movs	r2, #2
 8004e4e:	701a      	strb	r2, [r3, #0]
					if (smtpStateHandler() != MAIN_EMAIL_ERROR_NONE) {
 8004e50:	f7fe fc12 	bl	8003678 <smtpStateHandler>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d03a      	beq.n	8004ed0 <StartWiFiProvTask+0x138>
						if (gs8EmailError == MAIN_EMAIL_ERROR_INIT) {
 8004e5a:	4b2e      	ldr	r3, [pc, #184]	; (8004f14 <StartWiFiProvTask+0x17c>)
 8004e5c:	f993 3000 	ldrsb.w	r3, [r3]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d103      	bne.n	8004e6c <StartWiFiProvTask+0xd4>
							gu8SocketStatus = SocketError;
 8004e64:	4b29      	ldr	r3, [pc, #164]	; (8004f0c <StartWiFiProvTask+0x174>)
 8004e66:	2204      	movs	r2, #4
 8004e68:	701a      	strb	r2, [r3, #0]
 8004e6a:	e031      	b.n	8004ed0 <StartWiFiProvTask+0x138>
						} else {
							close_socket();
 8004e6c:	f7fe fff8 	bl	8003e60 <close_socket>
							flagOneMinute = 0;
 8004e70:	4b23      	ldr	r3, [pc, #140]	; (8004f00 <StartWiFiProvTask+0x168>)
 8004e72:	2200      	movs	r2, #0
 8004e74:	701a      	strb	r2, [r3, #0]
 8004e76:	e02b      	b.n	8004ed0 <StartWiFiProvTask+0x138>
//							break;
						}
					}
				} else if (gu8SocketStatus == SocketComplete) {
 8004e78:	4b24      	ldr	r3, [pc, #144]	; (8004f0c <StartWiFiProvTask+0x174>)
 8004e7a:	781b      	ldrb	r3, [r3, #0]
 8004e7c:	2b03      	cmp	r3, #3
 8004e7e:	d108      	bne.n	8004e92 <StartWiFiProvTask+0xfa>
					printf("main: Email was successfully sent.\r\n");
 8004e80:	4825      	ldr	r0, [pc, #148]	; (8004f18 <StartWiFiProvTask+0x180>)
 8004e82:	f019 fbfb 	bl	801e67c <puts>
					close_socket();
 8004e86:	f7fe ffeb 	bl	8003e60 <close_socket>
					flagOneMinute = 0;
 8004e8a:	4b1d      	ldr	r3, [pc, #116]	; (8004f00 <StartWiFiProvTask+0x168>)
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e01e      	b.n	8004ed0 <StartWiFiProvTask+0x138>
//					break;
				} else if (gu8SocketStatus == SocketError) {
 8004e92:	4b1e      	ldr	r3, [pc, #120]	; (8004f0c <StartWiFiProvTask+0x174>)
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	2b04      	cmp	r3, #4
 8004e98:	d11a      	bne.n	8004ed0 <StartWiFiProvTask+0x138>
					if (gu8RetryCount < MAIN_RETRY_COUNT) {
 8004e9a:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <StartWiFiProvTask+0x184>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d80b      	bhi.n	8004eba <StartWiFiProvTask+0x122>
						gu8RetryCount++;
 8004ea2:	4b1e      	ldr	r3, [pc, #120]	; (8004f1c <StartWiFiProvTask+0x184>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	b2da      	uxtb	r2, r3
 8004eaa:	4b1c      	ldr	r3, [pc, #112]	; (8004f1c <StartWiFiProvTask+0x184>)
 8004eac:	701a      	strb	r2, [r3, #0]
						printf(
 8004eae:	481c      	ldr	r0, [pc, #112]	; (8004f20 <StartWiFiProvTask+0x188>)
 8004eb0:	f019 fbe4 	bl	801e67c <puts>
								"main: Waiting to connect server.(30 seconds)\r\n\r\n");
						retry_smtp_server();
 8004eb4:	f7fe ffe4 	bl	8003e80 <retry_smtp_server>
 8004eb8:	e00a      	b.n	8004ed0 <StartWiFiProvTask+0x138>
					} else {
						printf(
 8004eba:	481a      	ldr	r0, [pc, #104]	; (8004f24 <StartWiFiProvTask+0x18c>)
 8004ebc:	f019 fbde 	bl	801e67c <puts>
								"main: Failed retry to server. Press reset your board.\r\n");
						gu8RetryCount = 0;
 8004ec0:	4b16      	ldr	r3, [pc, #88]	; (8004f1c <StartWiFiProvTask+0x184>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
						close_socket();
 8004ec6:	f7fe ffcb 	bl	8003e60 <close_socket>
						flagOneMinute = 0;
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <StartWiFiProvTask+0x168>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	701a      	strb	r2, [r3, #0]
//						break;
					}
				}
			}
		}
		osDelay(10);
 8004ed0:	200a      	movs	r0, #10
 8004ed2:	f010 fca3 	bl	801581c <osDelay>
		m2m_wifi_handle_events(NULL);
 8004ed6:	e790      	b.n	8004dfa <StartWiFiProvTask+0x62>
 8004ed8:	080204dc 	.word	0x080204dc
 8004edc:	080204f8 	.word	0x080204f8
 8004ee0:	200123b8 	.word	0x200123b8
 8004ee4:	080031dd 	.word	0x080031dd
 8004ee8:	08003855 	.word	0x08003855
 8004eec:	080038a9 	.word	0x080038a9
 8004ef0:	08020518 	.word	0x08020518
 8004ef4:	08020528 	.word	0x08020528
 8004ef8:	08020550 	.word	0x08020550
 8004efc:	0802055c 	.word	0x0802055c
 8004f00:	200133d0 	.word	0x200133d0
 8004f04:	200113b5 	.word	0x200113b5
 8004f08:	200113b6 	.word	0x200113b6
 8004f0c:	20010ab0 	.word	0x20010ab0
 8004f10:	20000007 	.word	0x20000007
 8004f14:	20010ab1 	.word	0x20010ab1
 8004f18:	08020578 	.word	0x08020578
 8004f1c:	200113b4 	.word	0x200113b4
 8004f20:	0802059c 	.word	0x0802059c
 8004f24:	080205cc 	.word	0x080205cc

08004f28 <HAL_GPIO_EXTI_Callback>:
	}
}

HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	4603      	mov	r3, r0
 8004f30:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == BT_WIFI_IRQN_Pin) {
 8004f32:	88fb      	ldrh	r3, [r7, #6]
 8004f34:	2b10      	cmp	r3, #16
 8004f36:	d101      	bne.n	8004f3c <HAL_GPIO_EXTI_Callback+0x14>
		isr();
 8004f38:	f014 f88e 	bl	8019058 <isr>
	}

}
 8004f3c:	bf00      	nop
 8004f3e:	3708      	adds	r7, #8
 8004f40:	46bd      	mov	sp, r7
 8004f42:	bd80      	pop	{r7, pc}

08004f44 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc) {
 8004f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f48:	b08c      	sub	sp, #48	; 0x30
 8004f4a:	af04      	add	r7, sp, #16
 8004f4c:	6078      	str	r0, [r7, #4]
	char msg[21]; //YYYY-MM-DD HH:mm:SS

	HAL_RTC_GetTime(hrtc, &rtc_time, RTC_FORMAT_BCD);
 8004f4e:	2201      	movs	r2, #1
 8004f50:	4925      	ldr	r1, [pc, #148]	; (8004fe8 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f005 f82e 	bl	8009fb4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(hrtc, &rtc_date, RTC_FORMAT_BCD);
 8004f58:	2201      	movs	r2, #1
 8004f5a:	4924      	ldr	r1, [pc, #144]	; (8004fec <HAL_RTC_AlarmAEventCallback+0xa8>)
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f005 f90b 	bl	800a178 <HAL_RTC_GetDate>

	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f62:	4b22      	ldr	r3, [pc, #136]	; (8004fec <HAL_RTC_AlarmAEventCallback+0xa8>)
 8004f64:	78db      	ldrb	r3, [r3, #3]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fd fe16 	bl	8002b98 <B2D>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
			B2D(rtc_date.Month), B2D(rtc_date.Date), B2D(rtc_time.Hours),
 8004f72:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <HAL_RTC_AlarmAEventCallback+0xa8>)
 8004f74:	785b      	ldrb	r3, [r3, #1]
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fd fe0e 	bl	8002b98 <B2D>
 8004f7c:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f7e:	4698      	mov	r8, r3
			B2D(rtc_date.Month), B2D(rtc_date.Date), B2D(rtc_time.Hours),
 8004f80:	4b1a      	ldr	r3, [pc, #104]	; (8004fec <HAL_RTC_AlarmAEventCallback+0xa8>)
 8004f82:	789b      	ldrb	r3, [r3, #2]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fd fe07 	bl	8002b98 <B2D>
 8004f8a:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f8c:	461d      	mov	r5, r3
			B2D(rtc_date.Month), B2D(rtc_date.Date), B2D(rtc_time.Hours),
 8004f8e:	4b16      	ldr	r3, [pc, #88]	; (8004fe8 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8004f90:	781b      	ldrb	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fd fe00 	bl	8002b98 <B2D>
 8004f98:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004f9a:	461e      	mov	r6, r3
			B2D(rtc_time.Minutes), B2D(rtc_time.Seconds));
 8004f9c:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8004f9e:	785b      	ldrb	r3, [r3, #1]
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fd fdf9 	bl	8002b98 <B2D>
 8004fa6:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004fa8:	603b      	str	r3, [r7, #0]
			B2D(rtc_time.Minutes), B2D(rtc_time.Seconds));
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RTC_AlarmAEventCallback+0xa4>)
 8004fac:	789b      	ldrb	r3, [r3, #2]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fd fdf2 	bl	8002b98 <B2D>
 8004fb4:	4603      	mov	r3, r0
	sprintf(msg, "%04d-%02d-%02d %02d:%02d:%02d\r\n", B2D(rtc_date.Year) + 2000,
 8004fb6:	f107 0008 	add.w	r0, r7, #8
 8004fba:	9303      	str	r3, [sp, #12]
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	9302      	str	r3, [sp, #8]
 8004fc0:	9601      	str	r6, [sp, #4]
 8004fc2:	9500      	str	r5, [sp, #0]
 8004fc4:	4643      	mov	r3, r8
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	4909      	ldr	r1, [pc, #36]	; (8004ff0 <HAL_RTC_AlarmAEventCallback+0xac>)
 8004fca:	f019 fbd9 	bl	801e780 <siprintf>
	printf(msg);
 8004fce:	f107 0308 	add.w	r3, r7, #8
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f019 fab6 	bl	801e544 <iprintf>

	flagOneMinuteOnce = 1;
 8004fd8:	4b06      	ldr	r3, [pc, #24]	; (8004ff4 <HAL_RTC_AlarmAEventCallback+0xb0>)
 8004fda:	2201      	movs	r2, #1
 8004fdc:	701a      	strb	r2, [r3, #0]
}
 8004fde:	bf00      	nop
 8004fe0:	3720      	adds	r7, #32
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fe8:	200133bc 	.word	0x200133bc
 8004fec:	200133b8 	.word	0x200133b8
 8004ff0:	08020604 	.word	0x08020604
 8004ff4:	200133d1 	.word	0x200133d1

08004ff8 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8004ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ffc:	b08c      	sub	sp, #48	; 0x30
 8004ffe:	af06      	add	r7, sp, #24
 8005000:	60f8      	str	r0, [r7, #12]
	/* USER CODE BEGIN 5 */
	uint8_t testNum = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	75fb      	strb	r3, [r7, #23]
	osDelay(500);
 8005006:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800500a:	f010 fc07 	bl	801581c <osDelay>
	sgtl5000_init();
 800500e:	f000 fa9f 	bl	8005550 <sgtl5000_init>
	sgtl5000_set_volume(systemVolume);
 8005012:	4baa      	ldr	r3, [pc, #680]	; (80052bc <StartDefaultTask+0x2c4>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	4618      	mov	r0, r3
 8005018:	f000 fa14 	bl	8005444 <sgtl5000_set_volume>
	osDelay(500);
 800501c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005020:	f010 fbfc 	bl	801581c <osDelay>

	/* Mount SDCARD */
	if (f_mount(&fs, "", 0) != FR_OK)
 8005024:	2200      	movs	r2, #0
 8005026:	49a6      	ldr	r1, [pc, #664]	; (80052c0 <StartDefaultTask+0x2c8>)
 8005028:	48a6      	ldr	r0, [pc, #664]	; (80052c4 <StartDefaultTask+0x2cc>)
 800502a:	f00e fe2d 	bl	8013c88 <f_mount>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <StartDefaultTask+0x40>
		Error_Handler();
 8005034:	f000 f9a0 	bl	8005378 <Error_Handler>

	/* Open file to write */
	if (f_open(&fil, "logTXT.txt", FA_OPEN_APPEND | FA_READ | FA_WRITE)
 8005038:	2233      	movs	r2, #51	; 0x33
 800503a:	49a3      	ldr	r1, [pc, #652]	; (80052c8 <StartDefaultTask+0x2d0>)
 800503c:	48a3      	ldr	r0, [pc, #652]	; (80052cc <StartDefaultTask+0x2d4>)
 800503e:	f00e fe87 	bl	8013d50 <f_open>
 8005042:	4603      	mov	r3, r0
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <StartDefaultTask+0x54>
			!= FR_OK)
		Error_Handler();
 8005048:	f000 f996 	bl	8005378 <Error_Handler>

	/* Check freeSpace space */
	if (f_getfree("", &fre_clust, &pfs) != FR_OK)
 800504c:	4aa0      	ldr	r2, [pc, #640]	; (80052d0 <StartDefaultTask+0x2d8>)
 800504e:	49a1      	ldr	r1, [pc, #644]	; (80052d4 <StartDefaultTask+0x2dc>)
 8005050:	489b      	ldr	r0, [pc, #620]	; (80052c0 <StartDefaultTask+0x2c8>)
 8005052:	f00f ffc4 	bl	8014fde <f_getfree>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d001      	beq.n	8005060 <StartDefaultTask+0x68>
		Error_Handler();
 800505c:	f000 f98c 	bl	8005378 <Error_Handler>

	totalSpace = (uint32_t) ((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8005060:	4b9b      	ldr	r3, [pc, #620]	; (80052d0 <StartDefaultTask+0x2d8>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	3b02      	subs	r3, #2
 8005068:	4a99      	ldr	r2, [pc, #612]	; (80052d0 <StartDefaultTask+0x2d8>)
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	8952      	ldrh	r2, [r2, #10]
 800506e:	fb02 f303 	mul.w	r3, r2, r3
 8005072:	4618      	mov	r0, r3
 8005074:	f7fb fb90 	bl	8000798 <__aeabi_ui2d>
 8005078:	f04f 0200 	mov.w	r2, #0
 800507c:	4b96      	ldr	r3, [pc, #600]	; (80052d8 <StartDefaultTask+0x2e0>)
 800507e:	f7fb f91f 	bl	80002c0 <__aeabi_dmul>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f7fb fbff 	bl	800088c <__aeabi_d2uiz>
 800508e:	4603      	mov	r3, r0
 8005090:	4a92      	ldr	r2, [pc, #584]	; (80052dc <StartDefaultTask+0x2e4>)
 8005092:	6013      	str	r3, [r2, #0]
	freeSpace = (uint32_t) (fre_clust * pfs->csize * 0.5);
 8005094:	4b8e      	ldr	r3, [pc, #568]	; (80052d0 <StartDefaultTask+0x2d8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	895b      	ldrh	r3, [r3, #10]
 800509a:	461a      	mov	r2, r3
 800509c:	4b8d      	ldr	r3, [pc, #564]	; (80052d4 <StartDefaultTask+0x2dc>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	fb02 f303 	mul.w	r3, r2, r3
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7fb fb77 	bl	8000798 <__aeabi_ui2d>
 80050aa:	f04f 0200 	mov.w	r2, #0
 80050ae:	4b8a      	ldr	r3, [pc, #552]	; (80052d8 <StartDefaultTask+0x2e0>)
 80050b0:	f7fb f906 	bl	80002c0 <__aeabi_dmul>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	f7fb fbe6 	bl	800088c <__aeabi_d2uiz>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4a87      	ldr	r2, [pc, #540]	; (80052e0 <StartDefaultTask+0x2e8>)
 80050c4:	6013      	str	r3, [r2, #0]

	/* free space is less than 1kb */
	if (freeSpace < 1)
 80050c6:	4b86      	ldr	r3, [pc, #536]	; (80052e0 <StartDefaultTask+0x2e8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <StartDefaultTask+0xda>
		Error_Handler();
 80050ce:	f000 f953 	bl	8005378 <Error_Handler>

	/* Writing text */
	f_puts("This is for testing SD card.\r\n", &fil);
 80050d2:	497e      	ldr	r1, [pc, #504]	; (80052cc <StartDefaultTask+0x2d4>)
 80050d4:	4883      	ldr	r0, [pc, #524]	; (80052e4 <StartDefaultTask+0x2ec>)
 80050d6:	f010 f8f2 	bl	80152be <f_puts>

	/* Close file */
	if (f_close(&fil) != FR_OK)
 80050da:	487c      	ldr	r0, [pc, #496]	; (80052cc <StartDefaultTask+0x2d4>)
 80050dc:	f00f fce2 	bl	8014aa4 <f_close>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d001      	beq.n	80050ea <StartDefaultTask+0xf2>
		Error_Handler();
 80050e6:	f000 f947 	bl	8005378 <Error_Handler>

	/* Unmount SDCARD */
	if (f_mount(NULL, "", 1) != FR_OK)
 80050ea:	2201      	movs	r2, #1
 80050ec:	4974      	ldr	r1, [pc, #464]	; (80052c0 <StartDefaultTask+0x2c8>)
 80050ee:	2000      	movs	r0, #0
 80050f0:	f00e fdca 	bl	8013c88 <f_mount>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d001      	beq.n	80050fe <StartDefaultTask+0x106>
		Error_Handler();
 80050fa:	f000 f93d 	bl	8005378 <Error_Handler>

	/* Infinite loop */
	for (;;) {
		switch (playState) {
 80050fe:	4b7a      	ldr	r3, [pc, #488]	; (80052e8 <StartDefaultTask+0x2f0>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	2b02      	cmp	r3, #2
 8005104:	f000 8104 	beq.w	8005310 <StartDefaultTask+0x318>
 8005108:	2b02      	cmp	r3, #2
 800510a:	dcf8      	bgt.n	80050fe <StartDefaultTask+0x106>
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <StartDefaultTask+0x120>
 8005110:	2b01      	cmp	r3, #1
 8005112:	f000 80cc 	beq.w	80052ae <StartDefaultTask+0x2b6>
 8005116:	e7f2      	b.n	80050fe <StartDefaultTask+0x106>
		case PLAY_NONE:
			if (flagOneMinuteOnce) {
 8005118:	4b74      	ldr	r3, [pc, #464]	; (80052ec <StartDefaultTask+0x2f4>)
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80c2 	beq.w	80052a6 <StartDefaultTask+0x2ae>
				flagOneMinuteOnce = 0;
 8005122:	4b72      	ldr	r3, [pc, #456]	; (80052ec <StartDefaultTask+0x2f4>)
 8005124:	2200      	movs	r2, #0
 8005126:	701a      	strb	r2, [r3, #0]
				HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BCD);
 8005128:	2201      	movs	r2, #1
 800512a:	4971      	ldr	r1, [pc, #452]	; (80052f0 <StartDefaultTask+0x2f8>)
 800512c:	4871      	ldr	r0, [pc, #452]	; (80052f4 <StartDefaultTask+0x2fc>)
 800512e:	f004 ff41 	bl	8009fb4 <HAL_RTC_GetTime>
				HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BCD);
 8005132:	2201      	movs	r2, #1
 8005134:	4970      	ldr	r1, [pc, #448]	; (80052f8 <StartDefaultTask+0x300>)
 8005136:	486f      	ldr	r0, [pc, #444]	; (80052f4 <StartDefaultTask+0x2fc>)
 8005138:	f005 f81e 	bl	800a178 <HAL_RTC_GetDate>

				sprintf(strSendingEmail,
						"This email is from SOMA Board\r\n %04d-%02d-%02d %02d:%02d:%02d\r\n",
						B2D(rtc_date.Year) + 2000, B2D(rtc_date.Month),
 800513c:	4b6e      	ldr	r3, [pc, #440]	; (80052f8 <StartDefaultTask+0x300>)
 800513e:	78db      	ldrb	r3, [r3, #3]
 8005140:	4618      	mov	r0, r3
 8005142:	f7fd fd29 	bl	8002b98 <B2D>
 8005146:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005148:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
						B2D(rtc_date.Year) + 2000, B2D(rtc_date.Month),
 800514c:	4b6a      	ldr	r3, [pc, #424]	; (80052f8 <StartDefaultTask+0x300>)
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	4618      	mov	r0, r3
 8005152:	f7fd fd21 	bl	8002b98 <B2D>
 8005156:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005158:	4698      	mov	r8, r3
						B2D(rtc_date.Date), B2D(rtc_time.Hours),
 800515a:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <StartDefaultTask+0x300>)
 800515c:	789b      	ldrb	r3, [r3, #2]
 800515e:	4618      	mov	r0, r3
 8005160:	f7fd fd1a 	bl	8002b98 <B2D>
 8005164:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005166:	461d      	mov	r5, r3
						B2D(rtc_date.Date), B2D(rtc_time.Hours),
 8005168:	4b61      	ldr	r3, [pc, #388]	; (80052f0 <StartDefaultTask+0x2f8>)
 800516a:	781b      	ldrb	r3, [r3, #0]
 800516c:	4618      	mov	r0, r3
 800516e:	f7fd fd13 	bl	8002b98 <B2D>
 8005172:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005174:	461e      	mov	r6, r3
						B2D(rtc_time.Minutes), B2D(rtc_time.Seconds));
 8005176:	4b5e      	ldr	r3, [pc, #376]	; (80052f0 <StartDefaultTask+0x2f8>)
 8005178:	785b      	ldrb	r3, [r3, #1]
 800517a:	4618      	mov	r0, r3
 800517c:	f7fd fd0c 	bl	8002b98 <B2D>
 8005180:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005182:	60bb      	str	r3, [r7, #8]
						B2D(rtc_time.Minutes), B2D(rtc_time.Seconds));
 8005184:	4b5a      	ldr	r3, [pc, #360]	; (80052f0 <StartDefaultTask+0x2f8>)
 8005186:	789b      	ldrb	r3, [r3, #2]
 8005188:	4618      	mov	r0, r3
 800518a:	f7fd fd05 	bl	8002b98 <B2D>
 800518e:	4603      	mov	r3, r0
				sprintf(strSendingEmail,
 8005190:	9303      	str	r3, [sp, #12]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	9302      	str	r3, [sp, #8]
 8005196:	9601      	str	r6, [sp, #4]
 8005198:	9500      	str	r5, [sp, #0]
 800519a:	4643      	mov	r3, r8
 800519c:	4622      	mov	r2, r4
 800519e:	4957      	ldr	r1, [pc, #348]	; (80052fc <StartDefaultTask+0x304>)
 80051a0:	4857      	ldr	r0, [pc, #348]	; (8005300 <StartDefaultTask+0x308>)
 80051a2:	f019 faed 	bl	801e780 <siprintf>

				memcpy(strLogBuffer, 0, sizeof(strLogBuffer));
 80051a6:	4a57      	ldr	r2, [pc, #348]	; (8005304 <StartDefaultTask+0x30c>)
 80051a8:	2300      	movs	r3, #0
 80051aa:	4610      	mov	r0, r2
 80051ac:	4619      	mov	r1, r3
 80051ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051b2:	461a      	mov	r2, r3
 80051b4:	f019 f8b6 	bl	801e324 <memcpy>
				/* Mount SDCARD */
				if (f_mount(&fs, "", 0) != FR_OK)
 80051b8:	2200      	movs	r2, #0
 80051ba:	4941      	ldr	r1, [pc, #260]	; (80052c0 <StartDefaultTask+0x2c8>)
 80051bc:	4841      	ldr	r0, [pc, #260]	; (80052c4 <StartDefaultTask+0x2cc>)
 80051be:	f00e fd63 	bl	8013c88 <f_mount>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d001      	beq.n	80051cc <StartDefaultTask+0x1d4>
					Error_Handler();
 80051c8:	f000 f8d6 	bl	8005378 <Error_Handler>

				if (f_open(&fil, "logTXT.txt", FA_READ) != FR_OK)
 80051cc:	2201      	movs	r2, #1
 80051ce:	493e      	ldr	r1, [pc, #248]	; (80052c8 <StartDefaultTask+0x2d0>)
 80051d0:	483e      	ldr	r0, [pc, #248]	; (80052cc <StartDefaultTask+0x2d4>)
 80051d2:	f00e fdbd 	bl	8013d50 <f_open>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d006      	beq.n	80051ea <StartDefaultTask+0x1f2>
					Error_Handler();
 80051dc:	f000 f8cc 	bl	8005378 <Error_Handler>

				while (f_gets(strLogBuffer, sizeof(strLogBuffer), &fil)) {
 80051e0:	e003      	b.n	80051ea <StartDefaultTask+0x1f2>
					strcpy(strSendingEmail, strLogBuffer);
 80051e2:	4948      	ldr	r1, [pc, #288]	; (8005304 <StartDefaultTask+0x30c>)
 80051e4:	4846      	ldr	r0, [pc, #280]	; (8005300 <StartDefaultTask+0x308>)
 80051e6:	f019 fb2e 	bl	801e846 <strcpy>
				while (f_gets(strLogBuffer, sizeof(strLogBuffer), &fil)) {
 80051ea:	4a38      	ldr	r2, [pc, #224]	; (80052cc <StartDefaultTask+0x2d4>)
 80051ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80051f0:	4844      	ldr	r0, [pc, #272]	; (8005304 <StartDefaultTask+0x30c>)
 80051f2:	f00f ffb0 	bl	8015156 <f_gets>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1f2      	bne.n	80051e2 <StartDefaultTask+0x1ea>
				}
				printf(strSendingEmail);
 80051fc:	4840      	ldr	r0, [pc, #256]	; (8005300 <StartDefaultTask+0x308>)
 80051fe:	f019 f9a1 	bl	801e544 <iprintf>

				if (f_close(&fil) != FR_OK)
 8005202:	4832      	ldr	r0, [pc, #200]	; (80052cc <StartDefaultTask+0x2d4>)
 8005204:	f00f fc4e 	bl	8014aa4 <f_close>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <StartDefaultTask+0x21a>
					Error_Handler();
 800520e:	f000 f8b3 	bl	8005378 <Error_Handler>
//					/* Close file */
//					if(f_close(&fil) != FR_OK)
//						Error_Handler();

				/* Unmount SDCARD */
				if (f_mount(NULL, "", 1) != FR_OK)
 8005212:	2201      	movs	r2, #1
 8005214:	492a      	ldr	r1, [pc, #168]	; (80052c0 <StartDefaultTask+0x2c8>)
 8005216:	2000      	movs	r0, #0
 8005218:	f00e fd36 	bl	8013c88 <f_mount>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <StartDefaultTask+0x22e>
					Error_Handler();
 8005222:	f000 f8a9 	bl	8005378 <Error_Handler>

				if (flagOneMinute == 0) {
 8005226:	4b38      	ldr	r3, [pc, #224]	; (8005308 <StartDefaultTask+0x310>)
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d13b      	bne.n	80052a6 <StartDefaultTask+0x2ae>
					sprintf(strSendingEmail,
							"%s\r\n This email is from SOMA Board\r\n GMT %04d-%02d-%02d %02d:%02d:%02d\r\n",
							strSendingEmail, B2D(rtc_date.Year) + 2000,
 800522e:	4b32      	ldr	r3, [pc, #200]	; (80052f8 <StartDefaultTask+0x300>)
 8005230:	78db      	ldrb	r3, [r3, #3]
 8005232:	4618      	mov	r0, r3
 8005234:	f7fd fcb0 	bl	8002b98 <B2D>
 8005238:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 800523a:	f503 64fa 	add.w	r4, r3, #2000	; 0x7d0
							B2D(rtc_date.Month), B2D(rtc_date.Date),
 800523e:	4b2e      	ldr	r3, [pc, #184]	; (80052f8 <StartDefaultTask+0x300>)
 8005240:	785b      	ldrb	r3, [r3, #1]
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd fca8 	bl	8002b98 <B2D>
 8005248:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 800524a:	461d      	mov	r5, r3
							B2D(rtc_date.Month), B2D(rtc_date.Date),
 800524c:	4b2a      	ldr	r3, [pc, #168]	; (80052f8 <StartDefaultTask+0x300>)
 800524e:	789b      	ldrb	r3, [r3, #2]
 8005250:	4618      	mov	r0, r3
 8005252:	f7fd fca1 	bl	8002b98 <B2D>
 8005256:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 8005258:	461e      	mov	r6, r3
							B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 800525a:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <StartDefaultTask+0x2f8>)
 800525c:	781b      	ldrb	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f7fd fc9a 	bl	8002b98 <B2D>
 8005264:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 8005266:	60bb      	str	r3, [r7, #8]
							B2D(rtc_time.Hours), B2D(rtc_time.Minutes),
 8005268:	4b21      	ldr	r3, [pc, #132]	; (80052f0 <StartDefaultTask+0x2f8>)
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	4618      	mov	r0, r3
 800526e:	f7fd fc93 	bl	8002b98 <B2D>
 8005272:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 8005274:	607b      	str	r3, [r7, #4]
							B2D(rtc_time.Seconds));
 8005276:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <StartDefaultTask+0x2f8>)
 8005278:	789b      	ldrb	r3, [r3, #2]
 800527a:	4618      	mov	r0, r3
 800527c:	f7fd fc8c 	bl	8002b98 <B2D>
 8005280:	4603      	mov	r3, r0
					sprintf(strSendingEmail,
 8005282:	9304      	str	r3, [sp, #16]
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	9203      	str	r2, [sp, #12]
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	9302      	str	r3, [sp, #8]
 800528c:	9601      	str	r6, [sp, #4]
 800528e:	9500      	str	r5, [sp, #0]
 8005290:	4623      	mov	r3, r4
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <StartDefaultTask+0x308>)
 8005294:	491d      	ldr	r1, [pc, #116]	; (800530c <StartDefaultTask+0x314>)
 8005296:	481a      	ldr	r0, [pc, #104]	; (8005300 <StartDefaultTask+0x308>)
 8005298:	f019 fa72 	bl	801e780 <siprintf>

					SendEmailInit();
 800529c:	f7ff fd6a 	bl	8004d74 <SendEmailInit>
					flagOneMinute = 1;
 80052a0:	4b19      	ldr	r3, [pc, #100]	; (8005308 <StartDefaultTask+0x310>)
 80052a2:	2201      	movs	r2, #1
 80052a4:	701a      	strb	r2, [r3, #0]
				}
			}
			osDelay(10);
 80052a6:	200a      	movs	r0, #10
 80052a8:	f010 fab8 	bl	801581c <osDelay>
			break;
 80052ac:	e049      	b.n	8005342 <StartDefaultTask+0x34a>

		case PLAY_READY:
			sgtl5000_start_play();
 80052ae:	f000 f90b 	bl	80054c8 <sgtl5000_start_play>
			playState = PLAY_STARTED;
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <StartDefaultTask+0x2f0>)
 80052b4:	2202      	movs	r2, #2
 80052b6:	701a      	strb	r2, [r3, #0]
			break;
 80052b8:	e043      	b.n	8005342 <StartDefaultTask+0x34a>
 80052ba:	bf00      	nop
 80052bc:	20000008 	.word	0x20000008
 80052c0:	0801fcec 	.word	0x0801fcec
 80052c4:	2000ea2c 	.word	0x2000ea2c
 80052c8:	0801fcf0 	.word	0x0801fcf0
 80052cc:	2000fa6c 	.word	0x2000fa6c
 80052d0:	2000fa68 	.word	0x2000fa68
 80052d4:	20010a9c 	.word	0x20010a9c
 80052d8:	3fe00000 	.word	0x3fe00000
 80052dc:	20010aa0 	.word	0x20010aa0
 80052e0:	20010aa4 	.word	0x20010aa4
 80052e4:	08020624 	.word	0x08020624
 80052e8:	2000e9a8 	.word	0x2000e9a8
 80052ec:	200133d1 	.word	0x200133d1
 80052f0:	200133bc 	.word	0x200133bc
 80052f4:	2000e5e4 	.word	0x2000e5e4
 80052f8:	200133b8 	.word	0x200133b8
 80052fc:	08020644 	.word	0x08020644
 8005300:	200123b8 	.word	0x200123b8
 8005304:	200113b8 	.word	0x200113b8
 8005308:	200133d0 	.word	0x200133d0
 800530c:	08020684 	.word	0x08020684

		case PLAY_STARTED:
			/* Mount SDCARD */
			if (f_mount(&fs, "", 0) != FR_OK)
 8005310:	2200      	movs	r2, #0
 8005312:	490c      	ldr	r1, [pc, #48]	; (8005344 <StartDefaultTask+0x34c>)
 8005314:	480c      	ldr	r0, [pc, #48]	; (8005348 <StartDefaultTask+0x350>)
 8005316:	f00e fcb7 	bl	8013c88 <f_mount>
 800531a:	4603      	mov	r3, r0
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <StartDefaultTask+0x32c>
				Error_Handler();
 8005320:	f000 f82a 	bl	8005378 <Error_Handler>
			PlayAudioFile(audioFileName, "playMP3");
 8005324:	4909      	ldr	r1, [pc, #36]	; (800534c <StartDefaultTask+0x354>)
 8005326:	480a      	ldr	r0, [pc, #40]	; (8005350 <StartDefaultTask+0x358>)
 8005328:	f7fb fd0e 	bl	8000d48 <PlayAudioFile>
			/* Unmount SDCARD */
			if (f_mount(NULL, "", 1) != FR_OK)
 800532c:	2201      	movs	r2, #1
 800532e:	4905      	ldr	r1, [pc, #20]	; (8005344 <StartDefaultTask+0x34c>)
 8005330:	2000      	movs	r0, #0
 8005332:	f00e fca9 	bl	8013c88 <f_mount>
 8005336:	4603      	mov	r3, r0
 8005338:	2b00      	cmp	r3, #0
 800533a:	d001      	beq.n	8005340 <StartDefaultTask+0x348>
				Error_Handler();
 800533c:	f000 f81c 	bl	8005378 <Error_Handler>
			break;
 8005340:	bf00      	nop
		switch (playState) {
 8005342:	e6dc      	b.n	80050fe <StartDefaultTask+0x106>
 8005344:	0801fcec 	.word	0x0801fcec
 8005348:	2000ea2c 	.word	0x2000ea2c
 800534c:	080206d0 	.word	0x080206d0
 8005350:	2000e9ac 	.word	0x2000e9ac

08005354 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a04      	ldr	r2, [pc, #16]	; (8005374 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d101      	bne.n	800536a <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8005366:	f001 f903 	bl	8006570 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800536a:	bf00      	nop
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}
 8005372:	bf00      	nop
 8005374:	40000c00 	.word	0x40000c00

08005378 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800537c:	b672      	cpsid	i
}
 800537e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8005380:	e7fe      	b.n	8005380 <Error_Handler+0x8>
	...

08005384 <sgtl5000_read>:
CHIP_ANA_CTRL		chip_ana_ctrl;
CHIP_MIC_CTRL 		chip_mic_ctrl;
CHIP_SSS_CTRL 		chip_sss_ctrl;


uint16_t sgtl5000_read(uint16_t reg){
 8005384:	b580      	push	{r7, lr}
 8005386:	b086      	sub	sp, #24
 8005388:	af02      	add	r7, sp, #8
 800538a:	4603      	mov	r3, r0
 800538c:	80fb      	strh	r3, [r7, #6]
	uint8_t buff[2];

	buff[1]=0xff & reg;
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	b2db      	uxtb	r3, r3
 8005392:	737b      	strb	r3, [r7, #13]
	buff[0]=0xff & reg>>8;
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	0a1b      	lsrs	r3, r3, #8
 8005398:	b29b      	uxth	r3, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(&hi2c2,WRITE_ADDRESS,buff,2,0xFF);
 800539e:	f107 020c 	add.w	r2, r7, #12
 80053a2:	23ff      	movs	r3, #255	; 0xff
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	2302      	movs	r3, #2
 80053a8:	2114      	movs	r1, #20
 80053aa:	480f      	ldr	r0, [pc, #60]	; (80053e8 <sgtl5000_read+0x64>)
 80053ac:	f002 f95c 	bl	8007668 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80053b0:	2001      	movs	r0, #1
 80053b2:	f001 f8fd 	bl	80065b0 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c2, READ_ADDRESS, buff, 2, 0xFF);
 80053b6:	f107 020c 	add.w	r2, r7, #12
 80053ba:	23ff      	movs	r3, #255	; 0xff
 80053bc:	9300      	str	r3, [sp, #0]
 80053be:	2302      	movs	r3, #2
 80053c0:	2115      	movs	r1, #21
 80053c2:	4809      	ldr	r0, [pc, #36]	; (80053e8 <sgtl5000_read+0x64>)
 80053c4:	f002 fa4e 	bl	8007864 <HAL_I2C_Master_Receive>
	HAL_Delay(1);
 80053c8:	2001      	movs	r0, #1
 80053ca:	f001 f8f1 	bl	80065b0 <HAL_Delay>
	return (uint16_t)buff[0]<<8 | buff[1];
 80053ce:	7b3b      	ldrb	r3, [r7, #12]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	b21a      	sxth	r2, r3
 80053d4:	7b7b      	ldrb	r3, [r7, #13]
 80053d6:	b21b      	sxth	r3, r3
 80053d8:	4313      	orrs	r3, r2
 80053da:	b21b      	sxth	r3, r3
 80053dc:	b29b      	uxth	r3, r3

}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	2000e488 	.word	0x2000e488

080053ec <sgtl5000_write>:

void sgtl5000_write(uint16_t reg, uint16_t data){
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	4603      	mov	r3, r0
 80053f4:	460a      	mov	r2, r1
 80053f6:	80fb      	strh	r3, [r7, #6]
 80053f8:	4613      	mov	r3, r2
 80053fa:	80bb      	strh	r3, [r7, #4]

	uint8_t buff[4];

	buff[3]=0xff & data;
 80053fc:	88bb      	ldrh	r3, [r7, #4]
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	72fb      	strb	r3, [r7, #11]
	buff[2]=0xff & data>>8;
 8005402:	88bb      	ldrh	r3, [r7, #4]
 8005404:	0a1b      	lsrs	r3, r3, #8
 8005406:	b29b      	uxth	r3, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	72bb      	strb	r3, [r7, #10]
	buff[1]=0xff & reg;
 800540c:	88fb      	ldrh	r3, [r7, #6]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	727b      	strb	r3, [r7, #9]
	buff[0]=0xff & reg>>8;
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	0a1b      	lsrs	r3, r3, #8
 8005416:	b29b      	uxth	r3, r3
 8005418:	b2db      	uxtb	r3, r3
 800541a:	723b      	strb	r3, [r7, #8]


	uint8_t ret = HAL_I2C_Master_Transmit(&hi2c2,WRITE_ADDRESS,buff,4,0xFF);
 800541c:	f107 0208 	add.w	r2, r7, #8
 8005420:	23ff      	movs	r3, #255	; 0xff
 8005422:	9300      	str	r3, [sp, #0]
 8005424:	2304      	movs	r3, #4
 8005426:	2114      	movs	r1, #20
 8005428:	4805      	ldr	r0, [pc, #20]	; (8005440 <sgtl5000_write+0x54>)
 800542a:	f002 f91d 	bl	8007668 <HAL_I2C_Master_Transmit>
 800542e:	4603      	mov	r3, r0
 8005430:	73fb      	strb	r3, [r7, #15]

	HAL_Delay(1);
 8005432:	2001      	movs	r0, #1
 8005434:	f001 f8bc 	bl	80065b0 <HAL_Delay>
}
 8005438:	bf00      	nop
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	2000e488 	.word	0x2000e488

08005444 <sgtl5000_set_volume>:



void sgtl5000_set_volume(uint8_t vol){
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	71fb      	strb	r3, [r7, #7]

	sgtl5000_write(CHIP_ANA_HP_CTRL_ADD, (uint16_t)vol<<8 | vol );
 800544e:	79fb      	ldrb	r3, [r7, #7]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	b21a      	sxth	r2, r3
 8005454:	79fb      	ldrb	r3, [r7, #7]
 8005456:	b21b      	sxth	r3, r3
 8005458:	4313      	orrs	r3, r2
 800545a:	b21b      	sxth	r3, r3
 800545c:	b29b      	uxth	r3, r3
 800545e:	4619      	mov	r1, r3
 8005460:	2022      	movs	r0, #34	; 0x22
 8005462:	f7ff ffc3 	bl	80053ec <sgtl5000_write>
}
 8005466:	bf00      	nop
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <sgtl5000_set_freq>:

void sgtl5000_set_freq(uint32_t freq){
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
	switch(freq)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a12      	ldr	r2, [pc, #72]	; (80054c4 <sgtl5000_set_freq+0x54>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d015      	beq.n	80054ac <sgtl5000_set_freq+0x3c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a10      	ldr	r2, [pc, #64]	; (80054c4 <sgtl5000_set_freq+0x54>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d815      	bhi.n	80054b4 <sgtl5000_set_freq+0x44>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800548e:	d005      	beq.n	800549c <sgtl5000_set_freq+0x2c>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005496:	4293      	cmp	r3, r2
 8005498:	d004      	beq.n	80054a4 <sgtl5000_set_freq+0x34>
 800549a:	e00b      	b.n	80054b4 <sgtl5000_set_freq+0x44>
	{
		case 32000:
			sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x0000);  // 48k kHz, 256*Fs
 800549c:	2100      	movs	r1, #0
 800549e:	2004      	movs	r0, #4
 80054a0:	f7ff ffa4 	bl	80053ec <sgtl5000_write>
		case 48000:
			sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x0008);  // 48k kHz, 256*Fs
 80054a4:	2108      	movs	r1, #8
 80054a6:	2004      	movs	r0, #4
 80054a8:	f7ff ffa0 	bl	80053ec <sgtl5000_write>
		case 96000:
			sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x000C);  // 48k kHz, 256*Fs
 80054ac:	210c      	movs	r1, #12
 80054ae:	2004      	movs	r0, #4
 80054b0:	f7ff ff9c 	bl	80053ec <sgtl5000_write>
		default:
			sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x0004);  // 44.1k kHz, 256*Fs
 80054b4:	2104      	movs	r1, #4
 80054b6:	2004      	movs	r0, #4
 80054b8:	f7ff ff98 	bl	80053ec <sgtl5000_write>
	}
}
 80054bc:	bf00      	nop
 80054be:	3708      	adds	r7, #8
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}
 80054c4:	00017700 	.word	0x00017700

080054c8 <sgtl5000_start_play>:

void sgtl5000_start_play(void){
 80054c8:	b580      	push	{r7, lr}
 80054ca:	af00      	add	r7, sp, #0
	chip_ana_ctrl.data = sgtl5000_read(CHIP_ANA_CTRL_ADD);
 80054cc:	2024      	movs	r0, #36	; 0x24
 80054ce:	f7ff ff59 	bl	8005384 <sgtl5000_read>
 80054d2:	4603      	mov	r3, r0
 80054d4:	461a      	mov	r2, r3
 80054d6:	4b0c      	ldr	r3, [pc, #48]	; (8005508 <sgtl5000_start_play+0x40>)
 80054d8:	801a      	strh	r2, [r3, #0]
	chip_ana_ctrl.MUTE_HP = 0x0000; //unmute amp
 80054da:	4a0b      	ldr	r2, [pc, #44]	; (8005508 <sgtl5000_start_play+0x40>)
 80054dc:	7813      	ldrb	r3, [r2, #0]
 80054de:	f36f 1304 	bfc	r3, #4, #1
 80054e2:	7013      	strb	r3, [r2, #0]
	chip_ana_ctrl.MUTE_LO = 0x0000; //unmute headphone
 80054e4:	4a08      	ldr	r2, [pc, #32]	; (8005508 <sgtl5000_start_play+0x40>)
 80054e6:	7853      	ldrb	r3, [r2, #1]
 80054e8:	f36f 0300 	bfc	r3, #0, #1
 80054ec:	7053      	strb	r3, [r2, #1]
	chip_ana_ctrl.MUTE_ADC = 0x0001; //mute microphone
 80054ee:	4a06      	ldr	r2, [pc, #24]	; (8005508 <sgtl5000_start_play+0x40>)
 80054f0:	7813      	ldrb	r3, [r2, #0]
 80054f2:	f043 0301 	orr.w	r3, r3, #1
 80054f6:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_ANA_CTRL_ADD, chip_ana_ctrl.data);
 80054f8:	4b03      	ldr	r3, [pc, #12]	; (8005508 <sgtl5000_start_play+0x40>)
 80054fa:	881b      	ldrh	r3, [r3, #0]
 80054fc:	4619      	mov	r1, r3
 80054fe:	2024      	movs	r0, #36	; 0x24
 8005500:	f7ff ff74 	bl	80053ec <sgtl5000_write>
}
 8005504:	bf00      	nop
 8005506:	bd80      	pop	{r7, pc}
 8005508:	200133e8 	.word	0x200133e8

0800550c <sgtl5000_stop_play>:

void sgtl5000_stop_play(void){
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
	chip_ana_ctrl.data = sgtl5000_read(CHIP_ANA_CTRL_ADD);
 8005510:	2024      	movs	r0, #36	; 0x24
 8005512:	f7ff ff37 	bl	8005384 <sgtl5000_read>
 8005516:	4603      	mov	r3, r0
 8005518:	461a      	mov	r2, r3
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <sgtl5000_stop_play+0x40>)
 800551c:	801a      	strh	r2, [r3, #0]
	chip_ana_ctrl.MUTE_HP = 0x0001; //unmute amp
 800551e:	4a0b      	ldr	r2, [pc, #44]	; (800554c <sgtl5000_stop_play+0x40>)
 8005520:	7813      	ldrb	r3, [r2, #0]
 8005522:	f043 0310 	orr.w	r3, r3, #16
 8005526:	7013      	strb	r3, [r2, #0]
	chip_ana_ctrl.MUTE_LO = 0x0001; //unmute headphone
 8005528:	4a08      	ldr	r2, [pc, #32]	; (800554c <sgtl5000_stop_play+0x40>)
 800552a:	7853      	ldrb	r3, [r2, #1]
 800552c:	f043 0301 	orr.w	r3, r3, #1
 8005530:	7053      	strb	r3, [r2, #1]
	chip_ana_ctrl.MUTE_ADC = 0x0001; //mute microphone
 8005532:	4a06      	ldr	r2, [pc, #24]	; (800554c <sgtl5000_stop_play+0x40>)
 8005534:	7813      	ldrb	r3, [r2, #0]
 8005536:	f043 0301 	orr.w	r3, r3, #1
 800553a:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_ANA_CTRL_ADD, chip_ana_ctrl.data);
 800553c:	4b03      	ldr	r3, [pc, #12]	; (800554c <sgtl5000_stop_play+0x40>)
 800553e:	881b      	ldrh	r3, [r3, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	2024      	movs	r0, #36	; 0x24
 8005544:	f7ff ff52 	bl	80053ec <sgtl5000_write>
}
 8005548:	bf00      	nop
 800554a:	bd80      	pop	{r7, pc}
 800554c:	200133e8 	.word	0x200133e8

08005550 <sgtl5000_init>:
	chip_ana_ctrl.MUTE_ADC = 0x0000; //unmute microphone

	sgtl5000_write(CHIP_ANA_CTRL_ADD, chip_ana_ctrl.data);

}
void sgtl5000_init(void){
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0

	sgtl5000_write(CHIP_ANA_POWER_ADD, 0x4060);  // VDDD is externally driven with 1.8V
 8005554:	f244 0160 	movw	r1, #16480	; 0x4060
 8005558:	2030      	movs	r0, #48	; 0x30
 800555a:	f7ff ff47 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_LINREG_CTRL_ADD, 0x006C);  // VDDA & VDDIO both over 3.1V
 800555e:	216c      	movs	r1, #108	; 0x6c
 8005560:	2026      	movs	r0, #38	; 0x26
 8005562:	f7ff ff43 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_REF_CTRL_ADD, 0x01F2); // VAG=1.575, normal ramp, +12.5% bias current
 8005566:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800556a:	2028      	movs	r0, #40	; 0x28
 800556c:	f7ff ff3e 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_LINE_OUT_CTRL_ADD, 0x0F22); // LO_VAGCNTRL=1.65V, OUT_CURRENT=0.54mA
 8005570:	f640 7122 	movw	r1, #3874	; 0xf22
 8005574:	202c      	movs	r0, #44	; 0x2c
 8005576:	f7ff ff39 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_SHORT_CTRL_ADD, 0x4446);  // allow up to 125mA
 800557a:	f244 4146 	movw	r1, #17478	; 0x4446
 800557e:	203c      	movs	r0, #60	; 0x3c
 8005580:	f7ff ff34 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_ANA_CTRL_ADD, 0x0137);  // enable zero cross detectors
 8005584:	f240 1137 	movw	r1, #311	; 0x137
 8005588:	2024      	movs	r0, #36	; 0x24
 800558a:	f7ff ff2f 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_ANA_POWER_ADD, 0x40FF); // power up: lineout, hp, adc, dac
 800558e:	f244 01ff 	movw	r1, #16639	; 0x40ff
 8005592:	2030      	movs	r0, #48	; 0x30
 8005594:	f7ff ff2a 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_DIG_POWER_ADD, 0x0073); // power up all digital stuff
 8005598:	2173      	movs	r1, #115	; 0x73
 800559a:	2002      	movs	r0, #2
 800559c:	f7ff ff26 	bl	80053ec <sgtl5000_write>
	HAL_Delay(400);
 80055a0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80055a4:	f001 f804 	bl	80065b0 <HAL_Delay>

	sgtl5000_write(CHIP_LINE_OUT_VOL_ADD, 0x1D1D); // default approx 1.3 volts peak-to-peak
 80055a8:	f641 511d 	movw	r1, #7453	; 0x1d1d
 80055ac:	202e      	movs	r0, #46	; 0x2e
 80055ae:	f7ff ff1d 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_CLK_CTRL_ADD, 0x0004);  // 44.1k kHz, 256*Fs
 80055b2:	2104      	movs	r1, #4
 80055b4:	2004      	movs	r0, #4
 80055b6:	f7ff ff19 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(CHIP_I2S_CTRL_ADD, 0x0130); // SCLK=32*Fs, 16bit, I2S format
 80055ba:	f44f 7198 	mov.w	r1, #304	; 0x130
 80055be:	2006      	movs	r0, #6
 80055c0:	f7ff ff14 	bl	80053ec <sgtl5000_write>



	// Example 1: I2S_IN -> DAP -> DAC -> LINEOUT, HP_OUT
	chip_sss_ctrl.data=sgtl5000_read(CHIP_SSS_CTRL_ADD);
 80055c4:	200a      	movs	r0, #10
 80055c6:	f7ff fedd 	bl	8005384 <sgtl5000_read>
 80055ca:	4603      	mov	r3, r0
 80055cc:	461a      	mov	r2, r3
 80055ce:	4b55      	ldr	r3, [pc, #340]	; (8005724 <sgtl5000_init+0x1d4>)
 80055d0:	801a      	strh	r2, [r3, #0]
	//chip_sss_ctrl.DAP_MIX_SELECT=0x0001; // bits 7:6
	// Route I2S_IN to DAP
	chip_sss_ctrl.DAP_SELECT=0x0001; // bits 7:6
 80055d2:	4a54      	ldr	r2, [pc, #336]	; (8005724 <sgtl5000_init+0x1d4>)
 80055d4:	7813      	ldrb	r3, [r2, #0]
 80055d6:	2101      	movs	r1, #1
 80055d8:	f361 1387 	bfi	r3, r1, #6, #2
 80055dc:	7013      	strb	r3, [r2, #0]
	// Route DAP to DAC
	chip_sss_ctrl.DAC_SELECT=0x0003; // bits 5:4
 80055de:	4a51      	ldr	r2, [pc, #324]	; (8005724 <sgtl5000_init+0x1d4>)
 80055e0:	7813      	ldrb	r3, [r2, #0]
 80055e2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80055e6:	7013      	strb	r3, [r2, #0]
	//chip_sss_ctrl.I2S_SELECT=0x0001; // bits 5:4
	chip_sss_ctrl.I2S_SELECT=0x0000; // bits 1:0
 80055e8:	4a4e      	ldr	r2, [pc, #312]	; (8005724 <sgtl5000_init+0x1d4>)
 80055ea:	7813      	ldrb	r3, [r2, #0]
 80055ec:	f36f 0301 	bfc	r3, #0, #2
 80055f0:	7013      	strb	r3, [r2, #0]

	sgtl5000_write(CHIP_SSS_CTRL_ADD,chip_sss_ctrl.data);
 80055f2:	4b4c      	ldr	r3, [pc, #304]	; (8005724 <sgtl5000_init+0x1d4>)
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	4619      	mov	r1, r3
 80055f8:	200a      	movs	r0, #10
 80055fa:	f7ff fef7 	bl	80053ec <sgtl5000_write>
	// Select DAC as the input to HP_OUT
	chip_ana_ctrl.data=sgtl5000_read(CHIP_ANA_CTRL_ADD);
 80055fe:	2024      	movs	r0, #36	; 0x24
 8005600:	f7ff fec0 	bl	8005384 <sgtl5000_read>
 8005604:	4603      	mov	r3, r0
 8005606:	461a      	mov	r2, r3
 8005608:	4b47      	ldr	r3, [pc, #284]	; (8005728 <sgtl5000_init+0x1d8>)
 800560a:	801a      	strh	r2, [r3, #0]
	//chip_ana_ctrl.SELECT_ADC = 0x0001; // bit 2

	chip_ana_ctrl.SELECT_HP = 0x0000; // bit 6
 800560c:	4a46      	ldr	r2, [pc, #280]	; (8005728 <sgtl5000_init+0x1d8>)
 800560e:	7813      	ldrb	r3, [r2, #0]
 8005610:	f36f 1386 	bfc	r3, #6, #1
 8005614:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_ANA_CTRL_ADD,chip_ana_ctrl.data);
 8005616:	4b44      	ldr	r3, [pc, #272]	; (8005728 <sgtl5000_init+0x1d8>)
 8005618:	881b      	ldrh	r3, [r3, #0]
 800561a:	4619      	mov	r1, r3
 800561c:	2024      	movs	r0, #36	; 0x24
 800561e:	f7ff fee5 	bl	80053ec <sgtl5000_write>


	// Enable DAP block
	// NOTE: DAP will be in a pass-through mode if none of DAP
	// sub-blocks are enabled.
	dap_control.data= sgtl5000_read(DAP_CONTROL_ADD);
 8005622:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005626:	f7ff fead 	bl	8005384 <sgtl5000_read>
 800562a:	4603      	mov	r3, r0
 800562c:	461a      	mov	r2, r3
 800562e:	4b3f      	ldr	r3, [pc, #252]	; (800572c <sgtl5000_init+0x1dc>)
 8005630:	801a      	strh	r2, [r3, #0]
	dap_control.DAP_EN=1;
 8005632:	4a3e      	ldr	r2, [pc, #248]	; (800572c <sgtl5000_init+0x1dc>)
 8005634:	7813      	ldrb	r3, [r2, #0]
 8005636:	f043 0301 	orr.w	r3, r3, #1
 800563a:	7013      	strb	r3, [r2, #0]
	//dap_control.MIX_EN=1;
	sgtl5000_write(DAP_CONTROL_ADD,dap_control.data); // bit 0
 800563c:	4b3b      	ldr	r3, [pc, #236]	; (800572c <sgtl5000_init+0x1dc>)
 800563e:	881b      	ldrh	r3, [r3, #0]
 8005640:	4619      	mov	r1, r3
 8005642:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005646:	f7ff fed1 	bl	80053ec <sgtl5000_write>

	sgtl5000_write(DAP_MAIN_CHAN_ADD,0xFFFF); // bit 0
 800564a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800564e:	f44f 7090 	mov.w	r0, #288	; 0x120
 8005652:	f7ff fecb 	bl	80053ec <sgtl5000_write>
	sgtl5000_write(DAP_MIX_CHAN_ADD,0xFFFF); // bit 0
 8005656:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800565a:	f44f 7091 	mov.w	r0, #290	; 0x122
 800565e:	f7ff fec5 	bl	80053ec <sgtl5000_write>

	dap_avc_ctrl.data = sgtl5000_read(DAP_AVC_CTRL_ADD);
 8005662:	f44f 7092 	mov.w	r0, #292	; 0x124
 8005666:	f7ff fe8d 	bl	8005384 <sgtl5000_read>
 800566a:	4603      	mov	r3, r0
 800566c:	461a      	mov	r2, r3
 800566e:	4b30      	ldr	r3, [pc, #192]	; (8005730 <sgtl5000_init+0x1e0>)
 8005670:	801a      	strh	r2, [r3, #0]
	dap_avc_ctrl.EN=1;
 8005672:	4a2f      	ldr	r2, [pc, #188]	; (8005730 <sgtl5000_init+0x1e0>)
 8005674:	7813      	ldrb	r3, [r2, #0]
 8005676:	f043 0301 	orr.w	r3, r3, #1
 800567a:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(DAP_AVC_CTRL_ADD,dap_avc_ctrl.data);
 800567c:	4b2c      	ldr	r3, [pc, #176]	; (8005730 <sgtl5000_init+0x1e0>)
 800567e:	881b      	ldrh	r3, [r3, #0]
 8005680:	4619      	mov	r1, r3
 8005682:	f44f 7092 	mov.w	r0, #292	; 0x124
 8005686:	f7ff feb1 	bl	80053ec <sgtl5000_write>
	//---------------- Input Volume Control---------------------
	// Configure ADC left and right analog volume to desired default.
	// Example shows volume of 0dB
	sgtl5000_write( CHIP_ANA_ADC_CTRL_ADD, 0x0000);
 800568a:	2100      	movs	r1, #0
 800568c:	2020      	movs	r0, #32
 800568e:	f7ff fead 	bl	80053ec <sgtl5000_write>
	// Configure MIC gain if needed. Example shows gain of 20dB
	chip_mic_ctrl.data = sgtl5000_read(CHIP_MIC_CTRL_ADD);
 8005692:	202a      	movs	r0, #42	; 0x2a
 8005694:	f7ff fe76 	bl	8005384 <sgtl5000_read>
 8005698:	4603      	mov	r3, r0
 800569a:	461a      	mov	r2, r3
 800569c:	4b25      	ldr	r3, [pc, #148]	; (8005734 <sgtl5000_init+0x1e4>)
 800569e:	801a      	strh	r2, [r3, #0]
	chip_mic_ctrl.GAIN = 0x0001;
 80056a0:	4a24      	ldr	r2, [pc, #144]	; (8005734 <sgtl5000_init+0x1e4>)
 80056a2:	7813      	ldrb	r3, [r2, #0]
 80056a4:	2101      	movs	r1, #1
 80056a6:	f361 0301 	bfi	r3, r1, #0, #2
 80056aa:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_MIC_CTRL_ADD, chip_mic_ctrl.data);
 80056ac:	4b21      	ldr	r3, [pc, #132]	; (8005734 <sgtl5000_init+0x1e4>)
 80056ae:	881b      	ldrh	r3, [r3, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	202a      	movs	r0, #42	; 0x2a
 80056b4:	f7ff fe9a 	bl	80053ec <sgtl5000_write>
	// LINEOUT and DAC volume control

	chip_ana_ctrl.data = sgtl5000_read(CHIP_ANA_CTRL_ADD);
 80056b8:	2024      	movs	r0, #36	; 0x24
 80056ba:	f7ff fe63 	bl	8005384 <sgtl5000_read>
 80056be:	4603      	mov	r3, r0
 80056c0:	461a      	mov	r2, r3
 80056c2:	4b19      	ldr	r3, [pc, #100]	; (8005728 <sgtl5000_init+0x1d8>)
 80056c4:	801a      	strh	r2, [r3, #0]

	chip_ana_ctrl.MUTE_LO = 0x0000;
 80056c6:	4a18      	ldr	r2, [pc, #96]	; (8005728 <sgtl5000_init+0x1d8>)
 80056c8:	7853      	ldrb	r3, [r2, #1]
 80056ca:	f36f 0300 	bfc	r3, #0, #1
 80056ce:	7053      	strb	r3, [r2, #1]
	chip_ana_ctrl.MUTE_HP = 0x0000; //unmute amp
 80056d0:	4a15      	ldr	r2, [pc, #84]	; (8005728 <sgtl5000_init+0x1d8>)
 80056d2:	7813      	ldrb	r3, [r2, #0]
 80056d4:	f36f 1304 	bfc	r3, #4, #1
 80056d8:	7013      	strb	r3, [r2, #0]
	sgtl5000_write (CHIP_ANA_CTRL_ADD, chip_ana_ctrl.data);
 80056da:	4b13      	ldr	r3, [pc, #76]	; (8005728 <sgtl5000_init+0x1d8>)
 80056dc:	881b      	ldrh	r3, [r3, #0]
 80056de:	4619      	mov	r1, r3
 80056e0:	2024      	movs	r0, #36	; 0x24
 80056e2:	f7ff fe83 	bl	80053ec <sgtl5000_write>
	// bit 8
	// Configure DAC left and right digital volume. Example shows
	// volume of 0dB
	sgtl5000_write(CHIP_DAC_VOL_ADD, 0x3C3C);
 80056e6:	f643 413c 	movw	r1, #15420	; 0x3c3c
 80056ea:	2010      	movs	r0, #16
 80056ec:	f7ff fe7e 	bl	80053ec <sgtl5000_write>

	chip_adcdac_ctrl.data = sgtl5000_read(CHIP_ADCDAC_CTRL_ADD);
 80056f0:	200e      	movs	r0, #14
 80056f2:	f7ff fe47 	bl	8005384 <sgtl5000_read>
 80056f6:	4603      	mov	r3, r0
 80056f8:	461a      	mov	r2, r3
 80056fa:	4b0f      	ldr	r3, [pc, #60]	; (8005738 <sgtl5000_init+0x1e8>)
 80056fc:	801a      	strh	r2, [r3, #0]
	chip_adcdac_ctrl.DAC_MUTE_LEFT=0x0000;// bit 2
 80056fe:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <sgtl5000_init+0x1e8>)
 8005700:	7813      	ldrb	r3, [r2, #0]
 8005702:	f36f 0382 	bfc	r3, #2, #1
 8005706:	7013      	strb	r3, [r2, #0]
	chip_adcdac_ctrl.DAC_MUTE_RIGHT=0x0000;// bit 3
 8005708:	4a0b      	ldr	r2, [pc, #44]	; (8005738 <sgtl5000_init+0x1e8>)
 800570a:	7813      	ldrb	r3, [r2, #0]
 800570c:	f36f 03c3 	bfc	r3, #3, #1
 8005710:	7013      	strb	r3, [r2, #0]
	sgtl5000_write(CHIP_ADCDAC_CTRL_ADD,chip_adcdac_ctrl.data);
 8005712:	4b09      	ldr	r3, [pc, #36]	; (8005738 <sgtl5000_init+0x1e8>)
 8005714:	881b      	ldrh	r3, [r3, #0]
 8005716:	4619      	mov	r1, r3
 8005718:	200e      	movs	r0, #14
 800571a:	f7ff fe67 	bl	80053ec <sgtl5000_write>
	//chip_ana_ctrl.data = sgtl5000_read(CHIP_ANA_CTRL_ADD);
	//chip_ana_ctrl.MUTE_ADC= 0x0000;

	//write(CHIP_ANA_CTRL_ADD,chip_ana_ctrl.data);

}
 800571e:	bf00      	nop
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	200133f0 	.word	0x200133f0
 8005728:	200133e8 	.word	0x200133e8
 800572c:	200133dc 	.word	0x200133dc
 8005730:	200133e0 	.word	0x200133e0
 8005734:	200133ec 	.word	0x200133ec
 8005738:	200133e4 	.word	0x200133e4

0800573c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b082      	sub	sp, #8
 8005740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005742:	2300      	movs	r3, #0
 8005744:	607b      	str	r3, [r7, #4]
 8005746:	4b12      	ldr	r3, [pc, #72]	; (8005790 <HAL_MspInit+0x54>)
 8005748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800574a:	4a11      	ldr	r2, [pc, #68]	; (8005790 <HAL_MspInit+0x54>)
 800574c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005750:	6453      	str	r3, [r2, #68]	; 0x44
 8005752:	4b0f      	ldr	r3, [pc, #60]	; (8005790 <HAL_MspInit+0x54>)
 8005754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005756:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575a:	607b      	str	r3, [r7, #4]
 800575c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800575e:	2300      	movs	r3, #0
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	4b0b      	ldr	r3, [pc, #44]	; (8005790 <HAL_MspInit+0x54>)
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	4a0a      	ldr	r2, [pc, #40]	; (8005790 <HAL_MspInit+0x54>)
 8005768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800576c:	6413      	str	r3, [r2, #64]	; 0x40
 800576e:	4b08      	ldr	r3, [pc, #32]	; (8005790 <HAL_MspInit+0x54>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005776:	603b      	str	r3, [r7, #0]
 8005778:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800577a:	2200      	movs	r2, #0
 800577c:	210f      	movs	r1, #15
 800577e:	f06f 0001 	mvn.w	r0, #1
 8005782:	f001 f815 	bl	80067b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40023800 	.word	0x40023800

08005794 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08c      	sub	sp, #48	; 0x30
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800579c:	f107 031c 	add.w	r3, r7, #28
 80057a0:	2200      	movs	r2, #0
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	605a      	str	r2, [r3, #4]
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	60da      	str	r2, [r3, #12]
 80057aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a32      	ldr	r2, [pc, #200]	; (800587c <HAL_I2C_MspInit+0xe8>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d12d      	bne.n	8005812 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057b6:	2300      	movs	r3, #0
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	4b31      	ldr	r3, [pc, #196]	; (8005880 <HAL_I2C_MspInit+0xec>)
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	4a30      	ldr	r2, [pc, #192]	; (8005880 <HAL_I2C_MspInit+0xec>)
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	6313      	str	r3, [r2, #48]	; 0x30
 80057c6:	4b2e      	ldr	r3, [pc, #184]	; (8005880 <HAL_I2C_MspInit+0xec>)
 80057c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BT_WIFI_SCL_Pin|BT_WIFI_SDA_Pin;
 80057d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80057d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80057d8:	2312      	movs	r3, #18
 80057da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80057dc:	2301      	movs	r3, #1
 80057de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80057e0:	2302      	movs	r3, #2
 80057e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80057e4:	2304      	movs	r3, #4
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e8:	f107 031c 	add.w	r3, r7, #28
 80057ec:	4619      	mov	r1, r3
 80057ee:	4825      	ldr	r0, [pc, #148]	; (8005884 <HAL_I2C_MspInit+0xf0>)
 80057f0:	f001 fc18 	bl	8007024 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80057f4:	2300      	movs	r3, #0
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	4b21      	ldr	r3, [pc, #132]	; (8005880 <HAL_I2C_MspInit+0xec>)
 80057fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057fc:	4a20      	ldr	r2, [pc, #128]	; (8005880 <HAL_I2C_MspInit+0xec>)
 80057fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005802:	6413      	str	r3, [r2, #64]	; 0x40
 8005804:	4b1e      	ldr	r3, [pc, #120]	; (8005880 <HAL_I2C_MspInit+0xec>)
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8005810:	e030      	b.n	8005874 <HAL_I2C_MspInit+0xe0>
  else if(hi2c->Instance==I2C2)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a1c      	ldr	r2, [pc, #112]	; (8005888 <HAL_I2C_MspInit+0xf4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d12b      	bne.n	8005874 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800581c:	2300      	movs	r3, #0
 800581e:	613b      	str	r3, [r7, #16]
 8005820:	4b17      	ldr	r3, [pc, #92]	; (8005880 <HAL_I2C_MspInit+0xec>)
 8005822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005824:	4a16      	ldr	r2, [pc, #88]	; (8005880 <HAL_I2C_MspInit+0xec>)
 8005826:	f043 0320 	orr.w	r3, r3, #32
 800582a:	6313      	str	r3, [r2, #48]	; 0x30
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <HAL_I2C_MspInit+0xec>)
 800582e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	613b      	str	r3, [r7, #16]
 8005836:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = HP_SPKR_SDA_Pin|HP_SPKR_SCL_Pin;
 8005838:	2303      	movs	r3, #3
 800583a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800583c:	2312      	movs	r3, #18
 800583e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005840:	2301      	movs	r3, #1
 8005842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005844:	2303      	movs	r3, #3
 8005846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005848:	2304      	movs	r3, #4
 800584a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800584c:	f107 031c 	add.w	r3, r7, #28
 8005850:	4619      	mov	r1, r3
 8005852:	480e      	ldr	r0, [pc, #56]	; (800588c <HAL_I2C_MspInit+0xf8>)
 8005854:	f001 fbe6 	bl	8007024 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005858:	2300      	movs	r3, #0
 800585a:	60fb      	str	r3, [r7, #12]
 800585c:	4b08      	ldr	r3, [pc, #32]	; (8005880 <HAL_I2C_MspInit+0xec>)
 800585e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005860:	4a07      	ldr	r2, [pc, #28]	; (8005880 <HAL_I2C_MspInit+0xec>)
 8005862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005866:	6413      	str	r3, [r2, #64]	; 0x40
 8005868:	4b05      	ldr	r3, [pc, #20]	; (8005880 <HAL_I2C_MspInit+0xec>)
 800586a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	68fb      	ldr	r3, [r7, #12]
}
 8005874:	bf00      	nop
 8005876:	3730      	adds	r7, #48	; 0x30
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	40005400 	.word	0x40005400
 8005880:	40023800 	.word	0x40023800
 8005884:	40020400 	.word	0x40020400
 8005888:	40005800 	.word	0x40005800
 800588c:	40021400 	.word	0x40021400

08005890 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b096      	sub	sp, #88	; 0x58
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005898:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800589c:	2200      	movs	r2, #0
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	605a      	str	r2, [r3, #4]
 80058a2:	609a      	str	r2, [r3, #8]
 80058a4:	60da      	str	r2, [r3, #12]
 80058a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80058a8:	f107 0314 	add.w	r3, r7, #20
 80058ac:	2230      	movs	r2, #48	; 0x30
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f018 fd5f 	bl	801e374 <memset>
  if(hi2s->Instance==SPI2)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a68      	ldr	r2, [pc, #416]	; (8005a5c <HAL_I2S_MspInit+0x1cc>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	f040 80c9 	bne.w	8005a54 <HAL_I2S_MspInit+0x1c4>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80058c2:	2301      	movs	r3, #1
 80058c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80058c6:	23c0      	movs	r3, #192	; 0xc0
 80058c8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80058ca:	2302      	movs	r3, #2
 80058cc:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80058ce:	f107 0314 	add.w	r3, r7, #20
 80058d2:	4618      	mov	r0, r3
 80058d4:	f004 f840 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80058de:	f7ff fd4b 	bl	8005378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80058e2:	2300      	movs	r3, #0
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	4b5e      	ldr	r3, [pc, #376]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 80058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ea:	4a5d      	ldr	r2, [pc, #372]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 80058ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80058f0:	6413      	str	r3, [r2, #64]	; 0x40
 80058f2:	4b5b      	ldr	r3, [pc, #364]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058fa:	613b      	str	r3, [r7, #16]
 80058fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	4b57      	ldr	r3, [pc, #348]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 8005904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005906:	4a56      	ldr	r2, [pc, #344]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 8005908:	f043 0302 	orr.w	r3, r3, #2
 800590c:	6313      	str	r3, [r2, #48]	; 0x30
 800590e:	4b54      	ldr	r3, [pc, #336]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 8005910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	4b50      	ldr	r3, [pc, #320]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 8005920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005922:	4a4f      	ldr	r2, [pc, #316]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 8005924:	f043 0304 	orr.w	r3, r3, #4
 8005928:	6313      	str	r3, [r2, #48]	; 0x30
 800592a:	4b4d      	ldr	r3, [pc, #308]	; (8005a60 <HAL_I2S_MspInit+0x1d0>)
 800592c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592e:	f003 0304 	and.w	r3, r3, #4
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = I2S_LRCLK_Pin|I2S_CLK_Pin|I2S_SDO_Pin;
 8005936:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800593a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800593c:	2302      	movs	r3, #2
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005940:	2300      	movs	r3, #0
 8005942:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005944:	2303      	movs	r3, #3
 8005946:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005948:	2305      	movs	r3, #5
 800594a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800594c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005950:	4619      	mov	r1, r3
 8005952:	4844      	ldr	r0, [pc, #272]	; (8005a64 <HAL_I2S_MspInit+0x1d4>)
 8005954:	f001 fb66 	bl	8007024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S_SDI_Pin;
 8005958:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800595c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800595e:	2302      	movs	r3, #2
 8005960:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005962:	2300      	movs	r3, #0
 8005964:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005966:	2303      	movs	r3, #3
 8005968:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 800596a:	2306      	movs	r3, #6
 800596c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(I2S_SDI_GPIO_Port, &GPIO_InitStruct);
 800596e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005972:	4619      	mov	r1, r3
 8005974:	483b      	ldr	r0, [pc, #236]	; (8005a64 <HAL_I2S_MspInit+0x1d4>)
 8005976:	f001 fb55 	bl	8007024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S_MCLK_Pin;
 800597a:	2340      	movs	r3, #64	; 0x40
 800597c:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800597e:	2302      	movs	r3, #2
 8005980:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005982:	2300      	movs	r3, #0
 8005984:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005986:	2303      	movs	r3, #3
 8005988:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800598a:	2305      	movs	r3, #5
 800598c:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(I2S_MCLK_GPIO_Port, &GPIO_InitStruct);
 800598e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005992:	4619      	mov	r1, r3
 8005994:	4834      	ldr	r0, [pc, #208]	; (8005a68 <HAL_I2S_MspInit+0x1d8>)
 8005996:	f001 fb45 	bl	8007024 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 800599a:	4b34      	ldr	r3, [pc, #208]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 800599c:	4a34      	ldr	r2, [pc, #208]	; (8005a70 <HAL_I2S_MspInit+0x1e0>)
 800599e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80059a0:	4b32      	ldr	r3, [pc, #200]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80059a6:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059a8:	2240      	movs	r2, #64	; 0x40
 80059aa:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80059ac:	4b2f      	ldr	r3, [pc, #188]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059b2:	4b2e      	ldr	r3, [pc, #184]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059b8:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80059ba:	4b2c      	ldr	r3, [pc, #176]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80059c0:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80059c2:	4b2a      	ldr	r3, [pc, #168]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059c4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80059c8:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80059ca:	4b28      	ldr	r3, [pc, #160]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059cc:	2200      	movs	r2, #0
 80059ce:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80059d0:	4b26      	ldr	r3, [pc, #152]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059d2:	2200      	movs	r2, #0
 80059d4:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80059d6:	4b25      	ldr	r3, [pc, #148]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059d8:	2200      	movs	r2, #0
 80059da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80059dc:	4823      	ldr	r0, [pc, #140]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059de:	f000 ff1f 	bl	8006820 <HAL_DMA_Init>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d001      	beq.n	80059ec <HAL_I2S_MspInit+0x15c>
    {
      Error_Handler();
 80059e8:	f7ff fcc6 	bl	8005378 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a1f      	ldr	r2, [pc, #124]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059f0:	639a      	str	r2, [r3, #56]	; 0x38
 80059f2:	4a1e      	ldr	r2, [pc, #120]	; (8005a6c <HAL_I2S_MspInit+0x1dc>)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 80059f8:	4b1e      	ldr	r3, [pc, #120]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 80059fa:	4a1f      	ldr	r2, [pc, #124]	; (8005a78 <HAL_I2S_MspInit+0x1e8>)
 80059fc:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 80059fe:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a00:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005a04:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a06:	4b1b      	ldr	r3, [pc, #108]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a0c:	4b19      	ldr	r3, [pc, #100]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a12:	4b18      	ldr	r3, [pc, #96]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a18:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a1a:	4b16      	ldr	r3, [pc, #88]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a20:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a22:	2200      	movs	r2, #0
 8005a24:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_NORMAL;
 8005a26:	4b13      	ldr	r3, [pc, #76]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a28:	2200      	movs	r2, #0
 8005a2a:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a2c:	4b11      	ldr	r3, [pc, #68]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a2e:	2200      	movs	r2, #0
 8005a30:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a32:	4b10      	ldr	r3, [pc, #64]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8005a38:	480e      	ldr	r0, [pc, #56]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a3a:	f000 fef1 	bl	8006820 <HAL_DMA_Init>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d001      	beq.n	8005a48 <HAL_I2S_MspInit+0x1b8>
    {
      Error_Handler();
 8005a44:	f7ff fc98 	bl	8005378 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a0a      	ldr	r2, [pc, #40]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a4e:	4a09      	ldr	r2, [pc, #36]	; (8005a74 <HAL_I2S_MspInit+0x1e4>)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005a54:	bf00      	nop
 8005a56:	3758      	adds	r7, #88	; 0x58
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40003800 	.word	0x40003800
 8005a60:	40023800 	.word	0x40023800
 8005a64:	40020400 	.word	0x40020400
 8005a68:	40020800 	.word	0x40020800
 8005a6c:	2000e524 	.word	0x2000e524
 8005a70:	40026070 	.word	0x40026070
 8005a74:	2000e584 	.word	0x2000e584
 8005a78:	40026058 	.word	0x40026058

08005a7c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b08e      	sub	sp, #56	; 0x38
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005a84:	f107 0308 	add.w	r3, r7, #8
 8005a88:	2230      	movs	r2, #48	; 0x30
 8005a8a:	2100      	movs	r1, #0
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	f018 fc71 	bl	801e374 <memset>
  if(hrtc->Instance==RTC)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a10      	ldr	r2, [pc, #64]	; (8005ad8 <HAL_RTC_MspInit+0x5c>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d119      	bne.n	8005ad0 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8005a9c:	2320      	movs	r3, #32
 8005a9e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8005aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005aa4:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005aa6:	f107 0308 	add.w	r3, r7, #8
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f003 ff54 	bl	8009958 <HAL_RCCEx_PeriphCLKConfig>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d001      	beq.n	8005aba <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8005ab6:	f7ff fc5f 	bl	8005378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005aba:	4b08      	ldr	r3, [pc, #32]	; (8005adc <HAL_RTC_MspInit+0x60>)
 8005abc:	2201      	movs	r2, #1
 8005abe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 11, 0);
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	210b      	movs	r1, #11
 8005ac4:	2029      	movs	r0, #41	; 0x29
 8005ac6:	f000 fe73 	bl	80067b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8005aca:	2029      	movs	r0, #41	; 0x29
 8005acc:	f000 fe8c 	bl	80067e8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8005ad0:	bf00      	nop
 8005ad2:	3738      	adds	r7, #56	; 0x38
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	40002800 	.word	0x40002800
 8005adc:	42470e3c 	.word	0x42470e3c

08005ae0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08e      	sub	sp, #56	; 0x38
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ae8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]
 8005af0:	605a      	str	r2, [r3, #4]
 8005af2:	609a      	str	r2, [r3, #8]
 8005af4:	60da      	str	r2, [r3, #12]
 8005af6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a7e      	ldr	r2, [pc, #504]	; (8005cf8 <HAL_SPI_MspInit+0x218>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d14a      	bne.n	8005b98 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005b02:	2300      	movs	r3, #0
 8005b04:	623b      	str	r3, [r7, #32]
 8005b06:	4b7d      	ldr	r3, [pc, #500]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b0a:	4a7c      	ldr	r2, [pc, #496]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005b10:	6453      	str	r3, [r2, #68]	; 0x44
 8005b12:	4b7a      	ldr	r3, [pc, #488]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b1a:	623b      	str	r3, [r7, #32]
 8005b1c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	4b76      	ldr	r3, [pc, #472]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b26:	4a75      	ldr	r2, [pc, #468]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b28:	f043 0301 	orr.w	r3, r3, #1
 8005b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8005b2e:	4b73      	ldr	r3, [pc, #460]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	61fb      	str	r3, [r7, #28]
 8005b38:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	61bb      	str	r3, [r7, #24]
 8005b3e:	4b6f      	ldr	r3, [pc, #444]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b42:	4a6e      	ldr	r2, [pc, #440]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b44:	f043 0302 	orr.w	r3, r3, #2
 8005b48:	6313      	str	r3, [r2, #48]	; 0x30
 8005b4a:	4b6c      	ldr	r3, [pc, #432]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4e:	f003 0302 	and.w	r3, r3, #2
 8005b52:	61bb      	str	r3, [r7, #24]
 8005b54:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PB4     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8005b56:	23a0      	movs	r3, #160	; 0xa0
 8005b58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b62:	2303      	movs	r3, #3
 8005b64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b66:	2305      	movs	r3, #5
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4863      	ldr	r0, [pc, #396]	; (8005d00 <HAL_SPI_MspInit+0x220>)
 8005b72:	f001 fa57 	bl	8007024 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005b76:	2310      	movs	r3, #16
 8005b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b82:	2303      	movs	r3, #3
 8005b84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005b86:	2305      	movs	r3, #5
 8005b88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b8e:	4619      	mov	r1, r3
 8005b90:	485c      	ldr	r0, [pc, #368]	; (8005d04 <HAL_SPI_MspInit+0x224>)
 8005b92:	f001 fa47 	bl	8007024 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8005b96:	e0ab      	b.n	8005cf0 <HAL_SPI_MspInit+0x210>
  else if(hspi->Instance==SPI3)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5a      	ldr	r2, [pc, #360]	; (8005d08 <HAL_SPI_MspInit+0x228>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d12d      	bne.n	8005bfe <HAL_SPI_MspInit+0x11e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]
 8005ba6:	4b55      	ldr	r3, [pc, #340]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	4a54      	ldr	r2, [pc, #336]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005bb2:	4b52      	ldr	r3, [pc, #328]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005bba:	617b      	str	r3, [r7, #20]
 8005bbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	613b      	str	r3, [r7, #16]
 8005bc2:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc6:	4a4d      	ldr	r2, [pc, #308]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005bc8:	f043 0304 	orr.w	r3, r3, #4
 8005bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8005bce:	4b4b      	ldr	r3, [pc, #300]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	613b      	str	r3, [r7, #16]
 8005bd8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SD_SPI3_CLK_Pin|SD_SPI3_MISO_Pin|SD_SPI3_MOSI_Pin;
 8005bda:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005be0:	2302      	movs	r3, #2
 8005be2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be4:	2300      	movs	r3, #0
 8005be6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005be8:	2303      	movs	r3, #3
 8005bea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005bec:	2306      	movs	r3, #6
 8005bee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005bf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	4845      	ldr	r0, [pc, #276]	; (8005d0c <HAL_SPI_MspInit+0x22c>)
 8005bf8:	f001 fa14 	bl	8007024 <HAL_GPIO_Init>
}
 8005bfc:	e078      	b.n	8005cf0 <HAL_SPI_MspInit+0x210>
  else if(hspi->Instance==SPI5)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a43      	ldr	r2, [pc, #268]	; (8005d10 <HAL_SPI_MspInit+0x230>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d173      	bne.n	8005cf0 <HAL_SPI_MspInit+0x210>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8005c08:	2300      	movs	r3, #0
 8005c0a:	60fb      	str	r3, [r7, #12]
 8005c0c:	4b3b      	ldr	r3, [pc, #236]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c10:	4a3a      	ldr	r2, [pc, #232]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c16:	6453      	str	r3, [r2, #68]	; 0x44
 8005c18:	4b38      	ldr	r3, [pc, #224]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
 8005c28:	4b34      	ldr	r3, [pc, #208]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	4a33      	ldr	r2, [pc, #204]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005c2e:	f043 0320 	orr.w	r3, r3, #32
 8005c32:	6313      	str	r3, [r2, #48]	; 0x30
 8005c34:	4b31      	ldr	r3, [pc, #196]	; (8005cfc <HAL_SPI_MspInit+0x21c>)
 8005c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c38:	f003 0320 	and.w	r3, r3, #32
 8005c3c:	60bb      	str	r3, [r7, #8]
 8005c3e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = BT_WIFI_SPI_SCK_Pin|BT_WIFI_SPI_MISO_Pin;
 8005c40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c46:	2302      	movs	r3, #2
 8005c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c4e:	2302      	movs	r3, #2
 8005c50:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005c52:	2305      	movs	r3, #5
 8005c54:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c5a:	4619      	mov	r1, r3
 8005c5c:	482d      	ldr	r0, [pc, #180]	; (8005d14 <HAL_SPI_MspInit+0x234>)
 8005c5e:	f001 f9e1 	bl	8007024 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BT_WIFI_SPI_MOSI_Pin;
 8005c62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005c70:	2302      	movs	r3, #2
 8005c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8005c74:	2305      	movs	r3, #5
 8005c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(BT_WIFI_SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8005c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4825      	ldr	r0, [pc, #148]	; (8005d14 <HAL_SPI_MspInit+0x234>)
 8005c80:	f001 f9d0 	bl	8007024 <HAL_GPIO_Init>
    hdma_spi5_tx.Instance = DMA2_Stream4;
 8005c84:	4b24      	ldr	r3, [pc, #144]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005c86:	4a25      	ldr	r2, [pc, #148]	; (8005d1c <HAL_SPI_MspInit+0x23c>)
 8005c88:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 8005c8a:	4b23      	ldr	r3, [pc, #140]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005c8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005c90:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005c92:	4b21      	ldr	r3, [pc, #132]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005c94:	2240      	movs	r2, #64	; 0x40
 8005c96:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005c98:	4b1f      	ldr	r3, [pc, #124]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005c9e:	4b1e      	ldr	r3, [pc, #120]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005ca0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ca4:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005ca6:	4b1c      	ldr	r3, [pc, #112]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005ca8:	2200      	movs	r2, #0
 8005caa:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cac:	4b1a      	ldr	r3, [pc, #104]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005cae:	2200      	movs	r2, #0
 8005cb0:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 8005cb2:	4b19      	ldr	r3, [pc, #100]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005cb8:	4b17      	ldr	r3, [pc, #92]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cbe:	4b16      	ldr	r3, [pc, #88]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 8005cc4:	4814      	ldr	r0, [pc, #80]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005cc6:	f000 fdab 	bl	8006820 <HAL_DMA_Init>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d001      	beq.n	8005cd4 <HAL_SPI_MspInit+0x1f4>
      Error_Handler();
 8005cd0:	f7ff fb52 	bl	8005378 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi5_tx);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	4a10      	ldr	r2, [pc, #64]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005cd8:	649a      	str	r2, [r3, #72]	; 0x48
 8005cda:	4a0f      	ldr	r2, [pc, #60]	; (8005d18 <HAL_SPI_MspInit+0x238>)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 5, 0);
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	2105      	movs	r1, #5
 8005ce4:	2055      	movs	r0, #85	; 0x55
 8005ce6:	f000 fd63 	bl	80067b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8005cea:	2055      	movs	r0, #85	; 0x55
 8005cec:	f000 fd7c 	bl	80067e8 <HAL_NVIC_EnableIRQ>
}
 8005cf0:	bf00      	nop
 8005cf2:	3738      	adds	r7, #56	; 0x38
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40013000 	.word	0x40013000
 8005cfc:	40023800 	.word	0x40023800
 8005d00:	40020000 	.word	0x40020000
 8005d04:	40020400 	.word	0x40020400
 8005d08:	40003c00 	.word	0x40003c00
 8005d0c:	40020800 	.word	0x40020800
 8005d10:	40015000 	.word	0x40015000
 8005d14:	40021400 	.word	0x40021400
 8005d18:	2000e70c 	.word	0x2000e70c
 8005d1c:	40026470 	.word	0x40026470

08005d20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a29      	ldr	r2, [pc, #164]	; (8005dd4 <HAL_TIM_PWM_MspInit+0xb4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10e      	bne.n	8005d50 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005d32:	2300      	movs	r3, #0
 8005d34:	617b      	str	r3, [r7, #20]
 8005d36:	4b28      	ldr	r3, [pc, #160]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d3a:	4a27      	ldr	r2, [pc, #156]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d3c:	f043 0301 	orr.w	r3, r3, #1
 8005d40:	6453      	str	r3, [r2, #68]	; 0x44
 8005d42:	4b25      	ldr	r3, [pc, #148]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8005d4e:	e03a      	b.n	8005dc6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d58:	d10e      	bne.n	8005d78 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	4b1e      	ldr	r3, [pc, #120]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d62:	4a1d      	ldr	r2, [pc, #116]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d64:	f043 0301 	orr.w	r3, r3, #1
 8005d68:	6413      	str	r3, [r2, #64]	; 0x40
 8005d6a:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	613b      	str	r3, [r7, #16]
 8005d74:	693b      	ldr	r3, [r7, #16]
}
 8005d76:	e026      	b.n	8005dc6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a17      	ldr	r2, [pc, #92]	; (8005ddc <HAL_TIM_PWM_MspInit+0xbc>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d10e      	bne.n	8005da0 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
 8005d86:	4b14      	ldr	r3, [pc, #80]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8a:	4a13      	ldr	r2, [pc, #76]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d8c:	f043 0302 	orr.w	r3, r3, #2
 8005d90:	6413      	str	r3, [r2, #64]	; 0x40
 8005d92:	4b11      	ldr	r3, [pc, #68]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	60fb      	str	r3, [r7, #12]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
}
 8005d9e:	e012      	b.n	8005dc6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM4)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a0e      	ldr	r2, [pc, #56]	; (8005de0 <HAL_TIM_PWM_MspInit+0xc0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d10d      	bne.n	8005dc6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005daa:	2300      	movs	r3, #0
 8005dac:	60bb      	str	r3, [r7, #8]
 8005dae:	4b0a      	ldr	r3, [pc, #40]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005db2:	4a09      	ldr	r2, [pc, #36]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005db4:	f043 0304 	orr.w	r3, r3, #4
 8005db8:	6413      	str	r3, [r2, #64]	; 0x40
 8005dba:	4b07      	ldr	r3, [pc, #28]	; (8005dd8 <HAL_TIM_PWM_MspInit+0xb8>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f003 0304 	and.w	r3, r3, #4
 8005dc2:	60bb      	str	r3, [r7, #8]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr
 8005dd2:	bf00      	nop
 8005dd4:	40010000 	.word	0x40010000
 8005dd8:	40023800 	.word	0x40023800
 8005ddc:	40000400 	.word	0x40000400
 8005de0:	40000800 	.word	0x40000800

08005de4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b08c      	sub	sp, #48	; 0x30
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dec:	f107 031c 	add.w	r3, r7, #28
 8005df0:	2200      	movs	r2, #0
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	605a      	str	r2, [r3, #4]
 8005df6:	609a      	str	r2, [r3, #8]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a49      	ldr	r2, [pc, #292]	; (8005f28 <HAL_TIM_MspPostInit+0x144>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d11f      	bne.n	8005e46 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005e06:	2300      	movs	r3, #0
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	4b48      	ldr	r3, [pc, #288]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e0e:	4a47      	ldr	r2, [pc, #284]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005e10:	f043 0310 	orr.w	r3, r3, #16
 8005e14:	6313      	str	r3, [r2, #48]	; 0x30
 8005e16:	4b45      	ldr	r3, [pc, #276]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	61bb      	str	r3, [r7, #24]
 8005e20:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = LED_PWM_B_Pin;
 8005e22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e28:	2302      	movs	r3, #2
 8005e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e30:	2300      	movs	r3, #0
 8005e32:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005e34:	2301      	movs	r3, #1
 8005e36:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_PWM_B_GPIO_Port, &GPIO_InitStruct);
 8005e38:	f107 031c 	add.w	r3, r7, #28
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	483c      	ldr	r0, [pc, #240]	; (8005f30 <HAL_TIM_MspPostInit+0x14c>)
 8005e40:	f001 f8f0 	bl	8007024 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005e44:	e06b      	b.n	8005f1e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM2)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4e:	d11e      	bne.n	8005e8e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e50:	2300      	movs	r3, #0
 8005e52:	617b      	str	r3, [r7, #20]
 8005e54:	4b35      	ldr	r3, [pc, #212]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e58:	4a34      	ldr	r2, [pc, #208]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005e5a:	f043 0301 	orr.w	r3, r3, #1
 8005e5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005e60:	4b32      	ldr	r3, [pc, #200]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	617b      	str	r3, [r7, #20]
 8005e6a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = LED_PWM_R_Pin;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e70:	2302      	movs	r3, #2
 8005e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e74:	2300      	movs	r3, #0
 8005e76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_PWM_R_GPIO_Port, &GPIO_InitStruct);
 8005e80:	f107 031c 	add.w	r3, r7, #28
 8005e84:	4619      	mov	r1, r3
 8005e86:	482b      	ldr	r0, [pc, #172]	; (8005f34 <HAL_TIM_MspPostInit+0x150>)
 8005e88:	f001 f8cc 	bl	8007024 <HAL_GPIO_Init>
}
 8005e8c:	e047      	b.n	8005f1e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM3)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a29      	ldr	r2, [pc, #164]	; (8005f38 <HAL_TIM_MspPostInit+0x154>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d11e      	bne.n	8005ed6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e98:	2300      	movs	r3, #0
 8005e9a:	613b      	str	r3, [r7, #16]
 8005e9c:	4b23      	ldr	r3, [pc, #140]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea0:	4a22      	ldr	r2, [pc, #136]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005ea2:	f043 0301 	orr.w	r3, r3, #1
 8005ea6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ea8:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LED_PWM_W2400_Pin;
 8005eb4:	2340      	movs	r3, #64	; 0x40
 8005eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005ec4:	2302      	movs	r3, #2
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_PWM_W2400_GPIO_Port, &GPIO_InitStruct);
 8005ec8:	f107 031c 	add.w	r3, r7, #28
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4819      	ldr	r0, [pc, #100]	; (8005f34 <HAL_TIM_MspPostInit+0x150>)
 8005ed0:	f001 f8a8 	bl	8007024 <HAL_GPIO_Init>
}
 8005ed4:	e023      	b.n	8005f1e <HAL_TIM_MspPostInit+0x13a>
  else if(htim->Instance==TIM4)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a18      	ldr	r2, [pc, #96]	; (8005f3c <HAL_TIM_MspPostInit+0x158>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d11e      	bne.n	8005f1e <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	60fb      	str	r3, [r7, #12]
 8005ee4:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee8:	4a10      	ldr	r2, [pc, #64]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005eea:	f043 0308 	orr.w	r3, r3, #8
 8005eee:	6313      	str	r3, [r2, #48]	; 0x30
 8005ef0:	4b0e      	ldr	r3, [pc, #56]	; (8005f2c <HAL_TIM_MspPostInit+0x148>)
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	60fb      	str	r3, [r7, #12]
 8005efa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_PWM_W6500_Pin|LED_PWM_G_Pin;
 8005efc:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8005f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f02:	2302      	movs	r3, #2
 8005f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f06:	2300      	movs	r3, #0
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005f0e:	2302      	movs	r3, #2
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f12:	f107 031c 	add.w	r3, r7, #28
 8005f16:	4619      	mov	r1, r3
 8005f18:	4809      	ldr	r0, [pc, #36]	; (8005f40 <HAL_TIM_MspPostInit+0x15c>)
 8005f1a:	f001 f883 	bl	8007024 <HAL_GPIO_Init>
}
 8005f1e:	bf00      	nop
 8005f20:	3730      	adds	r7, #48	; 0x30
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40010000 	.word	0x40010000
 8005f2c:	40023800 	.word	0x40023800
 8005f30:	40021000 	.word	0x40021000
 8005f34:	40020000 	.word	0x40020000
 8005f38:	40000400 	.word	0x40000400
 8005f3c:	40000800 	.word	0x40000800
 8005f40:	40020c00 	.word	0x40020c00

08005f44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b090      	sub	sp, #64	; 0x40
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f50:	2200      	movs	r2, #0
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	605a      	str	r2, [r3, #4]
 8005f56:	609a      	str	r2, [r3, #8]
 8005f58:	60da      	str	r2, [r3, #12]
 8005f5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a71      	ldr	r2, [pc, #452]	; (8006128 <HAL_UART_MspInit+0x1e4>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d12d      	bne.n	8005fc2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005f66:	2300      	movs	r3, #0
 8005f68:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f6a:	4b70      	ldr	r3, [pc, #448]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6e:	4a6f      	ldr	r2, [pc, #444]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005f70:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f74:	6413      	str	r3, [r2, #64]	; 0x40
 8005f76:	4b6d      	ldr	r3, [pc, #436]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f80:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f82:	2300      	movs	r3, #0
 8005f84:	627b      	str	r3, [r7, #36]	; 0x24
 8005f86:	4b69      	ldr	r3, [pc, #420]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f8a:	4a68      	ldr	r2, [pc, #416]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005f8c:	f043 0310 	orr.w	r3, r3, #16
 8005f90:	6313      	str	r3, [r2, #48]	; 0x30
 8005f92:	4b66      	ldr	r3, [pc, #408]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f96:	f003 0310 	and.w	r3, r3, #16
 8005f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = DBG_UART_RX_Pin|DBG_UART_TX_Pin;
 8005f9e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fac:	2303      	movs	r3, #3
 8005fae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005fb4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005fb8:	4619      	mov	r1, r3
 8005fba:	485d      	ldr	r0, [pc, #372]	; (8006130 <HAL_UART_MspInit+0x1ec>)
 8005fbc:	f001 f832 	bl	8007024 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005fc0:	e0ae      	b.n	8006120 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a5b      	ldr	r2, [pc, #364]	; (8006134 <HAL_UART_MspInit+0x1f0>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d135      	bne.n	8006038 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005fcc:	2300      	movs	r3, #0
 8005fce:	623b      	str	r3, [r7, #32]
 8005fd0:	4b56      	ldr	r3, [pc, #344]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd4:	4a55      	ldr	r2, [pc, #340]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005fd6:	f043 0310 	orr.w	r3, r3, #16
 8005fda:	6453      	str	r3, [r2, #68]	; 0x44
 8005fdc:	4b53      	ldr	r3, [pc, #332]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fe0:	f003 0310 	and.w	r3, r3, #16
 8005fe4:	623b      	str	r3, [r7, #32]
 8005fe6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]
 8005fec:	4b4f      	ldr	r3, [pc, #316]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff0:	4a4e      	ldr	r2, [pc, #312]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005ff2:	f043 0301 	orr.w	r3, r3, #1
 8005ff6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ff8:	4b4c      	ldr	r3, [pc, #304]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	61fb      	str	r3, [r7, #28]
 8006002:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = LCD_UART_TX_Pin|LCD_UART_RX_Pin;
 8006004:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800600a:	2302      	movs	r3, #2
 800600c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800600e:	2300      	movs	r3, #0
 8006010:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006012:	2303      	movs	r3, #3
 8006014:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8006016:	2307      	movs	r3, #7
 8006018:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800601a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800601e:	4619      	mov	r1, r3
 8006020:	4845      	ldr	r0, [pc, #276]	; (8006138 <HAL_UART_MspInit+0x1f4>)
 8006022:	f000 ffff 	bl	8007024 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 12, 0);
 8006026:	2200      	movs	r2, #0
 8006028:	210c      	movs	r1, #12
 800602a:	2025      	movs	r0, #37	; 0x25
 800602c:	f000 fbc0 	bl	80067b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006030:	2025      	movs	r0, #37	; 0x25
 8006032:	f000 fbd9 	bl	80067e8 <HAL_NVIC_EnableIRQ>
}
 8006036:	e073      	b.n	8006120 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART2)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a3f      	ldr	r2, [pc, #252]	; (800613c <HAL_UART_MspInit+0x1f8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d134      	bne.n	80060ac <HAL_UART_MspInit+0x168>
    __HAL_RCC_USART2_CLK_ENABLE();
 8006042:	2300      	movs	r3, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	4b39      	ldr	r3, [pc, #228]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8006048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604a:	4a38      	ldr	r2, [pc, #224]	; (800612c <HAL_UART_MspInit+0x1e8>)
 800604c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006050:	6413      	str	r3, [r2, #64]	; 0x40
 8006052:	4b36      	ldr	r3, [pc, #216]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800605a:	61bb      	str	r3, [r7, #24]
 800605c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800605e:	2300      	movs	r3, #0
 8006060:	617b      	str	r3, [r7, #20]
 8006062:	4b32      	ldr	r3, [pc, #200]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8006064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006066:	4a31      	ldr	r2, [pc, #196]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8006068:	f043 0301 	orr.w	r3, r3, #1
 800606c:	6313      	str	r3, [r2, #48]	; 0x30
 800606e:	4b2f      	ldr	r3, [pc, #188]	; (800612c <HAL_UART_MspInit+0x1e8>)
 8006070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	617b      	str	r3, [r7, #20]
 8006078:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = BT_TX_Pin|BT_RX_Pin;
 800607a:	230c      	movs	r3, #12
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800607e:	2302      	movs	r3, #2
 8006080:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006082:	2300      	movs	r3, #0
 8006084:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006086:	2303      	movs	r3, #3
 8006088:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800608a:	2307      	movs	r3, #7
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800608e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006092:	4619      	mov	r1, r3
 8006094:	4828      	ldr	r0, [pc, #160]	; (8006138 <HAL_UART_MspInit+0x1f4>)
 8006096:	f000 ffc5 	bl	8007024 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 15, 0);
 800609a:	2200      	movs	r2, #0
 800609c:	210f      	movs	r1, #15
 800609e:	2026      	movs	r0, #38	; 0x26
 80060a0:	f000 fb86 	bl	80067b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80060a4:	2026      	movs	r0, #38	; 0x26
 80060a6:	f000 fb9f 	bl	80067e8 <HAL_NVIC_EnableIRQ>
}
 80060aa:	e039      	b.n	8006120 <HAL_UART_MspInit+0x1dc>
  else if(huart->Instance==USART3)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a23      	ldr	r2, [pc, #140]	; (8006140 <HAL_UART_MspInit+0x1fc>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d134      	bne.n	8006120 <HAL_UART_MspInit+0x1dc>
    __HAL_RCC_USART3_CLK_ENABLE();
 80060b6:	2300      	movs	r3, #0
 80060b8:	613b      	str	r3, [r7, #16]
 80060ba:	4b1c      	ldr	r3, [pc, #112]	; (800612c <HAL_UART_MspInit+0x1e8>)
 80060bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_UART_MspInit+0x1e8>)
 80060c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060c4:	6413      	str	r3, [r2, #64]	; 0x40
 80060c6:	4b19      	ldr	r3, [pc, #100]	; (800612c <HAL_UART_MspInit+0x1e8>)
 80060c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]
 80060d6:	4b15      	ldr	r3, [pc, #84]	; (800612c <HAL_UART_MspInit+0x1e8>)
 80060d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060da:	4a14      	ldr	r2, [pc, #80]	; (800612c <HAL_UART_MspInit+0x1e8>)
 80060dc:	f043 0302 	orr.w	r3, r3, #2
 80060e0:	6313      	str	r3, [r2, #48]	; 0x30
 80060e2:	4b12      	ldr	r3, [pc, #72]	; (800612c <HAL_UART_MspInit+0x1e8>)
 80060e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = WIFI_TX_Pin|WIFI_RX_Pin;
 80060ee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80060f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80060f4:	2302      	movs	r3, #2
 80060f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060f8:	2300      	movs	r3, #0
 80060fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fc:	2303      	movs	r3, #3
 80060fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006100:	2307      	movs	r3, #7
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006104:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006108:	4619      	mov	r1, r3
 800610a:	480e      	ldr	r0, [pc, #56]	; (8006144 <HAL_UART_MspInit+0x200>)
 800610c:	f000 ff8a 	bl	8007024 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 15, 0);
 8006110:	2200      	movs	r2, #0
 8006112:	210f      	movs	r1, #15
 8006114:	2027      	movs	r0, #39	; 0x27
 8006116:	f000 fb4b 	bl	80067b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800611a:	2027      	movs	r0, #39	; 0x27
 800611c:	f000 fb64 	bl	80067e8 <HAL_NVIC_EnableIRQ>
}
 8006120:	bf00      	nop
 8006122:	3740      	adds	r7, #64	; 0x40
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}
 8006128:	40007800 	.word	0x40007800
 800612c:	40023800 	.word	0x40023800
 8006130:	40021000 	.word	0x40021000
 8006134:	40011000 	.word	0x40011000
 8006138:	40020000 	.word	0x40020000
 800613c:	40004400 	.word	0x40004400
 8006140:	40004800 	.word	0x40004800
 8006144:	40020400 	.word	0x40020400

08006148 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08c      	sub	sp, #48	; 0x30
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 8006158:	2200      	movs	r2, #0
 800615a:	6879      	ldr	r1, [r7, #4]
 800615c:	2032      	movs	r0, #50	; 0x32
 800615e:	f000 fb27 	bl	80067b0 <HAL_NVIC_SetPriority>

  /* Enable the TIM5 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006162:	2032      	movs	r0, #50	; 0x32
 8006164:	f000 fb40 	bl	80067e8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8006168:	2300      	movs	r3, #0
 800616a:	60fb      	str	r3, [r7, #12]
 800616c:	4b1f      	ldr	r3, [pc, #124]	; (80061ec <HAL_InitTick+0xa4>)
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <HAL_InitTick+0xa4>)
 8006172:	f043 0308 	orr.w	r3, r3, #8
 8006176:	6413      	str	r3, [r2, #64]	; 0x40
 8006178:	4b1c      	ldr	r3, [pc, #112]	; (80061ec <HAL_InitTick+0xa4>)
 800617a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617c:	f003 0308 	and.w	r3, r3, #8
 8006180:	60fb      	str	r3, [r7, #12]
 8006182:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006184:	f107 0210 	add.w	r2, r7, #16
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	4611      	mov	r1, r2
 800618e:	4618      	mov	r0, r3
 8006190:	f003 fbb0 	bl	80098f4 <HAL_RCC_GetClockConfig>

  /* Compute TIM5 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006194:	f003 fb86 	bl	80098a4 <HAL_RCC_GetPCLK1Freq>
 8006198:	4603      	mov	r3, r0
 800619a:	005b      	lsls	r3, r3, #1
 800619c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061a0:	4a13      	ldr	r2, [pc, #76]	; (80061f0 <HAL_InitTick+0xa8>)
 80061a2:	fba2 2303 	umull	r2, r3, r2, r3
 80061a6:	0c9b      	lsrs	r3, r3, #18
 80061a8:	3b01      	subs	r3, #1
 80061aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80061ac:	4b11      	ldr	r3, [pc, #68]	; (80061f4 <HAL_InitTick+0xac>)
 80061ae:	4a12      	ldr	r2, [pc, #72]	; (80061f8 <HAL_InitTick+0xb0>)
 80061b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80061b2:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <HAL_InitTick+0xac>)
 80061b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80061b8:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80061ba:	4a0e      	ldr	r2, [pc, #56]	; (80061f4 <HAL_InitTick+0xac>)
 80061bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061be:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80061c0:	4b0c      	ldr	r3, [pc, #48]	; (80061f4 <HAL_InitTick+0xac>)
 80061c2:	2200      	movs	r2, #0
 80061c4:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061c6:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <HAL_InitTick+0xac>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 80061cc:	4809      	ldr	r0, [pc, #36]	; (80061f4 <HAL_InitTick+0xac>)
 80061ce:	f004 ffc1 	bl	800b154 <HAL_TIM_Base_Init>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d104      	bne.n	80061e2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 80061d8:	4806      	ldr	r0, [pc, #24]	; (80061f4 <HAL_InitTick+0xac>)
 80061da:	f005 f815 	bl	800b208 <HAL_TIM_Base_Start_IT>
 80061de:	4603      	mov	r3, r0
 80061e0:	e000      	b.n	80061e4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3730      	adds	r7, #48	; 0x30
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}
 80061ec:	40023800 	.word	0x40023800
 80061f0:	431bde83 	.word	0x431bde83
 80061f4:	200133f4 	.word	0x200133f4
 80061f8:	40000c00 	.word	0x40000c00

080061fc <SDTimer_Handler>:
volatile uint32_t msTicks = 0 ;
volatile uint32_t runCnt = 0 ;


void SDTimer_Handler(void)
{
 80061fc:	b480      	push	{r7}
 80061fe:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8006200:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <SDTimer_Handler+0x38>)
 8006202:	881b      	ldrh	r3, [r3, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d005      	beq.n	8006214 <SDTimer_Handler+0x18>
    Timer1--;
 8006208:	4b0a      	ldr	r3, [pc, #40]	; (8006234 <SDTimer_Handler+0x38>)
 800620a:	881b      	ldrh	r3, [r3, #0]
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	4b08      	ldr	r3, [pc, #32]	; (8006234 <SDTimer_Handler+0x38>)
 8006212:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8006214:	4b08      	ldr	r3, [pc, #32]	; (8006238 <SDTimer_Handler+0x3c>)
 8006216:	881b      	ldrh	r3, [r3, #0]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d005      	beq.n	8006228 <SDTimer_Handler+0x2c>
    Timer2--;
 800621c:	4b06      	ldr	r3, [pc, #24]	; (8006238 <SDTimer_Handler+0x3c>)
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	3b01      	subs	r3, #1
 8006222:	b29a      	uxth	r2, r3
 8006224:	4b04      	ldr	r3, [pc, #16]	; (8006238 <SDTimer_Handler+0x3c>)
 8006226:	801a      	strh	r2, [r3, #0]
}
 8006228:	bf00      	nop
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	2000620c 	.word	0x2000620c
 8006238:	2000620e 	.word	0x2000620e

0800623c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800623c:	b480      	push	{r7}
 800623e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006240:	e7fe      	b.n	8006240 <NMI_Handler+0x4>

08006242 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006242:	b480      	push	{r7}
 8006244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006246:	e7fe      	b.n	8006246 <HardFault_Handler+0x4>

08006248 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006248:	b480      	push	{r7}
 800624a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800624c:	e7fe      	b.n	800624c <MemManage_Handler+0x4>

0800624e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800624e:	b480      	push	{r7}
 8006250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006252:	e7fe      	b.n	8006252 <BusFault_Handler+0x4>

08006254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006254:	b480      	push	{r7}
 8006256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006258:	e7fe      	b.n	8006258 <UsageFault_Handler+0x4>

0800625a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800625a:	b480      	push	{r7}
 800625c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800625e:	bf00      	nop
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BT_WIFI_IRQN_Pin);
 800626c:	2010      	movs	r0, #16
 800626e:	f001 f89f 	bl	80073b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8006272:	bf00      	nop
 8006274:	bd80      	pop	{r7, pc}
	...

08006278 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 800627c:	4802      	ldr	r0, [pc, #8]	; (8006288 <DMA1_Stream3_IRQHandler+0x10>)
 800627e:	f000 fc67 	bl	8006b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8006282:	bf00      	nop
 8006284:	bd80      	pop	{r7, pc}
 8006286:	bf00      	nop
 8006288:	2000e584 	.word	0x2000e584

0800628c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8006290:	4802      	ldr	r0, [pc, #8]	; (800629c <DMA1_Stream4_IRQHandler+0x10>)
 8006292:	f000 fc5d 	bl	8006b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8006296:	bf00      	nop
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	2000e524 	.word	0x2000e524

080062a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80062a4:	4802      	ldr	r0, [pc, #8]	; (80062b0 <USART1_IRQHandler+0x10>)
 80062a6:	f005 ff91 	bl	800c1cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80062aa:	bf00      	nop
 80062ac:	bd80      	pop	{r7, pc}
 80062ae:	bf00      	nop
 80062b0:	2000e8d0 	.word	0x2000e8d0

080062b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80062b8:	4802      	ldr	r0, [pc, #8]	; (80062c4 <USART2_IRQHandler+0x10>)
 80062ba:	f005 ff87 	bl	800c1cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80062be:	bf00      	nop
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	2000e914 	.word	0x2000e914

080062c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80062cc:	4802      	ldr	r0, [pc, #8]	; (80062d8 <USART3_IRQHandler+0x10>)
 80062ce:	f005 ff7d 	bl	800c1cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80062d2:	bf00      	nop
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	2000e958 	.word	0x2000e958

080062dc <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80062e0:	4802      	ldr	r0, [pc, #8]	; (80062ec <RTC_Alarm_IRQHandler+0x10>)
 80062e2:	f004 f8db 	bl	800a49c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	2000e5e4 	.word	0x2000e5e4

080062f0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	FatFsCnt++;
 80062f4:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <TIM5_IRQHandler+0x44>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	3301      	adds	r3, #1
 80062fc:	b2da      	uxtb	r2, r3
 80062fe:	4b0d      	ldr	r3, [pc, #52]	; (8006334 <TIM5_IRQHandler+0x44>)
 8006300:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8006302:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <TIM5_IRQHandler+0x44>)
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b09      	cmp	r3, #9
 800630a:	d904      	bls.n	8006316 <TIM5_IRQHandler+0x26>
	{
		FatFsCnt = 0;
 800630c:	4b09      	ldr	r3, [pc, #36]	; (8006334 <TIM5_IRQHandler+0x44>)
 800630e:	2200      	movs	r2, #0
 8006310:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8006312:	f7ff ff73 	bl	80061fc <SDTimer_Handler>
	}

	// m16946 added
	msTicks ++ ;
 8006316:	4b08      	ldr	r3, [pc, #32]	; (8006338 <TIM5_IRQHandler+0x48>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3301      	adds	r3, #1
 800631c:	4a06      	ldr	r2, [pc, #24]	; (8006338 <TIM5_IRQHandler+0x48>)
 800631e:	6013      	str	r3, [r2, #0]
	runCnt ++ ;
 8006320:	4b06      	ldr	r3, [pc, #24]	; (800633c <TIM5_IRQHandler+0x4c>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	3301      	adds	r3, #1
 8006326:	4a05      	ldr	r2, [pc, #20]	; (800633c <TIM5_IRQHandler+0x4c>)
 8006328:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800632a:	4805      	ldr	r0, [pc, #20]	; (8006340 <TIM5_IRQHandler+0x50>)
 800632c:	f005 f8f4 	bl	800b518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */
  /* USER CODE END TIM5_IRQn 1 */
}
 8006330:	bf00      	nop
 8006332:	bd80      	pop	{r7, pc}
 8006334:	2001343c 	.word	0x2001343c
 8006338:	20013440 	.word	0x20013440
 800633c:	20013444 	.word	0x20013444
 8006340:	200133f4 	.word	0x200133f4

08006344 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 8006348:	4802      	ldr	r0, [pc, #8]	; (8006354 <DMA2_Stream4_IRQHandler+0x10>)
 800634a:	f000 fc01 	bl	8006b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800634e:	bf00      	nop
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	2000e70c 	.word	0x2000e70c

08006358 <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 800635c:	4802      	ldr	r0, [pc, #8]	; (8006368 <SPI5_IRQHandler+0x10>)
 800635e:	f004 fd11 	bl	800ad84 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 8006362:	bf00      	nop
 8006364:	bd80      	pop	{r7, pc}
 8006366:	bf00      	nop
 8006368:	2000e6b4 	.word	0x2000e6b4

0800636c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b086      	sub	sp, #24
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006378:	2300      	movs	r3, #0
 800637a:	617b      	str	r3, [r7, #20]
 800637c:	e00a      	b.n	8006394 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800637e:	f3af 8000 	nop.w
 8006382:	4601      	mov	r1, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	60ba      	str	r2, [r7, #8]
 800638a:	b2ca      	uxtb	r2, r1
 800638c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	3301      	adds	r3, #1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	429a      	cmp	r2, r3
 800639a:	dbf0      	blt.n	800637e <_read+0x12>
	}

return len;
 800639c:	687b      	ldr	r3, [r7, #4]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3718      	adds	r7, #24
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b086      	sub	sp, #24
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	60f8      	str	r0, [r7, #12]
 80063ae:	60b9      	str	r1, [r7, #8]
 80063b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063b2:	2300      	movs	r3, #0
 80063b4:	617b      	str	r3, [r7, #20]
 80063b6:	e009      	b.n	80063cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	1c5a      	adds	r2, r3, #1
 80063bc:	60ba      	str	r2, [r7, #8]
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f7fc fbd7 	bl	8002b74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	3301      	adds	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
 80063cc:	697a      	ldr	r2, [r7, #20]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	dbf1      	blt.n	80063b8 <_write+0x12>
	}
	return len;
 80063d4:	687b      	ldr	r3, [r7, #4]
}
 80063d6:	4618      	mov	r0, r3
 80063d8:	3718      	adds	r7, #24
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}

080063de <_close>:

int _close(int file)
{
 80063de:	b480      	push	{r7}
 80063e0:	b083      	sub	sp, #12
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
	return -1;
 80063e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr

080063f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
 80063fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006406:	605a      	str	r2, [r3, #4]
	return 0;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	370c      	adds	r7, #12
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr

08006416 <_isatty>:

int _isatty(int file)
{
 8006416:	b480      	push	{r7}
 8006418:	b083      	sub	sp, #12
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
	return 1;
 800641e:	2301      	movs	r3, #1
}
 8006420:	4618      	mov	r0, r3
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	60f8      	str	r0, [r7, #12]
 8006434:	60b9      	str	r1, [r7, #8]
 8006436:	607a      	str	r2, [r7, #4]
	return 0;
 8006438:	2300      	movs	r3, #0
}
 800643a:	4618      	mov	r0, r3
 800643c:	3714      	adds	r7, #20
 800643e:	46bd      	mov	sp, r7
 8006440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006444:	4770      	bx	lr
	...

08006448 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b086      	sub	sp, #24
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <_sbrk+0x5c>)
 8006452:	4b15      	ldr	r3, [pc, #84]	; (80064a8 <_sbrk+0x60>)
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800645c:	4b13      	ldr	r3, [pc, #76]	; (80064ac <_sbrk+0x64>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006464:	4b11      	ldr	r3, [pc, #68]	; (80064ac <_sbrk+0x64>)
 8006466:	4a12      	ldr	r2, [pc, #72]	; (80064b0 <_sbrk+0x68>)
 8006468:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800646a:	4b10      	ldr	r3, [pc, #64]	; (80064ac <_sbrk+0x64>)
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4413      	add	r3, r2
 8006472:	693a      	ldr	r2, [r7, #16]
 8006474:	429a      	cmp	r2, r3
 8006476:	d207      	bcs.n	8006488 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006478:	f017 fe20 	bl	801e0bc <__errno>
 800647c:	4603      	mov	r3, r0
 800647e:	220c      	movs	r2, #12
 8006480:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006482:	f04f 33ff 	mov.w	r3, #4294967295
 8006486:	e009      	b.n	800649c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006488:	4b08      	ldr	r3, [pc, #32]	; (80064ac <_sbrk+0x64>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800648e:	4b07      	ldr	r3, [pc, #28]	; (80064ac <_sbrk+0x64>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4413      	add	r3, r2
 8006496:	4a05      	ldr	r2, [pc, #20]	; (80064ac <_sbrk+0x64>)
 8006498:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800649a:	68fb      	ldr	r3, [r7, #12]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3718      	adds	r7, #24
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	20030000 	.word	0x20030000
 80064a8:	00001000 	.word	0x00001000
 80064ac:	20013448 	.word	0x20013448
 80064b0:	2001e540 	.word	0x2001e540

080064b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80064b4:	b480      	push	{r7}
 80064b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
;    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80064b8:	4b06      	ldr	r3, [pc, #24]	; (80064d4 <SystemInit+0x20>)
 80064ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064be:	4a05      	ldr	r2, [pc, #20]	; (80064d4 <SystemInit+0x20>)
 80064c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80064c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80064c8:	bf00      	nop
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	e000ed00 	.word	0xe000ed00

080064d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80064d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006510 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80064dc:	480d      	ldr	r0, [pc, #52]	; (8006514 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80064de:	490e      	ldr	r1, [pc, #56]	; (8006518 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80064e0:	4a0e      	ldr	r2, [pc, #56]	; (800651c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80064e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80064e4:	e002      	b.n	80064ec <LoopCopyDataInit>

080064e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80064e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80064e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80064ea:	3304      	adds	r3, #4

080064ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80064ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80064ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80064f0:	d3f9      	bcc.n	80064e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80064f2:	4a0b      	ldr	r2, [pc, #44]	; (8006520 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80064f4:	4c0b      	ldr	r4, [pc, #44]	; (8006524 <LoopFillZerobss+0x26>)
  movs r3, #0
 80064f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80064f8:	e001      	b.n	80064fe <LoopFillZerobss>

080064fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80064fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80064fc:	3204      	adds	r2, #4

080064fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80064fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006500:	d3fb      	bcc.n	80064fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006502:	f7ff ffd7 	bl	80064b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006506:	f017 fed5 	bl	801e2b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800650a:	f7fd fcd5 	bl	8003eb8 <main>
  bx  lr    
 800650e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8006510:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8006514:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006518:	200000ac 	.word	0x200000ac
  ldr r2, =_sidata
 800651c:	080293fc 	.word	0x080293fc
  ldr r2, =_sbss
 8006520:	200000ac 	.word	0x200000ac
  ldr r4, =_ebss
 8006524:	2001e540 	.word	0x2001e540

08006528 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006528:	e7fe      	b.n	8006528 <ADC_IRQHandler>
	...

0800652c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006530:	4b0e      	ldr	r3, [pc, #56]	; (800656c <HAL_Init+0x40>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a0d      	ldr	r2, [pc, #52]	; (800656c <HAL_Init+0x40>)
 8006536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800653a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800653c:	4b0b      	ldr	r3, [pc, #44]	; (800656c <HAL_Init+0x40>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a0a      	ldr	r2, [pc, #40]	; (800656c <HAL_Init+0x40>)
 8006542:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006546:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006548:	4b08      	ldr	r3, [pc, #32]	; (800656c <HAL_Init+0x40>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a07      	ldr	r2, [pc, #28]	; (800656c <HAL_Init+0x40>)
 800654e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006552:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006554:	2003      	movs	r0, #3
 8006556:	f000 f920 	bl	800679a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800655a:	2005      	movs	r0, #5
 800655c:	f7ff fdf4 	bl	8006148 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006560:	f7ff f8ec 	bl	800573c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	4618      	mov	r0, r3
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40023c00 	.word	0x40023c00

08006570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006574:	4b06      	ldr	r3, [pc, #24]	; (8006590 <HAL_IncTick+0x20>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	4b06      	ldr	r3, [pc, #24]	; (8006594 <HAL_IncTick+0x24>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4413      	add	r3, r2
 8006580:	4a04      	ldr	r2, [pc, #16]	; (8006594 <HAL_IncTick+0x24>)
 8006582:	6013      	str	r3, [r2, #0]
}
 8006584:	bf00      	nop
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	20000014 	.word	0x20000014
 8006594:	2001344c 	.word	0x2001344c

08006598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006598:	b480      	push	{r7}
 800659a:	af00      	add	r7, sp, #0
  return uwTick;
 800659c:	4b03      	ldr	r3, [pc, #12]	; (80065ac <HAL_GetTick+0x14>)
 800659e:	681b      	ldr	r3, [r3, #0]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
 80065aa:	bf00      	nop
 80065ac:	2001344c 	.word	0x2001344c

080065b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065b8:	f7ff ffee 	bl	8006598 <HAL_GetTick>
 80065bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065c8:	d005      	beq.n	80065d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80065ca:	4b0a      	ldr	r3, [pc, #40]	; (80065f4 <HAL_Delay+0x44>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	461a      	mov	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4413      	add	r3, r2
 80065d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065d6:	bf00      	nop
 80065d8:	f7ff ffde 	bl	8006598 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	68fa      	ldr	r2, [r7, #12]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d8f7      	bhi.n	80065d8 <HAL_Delay+0x28>
  {
  }
}
 80065e8:	bf00      	nop
 80065ea:	bf00      	nop
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}
 80065f2:	bf00      	nop
 80065f4:	20000014 	.word	0x20000014

080065f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80065f8:	b480      	push	{r7}
 80065fa:	b085      	sub	sp, #20
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006608:	4b0c      	ldr	r3, [pc, #48]	; (800663c <__NVIC_SetPriorityGrouping+0x44>)
 800660a:	68db      	ldr	r3, [r3, #12]
 800660c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006614:	4013      	ands	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006620:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006624:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006628:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800662a:	4a04      	ldr	r2, [pc, #16]	; (800663c <__NVIC_SetPriorityGrouping+0x44>)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	60d3      	str	r3, [r2, #12]
}
 8006630:	bf00      	nop
 8006632:	3714      	adds	r7, #20
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	e000ed00 	.word	0xe000ed00

08006640 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006640:	b480      	push	{r7}
 8006642:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006644:	4b04      	ldr	r3, [pc, #16]	; (8006658 <__NVIC_GetPriorityGrouping+0x18>)
 8006646:	68db      	ldr	r3, [r3, #12]
 8006648:	0a1b      	lsrs	r3, r3, #8
 800664a:	f003 0307 	and.w	r3, r3, #7
}
 800664e:	4618      	mov	r0, r3
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	e000ed00 	.word	0xe000ed00

0800665c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	4603      	mov	r3, r0
 8006664:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800666a:	2b00      	cmp	r3, #0
 800666c:	db0b      	blt.n	8006686 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800666e:	79fb      	ldrb	r3, [r7, #7]
 8006670:	f003 021f 	and.w	r2, r3, #31
 8006674:	4907      	ldr	r1, [pc, #28]	; (8006694 <__NVIC_EnableIRQ+0x38>)
 8006676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	2001      	movs	r0, #1
 800667e:	fa00 f202 	lsl.w	r2, r0, r2
 8006682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006686:	bf00      	nop
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
 8006692:	bf00      	nop
 8006694:	e000e100 	.word	0xe000e100

08006698 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	4603      	mov	r3, r0
 80066a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	db12      	blt.n	80066d0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066aa:	79fb      	ldrb	r3, [r7, #7]
 80066ac:	f003 021f 	and.w	r2, r3, #31
 80066b0:	490a      	ldr	r1, [pc, #40]	; (80066dc <__NVIC_DisableIRQ+0x44>)
 80066b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	2001      	movs	r0, #1
 80066ba:	fa00 f202 	lsl.w	r2, r0, r2
 80066be:	3320      	adds	r3, #32
 80066c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80066c4:	f3bf 8f4f 	dsb	sy
}
 80066c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80066ca:	f3bf 8f6f 	isb	sy
}
 80066ce:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	e000e100 	.word	0xe000e100

080066e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	4603      	mov	r3, r0
 80066e8:	6039      	str	r1, [r7, #0]
 80066ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	db0a      	blt.n	800670a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	490c      	ldr	r1, [pc, #48]	; (800672c <__NVIC_SetPriority+0x4c>)
 80066fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066fe:	0112      	lsls	r2, r2, #4
 8006700:	b2d2      	uxtb	r2, r2
 8006702:	440b      	add	r3, r1
 8006704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006708:	e00a      	b.n	8006720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	4908      	ldr	r1, [pc, #32]	; (8006730 <__NVIC_SetPriority+0x50>)
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	3b04      	subs	r3, #4
 8006718:	0112      	lsls	r2, r2, #4
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	440b      	add	r3, r1
 800671e:	761a      	strb	r2, [r3, #24]
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	e000e100 	.word	0xe000e100
 8006730:	e000ed00 	.word	0xe000ed00

08006734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006734:	b480      	push	{r7}
 8006736:	b089      	sub	sp, #36	; 0x24
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	f1c3 0307 	rsb	r3, r3, #7
 800674e:	2b04      	cmp	r3, #4
 8006750:	bf28      	it	cs
 8006752:	2304      	movcs	r3, #4
 8006754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	3304      	adds	r3, #4
 800675a:	2b06      	cmp	r3, #6
 800675c:	d902      	bls.n	8006764 <NVIC_EncodePriority+0x30>
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	3b03      	subs	r3, #3
 8006762:	e000      	b.n	8006766 <NVIC_EncodePriority+0x32>
 8006764:	2300      	movs	r3, #0
 8006766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006768:	f04f 32ff 	mov.w	r2, #4294967295
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	fa02 f303 	lsl.w	r3, r2, r3
 8006772:	43da      	mvns	r2, r3
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	401a      	ands	r2, r3
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800677c:	f04f 31ff 	mov.w	r1, #4294967295
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	fa01 f303 	lsl.w	r3, r1, r3
 8006786:	43d9      	mvns	r1, r3
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800678c:	4313      	orrs	r3, r2
         );
}
 800678e:	4618      	mov	r0, r3
 8006790:	3724      	adds	r7, #36	; 0x24
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800679a:	b580      	push	{r7, lr}
 800679c:	b082      	sub	sp, #8
 800679e:	af00      	add	r7, sp, #0
 80067a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f7ff ff28 	bl	80065f8 <__NVIC_SetPriorityGrouping>
}
 80067a8:	bf00      	nop
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b086      	sub	sp, #24
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	607a      	str	r2, [r7, #4]
 80067bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80067be:	2300      	movs	r3, #0
 80067c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80067c2:	f7ff ff3d 	bl	8006640 <__NVIC_GetPriorityGrouping>
 80067c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067c8:	687a      	ldr	r2, [r7, #4]
 80067ca:	68b9      	ldr	r1, [r7, #8]
 80067cc:	6978      	ldr	r0, [r7, #20]
 80067ce:	f7ff ffb1 	bl	8006734 <NVIC_EncodePriority>
 80067d2:	4602      	mov	r2, r0
 80067d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067d8:	4611      	mov	r1, r2
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff ff80 	bl	80066e0 <__NVIC_SetPriority>
}
 80067e0:	bf00      	nop
 80067e2:	3718      	adds	r7, #24
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80067f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff ff30 	bl	800665c <__NVIC_EnableIRQ>
}
 80067fc:	bf00      	nop
 80067fe:	3708      	adds	r7, #8
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
 800680a:	4603      	mov	r3, r0
 800680c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800680e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006812:	4618      	mov	r0, r3
 8006814:	f7ff ff40 	bl	8006698 <__NVIC_DisableIRQ>
}
 8006818:	bf00      	nop
 800681a:	3708      	adds	r7, #8
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800682c:	f7ff feb4 	bl	8006598 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e099      	b.n	8006970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2202      	movs	r2, #2
 8006840:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800685c:	e00f      	b.n	800687e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800685e:	f7ff fe9b 	bl	8006598 <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	2b05      	cmp	r3, #5
 800686a:	d908      	bls.n	800687e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2220      	movs	r2, #32
 8006870:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2203      	movs	r2, #3
 8006876:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e078      	b.n	8006970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f003 0301 	and.w	r3, r3, #1
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1e8      	bne.n	800685e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	4b38      	ldr	r3, [pc, #224]	; (8006978 <HAL_DMA_Init+0x158>)
 8006898:	4013      	ands	r3, r2
 800689a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685a      	ldr	r2, [r3, #4]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699b      	ldr	r3, [r3, #24]
 80068bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a1b      	ldr	r3, [r3, #32]
 80068c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	4313      	orrs	r3, r2
 80068ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068d4:	2b04      	cmp	r3, #4
 80068d6:	d107      	bne.n	80068e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e0:	4313      	orrs	r3, r2
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	697a      	ldr	r2, [r7, #20]
 80068ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	f023 0307 	bic.w	r3, r3, #7
 80068fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006904:	697a      	ldr	r2, [r7, #20]
 8006906:	4313      	orrs	r3, r2
 8006908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690e:	2b04      	cmp	r3, #4
 8006910:	d117      	bne.n	8006942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00e      	beq.n	8006942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f000 fb01 	bl	8006f2c <DMA_CheckFifoParam>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d008      	beq.n	8006942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2240      	movs	r2, #64	; 0x40
 8006934:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800693e:	2301      	movs	r3, #1
 8006940:	e016      	b.n	8006970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fab8 	bl	8006ec0 <DMA_CalcBaseAndBitshift>
 8006950:	4603      	mov	r3, r0
 8006952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006958:	223f      	movs	r2, #63	; 0x3f
 800695a:	409a      	lsls	r2, r3
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800696e:	2300      	movs	r3, #0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3718      	adds	r7, #24
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	f010803f 	.word	0xf010803f

0800697c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006992:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_DMA_Start_IT+0x26>
 800699e:	2302      	movs	r3, #2
 80069a0:	e040      	b.n	8006a24 <HAL_DMA_Start_IT+0xa8>
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80069b0:	b2db      	uxtb	r3, r3
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d12f      	bne.n	8006a16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2202      	movs	r2, #2
 80069ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	68b9      	ldr	r1, [r7, #8]
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fa4a 	bl	8006e64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d4:	223f      	movs	r2, #63	; 0x3f
 80069d6:	409a      	lsls	r2, r3
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f042 0216 	orr.w	r2, r2, #22
 80069ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f042 0208 	orr.w	r2, r2, #8
 8006a02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	681a      	ldr	r2, [r3, #0]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	601a      	str	r2, [r3, #0]
 8006a14:	e005      	b.n	8006a22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006a1e:	2302      	movs	r3, #2
 8006a20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b084      	sub	sp, #16
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a3a:	f7ff fdad 	bl	8006598 <HAL_GetTick>
 8006a3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d008      	beq.n	8006a5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2280      	movs	r2, #128	; 0x80
 8006a50:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e052      	b.n	8006b04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f022 0216 	bic.w	r2, r2, #22
 8006a6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	695a      	ldr	r2, [r3, #20]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d103      	bne.n	8006a8e <HAL_DMA_Abort+0x62>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d007      	beq.n	8006a9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681a      	ldr	r2, [r3, #0]
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f022 0208 	bic.w	r2, r2, #8
 8006a9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681a      	ldr	r2, [r3, #0]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f022 0201 	bic.w	r2, r2, #1
 8006aac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aae:	e013      	b.n	8006ad8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006ab0:	f7ff fd72 	bl	8006598 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b05      	cmp	r3, #5
 8006abc:	d90c      	bls.n	8006ad8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e015      	b.n	8006b04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 0301 	and.w	r3, r3, #1
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d1e4      	bne.n	8006ab0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aea:	223f      	movs	r2, #63	; 0x3f
 8006aec:	409a      	lsls	r2, r3
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d004      	beq.n	8006b2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2280      	movs	r2, #128	; 0x80
 8006b24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e00c      	b.n	8006b44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	2205      	movs	r2, #5
 8006b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	370c      	adds	r7, #12
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4e:	4770      	bx	lr

08006b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b086      	sub	sp, #24
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006b5c:	4b8e      	ldr	r3, [pc, #568]	; (8006d98 <HAL_DMA_IRQHandler+0x248>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a8e      	ldr	r2, [pc, #568]	; (8006d9c <HAL_DMA_IRQHandler+0x24c>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	0a9b      	lsrs	r3, r3, #10
 8006b68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b7a:	2208      	movs	r2, #8
 8006b7c:	409a      	lsls	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	4013      	ands	r3, r2
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01a      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f003 0304 	and.w	r3, r3, #4
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d013      	beq.n	8006bbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f022 0204 	bic.w	r2, r2, #4
 8006ba2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba8:	2208      	movs	r2, #8
 8006baa:	409a      	lsls	r2, r3
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb4:	f043 0201 	orr.w	r2, r3, #1
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d012      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	695b      	ldr	r3, [r3, #20]
 8006bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bde:	2201      	movs	r2, #1
 8006be0:	409a      	lsls	r2, r3
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bea:	f043 0202 	orr.w	r2, r3, #2
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006bf6:	2204      	movs	r2, #4
 8006bf8:	409a      	lsls	r2, r3
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4013      	ands	r3, r2
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d012      	beq.n	8006c28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c14:	2204      	movs	r2, #4
 8006c16:	409a      	lsls	r2, r3
 8006c18:	693b      	ldr	r3, [r7, #16]
 8006c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c20:	f043 0204 	orr.w	r2, r3, #4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c2c:	2210      	movs	r2, #16
 8006c2e:	409a      	lsls	r2, r3
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4013      	ands	r3, r2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d043      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d03c      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4a:	2210      	movs	r2, #16
 8006c4c:	409a      	lsls	r2, r3
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d018      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d108      	bne.n	8006c80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d024      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	4798      	blx	r3
 8006c7e:	e01f      	b.n	8006cc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01b      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	4798      	blx	r3
 8006c90:	e016      	b.n	8006cc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d107      	bne.n	8006cb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 0208 	bic.w	r2, r2, #8
 8006cae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d003      	beq.n	8006cc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cc4:	2220      	movs	r2, #32
 8006cc6:	409a      	lsls	r2, r3
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	4013      	ands	r3, r2
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	f000 808f 	beq.w	8006df0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 8087 	beq.w	8006df0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	409a      	lsls	r2, r3
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b05      	cmp	r3, #5
 8006cf8:	d136      	bne.n	8006d68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f022 0216 	bic.w	r2, r2, #22
 8006d08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	695a      	ldr	r2, [r3, #20]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d103      	bne.n	8006d2a <HAL_DMA_IRQHandler+0x1da>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d007      	beq.n	8006d3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0208 	bic.w	r2, r2, #8
 8006d38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d3e:	223f      	movs	r2, #63	; 0x3f
 8006d40:	409a      	lsls	r2, r3
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d07e      	beq.n	8006e5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	4798      	blx	r3
        }
        return;
 8006d66:	e079      	b.n	8006e5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d01d      	beq.n	8006db2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10d      	bne.n	8006da0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d031      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	4798      	blx	r3
 8006d94:	e02c      	b.n	8006df0 <HAL_DMA_IRQHandler+0x2a0>
 8006d96:	bf00      	nop
 8006d98:	2000000c 	.word	0x2000000c
 8006d9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d023      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	4798      	blx	r3
 8006db0:	e01e      	b.n	8006df0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d10f      	bne.n	8006de0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f022 0210 	bic.w	r2, r2, #16
 8006dce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006dec:	6878      	ldr	r0, [r7, #4]
 8006dee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d032      	beq.n	8006e5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dfc:	f003 0301 	and.w	r3, r3, #1
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d022      	beq.n	8006e4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2205      	movs	r2, #5
 8006e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0201 	bic.w	r2, r2, #1
 8006e1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	3301      	adds	r3, #1
 8006e20:	60bb      	str	r3, [r7, #8]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	429a      	cmp	r2, r3
 8006e26:	d307      	bcc.n	8006e38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d1f2      	bne.n	8006e1c <HAL_DMA_IRQHandler+0x2cc>
 8006e36:	e000      	b.n	8006e3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006e38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d005      	beq.n	8006e5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	4798      	blx	r3
 8006e5a:	e000      	b.n	8006e5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006e5c:	bf00      	nop
    }
  }
}
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b085      	sub	sp, #20
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	681a      	ldr	r2, [r3, #0]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	683a      	ldr	r2, [r7, #0]
 8006e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b40      	cmp	r3, #64	; 0x40
 8006e90:	d108      	bne.n	8006ea4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68ba      	ldr	r2, [r7, #8]
 8006ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006ea2:	e007      	b.n	8006eb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	687a      	ldr	r2, [r7, #4]
 8006eb2:	60da      	str	r2, [r3, #12]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	b2db      	uxtb	r3, r3
 8006ece:	3b10      	subs	r3, #16
 8006ed0:	4a14      	ldr	r2, [pc, #80]	; (8006f24 <DMA_CalcBaseAndBitshift+0x64>)
 8006ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ed6:	091b      	lsrs	r3, r3, #4
 8006ed8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006eda:	4a13      	ldr	r2, [pc, #76]	; (8006f28 <DMA_CalcBaseAndBitshift+0x68>)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2b03      	cmp	r3, #3
 8006eec:	d909      	bls.n	8006f02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006ef6:	f023 0303 	bic.w	r3, r3, #3
 8006efa:	1d1a      	adds	r2, r3, #4
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	659a      	str	r2, [r3, #88]	; 0x58
 8006f00:	e007      	b.n	8006f12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006f0a:	f023 0303 	bic.w	r3, r3, #3
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	aaaaaaab 	.word	0xaaaaaaab
 8006f28:	080258a4 	.word	0x080258a4

08006f2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b085      	sub	sp, #20
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f34:	2300      	movs	r3, #0
 8006f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	699b      	ldr	r3, [r3, #24]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d11f      	bne.n	8006f86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2b03      	cmp	r3, #3
 8006f4a:	d856      	bhi.n	8006ffa <DMA_CheckFifoParam+0xce>
 8006f4c:	a201      	add	r2, pc, #4	; (adr r2, 8006f54 <DMA_CheckFifoParam+0x28>)
 8006f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f52:	bf00      	nop
 8006f54:	08006f65 	.word	0x08006f65
 8006f58:	08006f77 	.word	0x08006f77
 8006f5c:	08006f65 	.word	0x08006f65
 8006f60:	08006ffb 	.word	0x08006ffb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d046      	beq.n	8006ffe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006f70:	2301      	movs	r3, #1
 8006f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f74:	e043      	b.n	8006ffe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f7a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f7e:	d140      	bne.n	8007002 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006f84:	e03d      	b.n	8007002 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	699b      	ldr	r3, [r3, #24]
 8006f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f8e:	d121      	bne.n	8006fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d837      	bhi.n	8007006 <DMA_CheckFifoParam+0xda>
 8006f96:	a201      	add	r2, pc, #4	; (adr r2, 8006f9c <DMA_CheckFifoParam+0x70>)
 8006f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f9c:	08006fad 	.word	0x08006fad
 8006fa0:	08006fb3 	.word	0x08006fb3
 8006fa4:	08006fad 	.word	0x08006fad
 8006fa8:	08006fc5 	.word	0x08006fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006fac:	2301      	movs	r3, #1
 8006fae:	73fb      	strb	r3, [r7, #15]
      break;
 8006fb0:	e030      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d025      	beq.n	800700a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006fc2:	e022      	b.n	800700a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fcc:	d11f      	bne.n	800700e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006fd2:	e01c      	b.n	800700e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b02      	cmp	r3, #2
 8006fd8:	d903      	bls.n	8006fe2 <DMA_CheckFifoParam+0xb6>
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d003      	beq.n	8006fe8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006fe0:	e018      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe6:	e015      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d00e      	beq.n	8007012 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ff8:	e00b      	b.n	8007012 <DMA_CheckFifoParam+0xe6>
      break;
 8006ffa:	bf00      	nop
 8006ffc:	e00a      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
      break;
 8006ffe:	bf00      	nop
 8007000:	e008      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
      break;
 8007002:	bf00      	nop
 8007004:	e006      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
      break;
 8007006:	bf00      	nop
 8007008:	e004      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
      break;
 800700a:	bf00      	nop
 800700c:	e002      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
      break;   
 800700e:	bf00      	nop
 8007010:	e000      	b.n	8007014 <DMA_CheckFifoParam+0xe8>
      break;
 8007012:	bf00      	nop
    }
  } 
  
  return status; 
 8007014:	7bfb      	ldrb	r3, [r7, #15]
}
 8007016:	4618      	mov	r0, r3
 8007018:	3714      	adds	r7, #20
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop

08007024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007024:	b480      	push	{r7}
 8007026:	b089      	sub	sp, #36	; 0x24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800702e:	2300      	movs	r3, #0
 8007030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007036:	2300      	movs	r3, #0
 8007038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800703a:	2300      	movs	r3, #0
 800703c:	61fb      	str	r3, [r7, #28]
 800703e:	e177      	b.n	8007330 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007040:	2201      	movs	r2, #1
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	fa02 f303 	lsl.w	r3, r2, r3
 8007048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	4013      	ands	r3, r2
 8007052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007054:	693a      	ldr	r2, [r7, #16]
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	429a      	cmp	r2, r3
 800705a:	f040 8166 	bne.w	800732a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	2b01      	cmp	r3, #1
 8007068:	d005      	beq.n	8007076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007072:	2b02      	cmp	r3, #2
 8007074:	d130      	bne.n	80070d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	689b      	ldr	r3, [r3, #8]
 800707a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800707c:	69fb      	ldr	r3, [r7, #28]
 800707e:	005b      	lsls	r3, r3, #1
 8007080:	2203      	movs	r2, #3
 8007082:	fa02 f303 	lsl.w	r3, r2, r3
 8007086:	43db      	mvns	r3, r3
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	4013      	ands	r3, r2
 800708c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	68da      	ldr	r2, [r3, #12]
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	fa02 f303 	lsl.w	r3, r2, r3
 800709a:	69ba      	ldr	r2, [r7, #24]
 800709c:	4313      	orrs	r3, r2
 800709e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	69ba      	ldr	r2, [r7, #24]
 80070a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80070ac:	2201      	movs	r2, #1
 80070ae:	69fb      	ldr	r3, [r7, #28]
 80070b0:	fa02 f303 	lsl.w	r3, r2, r3
 80070b4:	43db      	mvns	r3, r3
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	4013      	ands	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	091b      	lsrs	r3, r3, #4
 80070c2:	f003 0201 	and.w	r2, r3, #1
 80070c6:	69fb      	ldr	r3, [r7, #28]
 80070c8:	fa02 f303 	lsl.w	r3, r2, r3
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	f003 0303 	and.w	r3, r3, #3
 80070e0:	2b03      	cmp	r3, #3
 80070e2:	d017      	beq.n	8007114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	68db      	ldr	r3, [r3, #12]
 80070e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	2203      	movs	r2, #3
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4013      	ands	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	689a      	ldr	r2, [r3, #8]
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	005b      	lsls	r3, r3, #1
 8007104:	fa02 f303 	lsl.w	r3, r2, r3
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	4313      	orrs	r3, r2
 800710c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	f003 0303 	and.w	r3, r3, #3
 800711c:	2b02      	cmp	r3, #2
 800711e:	d123      	bne.n	8007168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007120:	69fb      	ldr	r3, [r7, #28]
 8007122:	08da      	lsrs	r2, r3, #3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3208      	adds	r2, #8
 8007128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800712c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	220f      	movs	r2, #15
 8007138:	fa02 f303 	lsl.w	r3, r2, r3
 800713c:	43db      	mvns	r3, r3
 800713e:	69ba      	ldr	r2, [r7, #24]
 8007140:	4013      	ands	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	691a      	ldr	r2, [r3, #16]
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	f003 0307 	and.w	r3, r3, #7
 800714e:	009b      	lsls	r3, r3, #2
 8007150:	fa02 f303 	lsl.w	r3, r2, r3
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	4313      	orrs	r3, r2
 8007158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800715a:	69fb      	ldr	r3, [r7, #28]
 800715c:	08da      	lsrs	r2, r3, #3
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3208      	adds	r2, #8
 8007162:	69b9      	ldr	r1, [r7, #24]
 8007164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	005b      	lsls	r3, r3, #1
 8007172:	2203      	movs	r2, #3
 8007174:	fa02 f303 	lsl.w	r3, r2, r3
 8007178:	43db      	mvns	r3, r3
 800717a:	69ba      	ldr	r2, [r7, #24]
 800717c:	4013      	ands	r3, r2
 800717e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	f003 0203 	and.w	r2, r3, #3
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	005b      	lsls	r3, r3, #1
 800718c:	fa02 f303 	lsl.w	r3, r2, r3
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	4313      	orrs	r3, r2
 8007194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	69ba      	ldr	r2, [r7, #24]
 800719a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 80c0 	beq.w	800732a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	4b66      	ldr	r3, [pc, #408]	; (8007348 <HAL_GPIO_Init+0x324>)
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	4a65      	ldr	r2, [pc, #404]	; (8007348 <HAL_GPIO_Init+0x324>)
 80071b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071b8:	6453      	str	r3, [r2, #68]	; 0x44
 80071ba:	4b63      	ldr	r3, [pc, #396]	; (8007348 <HAL_GPIO_Init+0x324>)
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80071c6:	4a61      	ldr	r2, [pc, #388]	; (800734c <HAL_GPIO_Init+0x328>)
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	089b      	lsrs	r3, r3, #2
 80071cc:	3302      	adds	r3, #2
 80071ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	f003 0303 	and.w	r3, r3, #3
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	220f      	movs	r2, #15
 80071de:	fa02 f303 	lsl.w	r3, r2, r3
 80071e2:	43db      	mvns	r3, r3
 80071e4:	69ba      	ldr	r2, [r7, #24]
 80071e6:	4013      	ands	r3, r2
 80071e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a58      	ldr	r2, [pc, #352]	; (8007350 <HAL_GPIO_Init+0x32c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d037      	beq.n	8007262 <HAL_GPIO_Init+0x23e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a57      	ldr	r2, [pc, #348]	; (8007354 <HAL_GPIO_Init+0x330>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d031      	beq.n	800725e <HAL_GPIO_Init+0x23a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a56      	ldr	r2, [pc, #344]	; (8007358 <HAL_GPIO_Init+0x334>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d02b      	beq.n	800725a <HAL_GPIO_Init+0x236>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a55      	ldr	r2, [pc, #340]	; (800735c <HAL_GPIO_Init+0x338>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d025      	beq.n	8007256 <HAL_GPIO_Init+0x232>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a54      	ldr	r2, [pc, #336]	; (8007360 <HAL_GPIO_Init+0x33c>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d01f      	beq.n	8007252 <HAL_GPIO_Init+0x22e>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a53      	ldr	r2, [pc, #332]	; (8007364 <HAL_GPIO_Init+0x340>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d019      	beq.n	800724e <HAL_GPIO_Init+0x22a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a52      	ldr	r2, [pc, #328]	; (8007368 <HAL_GPIO_Init+0x344>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d013      	beq.n	800724a <HAL_GPIO_Init+0x226>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a51      	ldr	r2, [pc, #324]	; (800736c <HAL_GPIO_Init+0x348>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00d      	beq.n	8007246 <HAL_GPIO_Init+0x222>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a50      	ldr	r2, [pc, #320]	; (8007370 <HAL_GPIO_Init+0x34c>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d007      	beq.n	8007242 <HAL_GPIO_Init+0x21e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a4f      	ldr	r2, [pc, #316]	; (8007374 <HAL_GPIO_Init+0x350>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d101      	bne.n	800723e <HAL_GPIO_Init+0x21a>
 800723a:	2309      	movs	r3, #9
 800723c:	e012      	b.n	8007264 <HAL_GPIO_Init+0x240>
 800723e:	230a      	movs	r3, #10
 8007240:	e010      	b.n	8007264 <HAL_GPIO_Init+0x240>
 8007242:	2308      	movs	r3, #8
 8007244:	e00e      	b.n	8007264 <HAL_GPIO_Init+0x240>
 8007246:	2307      	movs	r3, #7
 8007248:	e00c      	b.n	8007264 <HAL_GPIO_Init+0x240>
 800724a:	2306      	movs	r3, #6
 800724c:	e00a      	b.n	8007264 <HAL_GPIO_Init+0x240>
 800724e:	2305      	movs	r3, #5
 8007250:	e008      	b.n	8007264 <HAL_GPIO_Init+0x240>
 8007252:	2304      	movs	r3, #4
 8007254:	e006      	b.n	8007264 <HAL_GPIO_Init+0x240>
 8007256:	2303      	movs	r3, #3
 8007258:	e004      	b.n	8007264 <HAL_GPIO_Init+0x240>
 800725a:	2302      	movs	r3, #2
 800725c:	e002      	b.n	8007264 <HAL_GPIO_Init+0x240>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <HAL_GPIO_Init+0x240>
 8007262:	2300      	movs	r3, #0
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	f002 0203 	and.w	r2, r2, #3
 800726a:	0092      	lsls	r2, r2, #2
 800726c:	4093      	lsls	r3, r2
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	4313      	orrs	r3, r2
 8007272:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007274:	4935      	ldr	r1, [pc, #212]	; (800734c <HAL_GPIO_Init+0x328>)
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	089b      	lsrs	r3, r3, #2
 800727a:	3302      	adds	r3, #2
 800727c:	69ba      	ldr	r2, [r7, #24]
 800727e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007282:	4b3d      	ldr	r3, [pc, #244]	; (8007378 <HAL_GPIO_Init+0x354>)
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007288:	693b      	ldr	r3, [r7, #16]
 800728a:	43db      	mvns	r3, r3
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	4013      	ands	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800729a:	2b00      	cmp	r3, #0
 800729c:	d003      	beq.n	80072a6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80072a6:	4a34      	ldr	r2, [pc, #208]	; (8007378 <HAL_GPIO_Init+0x354>)
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80072ac:	4b32      	ldr	r3, [pc, #200]	; (8007378 <HAL_GPIO_Init+0x354>)
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072b2:	693b      	ldr	r3, [r7, #16]
 80072b4:	43db      	mvns	r3, r3
 80072b6:	69ba      	ldr	r2, [r7, #24]
 80072b8:	4013      	ands	r3, r2
 80072ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d003      	beq.n	80072d0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80072d0:	4a29      	ldr	r2, [pc, #164]	; (8007378 <HAL_GPIO_Init+0x354>)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80072d6:	4b28      	ldr	r3, [pc, #160]	; (8007378 <HAL_GPIO_Init+0x354>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	43db      	mvns	r3, r3
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	4013      	ands	r3, r2
 80072e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d003      	beq.n	80072fa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80072fa:	4a1f      	ldr	r2, [pc, #124]	; (8007378 <HAL_GPIO_Init+0x354>)
 80072fc:	69bb      	ldr	r3, [r7, #24]
 80072fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007300:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <HAL_GPIO_Init+0x354>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	43db      	mvns	r3, r3
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	4013      	ands	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007318:	2b00      	cmp	r3, #0
 800731a:	d003      	beq.n	8007324 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800731c:	69ba      	ldr	r2, [r7, #24]
 800731e:	693b      	ldr	r3, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007324:	4a14      	ldr	r2, [pc, #80]	; (8007378 <HAL_GPIO_Init+0x354>)
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	3301      	adds	r3, #1
 800732e:	61fb      	str	r3, [r7, #28]
 8007330:	69fb      	ldr	r3, [r7, #28]
 8007332:	2b0f      	cmp	r3, #15
 8007334:	f67f ae84 	bls.w	8007040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007338:	bf00      	nop
 800733a:	bf00      	nop
 800733c:	3724      	adds	r7, #36	; 0x24
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40023800 	.word	0x40023800
 800734c:	40013800 	.word	0x40013800
 8007350:	40020000 	.word	0x40020000
 8007354:	40020400 	.word	0x40020400
 8007358:	40020800 	.word	0x40020800
 800735c:	40020c00 	.word	0x40020c00
 8007360:	40021000 	.word	0x40021000
 8007364:	40021400 	.word	0x40021400
 8007368:	40021800 	.word	0x40021800
 800736c:	40021c00 	.word	0x40021c00
 8007370:	40022000 	.word	0x40022000
 8007374:	40022400 	.word	0x40022400
 8007378:	40013c00 	.word	0x40013c00

0800737c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	807b      	strh	r3, [r7, #2]
 8007388:	4613      	mov	r3, r2
 800738a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800738c:	787b      	ldrb	r3, [r7, #1]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d003      	beq.n	800739a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007392:	887a      	ldrh	r2, [r7, #2]
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007398:	e003      	b.n	80073a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800739a:	887b      	ldrh	r3, [r7, #2]
 800739c:	041a      	lsls	r2, r3, #16
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	619a      	str	r2, [r3, #24]
}
 80073a2:	bf00      	nop
 80073a4:	370c      	adds	r7, #12
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr
	...

080073b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b082      	sub	sp, #8
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80073ba:	4b08      	ldr	r3, [pc, #32]	; (80073dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073bc:	695a      	ldr	r2, [r3, #20]
 80073be:	88fb      	ldrh	r3, [r7, #6]
 80073c0:	4013      	ands	r3, r2
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d006      	beq.n	80073d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80073c6:	4a05      	ldr	r2, [pc, #20]	; (80073dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80073c8:	88fb      	ldrh	r3, [r7, #6]
 80073ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80073cc:	88fb      	ldrh	r3, [r7, #6]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f7fd fdaa 	bl	8004f28 <HAL_GPIO_EXTI_Callback>
  }
}
 80073d4:	bf00      	nop
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40013c00 	.word	0x40013c00

080073e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e12b      	b.n	800764a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d106      	bne.n	800740c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7fe f9c4 	bl	8005794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2224      	movs	r2, #36	; 0x24
 8007410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681a      	ldr	r2, [r3, #0]
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007432:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007442:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007444:	f002 fa2e 	bl	80098a4 <HAL_RCC_GetPCLK1Freq>
 8007448:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	4a81      	ldr	r2, [pc, #516]	; (8007654 <HAL_I2C_Init+0x274>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d807      	bhi.n	8007464 <HAL_I2C_Init+0x84>
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	4a80      	ldr	r2, [pc, #512]	; (8007658 <HAL_I2C_Init+0x278>)
 8007458:	4293      	cmp	r3, r2
 800745a:	bf94      	ite	ls
 800745c:	2301      	movls	r3, #1
 800745e:	2300      	movhi	r3, #0
 8007460:	b2db      	uxtb	r3, r3
 8007462:	e006      	b.n	8007472 <HAL_I2C_Init+0x92>
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	4a7d      	ldr	r2, [pc, #500]	; (800765c <HAL_I2C_Init+0x27c>)
 8007468:	4293      	cmp	r3, r2
 800746a:	bf94      	ite	ls
 800746c:	2301      	movls	r3, #1
 800746e:	2300      	movhi	r3, #0
 8007470:	b2db      	uxtb	r3, r3
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e0e7      	b.n	800764a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	4a78      	ldr	r2, [pc, #480]	; (8007660 <HAL_I2C_Init+0x280>)
 800747e:	fba2 2303 	umull	r2, r3, r2, r3
 8007482:	0c9b      	lsrs	r3, r3, #18
 8007484:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	430a      	orrs	r2, r1
 8007498:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6a1b      	ldr	r3, [r3, #32]
 80074a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	4a6a      	ldr	r2, [pc, #424]	; (8007654 <HAL_I2C_Init+0x274>)
 80074aa:	4293      	cmp	r3, r2
 80074ac:	d802      	bhi.n	80074b4 <HAL_I2C_Init+0xd4>
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	3301      	adds	r3, #1
 80074b2:	e009      	b.n	80074c8 <HAL_I2C_Init+0xe8>
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80074ba:	fb02 f303 	mul.w	r3, r2, r3
 80074be:	4a69      	ldr	r2, [pc, #420]	; (8007664 <HAL_I2C_Init+0x284>)
 80074c0:	fba2 2303 	umull	r2, r3, r2, r3
 80074c4:	099b      	lsrs	r3, r3, #6
 80074c6:	3301      	adds	r3, #1
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	6812      	ldr	r2, [r2, #0]
 80074cc:	430b      	orrs	r3, r1
 80074ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80074da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	495c      	ldr	r1, [pc, #368]	; (8007654 <HAL_I2C_Init+0x274>)
 80074e4:	428b      	cmp	r3, r1
 80074e6:	d819      	bhi.n	800751c <HAL_I2C_Init+0x13c>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	1e59      	subs	r1, r3, #1
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	685b      	ldr	r3, [r3, #4]
 80074f0:	005b      	lsls	r3, r3, #1
 80074f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80074f6:	1c59      	adds	r1, r3, #1
 80074f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80074fc:	400b      	ands	r3, r1
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_I2C_Init+0x138>
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1e59      	subs	r1, r3, #1
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	005b      	lsls	r3, r3, #1
 800750c:	fbb1 f3f3 	udiv	r3, r1, r3
 8007510:	3301      	adds	r3, #1
 8007512:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007516:	e051      	b.n	80075bc <HAL_I2C_Init+0x1dc>
 8007518:	2304      	movs	r3, #4
 800751a:	e04f      	b.n	80075bc <HAL_I2C_Init+0x1dc>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d111      	bne.n	8007548 <HAL_I2C_Init+0x168>
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	1e58      	subs	r0, r3, #1
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6859      	ldr	r1, [r3, #4]
 800752c:	460b      	mov	r3, r1
 800752e:	005b      	lsls	r3, r3, #1
 8007530:	440b      	add	r3, r1
 8007532:	fbb0 f3f3 	udiv	r3, r0, r3
 8007536:	3301      	adds	r3, #1
 8007538:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800753c:	2b00      	cmp	r3, #0
 800753e:	bf0c      	ite	eq
 8007540:	2301      	moveq	r3, #1
 8007542:	2300      	movne	r3, #0
 8007544:	b2db      	uxtb	r3, r3
 8007546:	e012      	b.n	800756e <HAL_I2C_Init+0x18e>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	1e58      	subs	r0, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6859      	ldr	r1, [r3, #4]
 8007550:	460b      	mov	r3, r1
 8007552:	009b      	lsls	r3, r3, #2
 8007554:	440b      	add	r3, r1
 8007556:	0099      	lsls	r1, r3, #2
 8007558:	440b      	add	r3, r1
 800755a:	fbb0 f3f3 	udiv	r3, r0, r3
 800755e:	3301      	adds	r3, #1
 8007560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007564:	2b00      	cmp	r3, #0
 8007566:	bf0c      	ite	eq
 8007568:	2301      	moveq	r3, #1
 800756a:	2300      	movne	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <HAL_I2C_Init+0x196>
 8007572:	2301      	movs	r3, #1
 8007574:	e022      	b.n	80075bc <HAL_I2C_Init+0x1dc>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d10e      	bne.n	800759c <HAL_I2C_Init+0x1bc>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	1e58      	subs	r0, r3, #1
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6859      	ldr	r1, [r3, #4]
 8007586:	460b      	mov	r3, r1
 8007588:	005b      	lsls	r3, r3, #1
 800758a:	440b      	add	r3, r1
 800758c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007590:	3301      	adds	r3, #1
 8007592:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800759a:	e00f      	b.n	80075bc <HAL_I2C_Init+0x1dc>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	1e58      	subs	r0, r3, #1
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6859      	ldr	r1, [r3, #4]
 80075a4:	460b      	mov	r3, r1
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	440b      	add	r3, r1
 80075aa:	0099      	lsls	r1, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80075b2:	3301      	adds	r3, #1
 80075b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	6809      	ldr	r1, [r1, #0]
 80075c0:	4313      	orrs	r3, r2
 80075c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69da      	ldr	r2, [r3, #28]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	431a      	orrs	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	430a      	orrs	r2, r1
 80075de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	689b      	ldr	r3, [r3, #8]
 80075e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80075ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075ee:	687a      	ldr	r2, [r7, #4]
 80075f0:	6911      	ldr	r1, [r2, #16]
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	68d2      	ldr	r2, [r2, #12]
 80075f6:	4311      	orrs	r1, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	430b      	orrs	r3, r1
 80075fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	68db      	ldr	r3, [r3, #12]
 8007606:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	695a      	ldr	r2, [r3, #20]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	431a      	orrs	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	430a      	orrs	r2, r1
 800761a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f042 0201 	orr.w	r2, r2, #1
 800762a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2220      	movs	r2, #32
 8007636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007648:	2300      	movs	r3, #0
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	bd80      	pop	{r7, pc}
 8007652:	bf00      	nop
 8007654:	000186a0 	.word	0x000186a0
 8007658:	001e847f 	.word	0x001e847f
 800765c:	003d08ff 	.word	0x003d08ff
 8007660:	431bde83 	.word	0x431bde83
 8007664:	10624dd3 	.word	0x10624dd3

08007668 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b088      	sub	sp, #32
 800766c:	af02      	add	r7, sp, #8
 800766e:	60f8      	str	r0, [r7, #12]
 8007670:	607a      	str	r2, [r7, #4]
 8007672:	461a      	mov	r2, r3
 8007674:	460b      	mov	r3, r1
 8007676:	817b      	strh	r3, [r7, #10]
 8007678:	4613      	mov	r3, r2
 800767a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800767c:	f7fe ff8c 	bl	8006598 <HAL_GetTick>
 8007680:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b20      	cmp	r3, #32
 800768c:	f040 80e0 	bne.w	8007850 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	2319      	movs	r3, #25
 8007696:	2201      	movs	r2, #1
 8007698:	4970      	ldr	r1, [pc, #448]	; (800785c <HAL_I2C_Master_Transmit+0x1f4>)
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 fc58 	bl	8007f50 <I2C_WaitOnFlagUntilTimeout>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d001      	beq.n	80076aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80076a6:	2302      	movs	r3, #2
 80076a8:	e0d3      	b.n	8007852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d101      	bne.n	80076b8 <HAL_I2C_Master_Transmit+0x50>
 80076b4:	2302      	movs	r3, #2
 80076b6:	e0cc      	b.n	8007852 <HAL_I2C_Master_Transmit+0x1ea>
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2201      	movs	r2, #1
 80076bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f003 0301 	and.w	r3, r3, #1
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d007      	beq.n	80076de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f042 0201 	orr.w	r2, r2, #1
 80076dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2221      	movs	r2, #33	; 0x21
 80076f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2210      	movs	r2, #16
 80076fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	893a      	ldrh	r2, [r7, #8]
 800770e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007714:	b29a      	uxth	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	4a50      	ldr	r2, [pc, #320]	; (8007860 <HAL_I2C_Master_Transmit+0x1f8>)
 800771e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007720:	8979      	ldrh	r1, [r7, #10]
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	6a3a      	ldr	r2, [r7, #32]
 8007726:	68f8      	ldr	r0, [r7, #12]
 8007728:	f000 fac2 	bl	8007cb0 <I2C_MasterRequestWrite>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d001      	beq.n	8007736 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e08d      	b.n	8007852 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007736:	2300      	movs	r3, #0
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	695b      	ldr	r3, [r3, #20]
 8007740:	613b      	str	r3, [r7, #16]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	699b      	ldr	r3, [r3, #24]
 8007748:	613b      	str	r3, [r7, #16]
 800774a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800774c:	e066      	b.n	800781c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	6a39      	ldr	r1, [r7, #32]
 8007752:	68f8      	ldr	r0, [r7, #12]
 8007754:	f000 fcd2 	bl	80080fc <I2C_WaitOnTXEFlagUntilTimeout>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00d      	beq.n	800777a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007762:	2b04      	cmp	r3, #4
 8007764:	d107      	bne.n	8007776 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007774:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e06b      	b.n	8007852 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	781a      	ldrb	r2, [r3, #0]
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800778a:	1c5a      	adds	r2, r3, #1
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007794:	b29b      	uxth	r3, r3
 8007796:	3b01      	subs	r3, #1
 8007798:	b29a      	uxth	r2, r3
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077a2:	3b01      	subs	r3, #1
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b04      	cmp	r3, #4
 80077b6:	d11b      	bne.n	80077f0 <HAL_I2C_Master_Transmit+0x188>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d017      	beq.n	80077f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c4:	781a      	ldrb	r2, [r3, #0]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d0:	1c5a      	adds	r2, r3, #1
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80077f0:	697a      	ldr	r2, [r7, #20]
 80077f2:	6a39      	ldr	r1, [r7, #32]
 80077f4:	68f8      	ldr	r0, [r7, #12]
 80077f6:	f000 fcc2 	bl	800817e <I2C_WaitOnBTFFlagUntilTimeout>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d00d      	beq.n	800781c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007804:	2b04      	cmp	r3, #4
 8007806:	d107      	bne.n	8007818 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	681a      	ldr	r2, [r3, #0]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007816:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007818:	2301      	movs	r3, #1
 800781a:	e01a      	b.n	8007852 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007820:	2b00      	cmp	r3, #0
 8007822:	d194      	bne.n	800774e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681a      	ldr	r2, [r3, #0]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007832:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2220      	movs	r2, #32
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800784c:	2300      	movs	r3, #0
 800784e:	e000      	b.n	8007852 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007850:	2302      	movs	r3, #2
  }
}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	00100002 	.word	0x00100002
 8007860:	ffff0000 	.word	0xffff0000

08007864 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007864:	b580      	push	{r7, lr}
 8007866:	b08c      	sub	sp, #48	; 0x30
 8007868:	af02      	add	r7, sp, #8
 800786a:	60f8      	str	r0, [r7, #12]
 800786c:	607a      	str	r2, [r7, #4]
 800786e:	461a      	mov	r2, r3
 8007870:	460b      	mov	r3, r1
 8007872:	817b      	strh	r3, [r7, #10]
 8007874:	4613      	mov	r3, r2
 8007876:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007878:	f7fe fe8e 	bl	8006598 <HAL_GetTick>
 800787c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b20      	cmp	r3, #32
 8007888:	f040 820b 	bne.w	8007ca2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	9300      	str	r3, [sp, #0]
 8007890:	2319      	movs	r3, #25
 8007892:	2201      	movs	r2, #1
 8007894:	497c      	ldr	r1, [pc, #496]	; (8007a88 <HAL_I2C_Master_Receive+0x224>)
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f000 fb5a 	bl	8007f50 <I2C_WaitOnFlagUntilTimeout>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d001      	beq.n	80078a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80078a2:	2302      	movs	r3, #2
 80078a4:	e1fe      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_I2C_Master_Receive+0x50>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e1f7      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f003 0301 	and.w	r3, r3, #1
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d007      	beq.n	80078da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f042 0201 	orr.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80078e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2222      	movs	r2, #34	; 0x22
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2210      	movs	r2, #16
 80078f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	2200      	movs	r2, #0
 80078fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	893a      	ldrh	r2, [r7, #8]
 800790a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007910:	b29a      	uxth	r2, r3
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	4a5c      	ldr	r2, [pc, #368]	; (8007a8c <HAL_I2C_Master_Receive+0x228>)
 800791a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800791c:	8979      	ldrh	r1, [r7, #10]
 800791e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007920:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 fa46 	bl	8007db4 <I2C_MasterRequestRead>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e1b8      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007936:	2b00      	cmp	r3, #0
 8007938:	d113      	bne.n	8007962 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800793a:	2300      	movs	r3, #0
 800793c:	623b      	str	r3, [r7, #32]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695b      	ldr	r3, [r3, #20]
 8007944:	623b      	str	r3, [r7, #32]
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	699b      	ldr	r3, [r3, #24]
 800794c:	623b      	str	r3, [r7, #32]
 800794e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	681a      	ldr	r2, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800795e:	601a      	str	r2, [r3, #0]
 8007960:	e18c      	b.n	8007c7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007966:	2b01      	cmp	r3, #1
 8007968:	d11b      	bne.n	80079a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	681a      	ldr	r2, [r3, #0]
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007978:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800797a:	2300      	movs	r3, #0
 800797c:	61fb      	str	r3, [r7, #28]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	695b      	ldr	r3, [r3, #20]
 8007984:	61fb      	str	r3, [r7, #28]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	699b      	ldr	r3, [r3, #24]
 800798c:	61fb      	str	r3, [r7, #28]
 800798e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800799e:	601a      	str	r2, [r3, #0]
 80079a0:	e16c      	b.n	8007c7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079a6:	2b02      	cmp	r3, #2
 80079a8:	d11b      	bne.n	80079e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079ca:	2300      	movs	r3, #0
 80079cc:	61bb      	str	r3, [r7, #24]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	695b      	ldr	r3, [r3, #20]
 80079d4:	61bb      	str	r3, [r7, #24]
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	699b      	ldr	r3, [r3, #24]
 80079dc:	61bb      	str	r3, [r7, #24]
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	e14c      	b.n	8007c7c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80079f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80079f2:	2300      	movs	r3, #0
 80079f4:	617b      	str	r3, [r7, #20]
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	695b      	ldr	r3, [r3, #20]
 80079fc:	617b      	str	r3, [r7, #20]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	699b      	ldr	r3, [r3, #24]
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007a08:	e138      	b.n	8007c7c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a0e:	2b03      	cmp	r3, #3
 8007a10:	f200 80f1 	bhi.w	8007bf6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d123      	bne.n	8007a64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f000 fbed 	bl	8008200 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a26:	4603      	mov	r3, r0
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d001      	beq.n	8007a30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e139      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	691a      	ldr	r2, [r3, #16]
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	b2d2      	uxtb	r2, r2
 8007a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a58:	b29b      	uxth	r3, r3
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	b29a      	uxth	r2, r3
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a62:	e10b      	b.n	8007c7c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d14e      	bne.n	8007b0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	9300      	str	r3, [sp, #0]
 8007a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a72:	2200      	movs	r2, #0
 8007a74:	4906      	ldr	r1, [pc, #24]	; (8007a90 <HAL_I2C_Master_Receive+0x22c>)
 8007a76:	68f8      	ldr	r0, [r7, #12]
 8007a78:	f000 fa6a 	bl	8007f50 <I2C_WaitOnFlagUntilTimeout>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d008      	beq.n	8007a94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e10e      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
 8007a86:	bf00      	nop
 8007a88:	00100002 	.word	0x00100002
 8007a8c:	ffff0000 	.word	0xffff0000
 8007a90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681a      	ldr	r2, [r3, #0]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007aa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	691a      	ldr	r2, [r3, #16]
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab6:	1c5a      	adds	r2, r3, #1
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac0:	3b01      	subs	r3, #1
 8007ac2:	b29a      	uxth	r2, r3
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007acc:	b29b      	uxth	r3, r3
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	b29a      	uxth	r2, r3
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	691a      	ldr	r2, [r3, #16]
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae0:	b2d2      	uxtb	r2, r2
 8007ae2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ae8:	1c5a      	adds	r2, r3, #1
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af2:	3b01      	subs	r3, #1
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	3b01      	subs	r3, #1
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007b08:	e0b8      	b.n	8007c7c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b10:	2200      	movs	r2, #0
 8007b12:	4966      	ldr	r1, [pc, #408]	; (8007cac <HAL_I2C_Master_Receive+0x448>)
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fa1b 	bl	8007f50 <I2C_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e0bf      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	691a      	ldr	r2, [r3, #16]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3e:	b2d2      	uxtb	r2, r2
 8007b40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b50:	3b01      	subs	r3, #1
 8007b52:	b29a      	uxth	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	3b01      	subs	r3, #1
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b68:	9300      	str	r3, [sp, #0]
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	494f      	ldr	r1, [pc, #316]	; (8007cac <HAL_I2C_Master_Receive+0x448>)
 8007b70:	68f8      	ldr	r0, [r7, #12]
 8007b72:	f000 f9ed 	bl	8007f50 <I2C_WaitOnFlagUntilTimeout>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e091      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	691a      	ldr	r2, [r3, #16]
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	b2d2      	uxtb	r2, r2
 8007b9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba2:	1c5a      	adds	r2, r3, #1
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bac:	3b01      	subs	r3, #1
 8007bae:	b29a      	uxth	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	3b01      	subs	r3, #1
 8007bbc:	b29a      	uxth	r2, r3
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bcc:	b2d2      	uxtb	r2, r2
 8007bce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	1c5a      	adds	r2, r3, #1
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	3b01      	subs	r3, #1
 8007bee:	b29a      	uxth	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007bf4:	e042      	b.n	8007c7c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f000 fb00 	bl	8008200 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007c00:	4603      	mov	r3, r0
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d001      	beq.n	8007c0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007c06:	2301      	movs	r3, #1
 8007c08:	e04c      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	691a      	ldr	r2, [r3, #16]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c14:	b2d2      	uxtb	r2, r2
 8007c16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c26:	3b01      	subs	r3, #1
 8007c28:	b29a      	uxth	r2, r3
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	3b01      	subs	r3, #1
 8007c36:	b29a      	uxth	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d118      	bne.n	8007c7c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	691a      	ldr	r2, [r3, #16]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c54:	b2d2      	uxtb	r2, r2
 8007c56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5c:	1c5a      	adds	r2, r3, #1
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c72:	b29b      	uxth	r3, r3
 8007c74:	3b01      	subs	r3, #1
 8007c76:	b29a      	uxth	r2, r3
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	f47f aec2 	bne.w	8007a0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2220      	movs	r2, #32
 8007c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e000      	b.n	8007ca4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ca2:	2302      	movs	r3, #2
  }
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3728      	adds	r7, #40	; 0x28
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	00010004 	.word	0x00010004

08007cb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b088      	sub	sp, #32
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	607a      	str	r2, [r7, #4]
 8007cba:	603b      	str	r3, [r7, #0]
 8007cbc:	460b      	mov	r3, r1
 8007cbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d006      	beq.n	8007cda <I2C_MasterRequestWrite+0x2a>
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d003      	beq.n	8007cda <I2C_MasterRequestWrite+0x2a>
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007cd8:	d108      	bne.n	8007cec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681a      	ldr	r2, [r3, #0]
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ce8:	601a      	str	r2, [r3, #0]
 8007cea:	e00b      	b.n	8007d04 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cf0:	2b12      	cmp	r3, #18
 8007cf2:	d107      	bne.n	8007d04 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007d02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f91d 	bl	8007f50 <I2C_WaitOnFlagUntilTimeout>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d00d      	beq.n	8007d38 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d2a:	d103      	bne.n	8007d34 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007d34:	2303      	movs	r3, #3
 8007d36:	e035      	b.n	8007da4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	691b      	ldr	r3, [r3, #16]
 8007d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d40:	d108      	bne.n	8007d54 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007d42:	897b      	ldrh	r3, [r7, #10]
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	461a      	mov	r2, r3
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007d50:	611a      	str	r2, [r3, #16]
 8007d52:	e01b      	b.n	8007d8c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007d54:	897b      	ldrh	r3, [r7, #10]
 8007d56:	11db      	asrs	r3, r3, #7
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0306 	and.w	r3, r3, #6
 8007d5e:	b2db      	uxtb	r3, r3
 8007d60:	f063 030f 	orn	r3, r3, #15
 8007d64:	b2da      	uxtb	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	490e      	ldr	r1, [pc, #56]	; (8007dac <I2C_MasterRequestWrite+0xfc>)
 8007d72:	68f8      	ldr	r0, [r7, #12]
 8007d74:	f000 f943 	bl	8007ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	e010      	b.n	8007da4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007d82:	897b      	ldrh	r3, [r7, #10]
 8007d84:	b2da      	uxtb	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	4907      	ldr	r1, [pc, #28]	; (8007db0 <I2C_MasterRequestWrite+0x100>)
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f933 	bl	8007ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3718      	adds	r7, #24
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	00010008 	.word	0x00010008
 8007db0:	00010002 	.word	0x00010002

08007db4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b088      	sub	sp, #32
 8007db8:	af02      	add	r7, sp, #8
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	607a      	str	r2, [r7, #4]
 8007dbe:	603b      	str	r3, [r7, #0]
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dd8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d006      	beq.n	8007dee <I2C_MasterRequestRead+0x3a>
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	2b01      	cmp	r3, #1
 8007de4:	d003      	beq.n	8007dee <I2C_MasterRequestRead+0x3a>
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007dec:	d108      	bne.n	8007e00 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	e00b      	b.n	8007e18 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e04:	2b11      	cmp	r3, #17
 8007e06:	d107      	bne.n	8007e18 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	681a      	ldr	r2, [r3, #0]
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007e18:	683b      	ldr	r3, [r7, #0]
 8007e1a:	9300      	str	r3, [sp, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f000 f893 	bl	8007f50 <I2C_WaitOnFlagUntilTimeout>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d00d      	beq.n	8007e4c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e3e:	d103      	bne.n	8007e48 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e079      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	691b      	ldr	r3, [r3, #16]
 8007e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e54:	d108      	bne.n	8007e68 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007e56:	897b      	ldrh	r3, [r7, #10]
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	f043 0301 	orr.w	r3, r3, #1
 8007e5e:	b2da      	uxtb	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	611a      	str	r2, [r3, #16]
 8007e66:	e05f      	b.n	8007f28 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007e68:	897b      	ldrh	r3, [r7, #10]
 8007e6a:	11db      	asrs	r3, r3, #7
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	f003 0306 	and.w	r3, r3, #6
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	f063 030f 	orn	r3, r3, #15
 8007e78:	b2da      	uxtb	r2, r3
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	4930      	ldr	r1, [pc, #192]	; (8007f48 <I2C_MasterRequestRead+0x194>)
 8007e86:	68f8      	ldr	r0, [r7, #12]
 8007e88:	f000 f8b9 	bl	8007ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d001      	beq.n	8007e96 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e054      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007e96:	897b      	ldrh	r3, [r7, #10]
 8007e98:	b2da      	uxtb	r2, r3
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	687a      	ldr	r2, [r7, #4]
 8007ea4:	4929      	ldr	r1, [pc, #164]	; (8007f4c <I2C_MasterRequestRead+0x198>)
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f000 f8a9 	bl	8007ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007eac:	4603      	mov	r3, r0
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e044      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	613b      	str	r3, [r7, #16]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	613b      	str	r3, [r7, #16]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	699b      	ldr	r3, [r3, #24]
 8007ec8:	613b      	str	r3, [r7, #16]
 8007eca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	681a      	ldr	r2, [r3, #0]
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eda:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	9300      	str	r3, [sp, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007ee8:	68f8      	ldr	r0, [r7, #12]
 8007eea:	f000 f831 	bl	8007f50 <I2C_WaitOnFlagUntilTimeout>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00d      	beq.n	8007f10 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f02:	d103      	bne.n	8007f0c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f0a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007f0c:	2303      	movs	r3, #3
 8007f0e:	e017      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8007f10:	897b      	ldrh	r3, [r7, #10]
 8007f12:	11db      	asrs	r3, r3, #7
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 0306 	and.w	r3, r3, #6
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	f063 030e 	orn	r3, r3, #14
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	4907      	ldr	r1, [pc, #28]	; (8007f4c <I2C_MasterRequestRead+0x198>)
 8007f2e:	68f8      	ldr	r0, [r7, #12]
 8007f30:	f000 f865 	bl	8007ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d001      	beq.n	8007f3e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e000      	b.n	8007f40 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	3718      	adds	r7, #24
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	00010008 	.word	0x00010008
 8007f4c:	00010002 	.word	0x00010002

08007f50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	60f8      	str	r0, [r7, #12]
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	603b      	str	r3, [r7, #0]
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007f60:	e025      	b.n	8007fae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f68:	d021      	beq.n	8007fae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6a:	f7fe fb15 	bl	8006598 <HAL_GetTick>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	1ad3      	subs	r3, r2, r3
 8007f74:	683a      	ldr	r2, [r7, #0]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d302      	bcc.n	8007f80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007f7a:	683b      	ldr	r3, [r7, #0]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d116      	bne.n	8007fae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2200      	movs	r2, #0
 8007f84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	f043 0220 	orr.w	r2, r3, #32
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e023      	b.n	8007ff6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	0c1b      	lsrs	r3, r3, #16
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b01      	cmp	r3, #1
 8007fb6:	d10d      	bne.n	8007fd4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	695b      	ldr	r3, [r3, #20]
 8007fbe:	43da      	mvns	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	bf0c      	ite	eq
 8007fca:	2301      	moveq	r3, #1
 8007fcc:	2300      	movne	r3, #0
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	461a      	mov	r2, r3
 8007fd2:	e00c      	b.n	8007fee <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699b      	ldr	r3, [r3, #24]
 8007fda:	43da      	mvns	r2, r3
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	4013      	ands	r3, r2
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	bf0c      	ite	eq
 8007fe6:	2301      	moveq	r3, #1
 8007fe8:	2300      	movne	r3, #0
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	461a      	mov	r2, r3
 8007fee:	79fb      	ldrb	r3, [r7, #7]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d0b6      	beq.n	8007f62 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b084      	sub	sp, #16
 8008002:	af00      	add	r7, sp, #0
 8008004:	60f8      	str	r0, [r7, #12]
 8008006:	60b9      	str	r1, [r7, #8]
 8008008:	607a      	str	r2, [r7, #4]
 800800a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800800c:	e051      	b.n	80080b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	695b      	ldr	r3, [r3, #20]
 8008014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008018:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800801c:	d123      	bne.n	8008066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800802c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008036:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2200      	movs	r2, #0
 800803c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2220      	movs	r2, #32
 8008042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	f043 0204 	orr.w	r2, r3, #4
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008062:	2301      	movs	r3, #1
 8008064:	e046      	b.n	80080f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800806c:	d021      	beq.n	80080b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800806e:	f7fe fa93 	bl	8006598 <HAL_GetTick>
 8008072:	4602      	mov	r2, r0
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	1ad3      	subs	r3, r2, r3
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	429a      	cmp	r2, r3
 800807c:	d302      	bcc.n	8008084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d116      	bne.n	80080b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2200      	movs	r2, #0
 8008088:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	2220      	movs	r2, #32
 800808e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2200      	movs	r2, #0
 8008096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800809e:	f043 0220 	orr.w	r2, r3, #32
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80080ae:	2301      	movs	r3, #1
 80080b0:	e020      	b.n	80080f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	0c1b      	lsrs	r3, r3, #16
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b01      	cmp	r3, #1
 80080ba:	d10c      	bne.n	80080d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	43da      	mvns	r2, r3
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4013      	ands	r3, r2
 80080c8:	b29b      	uxth	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	bf14      	ite	ne
 80080ce:	2301      	movne	r3, #1
 80080d0:	2300      	moveq	r3, #0
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	e00b      	b.n	80080ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	699b      	ldr	r3, [r3, #24]
 80080dc:	43da      	mvns	r2, r3
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4013      	ands	r3, r2
 80080e2:	b29b      	uxth	r3, r3
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	bf14      	ite	ne
 80080e8:	2301      	movne	r3, #1
 80080ea:	2300      	moveq	r3, #0
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d18d      	bne.n	800800e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3710      	adds	r7, #16
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b084      	sub	sp, #16
 8008100:	af00      	add	r7, sp, #0
 8008102:	60f8      	str	r0, [r7, #12]
 8008104:	60b9      	str	r1, [r7, #8]
 8008106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008108:	e02d      	b.n	8008166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800810a:	68f8      	ldr	r0, [r7, #12]
 800810c:	f000 f8ce 	bl	80082ac <I2C_IsAcknowledgeFailed>
 8008110:	4603      	mov	r3, r0
 8008112:	2b00      	cmp	r3, #0
 8008114:	d001      	beq.n	800811a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	e02d      	b.n	8008176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008120:	d021      	beq.n	8008166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008122:	f7fe fa39 	bl	8006598 <HAL_GetTick>
 8008126:	4602      	mov	r2, r0
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	1ad3      	subs	r3, r2, r3
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	429a      	cmp	r2, r3
 8008130:	d302      	bcc.n	8008138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b00      	cmp	r3, #0
 8008136:	d116      	bne.n	8008166 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2220      	movs	r2, #32
 8008142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008152:	f043 0220 	orr.w	r2, r3, #32
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e007      	b.n	8008176 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008170:	2b80      	cmp	r3, #128	; 0x80
 8008172:	d1ca      	bne.n	800810a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800818a:	e02d      	b.n	80081e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800818c:	68f8      	ldr	r0, [r7, #12]
 800818e:	f000 f88d 	bl	80082ac <I2C_IsAcknowledgeFailed>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	d001      	beq.n	800819c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e02d      	b.n	80081f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081a2:	d021      	beq.n	80081e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80081a4:	f7fe f9f8 	bl	8006598 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	429a      	cmp	r2, r3
 80081b2:	d302      	bcc.n	80081ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d116      	bne.n	80081e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2200      	movs	r2, #0
 80081be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2220      	movs	r2, #32
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081d4:	f043 0220 	orr.w	r2, r3, #32
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e007      	b.n	80081f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	f003 0304 	and.w	r3, r3, #4
 80081f2:	2b04      	cmp	r3, #4
 80081f4:	d1ca      	bne.n	800818c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	3710      	adds	r7, #16
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bd80      	pop	{r7, pc}

08008200 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800820c:	e042      	b.n	8008294 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	695b      	ldr	r3, [r3, #20]
 8008214:	f003 0310 	and.w	r3, r3, #16
 8008218:	2b10      	cmp	r3, #16
 800821a:	d119      	bne.n	8008250 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	f06f 0210 	mvn.w	r2, #16
 8008224:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	2200      	movs	r2, #0
 800822a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e029      	b.n	80082a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008250:	f7fe f9a2 	bl	8006598 <HAL_GetTick>
 8008254:	4602      	mov	r2, r0
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	1ad3      	subs	r3, r2, r3
 800825a:	68ba      	ldr	r2, [r7, #8]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d116      	bne.n	8008294 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2200      	movs	r2, #0
 800826a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2220      	movs	r2, #32
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2200      	movs	r2, #0
 8008278:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008280:	f043 0220 	orr.w	r2, r3, #32
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e007      	b.n	80082a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
 800829a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800829e:	2b40      	cmp	r3, #64	; 0x40
 80082a0:	d1b5      	bne.n	800820e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3710      	adds	r7, #16
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	695b      	ldr	r3, [r3, #20]
 80082ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082c2:	d11b      	bne.n	80082fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2200      	movs	r2, #0
 80082d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2220      	movs	r2, #32
 80082d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082e8:	f043 0204 	orr.w	r2, r3, #4
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80082f8:	2301      	movs	r3, #1
 80082fa:	e000      	b.n	80082fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80082fc:	2300      	movs	r3, #0
}
 80082fe:	4618      	mov	r0, r3
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b20      	cmp	r3, #32
 800831e:	d129      	bne.n	8008374 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2224      	movs	r2, #36	; 0x24
 8008324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	681a      	ldr	r2, [r3, #0]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f022 0201 	bic.w	r2, r2, #1
 8008336:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f022 0210 	bic.w	r2, r2, #16
 8008346:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	430a      	orrs	r2, r1
 8008356:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0201 	orr.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2220      	movs	r2, #32
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008370:	2300      	movs	r3, #0
 8008372:	e000      	b.n	8008376 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8008374:	2302      	movs	r3, #2
  }
}
 8008376:	4618      	mov	r0, r3
 8008378:	370c      	adds	r7, #12
 800837a:	46bd      	mov	sp, r7
 800837c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008380:	4770      	bx	lr

08008382 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008382:	b480      	push	{r7}
 8008384:	b085      	sub	sp, #20
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
 800838a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008396:	b2db      	uxtb	r3, r3
 8008398:	2b20      	cmp	r3, #32
 800839a:	d12a      	bne.n	80083f2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2224      	movs	r2, #36	; 0x24
 80083a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 0201 	bic.w	r2, r2, #1
 80083b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083ba:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80083bc:	89fb      	ldrh	r3, [r7, #14]
 80083be:	f023 030f 	bic.w	r3, r3, #15
 80083c2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	89fb      	ldrh	r3, [r7, #14]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	89fa      	ldrh	r2, [r7, #14]
 80083d4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f042 0201 	orr.w	r2, r2, #1
 80083e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	e000      	b.n	80083f4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80083f2:	2302      	movs	r3, #2
  }
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	3714      	adds	r7, #20
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b088      	sub	sp, #32
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e128      	b.n	8008664 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b00      	cmp	r3, #0
 800841c:	d109      	bne.n	8008432 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	2200      	movs	r2, #0
 8008422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a90      	ldr	r2, [pc, #576]	; (800866c <HAL_I2S_Init+0x26c>)
 800842a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f7fd fa2f 	bl	8005890 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2202      	movs	r2, #2
 8008436:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	6812      	ldr	r2, [r2, #0]
 8008444:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008448:	f023 030f 	bic.w	r3, r3, #15
 800844c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2202      	movs	r2, #2
 8008454:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	695b      	ldr	r3, [r3, #20]
 800845a:	2b02      	cmp	r3, #2
 800845c:	d060      	beq.n	8008520 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d102      	bne.n	800846c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8008466:	2310      	movs	r3, #16
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	e001      	b.n	8008470 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800846c:	2320      	movs	r3, #32
 800846e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	689b      	ldr	r3, [r3, #8]
 8008474:	2b20      	cmp	r3, #32
 8008476:	d802      	bhi.n	800847e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	005b      	lsls	r3, r3, #1
 800847c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800847e:	2001      	movs	r0, #1
 8008480:	f001 fc2a 	bl	8009cd8 <HAL_RCCEx_GetPeriphCLKFreq>
 8008484:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	691b      	ldr	r3, [r3, #16]
 800848a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800848e:	d125      	bne.n	80084dc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d010      	beq.n	80084ba <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8008498:	697b      	ldr	r3, [r7, #20]
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	fbb2 f2f3 	udiv	r2, r2, r3
 80084a2:	4613      	mov	r3, r2
 80084a4:	009b      	lsls	r3, r3, #2
 80084a6:	4413      	add	r3, r2
 80084a8:	005b      	lsls	r3, r3, #1
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	695b      	ldr	r3, [r3, #20]
 80084b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084b4:	3305      	adds	r3, #5
 80084b6:	613b      	str	r3, [r7, #16]
 80084b8:	e01f      	b.n	80084fa <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	00db      	lsls	r3, r3, #3
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80084c4:	4613      	mov	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	005b      	lsls	r3, r3, #1
 80084cc:	461a      	mov	r2, r3
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	695b      	ldr	r3, [r3, #20]
 80084d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d6:	3305      	adds	r3, #5
 80084d8:	613b      	str	r3, [r7, #16]
 80084da:	e00e      	b.n	80084fa <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	697b      	ldr	r3, [r7, #20]
 80084e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80084e4:	4613      	mov	r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4413      	add	r3, r2
 80084ea:	005b      	lsls	r3, r3, #1
 80084ec:	461a      	mov	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f6:	3305      	adds	r3, #5
 80084f8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	4a5c      	ldr	r2, [pc, #368]	; (8008670 <HAL_I2S_Init+0x270>)
 80084fe:	fba2 2303 	umull	r2, r3, r2, r3
 8008502:	08db      	lsrs	r3, r3, #3
 8008504:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008506:	693b      	ldr	r3, [r7, #16]
 8008508:	f003 0301 	and.w	r3, r3, #1
 800850c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	69bb      	ldr	r3, [r7, #24]
 8008512:	1ad3      	subs	r3, r2, r3
 8008514:	085b      	lsrs	r3, r3, #1
 8008516:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008518:	69bb      	ldr	r3, [r7, #24]
 800851a:	021b      	lsls	r3, r3, #8
 800851c:	61bb      	str	r3, [r7, #24]
 800851e:	e003      	b.n	8008528 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008520:	2302      	movs	r3, #2
 8008522:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008528:	69fb      	ldr	r3, [r7, #28]
 800852a:	2b01      	cmp	r3, #1
 800852c:	d902      	bls.n	8008534 <HAL_I2S_Init+0x134>
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	2bff      	cmp	r3, #255	; 0xff
 8008532:	d907      	bls.n	8008544 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008538:	f043 0210 	orr.w	r2, r3, #16
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e08f      	b.n	8008664 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	691a      	ldr	r2, [r3, #16]
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	ea42 0103 	orr.w	r1, r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	69fa      	ldr	r2, [r7, #28]
 8008554:	430a      	orrs	r2, r1
 8008556:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	69db      	ldr	r3, [r3, #28]
 800855e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8008562:	f023 030f 	bic.w	r3, r3, #15
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	6851      	ldr	r1, [r2, #4]
 800856a:	687a      	ldr	r2, [r7, #4]
 800856c:	6892      	ldr	r2, [r2, #8]
 800856e:	4311      	orrs	r1, r2
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	68d2      	ldr	r2, [r2, #12]
 8008574:	4311      	orrs	r1, r2
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	6992      	ldr	r2, [r2, #24]
 800857a:	430a      	orrs	r2, r1
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008586:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6a1b      	ldr	r3, [r3, #32]
 800858c:	2b01      	cmp	r3, #1
 800858e:	d161      	bne.n	8008654 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a38      	ldr	r2, [pc, #224]	; (8008674 <HAL_I2S_Init+0x274>)
 8008594:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a37      	ldr	r2, [pc, #220]	; (8008678 <HAL_I2S_Init+0x278>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d101      	bne.n	80085a4 <HAL_I2S_Init+0x1a4>
 80085a0:	4b36      	ldr	r3, [pc, #216]	; (800867c <HAL_I2S_Init+0x27c>)
 80085a2:	e001      	b.n	80085a8 <HAL_I2S_Init+0x1a8>
 80085a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	6812      	ldr	r2, [r2, #0]
 80085ae:	4932      	ldr	r1, [pc, #200]	; (8008678 <HAL_I2S_Init+0x278>)
 80085b0:	428a      	cmp	r2, r1
 80085b2:	d101      	bne.n	80085b8 <HAL_I2S_Init+0x1b8>
 80085b4:	4a31      	ldr	r2, [pc, #196]	; (800867c <HAL_I2S_Init+0x27c>)
 80085b6:	e001      	b.n	80085bc <HAL_I2S_Init+0x1bc>
 80085b8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80085bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80085c0:	f023 030f 	bic.w	r3, r3, #15
 80085c4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a2b      	ldr	r2, [pc, #172]	; (8008678 <HAL_I2S_Init+0x278>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d101      	bne.n	80085d4 <HAL_I2S_Init+0x1d4>
 80085d0:	4b2a      	ldr	r3, [pc, #168]	; (800867c <HAL_I2S_Init+0x27c>)
 80085d2:	e001      	b.n	80085d8 <HAL_I2S_Init+0x1d8>
 80085d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085d8:	2202      	movs	r2, #2
 80085da:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a25      	ldr	r2, [pc, #148]	; (8008678 <HAL_I2S_Init+0x278>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d101      	bne.n	80085ea <HAL_I2S_Init+0x1ea>
 80085e6:	4b25      	ldr	r3, [pc, #148]	; (800867c <HAL_I2S_Init+0x27c>)
 80085e8:	e001      	b.n	80085ee <HAL_I2S_Init+0x1ee>
 80085ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80085ee:	69db      	ldr	r3, [r3, #28]
 80085f0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085fa:	d003      	beq.n	8008604 <HAL_I2S_Init+0x204>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d103      	bne.n	800860c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008604:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008608:	613b      	str	r3, [r7, #16]
 800860a:	e001      	b.n	8008610 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800860c:	2300      	movs	r3, #0
 800860e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008610:	693b      	ldr	r3, [r7, #16]
 8008612:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800861a:	4313      	orrs	r3, r2
 800861c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	68db      	ldr	r3, [r3, #12]
 8008622:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008624:	4313      	orrs	r3, r2
 8008626:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800862e:	4313      	orrs	r3, r2
 8008630:	b29a      	uxth	r2, r3
 8008632:	897b      	ldrh	r3, [r7, #10]
 8008634:	4313      	orrs	r3, r2
 8008636:	b29b      	uxth	r3, r3
 8008638:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800863c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a0d      	ldr	r2, [pc, #52]	; (8008678 <HAL_I2S_Init+0x278>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d101      	bne.n	800864c <HAL_I2S_Init+0x24c>
 8008648:	4b0c      	ldr	r3, [pc, #48]	; (800867c <HAL_I2S_Init+0x27c>)
 800864a:	e001      	b.n	8008650 <HAL_I2S_Init+0x250>
 800864c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008650:	897a      	ldrh	r2, [r7, #10]
 8008652:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3720      	adds	r7, #32
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}
 800866c:	0800895d 	.word	0x0800895d
 8008670:	cccccccd 	.word	0xcccccccd
 8008674:	08008a71 	.word	0x08008a71
 8008678:	40003800 	.word	0x40003800
 800867c:	40003400 	.word	0x40003400

08008680 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b086      	sub	sp, #24
 8008684:	af00      	add	r7, sp, #0
 8008686:	60f8      	str	r0, [r7, #12]
 8008688:	60b9      	str	r1, [r7, #8]
 800868a:	4613      	mov	r3, r2
 800868c:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d002      	beq.n	800869a <HAL_I2S_Transmit_DMA+0x1a>
 8008694:	88fb      	ldrh	r3, [r7, #6]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e08e      	b.n	80087bc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b01      	cmp	r3, #1
 80086a8:	d101      	bne.n	80086ae <HAL_I2S_Transmit_DMA+0x2e>
 80086aa:	2302      	movs	r3, #2
 80086ac:	e086      	b.n	80087bc <HAL_I2S_Transmit_DMA+0x13c>
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b01      	cmp	r3, #1
 80086c0:	d005      	beq.n	80086ce <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 80086ca:	2302      	movs	r3, #2
 80086cc:	e076      	b.n	80087bc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2203      	movs	r2, #3
 80086d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	2200      	movs	r2, #0
 80086da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	69db      	ldr	r3, [r3, #28]
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	2b03      	cmp	r3, #3
 80086f2:	d002      	beq.n	80086fa <HAL_I2S_Transmit_DMA+0x7a>
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b05      	cmp	r3, #5
 80086f8:	d10a      	bne.n	8008710 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 80086fa:	88fb      	ldrh	r3, [r7, #6]
 80086fc:	005b      	lsls	r3, r3, #1
 80086fe:	b29a      	uxth	r2, r3
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8008704:	88fb      	ldrh	r3, [r7, #6]
 8008706:	005b      	lsls	r3, r3, #1
 8008708:	b29a      	uxth	r2, r3
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800870e:	e005      	b.n	800871c <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	88fa      	ldrh	r2, [r7, #6]
 8008714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	88fa      	ldrh	r2, [r7, #6]
 800871a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	4a28      	ldr	r2, [pc, #160]	; (80087c4 <HAL_I2S_Transmit_DMA+0x144>)
 8008722:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008728:	4a27      	ldr	r2, [pc, #156]	; (80087c8 <HAL_I2S_Transmit_DMA+0x148>)
 800872a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008730:	4a26      	ldr	r2, [pc, #152]	; (80087cc <HAL_I2S_Transmit_DMA+0x14c>)
 8008732:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800873c:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8008744:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800874a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 800874c:	f7fe f916 	bl	800697c <HAL_DMA_Start_IT>
 8008750:	4603      	mov	r3, r0
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00f      	beq.n	8008776 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800875a:	f043 0208 	orr.w	r2, r3, #8
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e022      	b.n	80087bc <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	69db      	ldr	r3, [r3, #28]
 800877c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008780:	2b00      	cmp	r3, #0
 8008782:	d107      	bne.n	8008794 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	69da      	ldr	r2, [r3, #28]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008792:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	f003 0302 	and.w	r3, r3, #2
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d107      	bne.n	80087b2 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	685a      	ldr	r2, [r3, #4]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f042 0202 	orr.w	r2, r2, #2
 80087b0:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3718      	adds	r7, #24
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}
 80087c4:	0800883b 	.word	0x0800883b
 80087c8:	080087f9 	.word	0x080087f9
 80087cc:	08008857 	.word	0x08008857

080087d0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80087d0:	b480      	push	{r7}
 80087d2:	b083      	sub	sp, #12
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80087d8:	bf00      	nop
 80087da:	370c      	adds	r7, #12
 80087dc:	46bd      	mov	sp, r7
 80087de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e2:	4770      	bx	lr

080087e4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008804:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10e      	bne.n	800882c <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685a      	ldr	r2, [r3, #4]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f022 0202 	bic.w	r2, r2, #2
 800881c:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f7f8 fded 	bl	800140c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8008832:	bf00      	nop
 8008834:	3710      	adds	r7, #16
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}

0800883a <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800883a:	b580      	push	{r7, lr}
 800883c:	b084      	sub	sp, #16
 800883e:	af00      	add	r7, sp, #0
 8008840:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008846:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7f8 fdcf 	bl	80013ec <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800884e:	bf00      	nop
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}

08008856 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8008856:	b580      	push	{r7, lr}
 8008858:	b084      	sub	sp, #16
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f022 0203 	bic.w	r2, r2, #3
 8008872:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2200      	movs	r2, #0
 8008878:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2200      	movs	r2, #0
 800887e:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800888c:	f043 0208 	orr.w	r2, r3, #8
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8008894:	68f8      	ldr	r0, [r7, #12]
 8008896:	f7ff ffa5 	bl	80087e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800889a:	bf00      	nop
 800889c:	3710      	adds	r7, #16
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}

080088a2 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80088a2:	b580      	push	{r7, lr}
 80088a4:	b082      	sub	sp, #8
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ae:	881a      	ldrh	r2, [r3, #0]
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ba:	1c9a      	adds	r2, r3, #2
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	3b01      	subs	r3, #1
 80088c8:	b29a      	uxth	r2, r3
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80088d2:	b29b      	uxth	r3, r3
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d10e      	bne.n	80088f6 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	685a      	ldr	r2, [r3, #4]
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80088e6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f7f8 fd8b 	bl	800140c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80088f6:	bf00      	nop
 80088f8:	3708      	adds	r7, #8
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}

080088fe <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80088fe:	b580      	push	{r7, lr}
 8008900:	b082      	sub	sp, #8
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008910:	b292      	uxth	r2, r2
 8008912:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	1c9a      	adds	r2, r3, #2
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008922:	b29b      	uxth	r3, r3
 8008924:	3b01      	subs	r3, #1
 8008926:	b29a      	uxth	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008930:	b29b      	uxth	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d10e      	bne.n	8008954 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	685a      	ldr	r2, [r3, #4]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008944:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2201      	movs	r2, #1
 800894a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7ff ff3e 	bl	80087d0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b086      	sub	sp, #24
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	689b      	ldr	r3, [r3, #8]
 800896a:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008972:	b2db      	uxtb	r3, r3
 8008974:	2b04      	cmp	r3, #4
 8008976:	d13a      	bne.n	80089ee <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b01      	cmp	r3, #1
 8008980:	d109      	bne.n	8008996 <I2S_IRQHandler+0x3a>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	685b      	ldr	r3, [r3, #4]
 8008988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800898c:	2b40      	cmp	r3, #64	; 0x40
 800898e:	d102      	bne.n	8008996 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7ff ffb4 	bl	80088fe <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d126      	bne.n	80089ee <I2S_IRQHandler+0x92>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	685b      	ldr	r3, [r3, #4]
 80089a6:	f003 0320 	and.w	r3, r3, #32
 80089aa:	2b20      	cmp	r3, #32
 80089ac:	d11f      	bne.n	80089ee <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80089bc:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80089be:	2300      	movs	r3, #0
 80089c0:	613b      	str	r3, [r7, #16]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	613b      	str	r3, [r7, #16]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	613b      	str	r3, [r7, #16]
 80089d2:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2201      	movs	r2, #1
 80089d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089e0:	f043 0202 	orr.w	r2, r3, #2
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f7ff fefb 	bl	80087e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b03      	cmp	r3, #3
 80089f8:	d136      	bne.n	8008a68 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f003 0302 	and.w	r3, r3, #2
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	d109      	bne.n	8008a18 <I2S_IRQHandler+0xbc>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a0e:	2b80      	cmp	r3, #128	; 0x80
 8008a10:	d102      	bne.n	8008a18 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f7ff ff45 	bl	80088a2 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008a18:	697b      	ldr	r3, [r7, #20]
 8008a1a:	f003 0308 	and.w	r3, r3, #8
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d122      	bne.n	8008a68 <I2S_IRQHandler+0x10c>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	f003 0320 	and.w	r3, r3, #32
 8008a2c:	2b20      	cmp	r3, #32
 8008a2e:	d11b      	bne.n	8008a68 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	685a      	ldr	r2, [r3, #4]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008a3e:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008a40:	2300      	movs	r3, #0
 8008a42:	60fb      	str	r3, [r7, #12]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	689b      	ldr	r3, [r3, #8]
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a5a:	f043 0204 	orr.w	r2, r3, #4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f7ff febe 	bl	80087e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008a68:	bf00      	nop
 8008a6a:	3718      	adds	r7, #24
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b088      	sub	sp, #32
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	689b      	ldr	r3, [r3, #8]
 8008a7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4a92      	ldr	r2, [pc, #584]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d101      	bne.n	8008a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8008a8a:	4b92      	ldr	r3, [pc, #584]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008a8c:	e001      	b.n	8008a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8008a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	4a8b      	ldr	r2, [pc, #556]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d101      	bne.n	8008aac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008aa8:	4b8a      	ldr	r3, [pc, #552]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008aaa:	e001      	b.n	8008ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008abc:	d004      	beq.n	8008ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	f040 8099 	bne.w	8008bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d107      	bne.n	8008ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f925 	bl	8008d2c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d107      	bne.n	8008afc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f9c8 	bl	8008e8c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b02:	2b40      	cmp	r3, #64	; 0x40
 8008b04:	d13a      	bne.n	8008b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	f003 0320 	and.w	r3, r3, #32
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d035      	beq.n	8008b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a6e      	ldr	r2, [pc, #440]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d101      	bne.n	8008b1e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8008b1a:	4b6e      	ldr	r3, [pc, #440]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008b1c:	e001      	b.n	8008b22 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8008b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b22:	685a      	ldr	r2, [r3, #4]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	4969      	ldr	r1, [pc, #420]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008b2a:	428b      	cmp	r3, r1
 8008b2c:	d101      	bne.n	8008b32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8008b2e:	4b69      	ldr	r3, [pc, #420]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008b30:	e001      	b.n	8008b36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8008b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008b36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008b3a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	685a      	ldr	r2, [r3, #4]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008b4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	60fb      	str	r3, [r7, #12]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68db      	ldr	r3, [r3, #12]
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	689b      	ldr	r3, [r3, #8]
 8008b5e:	60fb      	str	r3, [r7, #12]
 8008b60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b6e:	f043 0202 	orr.w	r2, r3, #2
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f7ff fe34 	bl	80087e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	f003 0308 	and.w	r3, r3, #8
 8008b82:	2b08      	cmp	r3, #8
 8008b84:	f040 80c3 	bne.w	8008d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8008b88:	697b      	ldr	r3, [r7, #20]
 8008b8a:	f003 0320 	and.w	r3, r3, #32
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80bd 	beq.w	8008d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	685a      	ldr	r2, [r3, #4]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ba2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a49      	ldr	r2, [pc, #292]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d101      	bne.n	8008bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8008bae:	4b49      	ldr	r3, [pc, #292]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008bb0:	e001      	b.n	8008bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8008bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bb6:	685a      	ldr	r2, [r3, #4]
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4944      	ldr	r1, [pc, #272]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008bbe:	428b      	cmp	r3, r1
 8008bc0:	d101      	bne.n	8008bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8008bc2:	4b44      	ldr	r3, [pc, #272]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008bc4:	e001      	b.n	8008bca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008bc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008bca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008bce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	60bb      	str	r3, [r7, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	689b      	ldr	r3, [r3, #8]
 8008bda:	60bb      	str	r3, [r7, #8]
 8008bdc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2201      	movs	r2, #1
 8008be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bea:	f043 0204 	orr.w	r2, r3, #4
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f7ff fdf6 	bl	80087e4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008bf8:	e089      	b.n	8008d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	f003 0302 	and.w	r3, r3, #2
 8008c00:	2b02      	cmp	r3, #2
 8008c02:	d107      	bne.n	8008c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d002      	beq.n	8008c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 f8be 	bl	8008d90 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008c14:	69fb      	ldr	r3, [r7, #28]
 8008c16:	f003 0301 	and.w	r3, r3, #1
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d107      	bne.n	8008c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8008c1e:	697b      	ldr	r3, [r7, #20]
 8008c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f8fd 	bl	8008e28 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c34:	2b40      	cmp	r3, #64	; 0x40
 8008c36:	d12f      	bne.n	8008c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	f003 0320 	and.w	r3, r3, #32
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d02a      	beq.n	8008c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008c50:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a1e      	ldr	r2, [pc, #120]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d101      	bne.n	8008c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8008c5c:	4b1d      	ldr	r3, [pc, #116]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008c5e:	e001      	b.n	8008c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8008c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c64:	685a      	ldr	r2, [r3, #4]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4919      	ldr	r1, [pc, #100]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008c6c:	428b      	cmp	r3, r1
 8008c6e:	d101      	bne.n	8008c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8008c70:	4b18      	ldr	r3, [pc, #96]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008c72:	e001      	b.n	8008c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8008c74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008c78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008c7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c8a:	f043 0202 	orr.w	r2, r3, #2
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f7ff fda6 	bl	80087e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008c98:	69bb      	ldr	r3, [r7, #24]
 8008c9a:	f003 0308 	and.w	r3, r3, #8
 8008c9e:	2b08      	cmp	r3, #8
 8008ca0:	d136      	bne.n	8008d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	f003 0320 	and.w	r3, r3, #32
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d031      	beq.n	8008d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a07      	ldr	r2, [pc, #28]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d101      	bne.n	8008cba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008cb6:	4b07      	ldr	r3, [pc, #28]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008cb8:	e001      	b.n	8008cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4902      	ldr	r1, [pc, #8]	; (8008cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008cc6:	428b      	cmp	r3, r1
 8008cc8:	d106      	bne.n	8008cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008cca:	4b02      	ldr	r3, [pc, #8]	; (8008cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008ccc:	e006      	b.n	8008cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8008cce:	bf00      	nop
 8008cd0:	40003800 	.word	0x40003800
 8008cd4:	40003400 	.word	0x40003400
 8008cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008cdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008ce0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	685a      	ldr	r2, [r3, #4]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008cf0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008cfe:	f043 0204 	orr.w	r2, r3, #4
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff fd6c 	bl	80087e4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d0c:	e000      	b.n	8008d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008d0e:	bf00      	nop
}
 8008d10:	bf00      	nop
 8008d12:	3720      	adds	r7, #32
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8008d20:	bf00      	nop
 8008d22:	370c      	adds	r7, #12
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b082      	sub	sp, #8
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d38:	1c99      	adds	r1, r3, #2
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6251      	str	r1, [r2, #36]	; 0x24
 8008d3e:	881a      	ldrh	r2, [r3, #0]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	b29a      	uxth	r2, r3
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008d58:	b29b      	uxth	r3, r3
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d113      	bne.n	8008d86 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685a      	ldr	r2, [r3, #4]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008d72:	b29b      	uxth	r3, r3
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d106      	bne.n	8008d86 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f7ff ffc9 	bl	8008d18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008d86:	bf00      	nop
 8008d88:	3708      	adds	r7, #8
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}
	...

08008d90 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9c:	1c99      	adds	r1, r3, #2
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	6251      	str	r1, [r2, #36]	; 0x24
 8008da2:	8819      	ldrh	r1, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a1d      	ldr	r2, [pc, #116]	; (8008e20 <I2SEx_TxISR_I2SExt+0x90>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d101      	bne.n	8008db2 <I2SEx_TxISR_I2SExt+0x22>
 8008dae:	4b1d      	ldr	r3, [pc, #116]	; (8008e24 <I2SEx_TxISR_I2SExt+0x94>)
 8008db0:	e001      	b.n	8008db6 <I2SEx_TxISR_I2SExt+0x26>
 8008db2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008db6:	460a      	mov	r2, r1
 8008db8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	3b01      	subs	r3, #1
 8008dc2:	b29a      	uxth	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d121      	bne.n	8008e16 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a12      	ldr	r2, [pc, #72]	; (8008e20 <I2SEx_TxISR_I2SExt+0x90>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d101      	bne.n	8008de0 <I2SEx_TxISR_I2SExt+0x50>
 8008ddc:	4b11      	ldr	r3, [pc, #68]	; (8008e24 <I2SEx_TxISR_I2SExt+0x94>)
 8008dde:	e001      	b.n	8008de4 <I2SEx_TxISR_I2SExt+0x54>
 8008de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008de4:	685a      	ldr	r2, [r3, #4]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	490d      	ldr	r1, [pc, #52]	; (8008e20 <I2SEx_TxISR_I2SExt+0x90>)
 8008dec:	428b      	cmp	r3, r1
 8008dee:	d101      	bne.n	8008df4 <I2SEx_TxISR_I2SExt+0x64>
 8008df0:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <I2SEx_TxISR_I2SExt+0x94>)
 8008df2:	e001      	b.n	8008df8 <I2SEx_TxISR_I2SExt+0x68>
 8008df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008df8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008dfc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d106      	bne.n	8008e16 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2201      	movs	r2, #1
 8008e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f7ff ff81 	bl	8008d18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008e16:	bf00      	nop
 8008e18:	3708      	adds	r7, #8
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop
 8008e20:	40003800 	.word	0x40003800
 8008e24:	40003400 	.word	0x40003400

08008e28 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b082      	sub	sp, #8
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	68d8      	ldr	r0, [r3, #12]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	1c99      	adds	r1, r3, #2
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008e40:	b282      	uxth	r2, r0
 8008e42:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e48:	b29b      	uxth	r3, r3
 8008e4a:	3b01      	subs	r3, #1
 8008e4c:	b29a      	uxth	r2, r3
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d113      	bne.n	8008e84 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008e6a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e70:	b29b      	uxth	r3, r3
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d106      	bne.n	8008e84 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	f7ff ff4a 	bl	8008d18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008e84:	bf00      	nop
 8008e86:	3708      	adds	r7, #8
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	bd80      	pop	{r7, pc}

08008e8c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a20      	ldr	r2, [pc, #128]	; (8008f1c <I2SEx_RxISR_I2SExt+0x90>)
 8008e9a:	4293      	cmp	r3, r2
 8008e9c:	d101      	bne.n	8008ea2 <I2SEx_RxISR_I2SExt+0x16>
 8008e9e:	4b20      	ldr	r3, [pc, #128]	; (8008f20 <I2SEx_RxISR_I2SExt+0x94>)
 8008ea0:	e001      	b.n	8008ea6 <I2SEx_RxISR_I2SExt+0x1a>
 8008ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ea6:	68d8      	ldr	r0, [r3, #12]
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eac:	1c99      	adds	r1, r3, #2
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8008eb2:	b282      	uxth	r2, r0
 8008eb4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d121      	bne.n	8008f12 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4a12      	ldr	r2, [pc, #72]	; (8008f1c <I2SEx_RxISR_I2SExt+0x90>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d101      	bne.n	8008edc <I2SEx_RxISR_I2SExt+0x50>
 8008ed8:	4b11      	ldr	r3, [pc, #68]	; (8008f20 <I2SEx_RxISR_I2SExt+0x94>)
 8008eda:	e001      	b.n	8008ee0 <I2SEx_RxISR_I2SExt+0x54>
 8008edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	490d      	ldr	r1, [pc, #52]	; (8008f1c <I2SEx_RxISR_I2SExt+0x90>)
 8008ee8:	428b      	cmp	r3, r1
 8008eea:	d101      	bne.n	8008ef0 <I2SEx_RxISR_I2SExt+0x64>
 8008eec:	4b0c      	ldr	r3, [pc, #48]	; (8008f20 <I2SEx_RxISR_I2SExt+0x94>)
 8008eee:	e001      	b.n	8008ef4 <I2SEx_RxISR_I2SExt+0x68>
 8008ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8008ef4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8008ef8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	2201      	movs	r2, #1
 8008f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff ff03 	bl	8008d18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008f12:	bf00      	nop
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	40003800 	.word	0x40003800
 8008f20:	40003400 	.word	0x40003400

08008f24 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b082      	sub	sp, #8
 8008f28:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008f2e:	2300      	movs	r3, #0
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	4b20      	ldr	r3, [pc, #128]	; (8008fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f36:	4a1f      	ldr	r2, [pc, #124]	; (8008fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8008f3e:	4b1d      	ldr	r3, [pc, #116]	; (8008fb4 <HAL_PWREx_EnableOverDrive+0x90>)
 8008f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f46:	603b      	str	r3, [r7, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008f4a:	4b1b      	ldr	r3, [pc, #108]	; (8008fb8 <HAL_PWREx_EnableOverDrive+0x94>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f50:	f7fd fb22 	bl	8006598 <HAL_GetTick>
 8008f54:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f56:	e009      	b.n	8008f6c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f58:	f7fd fb1e 	bl	8006598 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f66:	d901      	bls.n	8008f6c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e01f      	b.n	8008fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008f6c:	4b13      	ldr	r3, [pc, #76]	; (8008fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f78:	d1ee      	bne.n	8008f58 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008f7a:	4b11      	ldr	r3, [pc, #68]	; (8008fc0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f80:	f7fd fb0a 	bl	8006598 <HAL_GetTick>
 8008f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f86:	e009      	b.n	8008f9c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008f88:	f7fd fb06 	bl	8006598 <HAL_GetTick>
 8008f8c:	4602      	mov	r2, r0
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f96:	d901      	bls.n	8008f9c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8008f98:	2303      	movs	r3, #3
 8008f9a:	e007      	b.n	8008fac <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008f9c:	4b07      	ldr	r3, [pc, #28]	; (8008fbc <HAL_PWREx_EnableOverDrive+0x98>)
 8008f9e:	685b      	ldr	r3, [r3, #4]
 8008fa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008fa8:	d1ee      	bne.n	8008f88 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8008faa:	2300      	movs	r3, #0
}
 8008fac:	4618      	mov	r0, r3
 8008fae:	3708      	adds	r7, #8
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	40023800 	.word	0x40023800
 8008fb8:	420e0040 	.word	0x420e0040
 8008fbc:	40007000 	.word	0x40007000
 8008fc0:	420e0044 	.word	0x420e0044

08008fc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d101      	bne.n	8008fd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fd2:	2301      	movs	r3, #1
 8008fd4:	e267      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0301 	and.w	r3, r3, #1
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d075      	beq.n	80090ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fe2:	4b88      	ldr	r3, [pc, #544]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f003 030c 	and.w	r3, r3, #12
 8008fea:	2b04      	cmp	r3, #4
 8008fec:	d00c      	beq.n	8009008 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fee:	4b85      	ldr	r3, [pc, #532]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8008ff0:	689b      	ldr	r3, [r3, #8]
 8008ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ff6:	2b08      	cmp	r3, #8
 8008ff8:	d112      	bne.n	8009020 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ffa:	4b82      	ldr	r3, [pc, #520]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009002:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009006:	d10b      	bne.n	8009020 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009008:	4b7e      	ldr	r3, [pc, #504]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d05b      	beq.n	80090cc <HAL_RCC_OscConfig+0x108>
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d157      	bne.n	80090cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800901c:	2301      	movs	r3, #1
 800901e:	e242      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009028:	d106      	bne.n	8009038 <HAL_RCC_OscConfig+0x74>
 800902a:	4b76      	ldr	r3, [pc, #472]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a75      	ldr	r2, [pc, #468]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009030:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009034:	6013      	str	r3, [r2, #0]
 8009036:	e01d      	b.n	8009074 <HAL_RCC_OscConfig+0xb0>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009040:	d10c      	bne.n	800905c <HAL_RCC_OscConfig+0x98>
 8009042:	4b70      	ldr	r3, [pc, #448]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a6f      	ldr	r2, [pc, #444]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009048:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800904c:	6013      	str	r3, [r2, #0]
 800904e:	4b6d      	ldr	r3, [pc, #436]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4a6c      	ldr	r2, [pc, #432]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009058:	6013      	str	r3, [r2, #0]
 800905a:	e00b      	b.n	8009074 <HAL_RCC_OscConfig+0xb0>
 800905c:	4b69      	ldr	r3, [pc, #420]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	4a68      	ldr	r2, [pc, #416]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009062:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009066:	6013      	str	r3, [r2, #0]
 8009068:	4b66      	ldr	r3, [pc, #408]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a65      	ldr	r2, [pc, #404]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 800906e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d013      	beq.n	80090a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800907c:	f7fd fa8c 	bl	8006598 <HAL_GetTick>
 8009080:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009082:	e008      	b.n	8009096 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009084:	f7fd fa88 	bl	8006598 <HAL_GetTick>
 8009088:	4602      	mov	r2, r0
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	1ad3      	subs	r3, r2, r3
 800908e:	2b64      	cmp	r3, #100	; 0x64
 8009090:	d901      	bls.n	8009096 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009092:	2303      	movs	r3, #3
 8009094:	e207      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009096:	4b5b      	ldr	r3, [pc, #364]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d0f0      	beq.n	8009084 <HAL_RCC_OscConfig+0xc0>
 80090a2:	e014      	b.n	80090ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090a4:	f7fd fa78 	bl	8006598 <HAL_GetTick>
 80090a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090aa:	e008      	b.n	80090be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090ac:	f7fd fa74 	bl	8006598 <HAL_GetTick>
 80090b0:	4602      	mov	r2, r0
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	2b64      	cmp	r3, #100	; 0x64
 80090b8:	d901      	bls.n	80090be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090ba:	2303      	movs	r3, #3
 80090bc:	e1f3      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090be:	4b51      	ldr	r3, [pc, #324]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1f0      	bne.n	80090ac <HAL_RCC_OscConfig+0xe8>
 80090ca:	e000      	b.n	80090ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d063      	beq.n	80091a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090da:	4b4a      	ldr	r3, [pc, #296]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f003 030c 	and.w	r3, r3, #12
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00b      	beq.n	80090fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090e6:	4b47      	ldr	r3, [pc, #284]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 80090e8:	689b      	ldr	r3, [r3, #8]
 80090ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090ee:	2b08      	cmp	r3, #8
 80090f0:	d11c      	bne.n	800912c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090f2:	4b44      	ldr	r3, [pc, #272]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d116      	bne.n	800912c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090fe:	4b41      	ldr	r3, [pc, #260]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d005      	beq.n	8009116 <HAL_RCC_OscConfig+0x152>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	2b01      	cmp	r3, #1
 8009110:	d001      	beq.n	8009116 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009112:	2301      	movs	r3, #1
 8009114:	e1c7      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009116:	4b3b      	ldr	r3, [pc, #236]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	4937      	ldr	r1, [pc, #220]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009126:	4313      	orrs	r3, r2
 8009128:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800912a:	e03a      	b.n	80091a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d020      	beq.n	8009176 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009134:	4b34      	ldr	r3, [pc, #208]	; (8009208 <HAL_RCC_OscConfig+0x244>)
 8009136:	2201      	movs	r2, #1
 8009138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913a:	f7fd fa2d 	bl	8006598 <HAL_GetTick>
 800913e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009140:	e008      	b.n	8009154 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009142:	f7fd fa29 	bl	8006598 <HAL_GetTick>
 8009146:	4602      	mov	r2, r0
 8009148:	693b      	ldr	r3, [r7, #16]
 800914a:	1ad3      	subs	r3, r2, r3
 800914c:	2b02      	cmp	r3, #2
 800914e:	d901      	bls.n	8009154 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009150:	2303      	movs	r3, #3
 8009152:	e1a8      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009154:	4b2b      	ldr	r3, [pc, #172]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0302 	and.w	r3, r3, #2
 800915c:	2b00      	cmp	r3, #0
 800915e:	d0f0      	beq.n	8009142 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009160:	4b28      	ldr	r3, [pc, #160]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	691b      	ldr	r3, [r3, #16]
 800916c:	00db      	lsls	r3, r3, #3
 800916e:	4925      	ldr	r1, [pc, #148]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009170:	4313      	orrs	r3, r2
 8009172:	600b      	str	r3, [r1, #0]
 8009174:	e015      	b.n	80091a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009176:	4b24      	ldr	r3, [pc, #144]	; (8009208 <HAL_RCC_OscConfig+0x244>)
 8009178:	2200      	movs	r2, #0
 800917a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800917c:	f7fd fa0c 	bl	8006598 <HAL_GetTick>
 8009180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009182:	e008      	b.n	8009196 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009184:	f7fd fa08 	bl	8006598 <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	2b02      	cmp	r3, #2
 8009190:	d901      	bls.n	8009196 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009192:	2303      	movs	r3, #3
 8009194:	e187      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009196:	4b1b      	ldr	r3, [pc, #108]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f003 0302 	and.w	r3, r3, #2
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d1f0      	bne.n	8009184 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f003 0308 	and.w	r3, r3, #8
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d036      	beq.n	800921c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	695b      	ldr	r3, [r3, #20]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d016      	beq.n	80091e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091b6:	4b15      	ldr	r3, [pc, #84]	; (800920c <HAL_RCC_OscConfig+0x248>)
 80091b8:	2201      	movs	r2, #1
 80091ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091bc:	f7fd f9ec 	bl	8006598 <HAL_GetTick>
 80091c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091c2:	e008      	b.n	80091d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091c4:	f7fd f9e8 	bl	8006598 <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	2b02      	cmp	r3, #2
 80091d0:	d901      	bls.n	80091d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091d2:	2303      	movs	r3, #3
 80091d4:	e167      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091d6:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <HAL_RCC_OscConfig+0x240>)
 80091d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091da:	f003 0302 	and.w	r3, r3, #2
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f0      	beq.n	80091c4 <HAL_RCC_OscConfig+0x200>
 80091e2:	e01b      	b.n	800921c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091e4:	4b09      	ldr	r3, [pc, #36]	; (800920c <HAL_RCC_OscConfig+0x248>)
 80091e6:	2200      	movs	r2, #0
 80091e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091ea:	f7fd f9d5 	bl	8006598 <HAL_GetTick>
 80091ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091f0:	e00e      	b.n	8009210 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091f2:	f7fd f9d1 	bl	8006598 <HAL_GetTick>
 80091f6:	4602      	mov	r2, r0
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	2b02      	cmp	r3, #2
 80091fe:	d907      	bls.n	8009210 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009200:	2303      	movs	r3, #3
 8009202:	e150      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
 8009204:	40023800 	.word	0x40023800
 8009208:	42470000 	.word	0x42470000
 800920c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009210:	4b88      	ldr	r3, [pc, #544]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 8009212:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b00      	cmp	r3, #0
 800921a:	d1ea      	bne.n	80091f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	2b00      	cmp	r3, #0
 8009226:	f000 8097 	beq.w	8009358 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800922a:	2300      	movs	r3, #0
 800922c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800922e:	4b81      	ldr	r3, [pc, #516]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 8009230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d10f      	bne.n	800925a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800923a:	2300      	movs	r3, #0
 800923c:	60bb      	str	r3, [r7, #8]
 800923e:	4b7d      	ldr	r3, [pc, #500]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 8009240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009242:	4a7c      	ldr	r2, [pc, #496]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 8009244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009248:	6413      	str	r3, [r2, #64]	; 0x40
 800924a:	4b7a      	ldr	r3, [pc, #488]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 800924c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009252:	60bb      	str	r3, [r7, #8]
 8009254:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009256:	2301      	movs	r3, #1
 8009258:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800925a:	4b77      	ldr	r3, [pc, #476]	; (8009438 <HAL_RCC_OscConfig+0x474>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009262:	2b00      	cmp	r3, #0
 8009264:	d118      	bne.n	8009298 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009266:	4b74      	ldr	r3, [pc, #464]	; (8009438 <HAL_RCC_OscConfig+0x474>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a73      	ldr	r2, [pc, #460]	; (8009438 <HAL_RCC_OscConfig+0x474>)
 800926c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009270:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009272:	f7fd f991 	bl	8006598 <HAL_GetTick>
 8009276:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009278:	e008      	b.n	800928c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800927a:	f7fd f98d 	bl	8006598 <HAL_GetTick>
 800927e:	4602      	mov	r2, r0
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	1ad3      	subs	r3, r2, r3
 8009284:	2b02      	cmp	r3, #2
 8009286:	d901      	bls.n	800928c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8009288:	2303      	movs	r3, #3
 800928a:	e10c      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800928c:	4b6a      	ldr	r3, [pc, #424]	; (8009438 <HAL_RCC_OscConfig+0x474>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009294:	2b00      	cmp	r3, #0
 8009296:	d0f0      	beq.n	800927a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	2b01      	cmp	r3, #1
 800929e:	d106      	bne.n	80092ae <HAL_RCC_OscConfig+0x2ea>
 80092a0:	4b64      	ldr	r3, [pc, #400]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a4:	4a63      	ldr	r2, [pc, #396]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092a6:	f043 0301 	orr.w	r3, r3, #1
 80092aa:	6713      	str	r3, [r2, #112]	; 0x70
 80092ac:	e01c      	b.n	80092e8 <HAL_RCC_OscConfig+0x324>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	689b      	ldr	r3, [r3, #8]
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d10c      	bne.n	80092d0 <HAL_RCC_OscConfig+0x30c>
 80092b6:	4b5f      	ldr	r3, [pc, #380]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ba:	4a5e      	ldr	r2, [pc, #376]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092bc:	f043 0304 	orr.w	r3, r3, #4
 80092c0:	6713      	str	r3, [r2, #112]	; 0x70
 80092c2:	4b5c      	ldr	r3, [pc, #368]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092c6:	4a5b      	ldr	r2, [pc, #364]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092c8:	f043 0301 	orr.w	r3, r3, #1
 80092cc:	6713      	str	r3, [r2, #112]	; 0x70
 80092ce:	e00b      	b.n	80092e8 <HAL_RCC_OscConfig+0x324>
 80092d0:	4b58      	ldr	r3, [pc, #352]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d4:	4a57      	ldr	r2, [pc, #348]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092d6:	f023 0301 	bic.w	r3, r3, #1
 80092da:	6713      	str	r3, [r2, #112]	; 0x70
 80092dc:	4b55      	ldr	r3, [pc, #340]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e0:	4a54      	ldr	r2, [pc, #336]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80092e2:	f023 0304 	bic.w	r3, r3, #4
 80092e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d015      	beq.n	800931c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f0:	f7fd f952 	bl	8006598 <HAL_GetTick>
 80092f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092f6:	e00a      	b.n	800930e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092f8:	f7fd f94e 	bl	8006598 <HAL_GetTick>
 80092fc:	4602      	mov	r2, r0
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	1ad3      	subs	r3, r2, r3
 8009302:	f241 3288 	movw	r2, #5000	; 0x1388
 8009306:	4293      	cmp	r3, r2
 8009308:	d901      	bls.n	800930e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800930a:	2303      	movs	r3, #3
 800930c:	e0cb      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800930e:	4b49      	ldr	r3, [pc, #292]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 8009310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009312:	f003 0302 	and.w	r3, r3, #2
 8009316:	2b00      	cmp	r3, #0
 8009318:	d0ee      	beq.n	80092f8 <HAL_RCC_OscConfig+0x334>
 800931a:	e014      	b.n	8009346 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800931c:	f7fd f93c 	bl	8006598 <HAL_GetTick>
 8009320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009322:	e00a      	b.n	800933a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009324:	f7fd f938 	bl	8006598 <HAL_GetTick>
 8009328:	4602      	mov	r2, r0
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	1ad3      	subs	r3, r2, r3
 800932e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009332:	4293      	cmp	r3, r2
 8009334:	d901      	bls.n	800933a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009336:	2303      	movs	r3, #3
 8009338:	e0b5      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800933a:	4b3e      	ldr	r3, [pc, #248]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	f003 0302 	and.w	r3, r3, #2
 8009342:	2b00      	cmp	r3, #0
 8009344:	d1ee      	bne.n	8009324 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	2b01      	cmp	r3, #1
 800934a:	d105      	bne.n	8009358 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800934c:	4b39      	ldr	r3, [pc, #228]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 800934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009350:	4a38      	ldr	r2, [pc, #224]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 8009352:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009356:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	699b      	ldr	r3, [r3, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80a1 	beq.w	80094a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009362:	4b34      	ldr	r3, [pc, #208]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	f003 030c 	and.w	r3, r3, #12
 800936a:	2b08      	cmp	r3, #8
 800936c:	d05c      	beq.n	8009428 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d141      	bne.n	80093fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009376:	4b31      	ldr	r3, [pc, #196]	; (800943c <HAL_RCC_OscConfig+0x478>)
 8009378:	2200      	movs	r2, #0
 800937a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800937c:	f7fd f90c 	bl	8006598 <HAL_GetTick>
 8009380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009382:	e008      	b.n	8009396 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009384:	f7fd f908 	bl	8006598 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b02      	cmp	r3, #2
 8009390:	d901      	bls.n	8009396 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	e087      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009396:	4b27      	ldr	r3, [pc, #156]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d1f0      	bne.n	8009384 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	69da      	ldr	r2, [r3, #28]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	431a      	orrs	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b0:	019b      	lsls	r3, r3, #6
 80093b2:	431a      	orrs	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093b8:	085b      	lsrs	r3, r3, #1
 80093ba:	3b01      	subs	r3, #1
 80093bc:	041b      	lsls	r3, r3, #16
 80093be:	431a      	orrs	r2, r3
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c4:	061b      	lsls	r3, r3, #24
 80093c6:	491b      	ldr	r1, [pc, #108]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80093c8:	4313      	orrs	r3, r2
 80093ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093cc:	4b1b      	ldr	r3, [pc, #108]	; (800943c <HAL_RCC_OscConfig+0x478>)
 80093ce:	2201      	movs	r2, #1
 80093d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d2:	f7fd f8e1 	bl	8006598 <HAL_GetTick>
 80093d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093d8:	e008      	b.n	80093ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093da:	f7fd f8dd 	bl	8006598 <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e05c      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093ec:	4b11      	ldr	r3, [pc, #68]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d0f0      	beq.n	80093da <HAL_RCC_OscConfig+0x416>
 80093f8:	e054      	b.n	80094a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093fa:	4b10      	ldr	r3, [pc, #64]	; (800943c <HAL_RCC_OscConfig+0x478>)
 80093fc:	2200      	movs	r2, #0
 80093fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009400:	f7fd f8ca 	bl	8006598 <HAL_GetTick>
 8009404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009406:	e008      	b.n	800941a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009408:	f7fd f8c6 	bl	8006598 <HAL_GetTick>
 800940c:	4602      	mov	r2, r0
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	1ad3      	subs	r3, r2, r3
 8009412:	2b02      	cmp	r3, #2
 8009414:	d901      	bls.n	800941a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e045      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800941a:	4b06      	ldr	r3, [pc, #24]	; (8009434 <HAL_RCC_OscConfig+0x470>)
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d1f0      	bne.n	8009408 <HAL_RCC_OscConfig+0x444>
 8009426:	e03d      	b.n	80094a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	699b      	ldr	r3, [r3, #24]
 800942c:	2b01      	cmp	r3, #1
 800942e:	d107      	bne.n	8009440 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009430:	2301      	movs	r3, #1
 8009432:	e038      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
 8009434:	40023800 	.word	0x40023800
 8009438:	40007000 	.word	0x40007000
 800943c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009440:	4b1b      	ldr	r3, [pc, #108]	; (80094b0 <HAL_RCC_OscConfig+0x4ec>)
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	2b01      	cmp	r3, #1
 800944c:	d028      	beq.n	80094a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009458:	429a      	cmp	r2, r3
 800945a:	d121      	bne.n	80094a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009466:	429a      	cmp	r2, r3
 8009468:	d11a      	bne.n	80094a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009470:	4013      	ands	r3, r2
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009476:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009478:	4293      	cmp	r3, r2
 800947a:	d111      	bne.n	80094a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009486:	085b      	lsrs	r3, r3, #1
 8009488:	3b01      	subs	r3, #1
 800948a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800948c:	429a      	cmp	r2, r3
 800948e:	d107      	bne.n	80094a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800949c:	429a      	cmp	r2, r3
 800949e:	d001      	beq.n	80094a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80094a0:	2301      	movs	r3, #1
 80094a2:	e000      	b.n	80094a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	40023800 	.word	0x40023800

080094b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d101      	bne.n	80094c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094c4:	2301      	movs	r3, #1
 80094c6:	e0cc      	b.n	8009662 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094c8:	4b68      	ldr	r3, [pc, #416]	; (800966c <HAL_RCC_ClockConfig+0x1b8>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	f003 030f 	and.w	r3, r3, #15
 80094d0:	683a      	ldr	r2, [r7, #0]
 80094d2:	429a      	cmp	r2, r3
 80094d4:	d90c      	bls.n	80094f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094d6:	4b65      	ldr	r3, [pc, #404]	; (800966c <HAL_RCC_ClockConfig+0x1b8>)
 80094d8:	683a      	ldr	r2, [r7, #0]
 80094da:	b2d2      	uxtb	r2, r2
 80094dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094de:	4b63      	ldr	r3, [pc, #396]	; (800966c <HAL_RCC_ClockConfig+0x1b8>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	f003 030f 	and.w	r3, r3, #15
 80094e6:	683a      	ldr	r2, [r7, #0]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d001      	beq.n	80094f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80094ec:	2301      	movs	r3, #1
 80094ee:	e0b8      	b.n	8009662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f003 0302 	and.w	r3, r3, #2
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d020      	beq.n	800953e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0304 	and.w	r3, r3, #4
 8009504:	2b00      	cmp	r3, #0
 8009506:	d005      	beq.n	8009514 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009508:	4b59      	ldr	r3, [pc, #356]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 800950a:	689b      	ldr	r3, [r3, #8]
 800950c:	4a58      	ldr	r2, [pc, #352]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 800950e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009512:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0308 	and.w	r3, r3, #8
 800951c:	2b00      	cmp	r3, #0
 800951e:	d005      	beq.n	800952c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009520:	4b53      	ldr	r3, [pc, #332]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	4a52      	ldr	r2, [pc, #328]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009526:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800952a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800952c:	4b50      	ldr	r3, [pc, #320]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	689b      	ldr	r3, [r3, #8]
 8009538:	494d      	ldr	r1, [pc, #308]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 800953a:	4313      	orrs	r3, r2
 800953c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0301 	and.w	r3, r3, #1
 8009546:	2b00      	cmp	r3, #0
 8009548:	d044      	beq.n	80095d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d107      	bne.n	8009562 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009552:	4b47      	ldr	r3, [pc, #284]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955a:	2b00      	cmp	r3, #0
 800955c:	d119      	bne.n	8009592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	e07f      	b.n	8009662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	685b      	ldr	r3, [r3, #4]
 8009566:	2b02      	cmp	r3, #2
 8009568:	d003      	beq.n	8009572 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800956e:	2b03      	cmp	r3, #3
 8009570:	d107      	bne.n	8009582 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009572:	4b3f      	ldr	r3, [pc, #252]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d109      	bne.n	8009592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800957e:	2301      	movs	r3, #1
 8009580:	e06f      	b.n	8009662 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009582:	4b3b      	ldr	r3, [pc, #236]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 0302 	and.w	r3, r3, #2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d101      	bne.n	8009592 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800958e:	2301      	movs	r3, #1
 8009590:	e067      	b.n	8009662 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009592:	4b37      	ldr	r3, [pc, #220]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	f023 0203 	bic.w	r2, r3, #3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	4934      	ldr	r1, [pc, #208]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 80095a0:	4313      	orrs	r3, r2
 80095a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095a4:	f7fc fff8 	bl	8006598 <HAL_GetTick>
 80095a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095aa:	e00a      	b.n	80095c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095ac:	f7fc fff4 	bl	8006598 <HAL_GetTick>
 80095b0:	4602      	mov	r2, r0
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d901      	bls.n	80095c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80095be:	2303      	movs	r3, #3
 80095c0:	e04f      	b.n	8009662 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095c2:	4b2b      	ldr	r3, [pc, #172]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 80095c4:	689b      	ldr	r3, [r3, #8]
 80095c6:	f003 020c 	and.w	r2, r3, #12
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	429a      	cmp	r2, r3
 80095d2:	d1eb      	bne.n	80095ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095d4:	4b25      	ldr	r3, [pc, #148]	; (800966c <HAL_RCC_ClockConfig+0x1b8>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 030f 	and.w	r3, r3, #15
 80095dc:	683a      	ldr	r2, [r7, #0]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d20c      	bcs.n	80095fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095e2:	4b22      	ldr	r3, [pc, #136]	; (800966c <HAL_RCC_ClockConfig+0x1b8>)
 80095e4:	683a      	ldr	r2, [r7, #0]
 80095e6:	b2d2      	uxtb	r2, r2
 80095e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ea:	4b20      	ldr	r3, [pc, #128]	; (800966c <HAL_RCC_ClockConfig+0x1b8>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 030f 	and.w	r3, r3, #15
 80095f2:	683a      	ldr	r2, [r7, #0]
 80095f4:	429a      	cmp	r2, r3
 80095f6:	d001      	beq.n	80095fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80095f8:	2301      	movs	r3, #1
 80095fa:	e032      	b.n	8009662 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d008      	beq.n	800961a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009608:	4b19      	ldr	r3, [pc, #100]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 800960a:	689b      	ldr	r3, [r3, #8]
 800960c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	68db      	ldr	r3, [r3, #12]
 8009614:	4916      	ldr	r1, [pc, #88]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009616:	4313      	orrs	r3, r2
 8009618:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0308 	and.w	r3, r3, #8
 8009622:	2b00      	cmp	r3, #0
 8009624:	d009      	beq.n	800963a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009626:	4b12      	ldr	r3, [pc, #72]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	691b      	ldr	r3, [r3, #16]
 8009632:	00db      	lsls	r3, r3, #3
 8009634:	490e      	ldr	r1, [pc, #56]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009636:	4313      	orrs	r3, r2
 8009638:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800963a:	f000 f821 	bl	8009680 <HAL_RCC_GetSysClockFreq>
 800963e:	4602      	mov	r2, r0
 8009640:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <HAL_RCC_ClockConfig+0x1bc>)
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	091b      	lsrs	r3, r3, #4
 8009646:	f003 030f 	and.w	r3, r3, #15
 800964a:	490a      	ldr	r1, [pc, #40]	; (8009674 <HAL_RCC_ClockConfig+0x1c0>)
 800964c:	5ccb      	ldrb	r3, [r1, r3]
 800964e:	fa22 f303 	lsr.w	r3, r2, r3
 8009652:	4a09      	ldr	r2, [pc, #36]	; (8009678 <HAL_RCC_ClockConfig+0x1c4>)
 8009654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009656:	4b09      	ldr	r3, [pc, #36]	; (800967c <HAL_RCC_ClockConfig+0x1c8>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4618      	mov	r0, r3
 800965c:	f7fc fd74 	bl	8006148 <HAL_InitTick>

  return HAL_OK;
 8009660:	2300      	movs	r3, #0
}
 8009662:	4618      	mov	r0, r3
 8009664:	3710      	adds	r7, #16
 8009666:	46bd      	mov	sp, r7
 8009668:	bd80      	pop	{r7, pc}
 800966a:	bf00      	nop
 800966c:	40023c00 	.word	0x40023c00
 8009670:	40023800 	.word	0x40023800
 8009674:	0802588c 	.word	0x0802588c
 8009678:	2000000c 	.word	0x2000000c
 800967c:	20000010 	.word	0x20000010

08009680 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009680:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009684:	b094      	sub	sp, #80	; 0x50
 8009686:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009688:	2300      	movs	r3, #0
 800968a:	647b      	str	r3, [r7, #68]	; 0x44
 800968c:	2300      	movs	r3, #0
 800968e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009690:	2300      	movs	r3, #0
 8009692:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009694:	2300      	movs	r3, #0
 8009696:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009698:	4b79      	ldr	r3, [pc, #484]	; (8009880 <HAL_RCC_GetSysClockFreq+0x200>)
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	f003 030c 	and.w	r3, r3, #12
 80096a0:	2b08      	cmp	r3, #8
 80096a2:	d00d      	beq.n	80096c0 <HAL_RCC_GetSysClockFreq+0x40>
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	f200 80e1 	bhi.w	800986c <HAL_RCC_GetSysClockFreq+0x1ec>
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <HAL_RCC_GetSysClockFreq+0x34>
 80096ae:	2b04      	cmp	r3, #4
 80096b0:	d003      	beq.n	80096ba <HAL_RCC_GetSysClockFreq+0x3a>
 80096b2:	e0db      	b.n	800986c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80096b4:	4b73      	ldr	r3, [pc, #460]	; (8009884 <HAL_RCC_GetSysClockFreq+0x204>)
 80096b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80096b8:	e0db      	b.n	8009872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80096ba:	4b73      	ldr	r3, [pc, #460]	; (8009888 <HAL_RCC_GetSysClockFreq+0x208>)
 80096bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80096be:	e0d8      	b.n	8009872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096c0:	4b6f      	ldr	r3, [pc, #444]	; (8009880 <HAL_RCC_GetSysClockFreq+0x200>)
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096ca:	4b6d      	ldr	r3, [pc, #436]	; (8009880 <HAL_RCC_GetSysClockFreq+0x200>)
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d063      	beq.n	800979e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096d6:	4b6a      	ldr	r3, [pc, #424]	; (8009880 <HAL_RCC_GetSysClockFreq+0x200>)
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	099b      	lsrs	r3, r3, #6
 80096dc:	2200      	movs	r2, #0
 80096de:	63bb      	str	r3, [r7, #56]	; 0x38
 80096e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80096e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e8:	633b      	str	r3, [r7, #48]	; 0x30
 80096ea:	2300      	movs	r3, #0
 80096ec:	637b      	str	r3, [r7, #52]	; 0x34
 80096ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80096f2:	4622      	mov	r2, r4
 80096f4:	462b      	mov	r3, r5
 80096f6:	f04f 0000 	mov.w	r0, #0
 80096fa:	f04f 0100 	mov.w	r1, #0
 80096fe:	0159      	lsls	r1, r3, #5
 8009700:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009704:	0150      	lsls	r0, r2, #5
 8009706:	4602      	mov	r2, r0
 8009708:	460b      	mov	r3, r1
 800970a:	4621      	mov	r1, r4
 800970c:	1a51      	subs	r1, r2, r1
 800970e:	6139      	str	r1, [r7, #16]
 8009710:	4629      	mov	r1, r5
 8009712:	eb63 0301 	sbc.w	r3, r3, r1
 8009716:	617b      	str	r3, [r7, #20]
 8009718:	f04f 0200 	mov.w	r2, #0
 800971c:	f04f 0300 	mov.w	r3, #0
 8009720:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009724:	4659      	mov	r1, fp
 8009726:	018b      	lsls	r3, r1, #6
 8009728:	4651      	mov	r1, sl
 800972a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800972e:	4651      	mov	r1, sl
 8009730:	018a      	lsls	r2, r1, #6
 8009732:	4651      	mov	r1, sl
 8009734:	ebb2 0801 	subs.w	r8, r2, r1
 8009738:	4659      	mov	r1, fp
 800973a:	eb63 0901 	sbc.w	r9, r3, r1
 800973e:	f04f 0200 	mov.w	r2, #0
 8009742:	f04f 0300 	mov.w	r3, #0
 8009746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800974a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800974e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009752:	4690      	mov	r8, r2
 8009754:	4699      	mov	r9, r3
 8009756:	4623      	mov	r3, r4
 8009758:	eb18 0303 	adds.w	r3, r8, r3
 800975c:	60bb      	str	r3, [r7, #8]
 800975e:	462b      	mov	r3, r5
 8009760:	eb49 0303 	adc.w	r3, r9, r3
 8009764:	60fb      	str	r3, [r7, #12]
 8009766:	f04f 0200 	mov.w	r2, #0
 800976a:	f04f 0300 	mov.w	r3, #0
 800976e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009772:	4629      	mov	r1, r5
 8009774:	024b      	lsls	r3, r1, #9
 8009776:	4621      	mov	r1, r4
 8009778:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800977c:	4621      	mov	r1, r4
 800977e:	024a      	lsls	r2, r1, #9
 8009780:	4610      	mov	r0, r2
 8009782:	4619      	mov	r1, r3
 8009784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009786:	2200      	movs	r2, #0
 8009788:	62bb      	str	r3, [r7, #40]	; 0x28
 800978a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800978c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009790:	f7f7 f89c 	bl	80008cc <__aeabi_uldivmod>
 8009794:	4602      	mov	r2, r0
 8009796:	460b      	mov	r3, r1
 8009798:	4613      	mov	r3, r2
 800979a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800979c:	e058      	b.n	8009850 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800979e:	4b38      	ldr	r3, [pc, #224]	; (8009880 <HAL_RCC_GetSysClockFreq+0x200>)
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	099b      	lsrs	r3, r3, #6
 80097a4:	2200      	movs	r2, #0
 80097a6:	4618      	mov	r0, r3
 80097a8:	4611      	mov	r1, r2
 80097aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80097ae:	623b      	str	r3, [r7, #32]
 80097b0:	2300      	movs	r3, #0
 80097b2:	627b      	str	r3, [r7, #36]	; 0x24
 80097b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80097b8:	4642      	mov	r2, r8
 80097ba:	464b      	mov	r3, r9
 80097bc:	f04f 0000 	mov.w	r0, #0
 80097c0:	f04f 0100 	mov.w	r1, #0
 80097c4:	0159      	lsls	r1, r3, #5
 80097c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097ca:	0150      	lsls	r0, r2, #5
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4641      	mov	r1, r8
 80097d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80097d6:	4649      	mov	r1, r9
 80097d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80097dc:	f04f 0200 	mov.w	r2, #0
 80097e0:	f04f 0300 	mov.w	r3, #0
 80097e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80097e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80097ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80097f0:	ebb2 040a 	subs.w	r4, r2, sl
 80097f4:	eb63 050b 	sbc.w	r5, r3, fp
 80097f8:	f04f 0200 	mov.w	r2, #0
 80097fc:	f04f 0300 	mov.w	r3, #0
 8009800:	00eb      	lsls	r3, r5, #3
 8009802:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009806:	00e2      	lsls	r2, r4, #3
 8009808:	4614      	mov	r4, r2
 800980a:	461d      	mov	r5, r3
 800980c:	4643      	mov	r3, r8
 800980e:	18e3      	adds	r3, r4, r3
 8009810:	603b      	str	r3, [r7, #0]
 8009812:	464b      	mov	r3, r9
 8009814:	eb45 0303 	adc.w	r3, r5, r3
 8009818:	607b      	str	r3, [r7, #4]
 800981a:	f04f 0200 	mov.w	r2, #0
 800981e:	f04f 0300 	mov.w	r3, #0
 8009822:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009826:	4629      	mov	r1, r5
 8009828:	028b      	lsls	r3, r1, #10
 800982a:	4621      	mov	r1, r4
 800982c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009830:	4621      	mov	r1, r4
 8009832:	028a      	lsls	r2, r1, #10
 8009834:	4610      	mov	r0, r2
 8009836:	4619      	mov	r1, r3
 8009838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983a:	2200      	movs	r2, #0
 800983c:	61bb      	str	r3, [r7, #24]
 800983e:	61fa      	str	r2, [r7, #28]
 8009840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009844:	f7f7 f842 	bl	80008cc <__aeabi_uldivmod>
 8009848:	4602      	mov	r2, r0
 800984a:	460b      	mov	r3, r1
 800984c:	4613      	mov	r3, r2
 800984e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009850:	4b0b      	ldr	r3, [pc, #44]	; (8009880 <HAL_RCC_GetSysClockFreq+0x200>)
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	0c1b      	lsrs	r3, r3, #16
 8009856:	f003 0303 	and.w	r3, r3, #3
 800985a:	3301      	adds	r3, #1
 800985c:	005b      	lsls	r3, r3, #1
 800985e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009860:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009862:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009864:	fbb2 f3f3 	udiv	r3, r2, r3
 8009868:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800986a:	e002      	b.n	8009872 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800986c:	4b05      	ldr	r3, [pc, #20]	; (8009884 <HAL_RCC_GetSysClockFreq+0x204>)
 800986e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009870:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009872:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009874:	4618      	mov	r0, r3
 8009876:	3750      	adds	r7, #80	; 0x50
 8009878:	46bd      	mov	sp, r7
 800987a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800987e:	bf00      	nop
 8009880:	40023800 	.word	0x40023800
 8009884:	00f42400 	.word	0x00f42400
 8009888:	007a1200 	.word	0x007a1200

0800988c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800988c:	b480      	push	{r7}
 800988e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009890:	4b03      	ldr	r3, [pc, #12]	; (80098a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8009892:	681b      	ldr	r3, [r3, #0]
}
 8009894:	4618      	mov	r0, r3
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	2000000c 	.word	0x2000000c

080098a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80098a8:	f7ff fff0 	bl	800988c <HAL_RCC_GetHCLKFreq>
 80098ac:	4602      	mov	r2, r0
 80098ae:	4b05      	ldr	r3, [pc, #20]	; (80098c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	0a9b      	lsrs	r3, r3, #10
 80098b4:	f003 0307 	and.w	r3, r3, #7
 80098b8:	4903      	ldr	r1, [pc, #12]	; (80098c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80098ba:	5ccb      	ldrb	r3, [r1, r3]
 80098bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	bd80      	pop	{r7, pc}
 80098c4:	40023800 	.word	0x40023800
 80098c8:	0802589c 	.word	0x0802589c

080098cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098d0:	f7ff ffdc 	bl	800988c <HAL_RCC_GetHCLKFreq>
 80098d4:	4602      	mov	r2, r0
 80098d6:	4b05      	ldr	r3, [pc, #20]	; (80098ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80098d8:	689b      	ldr	r3, [r3, #8]
 80098da:	0b5b      	lsrs	r3, r3, #13
 80098dc:	f003 0307 	and.w	r3, r3, #7
 80098e0:	4903      	ldr	r1, [pc, #12]	; (80098f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098e2:	5ccb      	ldrb	r3, [r1, r3]
 80098e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	bd80      	pop	{r7, pc}
 80098ec:	40023800 	.word	0x40023800
 80098f0:	0802589c 	.word	0x0802589c

080098f4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b083      	sub	sp, #12
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	6078      	str	r0, [r7, #4]
 80098fc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	220f      	movs	r2, #15
 8009902:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009904:	4b12      	ldr	r3, [pc, #72]	; (8009950 <HAL_RCC_GetClockConfig+0x5c>)
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f003 0203 	and.w	r2, r3, #3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009910:	4b0f      	ldr	r3, [pc, #60]	; (8009950 <HAL_RCC_GetClockConfig+0x5c>)
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800991c:	4b0c      	ldr	r3, [pc, #48]	; (8009950 <HAL_RCC_GetClockConfig+0x5c>)
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009928:	4b09      	ldr	r3, [pc, #36]	; (8009950 <HAL_RCC_GetClockConfig+0x5c>)
 800992a:	689b      	ldr	r3, [r3, #8]
 800992c:	08db      	lsrs	r3, r3, #3
 800992e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009936:	4b07      	ldr	r3, [pc, #28]	; (8009954 <HAL_RCC_GetClockConfig+0x60>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f003 020f 	and.w	r2, r3, #15
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	601a      	str	r2, [r3, #0]
}
 8009942:	bf00      	nop
 8009944:	370c      	adds	r7, #12
 8009946:	46bd      	mov	sp, r7
 8009948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994c:	4770      	bx	lr
 800994e:	bf00      	nop
 8009950:	40023800 	.word	0x40023800
 8009954:	40023c00 	.word	0x40023c00

08009958 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b086      	sub	sp, #24
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009960:	2300      	movs	r3, #0
 8009962:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009964:	2300      	movs	r3, #0
 8009966:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d10b      	bne.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800997c:	2b00      	cmp	r3, #0
 800997e:	d105      	bne.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8009988:	2b00      	cmp	r3, #0
 800998a:	d075      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800998c:	4b91      	ldr	r3, [pc, #580]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800998e:	2200      	movs	r2, #0
 8009990:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009992:	f7fc fe01 	bl	8006598 <HAL_GetTick>
 8009996:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009998:	e008      	b.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800999a:	f7fc fdfd 	bl	8006598 <HAL_GetTick>
 800999e:	4602      	mov	r2, r0
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	2b02      	cmp	r3, #2
 80099a6:	d901      	bls.n	80099ac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e189      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80099ac:	4b8a      	ldr	r3, [pc, #552]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d1f0      	bne.n	800999a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0301 	and.w	r3, r3, #1
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d009      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	685b      	ldr	r3, [r3, #4]
 80099c8:	019a      	lsls	r2, r3, #6
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	071b      	lsls	r3, r3, #28
 80099d0:	4981      	ldr	r1, [pc, #516]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0302 	and.w	r3, r3, #2
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d01f      	beq.n	8009a24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80099e4:	4b7c      	ldr	r3, [pc, #496]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80099e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099ea:	0f1b      	lsrs	r3, r3, #28
 80099ec:	f003 0307 	and.w	r3, r3, #7
 80099f0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	019a      	lsls	r2, r3, #6
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	061b      	lsls	r3, r3, #24
 80099fe:	431a      	orrs	r2, r3
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	071b      	lsls	r3, r3, #28
 8009a04:	4974      	ldr	r1, [pc, #464]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a06:	4313      	orrs	r3, r2
 8009a08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009a0c:	4b72      	ldr	r3, [pc, #456]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009a12:	f023 021f 	bic.w	r2, r3, #31
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	69db      	ldr	r3, [r3, #28]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	496e      	ldr	r1, [pc, #440]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00d      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	019a      	lsls	r2, r3, #6
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	061b      	lsls	r3, r3, #24
 8009a3c:	431a      	orrs	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	071b      	lsls	r3, r3, #28
 8009a44:	4964      	ldr	r1, [pc, #400]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a46:	4313      	orrs	r3, r2
 8009a48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009a4c:	4b61      	ldr	r3, [pc, #388]	; (8009bd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8009a4e:	2201      	movs	r2, #1
 8009a50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a52:	f7fc fda1 	bl	8006598 <HAL_GetTick>
 8009a56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a58:	e008      	b.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009a5a:	f7fc fd9d 	bl	8006598 <HAL_GetTick>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	1ad3      	subs	r3, r2, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	d901      	bls.n	8009a6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a68:	2303      	movs	r3, #3
 8009a6a:	e129      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009a6c:	4b5a      	ldr	r3, [pc, #360]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d0f0      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	f003 0304 	and.w	r3, r3, #4
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d105      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d079      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009a90:	4b52      	ldr	r3, [pc, #328]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a96:	f7fc fd7f 	bl	8006598 <HAL_GetTick>
 8009a9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009a9c:	e008      	b.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009a9e:	f7fc fd7b 	bl	8006598 <HAL_GetTick>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	1ad3      	subs	r3, r2, r3
 8009aa8:	2b02      	cmp	r3, #2
 8009aaa:	d901      	bls.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009aac:	2303      	movs	r3, #3
 8009aae:	e107      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009ab0:	4b49      	ldr	r3, [pc, #292]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009ab8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009abc:	d0ef      	beq.n	8009a9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 0304 	and.w	r3, r3, #4
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d020      	beq.n	8009b0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009aca:	4b43      	ldr	r3, [pc, #268]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad0:	0f1b      	lsrs	r3, r3, #28
 8009ad2:	f003 0307 	and.w	r3, r3, #7
 8009ad6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	691b      	ldr	r3, [r3, #16]
 8009adc:	019a      	lsls	r2, r3, #6
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	061b      	lsls	r3, r3, #24
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	071b      	lsls	r3, r3, #28
 8009aea:	493b      	ldr	r1, [pc, #236]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009aec:	4313      	orrs	r3, r2
 8009aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009af2:	4b39      	ldr	r3, [pc, #228]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009af8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6a1b      	ldr	r3, [r3, #32]
 8009b00:	3b01      	subs	r3, #1
 8009b02:	021b      	lsls	r3, r3, #8
 8009b04:	4934      	ldr	r1, [pc, #208]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b06:	4313      	orrs	r3, r2
 8009b08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f003 0308 	and.w	r3, r3, #8
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d01e      	beq.n	8009b56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009b18:	4b2f      	ldr	r3, [pc, #188]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1e:	0e1b      	lsrs	r3, r3, #24
 8009b20:	f003 030f 	and.w	r3, r3, #15
 8009b24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	691b      	ldr	r3, [r3, #16]
 8009b2a:	019a      	lsls	r2, r3, #6
 8009b2c:	693b      	ldr	r3, [r7, #16]
 8009b2e:	061b      	lsls	r3, r3, #24
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	699b      	ldr	r3, [r3, #24]
 8009b36:	071b      	lsls	r3, r3, #28
 8009b38:	4927      	ldr	r1, [pc, #156]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009b40:	4b25      	ldr	r3, [pc, #148]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009b46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4e:	4922      	ldr	r1, [pc, #136]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b50:	4313      	orrs	r3, r2
 8009b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009b56:	4b21      	ldr	r3, [pc, #132]	; (8009bdc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8009b58:	2201      	movs	r2, #1
 8009b5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009b5c:	f7fc fd1c 	bl	8006598 <HAL_GetTick>
 8009b60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b62:	e008      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8009b64:	f7fc fd18 	bl	8006598 <HAL_GetTick>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	1ad3      	subs	r3, r2, r3
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d901      	bls.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b72:	2303      	movs	r3, #3
 8009b74:	e0a4      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009b76:	4b18      	ldr	r3, [pc, #96]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b82:	d1ef      	bne.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f003 0320 	and.w	r3, r3, #32
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	f000 808b 	beq.w	8009ca8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009b92:	2300      	movs	r3, #0
 8009b94:	60fb      	str	r3, [r7, #12]
 8009b96:	4b10      	ldr	r3, [pc, #64]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	4a0f      	ldr	r2, [pc, #60]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ba0:	6413      	str	r3, [r2, #64]	; 0x40
 8009ba2:	4b0d      	ldr	r3, [pc, #52]	; (8009bd8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8009ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009baa:	60fb      	str	r3, [r7, #12]
 8009bac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009bae:	4b0c      	ldr	r3, [pc, #48]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a0b      	ldr	r2, [pc, #44]	; (8009be0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8009bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009bba:	f7fc fced 	bl	8006598 <HAL_GetTick>
 8009bbe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009bc0:	e010      	b.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009bc2:	f7fc fce9 	bl	8006598 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	697b      	ldr	r3, [r7, #20]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d909      	bls.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e075      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8009bd4:	42470068 	.word	0x42470068
 8009bd8:	40023800 	.word	0x40023800
 8009bdc:	42470070 	.word	0x42470070
 8009be0:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009be4:	4b38      	ldr	r3, [pc, #224]	; (8009cc8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d0e8      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009bf0:	4b36      	ldr	r3, [pc, #216]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009bf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bf8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d02f      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c08:	693a      	ldr	r2, [r7, #16]
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d028      	beq.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009c0e:	4b2f      	ldr	r3, [pc, #188]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c16:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009c18:	4b2d      	ldr	r3, [pc, #180]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009c1a:	2201      	movs	r2, #1
 8009c1c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009c1e:	4b2c      	ldr	r3, [pc, #176]	; (8009cd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8009c20:	2200      	movs	r2, #0
 8009c22:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009c24:	4a29      	ldr	r2, [pc, #164]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009c2a:	4b28      	ldr	r3, [pc, #160]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d114      	bne.n	8009c60 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009c36:	f7fc fcaf 	bl	8006598 <HAL_GetTick>
 8009c3a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c3c:	e00a      	b.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c3e:	f7fc fcab 	bl	8006598 <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d901      	bls.n	8009c54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8009c50:	2303      	movs	r3, #3
 8009c52:	e035      	b.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009c54:	4b1d      	ldr	r3, [pc, #116]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c58:	f003 0302 	and.w	r3, r3, #2
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d0ee      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009c68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009c6c:	d10d      	bne.n	8009c8a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8009c6e:	4b17      	ldr	r3, [pc, #92]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c70:	689b      	ldr	r3, [r3, #8]
 8009c72:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009c7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c82:	4912      	ldr	r1, [pc, #72]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c84:	4313      	orrs	r3, r2
 8009c86:	608b      	str	r3, [r1, #8]
 8009c88:	e005      	b.n	8009c96 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8009c8a:	4b10      	ldr	r3, [pc, #64]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c8c:	689b      	ldr	r3, [r3, #8]
 8009c8e:	4a0f      	ldr	r2, [pc, #60]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c90:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009c94:	6093      	str	r3, [r2, #8]
 8009c96:	4b0d      	ldr	r3, [pc, #52]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009c98:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ca2:	490a      	ldr	r1, [pc, #40]	; (8009ccc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f003 0310 	and.w	r3, r3, #16
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d004      	beq.n	8009cbe <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8009cba:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8009cbc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	40007000 	.word	0x40007000
 8009ccc:	40023800 	.word	0x40023800
 8009cd0:	42470e40 	.word	0x42470e40
 8009cd4:	424711e0 	.word	0x424711e0

08009cd8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009cec:	2300      	movs	r3, #0
 8009cee:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d13e      	bne.n	8009d74 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8009cf6:	4b23      	ldr	r3, [pc, #140]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cfe:	60fb      	str	r3, [r7, #12]
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d005      	beq.n	8009d12 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d12f      	bne.n	8009d6c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009d0c:	4b1e      	ldr	r3, [pc, #120]	; (8009d88 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009d0e:	617b      	str	r3, [r7, #20]
          break;
 8009d10:	e02f      	b.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009d12:	4b1c      	ldr	r3, [pc, #112]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d14:	685b      	ldr	r3, [r3, #4]
 8009d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009d1e:	d108      	bne.n	8009d32 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d20:	4b18      	ldr	r3, [pc, #96]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d28:	4a18      	ldr	r2, [pc, #96]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d2e:	613b      	str	r3, [r7, #16]
 8009d30:	e007      	b.n	8009d42 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009d32:	4b14      	ldr	r3, [pc, #80]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009d3a:	4a15      	ldr	r2, [pc, #84]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d40:	613b      	str	r3, [r7, #16]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009d42:	4b10      	ldr	r3, [pc, #64]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d48:	099b      	lsrs	r3, r3, #6
 8009d4a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	fb02 f303 	mul.w	r3, r2, r3
 8009d54:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8009d56:	4b0b      	ldr	r3, [pc, #44]	; (8009d84 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8009d58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d5c:	0f1b      	lsrs	r3, r3, #28
 8009d5e:	f003 0307 	and.w	r3, r3, #7
 8009d62:	68ba      	ldr	r2, [r7, #8]
 8009d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d68:	617b      	str	r3, [r7, #20]
          break;
 8009d6a:	e002      	b.n	8009d72 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	617b      	str	r3, [r7, #20]
          break;
 8009d70:	bf00      	nop
        }
      }
      break;
 8009d72:	bf00      	nop
    }
  }
  return frequency;
 8009d74:	697b      	ldr	r3, [r7, #20]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	371c      	adds	r7, #28
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	40023800 	.word	0x40023800
 8009d88:	00bb8000 	.word	0x00bb8000
 8009d8c:	007a1200 	.word	0x007a1200
 8009d90:	00f42400 	.word	0x00f42400

08009d94 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d101      	bne.n	8009daa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	e066      	b.n	8009e78 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	7f5b      	ldrb	r3, [r3, #29]
 8009dae:	b2db      	uxtb	r3, r3
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d105      	bne.n	8009dc0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2200      	movs	r2, #0
 8009db8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fb fe5e 	bl	8005a7c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2202      	movs	r2, #2
 8009dc4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	22ca      	movs	r2, #202	; 0xca
 8009dcc:	625a      	str	r2, [r3, #36]	; 0x24
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	2253      	movs	r2, #83	; 0x53
 8009dd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 fbce 	bl	800a578 <RTC_EnterInitMode>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8009de0:	7bfb      	ldrb	r3, [r7, #15]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d12c      	bne.n	8009e40 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	689b      	ldr	r3, [r3, #8]
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	6812      	ldr	r2, [r2, #0]
 8009df0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009df4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009df8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	6899      	ldr	r1, [r3, #8]
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685a      	ldr	r2, [r3, #4]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	687a      	ldr	r2, [r7, #4]
 8009e1e:	68d2      	ldr	r2, [r2, #12]
 8009e20:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	6919      	ldr	r1, [r3, #16]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	041a      	lsls	r2, r3, #16
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	430a      	orrs	r2, r1
 8009e34:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	f000 fbd5 	bl	800a5e6 <RTC_ExitInitMode>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d113      	bne.n	8009e6e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e54:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	699a      	ldr	r2, [r3, #24]
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2201      	movs	r2, #1
 8009e6c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	22ff      	movs	r2, #255	; 0xff
 8009e74:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8009e76:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e80:	b590      	push	{r4, r7, lr}
 8009e82:	b087      	sub	sp, #28
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	60f8      	str	r0, [r7, #12]
 8009e88:	60b9      	str	r1, [r7, #8]
 8009e8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	7f1b      	ldrb	r3, [r3, #28]
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d101      	bne.n	8009e9c <HAL_RTC_SetTime+0x1c>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	e087      	b.n	8009fac <HAL_RTC_SetTime+0x12c>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	2202      	movs	r2, #2
 8009ea6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d126      	bne.n	8009efc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d102      	bne.n	8009ec2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009ebc:	68bb      	ldr	r3, [r7, #8]
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f000 fbb2 	bl	800a630 <RTC_ByteToBcd2>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 fbab 	bl	800a630 <RTC_ByteToBcd2>
 8009eda:	4603      	mov	r3, r0
 8009edc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ede:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	789b      	ldrb	r3, [r3, #2]
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f000 fba3 	bl	800a630 <RTC_ByteToBcd2>
 8009eea:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8009eec:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	78db      	ldrb	r3, [r3, #3]
 8009ef4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	617b      	str	r3, [r7, #20]
 8009efa:	e018      	b.n	8009f2e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d102      	bne.n	8009f10 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	781b      	ldrb	r3, [r3, #0]
 8009f14:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	785b      	ldrb	r3, [r3, #1]
 8009f1a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f1c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8009f22:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	78db      	ldrb	r3, [r3, #3]
 8009f28:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8009f2a:	4313      	orrs	r3, r2
 8009f2c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	22ca      	movs	r2, #202	; 0xca
 8009f34:	625a      	str	r2, [r3, #36]	; 0x24
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	2253      	movs	r2, #83	; 0x53
 8009f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009f3e:	68f8      	ldr	r0, [r7, #12]
 8009f40:	f000 fb1a 	bl	800a578 <RTC_EnterInitMode>
 8009f44:	4603      	mov	r3, r0
 8009f46:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8009f48:	7cfb      	ldrb	r3, [r7, #19]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d120      	bne.n	8009f90 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009f58:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009f5c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	689a      	ldr	r2, [r3, #8]
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	6899      	ldr	r1, [r3, #8]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	68da      	ldr	r2, [r3, #12]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8009f86:	68f8      	ldr	r0, [r7, #12]
 8009f88:	f000 fb2d 	bl	800a5e6 <RTC_ExitInitMode>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8009f90:	7cfb      	ldrb	r3, [r7, #19]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d102      	bne.n	8009f9c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	22ff      	movs	r2, #255	; 0xff
 8009fa2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	771a      	strb	r2, [r3, #28]

  return status;
 8009faa:	7cfb      	ldrb	r3, [r7, #19]
}
 8009fac:	4618      	mov	r0, r3
 8009fae:	371c      	adds	r7, #28
 8009fb0:	46bd      	mov	sp, r7
 8009fb2:	bd90      	pop	{r4, r7, pc}

08009fb4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b086      	sub	sp, #24
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	60f8      	str	r0, [r7, #12]
 8009fbc:	60b9      	str	r1, [r7, #8]
 8009fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009fe6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009fea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	0c1b      	lsrs	r3, r3, #16
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ff6:	b2da      	uxtb	r2, r3
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8009ffc:	697b      	ldr	r3, [r7, #20]
 8009ffe:	0a1b      	lsrs	r3, r3, #8
 800a000:	b2db      	uxtb	r3, r3
 800a002:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a006:	b2da      	uxtb	r2, r3
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a014:	b2da      	uxtb	r2, r3
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	0d9b      	lsrs	r3, r3, #22
 800a01e:	b2db      	uxtb	r3, r3
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	b2da      	uxtb	r2, r3
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d11a      	bne.n	800a066 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	781b      	ldrb	r3, [r3, #0]
 800a034:	4618      	mov	r0, r3
 800a036:	f000 fb18 	bl	800a66a <RTC_Bcd2ToByte>
 800a03a:	4603      	mov	r3, r0
 800a03c:	461a      	mov	r2, r3
 800a03e:	68bb      	ldr	r3, [r7, #8]
 800a040:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	785b      	ldrb	r3, [r3, #1]
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fb0f 	bl	800a66a <RTC_Bcd2ToByte>
 800a04c:	4603      	mov	r3, r0
 800a04e:	461a      	mov	r2, r3
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a054:	68bb      	ldr	r3, [r7, #8]
 800a056:	789b      	ldrb	r3, [r3, #2]
 800a058:	4618      	mov	r0, r3
 800a05a:	f000 fb06 	bl	800a66a <RTC_Bcd2ToByte>
 800a05e:	4603      	mov	r3, r0
 800a060:	461a      	mov	r2, r3
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3718      	adds	r7, #24
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a070:	b590      	push	{r4, r7, lr}
 800a072:	b087      	sub	sp, #28
 800a074:	af00      	add	r7, sp, #0
 800a076:	60f8      	str	r0, [r7, #12]
 800a078:	60b9      	str	r1, [r7, #8]
 800a07a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	7f1b      	ldrb	r3, [r3, #28]
 800a084:	2b01      	cmp	r3, #1
 800a086:	d101      	bne.n	800a08c <HAL_RTC_SetDate+0x1c>
 800a088:	2302      	movs	r3, #2
 800a08a:	e071      	b.n	800a170 <HAL_RTC_SetDate+0x100>
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2201      	movs	r2, #1
 800a090:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	2202      	movs	r2, #2
 800a096:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d10e      	bne.n	800a0bc <HAL_RTC_SetDate+0x4c>
 800a09e:	68bb      	ldr	r3, [r7, #8]
 800a0a0:	785b      	ldrb	r3, [r3, #1]
 800a0a2:	f003 0310 	and.w	r3, r3, #16
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d008      	beq.n	800a0bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	785b      	ldrb	r3, [r3, #1]
 800a0ae:	f023 0310 	bic.w	r3, r3, #16
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	330a      	adds	r3, #10
 800a0b6:	b2da      	uxtb	r2, r3
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d11c      	bne.n	800a0fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	78db      	ldrb	r3, [r3, #3]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	f000 fab2 	bl	800a630 <RTC_ByteToBcd2>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	785b      	ldrb	r3, [r3, #1]
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 faab 	bl	800a630 <RTC_ByteToBcd2>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a0de:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800a0e0:	68bb      	ldr	r3, [r7, #8]
 800a0e2:	789b      	ldrb	r3, [r3, #2]
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f000 faa3 	bl	800a630 <RTC_ByteToBcd2>
 800a0ea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800a0ec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	617b      	str	r3, [r7, #20]
 800a0fa:	e00e      	b.n	800a11a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	78db      	ldrb	r3, [r3, #3]
 800a100:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	785b      	ldrb	r3, [r3, #1]
 800a106:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a108:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800a10a:	68ba      	ldr	r2, [r7, #8]
 800a10c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800a10e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800a110:	68bb      	ldr	r3, [r7, #8]
 800a112:	781b      	ldrb	r3, [r3, #0]
 800a114:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	22ca      	movs	r2, #202	; 0xca
 800a120:	625a      	str	r2, [r3, #36]	; 0x24
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2253      	movs	r2, #83	; 0x53
 800a128:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	f000 fa24 	bl	800a578 <RTC_EnterInitMode>
 800a130:	4603      	mov	r3, r0
 800a132:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800a134:	7cfb      	ldrb	r3, [r7, #19]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d10c      	bne.n	800a154 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a144:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a148:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a14a:	68f8      	ldr	r0, [r7, #12]
 800a14c:	f000 fa4b 	bl	800a5e6 <RTC_ExitInitMode>
 800a150:	4603      	mov	r3, r0
 800a152:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800a154:	7cfb      	ldrb	r3, [r7, #19]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d102      	bne.n	800a160 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2201      	movs	r2, #1
 800a15e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	22ff      	movs	r2, #255	; 0xff
 800a166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	2200      	movs	r2, #0
 800a16c:	771a      	strb	r2, [r3, #28]

  return status;
 800a16e:	7cfb      	ldrb	r3, [r7, #19]
}
 800a170:	4618      	mov	r0, r3
 800a172:	371c      	adds	r7, #28
 800a174:	46bd      	mov	sp, r7
 800a176:	bd90      	pop	{r4, r7, pc}

0800a178 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a178:	b580      	push	{r7, lr}
 800a17a:	b086      	sub	sp, #24
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	60f8      	str	r0, [r7, #12]
 800a180:	60b9      	str	r1, [r7, #8]
 800a182:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a192:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a196:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	0c1b      	lsrs	r3, r3, #16
 800a19c:	b2da      	uxtb	r2, r3
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	0a1b      	lsrs	r3, r3, #8
 800a1a6:	b2db      	uxtb	r3, r3
 800a1a8:	f003 031f 	and.w	r3, r3, #31
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a1b2:	697b      	ldr	r3, [r7, #20]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ba:	b2da      	uxtb	r2, r3
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	0b5b      	lsrs	r3, r3, #13
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	f003 0307 	and.w	r3, r3, #7
 800a1ca:	b2da      	uxtb	r2, r3
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d11a      	bne.n	800a20c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	78db      	ldrb	r3, [r3, #3]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f000 fa45 	bl	800a66a <RTC_Bcd2ToByte>
 800a1e0:	4603      	mov	r3, r0
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	785b      	ldrb	r3, [r3, #1]
 800a1ec:	4618      	mov	r0, r3
 800a1ee:	f000 fa3c 	bl	800a66a <RTC_Bcd2ToByte>
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	68bb      	ldr	r3, [r7, #8]
 800a1f8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	789b      	ldrb	r3, [r3, #2]
 800a1fe:	4618      	mov	r0, r3
 800a200:	f000 fa33 	bl	800a66a <RTC_Bcd2ToByte>
 800a204:	4603      	mov	r3, r0
 800a206:	461a      	mov	r2, r3
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a20c:	2300      	movs	r3, #0
}
 800a20e:	4618      	mov	r0, r3
 800a210:	3718      	adds	r7, #24
 800a212:	46bd      	mov	sp, r7
 800a214:	bd80      	pop	{r7, pc}
	...

0800a218 <HAL_RTC_SetAlarm_IT>:
  *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
  * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a218:	b590      	push	{r4, r7, lr}
 800a21a:	b089      	sub	sp, #36	; 0x24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
  __IO uint32_t count  = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800a224:	4b9a      	ldr	r3, [pc, #616]	; (800a490 <HAL_RTC_SetAlarm_IT+0x278>)
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	4a9a      	ldr	r2, [pc, #616]	; (800a494 <HAL_RTC_SetAlarm_IT+0x27c>)
 800a22a:	fba2 2303 	umull	r2, r3, r2, r3
 800a22e:	0adb      	lsrs	r3, r3, #11
 800a230:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a234:	fb02 f303 	mul.w	r3, r2, r3
 800a238:	617b      	str	r3, [r7, #20]
       uint32_t tmpreg = 0U;
 800a23a:	2300      	movs	r3, #0
 800a23c:	61fb      	str	r3, [r7, #28]
       uint32_t subsecondtmpreg = 0U;
 800a23e:	2300      	movs	r3, #0
 800a240:	61bb      	str	r3, [r7, #24]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	7f1b      	ldrb	r3, [r3, #28]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d101      	bne.n	800a24e <HAL_RTC_SetAlarm_IT+0x36>
 800a24a:	2302      	movs	r3, #2
 800a24c:	e11c      	b.n	800a488 <HAL_RTC_SetAlarm_IT+0x270>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	2201      	movs	r2, #1
 800a252:	771a      	strb	r2, [r3, #28]

  /* Change RTC state to BUSY */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2202      	movs	r2, #2
 800a258:	775a      	strb	r2, [r3, #29]

  /* Check the data format (binary or BCD) and store the Alarm time and date
     configuration accordingly */
  if (Format == RTC_FORMAT_BIN)
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d137      	bne.n	800a2d0 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d102      	bne.n	800a274 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a26e:	68bb      	ldr	r3, [r7, #8]
 800a270:	2200      	movs	r2, #0
 800a272:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	4618      	mov	r0, r3
 800a27a:	f000 f9d9 	bl	800a630 <RTC_ByteToBcd2>
 800a27e:	4603      	mov	r3, r0
 800a280:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a282:	68bb      	ldr	r3, [r7, #8]
 800a284:	785b      	ldrb	r3, [r3, #1]
 800a286:	4618      	mov	r0, r3
 800a288:	f000 f9d2 	bl	800a630 <RTC_ByteToBcd2>
 800a28c:	4603      	mov	r3, r0
 800a28e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a290:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a292:	68bb      	ldr	r3, [r7, #8]
 800a294:	789b      	ldrb	r3, [r3, #2]
 800a296:	4618      	mov	r0, r3
 800a298:	f000 f9ca 	bl	800a630 <RTC_ByteToBcd2>
 800a29c:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800a29e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a2a2:	68bb      	ldr	r3, [r7, #8]
 800a2a4:	78db      	ldrb	r3, [r3, #3]
 800a2a6:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds))                       | \
 800a2a8:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a2ac:	68bb      	ldr	r3, [r7, #8]
 800a2ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 f9bc 	bl	800a630 <RTC_ByteToBcd2>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat)            << RTC_TR_PM_Pos)      | \
 800a2bc:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 800a2c4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	61fb      	str	r3, [r7, #28]
 800a2ce:	e023      	b.n	800a318 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d102      	bne.n	800a2e4 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	781b      	ldrb	r3, [r3, #0]
 800a2e8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	785b      	ldrb	r3, [r3, #1]
 800a2ee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a2f0:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a2f2:	68ba      	ldr	r2, [r7, #8]
 800a2f4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes)    << RTC_ALRMAR_MNU_Pos) | \
 800a2f6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a2f8:	68bb      	ldr	r3, [r7, #8]
 800a2fa:	78db      	ldrb	r3, [r3, #3]
 800a2fc:	059b      	lsls	r3, r3, #22
              ((uint32_t) sAlarm->AlarmTime.Seconds)                           | \
 800a2fe:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a300:	68bb      	ldr	r3, [r7, #8]
 800a302:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a306:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_TR_PM_Pos)      | \
 800a308:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmDateWeekDaySel)                         | \
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay)     << RTC_ALRMAR_DU_Pos)  | \
 800a30e:	431a      	orrs	r2, r3
              ((uint32_t) sAlarm->AlarmMask));
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours)      << RTC_ALRMAR_HU_Pos)  | \
 800a314:	4313      	orrs	r3, r2
 800a316:	61fb      	str	r3, [r7, #28]
  }

  /* Store the Alarm subseconds configuration */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	685a      	ldr	r2, [r3, #4]
                               (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	699b      	ldr	r3, [r3, #24]
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | \
 800a320:	4313      	orrs	r3, r2
 800a322:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	22ca      	movs	r2, #202	; 0xca
 800a32a:	625a      	str	r2, [r3, #36]	; 0x24
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	2253      	movs	r2, #83	; 0x53
 800a332:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800a334:	68bb      	ldr	r3, [r7, #8]
 800a336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a338:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a33c:	d141      	bne.n	800a3c2 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a34c:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	68db      	ldr	r3, [r3, #12]
 800a354:	b2da      	uxtb	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a35e:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800a360:	697b      	ldr	r3, [r7, #20]
 800a362:	1e5a      	subs	r2, r3, #1
 800a364:	617a      	str	r2, [r7, #20]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d10b      	bne.n	800a382 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	22ff      	movs	r2, #255	; 0xff
 800a370:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2203      	movs	r2, #3
 800a376:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a37e:	2303      	movs	r3, #3
 800a380:	e082      	b.n	800a488 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68db      	ldr	r3, [r3, #12]
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d0e7      	beq.n	800a360 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	69fa      	ldr	r2, [r7, #28]
 800a396:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Subseconds register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	69ba      	ldr	r2, [r7, #24]
 800a39e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a3ae:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	689a      	ldr	r2, [r3, #8]
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3be:	609a      	str	r2, [r3, #8]
 800a3c0:	e04b      	b.n	800a45a <HAL_RTC_SetAlarm_IT+0x242>
  }
  else
  {
    /* Disable the Alarm B */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	689a      	ldr	r2, [r3, #8]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a3d0:	609a      	str	r2, [r3, #8]

    /* Clear the Alarm flag */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68db      	ldr	r3, [r3, #12]
 800a3d8:	b2da      	uxtb	r2, r3
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a3e2:	60da      	str	r2, [r3, #12]

    /* Reload the counter */
    count = RTC_TIMEOUT_VALUE * (SystemCoreClock / 32U / 1000U);
 800a3e4:	4b2a      	ldr	r3, [pc, #168]	; (800a490 <HAL_RTC_SetAlarm_IT+0x278>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a2a      	ldr	r2, [pc, #168]	; (800a494 <HAL_RTC_SetAlarm_IT+0x27c>)
 800a3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ee:	0adb      	lsrs	r3, r3, #11
 800a3f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a3f4:	fb02 f303 	mul.w	r3, r2, r3
 800a3f8:	617b      	str	r3, [r7, #20]

    /* Wait till RTC ALRBWF flag is set and if timeout is reached exit */
    do
    {
      if (count-- == 0U)
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	1e5a      	subs	r2, r3, #1
 800a3fe:	617a      	str	r2, [r7, #20]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d10b      	bne.n	800a41c <HAL_RTC_SetAlarm_IT+0x204>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	22ff      	movs	r2, #255	; 0xff
 800a40a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	2203      	movs	r2, #3
 800a410:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	2200      	movs	r2, #0
 800a416:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e035      	b.n	800a488 <HAL_RTC_SetAlarm_IT+0x270>
      }
    } while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	68db      	ldr	r3, [r3, #12]
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d0e7      	beq.n	800a3fa <HAL_RTC_SetAlarm_IT+0x1e2>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	69fa      	ldr	r2, [r7, #28]
 800a430:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Subseconds register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	69ba      	ldr	r2, [r7, #24]
 800a438:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a448:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689a      	ldr	r2, [r3, #8]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a458:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800a45a:	4b0f      	ldr	r3, [pc, #60]	; (800a498 <HAL_RTC_SetAlarm_IT+0x280>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	4a0e      	ldr	r2, [pc, #56]	; (800a498 <HAL_RTC_SetAlarm_IT+0x280>)
 800a460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a464:	6013      	str	r3, [r2, #0]
  __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
 800a466:	4b0c      	ldr	r3, [pc, #48]	; (800a498 <HAL_RTC_SetAlarm_IT+0x280>)
 800a468:	689b      	ldr	r3, [r3, #8]
 800a46a:	4a0b      	ldr	r2, [pc, #44]	; (800a498 <HAL_RTC_SetAlarm_IT+0x280>)
 800a46c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a470:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	22ff      	movs	r2, #255	; 0xff
 800a478:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state back to READY */
  hrtc->State = HAL_RTC_STATE_READY;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2201      	movs	r2, #1
 800a47e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a486:	2300      	movs	r3, #0
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3724      	adds	r7, #36	; 0x24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd90      	pop	{r4, r7, pc}
 800a490:	2000000c 	.word	0x2000000c
 800a494:	10624dd3 	.word	0x10624dd3
 800a498:	40013c00 	.word	0x40013c00

0800a49c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b082      	sub	sp, #8
 800a4a0:	af00      	add	r7, sp, #0
 800a4a2:	6078      	str	r0, [r7, #4]
  /* Get the Alarm A interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d012      	beq.n	800a4d8 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the Alarm A Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00b      	beq.n	800a4d8 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* Alarm A callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
#else
      HAL_RTC_AlarmAEventCallback(hrtc);
 800a4c0:	6878      	ldr	r0, [r7, #4]
 800a4c2:	f7fa fd3f 	bl	8004f44 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm A interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	b2da      	uxtb	r2, r3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800a4d6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the Alarm B interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	689b      	ldr	r3, [r3, #8]
 800a4de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d012      	beq.n	800a50c <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the Alarm B Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	68db      	ldr	r3, [r3, #12]
 800a4ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d00b      	beq.n	800a50c <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* Alarm B callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
#else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 800a4f4:	6878      	ldr	r0, [r7, #4]
 800a4f6:	f000 f8d4 	bl	800a6a2 <HAL_RTCEx_AlarmBEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the Alarm B interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	68db      	ldr	r3, [r3, #12]
 800a500:	b2da      	uxtb	r2, r3
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f462 7220 	orn	r2, r2, #640	; 0x280
 800a50a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 800a50c:	4b05      	ldr	r3, [pc, #20]	; (800a524 <HAL_RTC_AlarmIRQHandler+0x88>)
 800a50e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a512:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2201      	movs	r2, #1
 800a518:	775a      	strb	r2, [r3, #29]
}
 800a51a:	bf00      	nop
 800a51c:	3708      	adds	r7, #8
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	40013c00 	.word	0x40013c00

0800a528 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a530:	2300      	movs	r3, #0
 800a532:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	68da      	ldr	r2, [r3, #12]
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a542:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a544:	f7fc f828 	bl	8006598 <HAL_GetTick>
 800a548:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a54a:	e009      	b.n	800a560 <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a54c:	f7fc f824 	bl	8006598 <HAL_GetTick>
 800a550:	4602      	mov	r2, r0
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	1ad3      	subs	r3, r2, r3
 800a556:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a55a:	d901      	bls.n	800a560 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a55c:	2303      	movs	r3, #3
 800a55e:	e007      	b.n	800a570 <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f003 0320 	and.w	r3, r3, #32
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d0ee      	beq.n	800a54c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a578:	b580      	push	{r7, lr}
 800a57a:	b084      	sub	sp, #16
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a580:	2300      	movs	r3, #0
 800a582:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a592:	2b00      	cmp	r3, #0
 800a594:	d122      	bne.n	800a5dc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68da      	ldr	r2, [r3, #12]
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a5a4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a5a6:	f7fb fff7 	bl	8006598 <HAL_GetTick>
 800a5aa:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a5ac:	e00c      	b.n	800a5c8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a5ae:	f7fb fff3 	bl	8006598 <HAL_GetTick>
 800a5b2:	4602      	mov	r2, r0
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	1ad3      	subs	r3, r2, r3
 800a5b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a5bc:	d904      	bls.n	800a5c8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	2204      	movs	r2, #4
 800a5c2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800a5c4:	2301      	movs	r3, #1
 800a5c6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d102      	bne.n	800a5dc <RTC_EnterInitMode+0x64>
 800a5d6:	7bfb      	ldrb	r3, [r7, #15]
 800a5d8:	2b01      	cmp	r3, #1
 800a5da:	d1e8      	bne.n	800a5ae <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800a5dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	68da      	ldr	r2, [r3, #12]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a600:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f003 0320 	and.w	r3, r3, #32
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d10a      	bne.n	800a626 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	f7ff ff89 	bl	800a528 <HAL_RTC_WaitForSynchro>
 800a616:	4603      	mov	r3, r0
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d004      	beq.n	800a626 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2204      	movs	r2, #4
 800a620:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800a622:	2301      	movs	r3, #1
 800a624:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800a626:	7bfb      	ldrb	r3, [r7, #15]
}
 800a628:	4618      	mov	r0, r3
 800a62a:	3710      	adds	r7, #16
 800a62c:	46bd      	mov	sp, r7
 800a62e:	bd80      	pop	{r7, pc}

0800a630 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800a630:	b480      	push	{r7}
 800a632:	b085      	sub	sp, #20
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800a63e:	e005      	b.n	800a64c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a640:	7bfb      	ldrb	r3, [r7, #15]
 800a642:	3301      	adds	r3, #1
 800a644:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 800a646:	79fb      	ldrb	r3, [r7, #7]
 800a648:	3b0a      	subs	r3, #10
 800a64a:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	2b09      	cmp	r3, #9
 800a650:	d8f6      	bhi.n	800a640 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800a652:	7bfb      	ldrb	r3, [r7, #15]
 800a654:	011b      	lsls	r3, r3, #4
 800a656:	b2da      	uxtb	r2, r3
 800a658:	79fb      	ldrb	r3, [r7, #7]
 800a65a:	4313      	orrs	r3, r2
 800a65c:	b2db      	uxtb	r3, r3
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3714      	adds	r7, #20
 800a662:	46bd      	mov	sp, r7
 800a664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a668:	4770      	bx	lr

0800a66a <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800a66a:	b480      	push	{r7}
 800a66c:	b085      	sub	sp, #20
 800a66e:	af00      	add	r7, sp, #0
 800a670:	4603      	mov	r3, r0
 800a672:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 800a674:	2300      	movs	r3, #0
 800a676:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	091b      	lsrs	r3, r3, #4
 800a67c:	b2db      	uxtb	r3, r3
 800a67e:	461a      	mov	r2, r3
 800a680:	0092      	lsls	r2, r2, #2
 800a682:	4413      	add	r3, r2
 800a684:	005b      	lsls	r3, r3, #1
 800a686:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 800a688:	79fb      	ldrb	r3, [r7, #7]
 800a68a:	f003 030f 	and.w	r3, r3, #15
 800a68e:	b2da      	uxtb	r2, r3
 800a690:	7bfb      	ldrb	r3, [r7, #15]
 800a692:	4413      	add	r3, r2
 800a694:	b2db      	uxtb	r3, r3
}
 800a696:	4618      	mov	r0, r3
 800a698:	3714      	adds	r7, #20
 800a69a:	46bd      	mov	sp, r7
 800a69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a0:	4770      	bx	lr

0800a6a2 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 800a6a2:	b480      	push	{r7}
 800a6a4:	b083      	sub	sp, #12
 800a6a6:	af00      	add	r7, sp, #0
 800a6a8:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 800a6aa:	bf00      	nop
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b082      	sub	sp, #8
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e07b      	b.n	800a7c0 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d108      	bne.n	800a6e2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a6d8:	d009      	beq.n	800a6ee <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	61da      	str	r2, [r3, #28]
 800a6e0:	e005      	b.n	800a6ee <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a6fa:	b2db      	uxtb	r3, r3
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d106      	bne.n	800a70e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2200      	movs	r2, #0
 800a704:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7fb f9e9 	bl	8005ae0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2202      	movs	r2, #2
 800a712:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a724:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	689b      	ldr	r3, [r3, #8]
 800a732:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a736:	431a      	orrs	r2, r3
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	68db      	ldr	r3, [r3, #12]
 800a73c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a740:	431a      	orrs	r2, r3
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	691b      	ldr	r3, [r3, #16]
 800a746:	f003 0302 	and.w	r3, r3, #2
 800a74a:	431a      	orrs	r2, r3
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	695b      	ldr	r3, [r3, #20]
 800a750:	f003 0301 	and.w	r3, r3, #1
 800a754:	431a      	orrs	r2, r3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	699b      	ldr	r3, [r3, #24]
 800a75a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a75e:	431a      	orrs	r2, r3
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	69db      	ldr	r3, [r3, #28]
 800a764:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a768:	431a      	orrs	r2, r3
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6a1b      	ldr	r3, [r3, #32]
 800a76e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a772:	ea42 0103 	orr.w	r1, r2, r3
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a77a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	430a      	orrs	r2, r1
 800a784:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	699b      	ldr	r3, [r3, #24]
 800a78a:	0c1b      	lsrs	r3, r3, #16
 800a78c:	f003 0104 	and.w	r1, r3, #4
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	f003 0210 	and.w	r2, r3, #16
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	430a      	orrs	r2, r1
 800a79e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	69da      	ldr	r2, [r3, #28]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a7ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	2201      	movs	r2, #1
 800a7ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a7be:	2300      	movs	r3, #0
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3708      	adds	r7, #8
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b088      	sub	sp, #32
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	60f8      	str	r0, [r7, #12]
 800a7d0:	60b9      	str	r1, [r7, #8]
 800a7d2:	603b      	str	r3, [r7, #0]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d101      	bne.n	800a7ea <HAL_SPI_Transmit+0x22>
 800a7e6:	2302      	movs	r3, #2
 800a7e8:	e126      	b.n	800aa38 <HAL_SPI_Transmit+0x270>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	2201      	movs	r2, #1
 800a7ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a7f2:	f7fb fed1 	bl	8006598 <HAL_GetTick>
 800a7f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a7f8:	88fb      	ldrh	r3, [r7, #6]
 800a7fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b01      	cmp	r3, #1
 800a806:	d002      	beq.n	800a80e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a808:	2302      	movs	r3, #2
 800a80a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a80c:	e10b      	b.n	800aa26 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d002      	beq.n	800a81a <HAL_SPI_Transmit+0x52>
 800a814:	88fb      	ldrh	r3, [r7, #6]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d102      	bne.n	800a820 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a81a:	2301      	movs	r3, #1
 800a81c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a81e:	e102      	b.n	800aa26 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2203      	movs	r2, #3
 800a824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	68ba      	ldr	r2, [r7, #8]
 800a832:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	88fa      	ldrh	r2, [r7, #6]
 800a838:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	88fa      	ldrh	r2, [r7, #6]
 800a83e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	2200      	movs	r2, #0
 800a844:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	2200      	movs	r2, #0
 800a84a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2200      	movs	r2, #0
 800a850:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	2200      	movs	r2, #0
 800a856:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2200      	movs	r2, #0
 800a85c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a866:	d10f      	bne.n	800a888 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	681a      	ldr	r2, [r3, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a876:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	681a      	ldr	r2, [r3, #0]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a886:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a892:	2b40      	cmp	r3, #64	; 0x40
 800a894:	d007      	beq.n	800a8a6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8ae:	d14b      	bne.n	800a948 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	685b      	ldr	r3, [r3, #4]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <HAL_SPI_Transmit+0xf6>
 800a8b8:	8afb      	ldrh	r3, [r7, #22]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d13e      	bne.n	800a93c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c2:	881a      	ldrh	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	1c9a      	adds	r2, r3, #2
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8d8:	b29b      	uxth	r3, r3
 800a8da:	3b01      	subs	r3, #1
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a8e2:	e02b      	b.n	800a93c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f003 0302 	and.w	r3, r3, #2
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d112      	bne.n	800a918 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8f6:	881a      	ldrh	r2, [r3, #0]
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a902:	1c9a      	adds	r2, r3, #2
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a90c:	b29b      	uxth	r3, r3
 800a90e:	3b01      	subs	r3, #1
 800a910:	b29a      	uxth	r2, r3
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	86da      	strh	r2, [r3, #54]	; 0x36
 800a916:	e011      	b.n	800a93c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a918:	f7fb fe3e 	bl	8006598 <HAL_GetTick>
 800a91c:	4602      	mov	r2, r0
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	429a      	cmp	r2, r3
 800a926:	d803      	bhi.n	800a930 <HAL_SPI_Transmit+0x168>
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a92e:	d102      	bne.n	800a936 <HAL_SPI_Transmit+0x16e>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d102      	bne.n	800a93c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a936:	2303      	movs	r3, #3
 800a938:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a93a:	e074      	b.n	800aa26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a940:	b29b      	uxth	r3, r3
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1ce      	bne.n	800a8e4 <HAL_SPI_Transmit+0x11c>
 800a946:	e04c      	b.n	800a9e2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d002      	beq.n	800a956 <HAL_SPI_Transmit+0x18e>
 800a950:	8afb      	ldrh	r3, [r7, #22]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d140      	bne.n	800a9d8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	330c      	adds	r3, #12
 800a960:	7812      	ldrb	r2, [r2, #0]
 800a962:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a968:	1c5a      	adds	r2, r3, #1
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a972:	b29b      	uxth	r3, r3
 800a974:	3b01      	subs	r3, #1
 800a976:	b29a      	uxth	r2, r3
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a97c:	e02c      	b.n	800a9d8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	689b      	ldr	r3, [r3, #8]
 800a984:	f003 0302 	and.w	r3, r3, #2
 800a988:	2b02      	cmp	r3, #2
 800a98a:	d113      	bne.n	800a9b4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	330c      	adds	r3, #12
 800a996:	7812      	ldrb	r2, [r2, #0]
 800a998:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a99e:	1c5a      	adds	r2, r3, #1
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9a8:	b29b      	uxth	r3, r3
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	b29a      	uxth	r2, r3
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	86da      	strh	r2, [r3, #54]	; 0x36
 800a9b2:	e011      	b.n	800a9d8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a9b4:	f7fb fdf0 	bl	8006598 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	69bb      	ldr	r3, [r7, #24]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	683a      	ldr	r2, [r7, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d803      	bhi.n	800a9cc <HAL_SPI_Transmit+0x204>
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ca:	d102      	bne.n	800a9d2 <HAL_SPI_Transmit+0x20a>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d102      	bne.n	800a9d8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a9d2:	2303      	movs	r3, #3
 800a9d4:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a9d6:	e026      	b.n	800aa26 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a9dc:	b29b      	uxth	r3, r3
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1cd      	bne.n	800a97e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a9e2:	69ba      	ldr	r2, [r7, #24]
 800a9e4:	6839      	ldr	r1, [r7, #0]
 800a9e6:	68f8      	ldr	r0, [r7, #12]
 800a9e8:	f000 fb72 	bl	800b0d0 <SPI_EndRxTxTransaction>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d002      	beq.n	800a9f8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d10a      	bne.n	800aa16 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aa00:	2300      	movs	r3, #0
 800aa02:	613b      	str	r3, [r7, #16]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	681b      	ldr	r3, [r3, #0]
 800aa10:	689b      	ldr	r3, [r3, #8]
 800aa12:	613b      	str	r3, [r7, #16]
 800aa14:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800aa1e:	2301      	movs	r3, #1
 800aa20:	77fb      	strb	r3, [r7, #31]
 800aa22:	e000      	b.n	800aa26 <HAL_SPI_Transmit+0x25e>
  }

error:
 800aa24:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2201      	movs	r2, #1
 800aa2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aa36:	7ffb      	ldrb	r3, [r7, #31]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3720      	adds	r7, #32
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b08c      	sub	sp, #48	; 0x30
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800aa4e:	2301      	movs	r3, #1
 800aa50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800aa52:	2300      	movs	r3, #0
 800aa54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d101      	bne.n	800aa66 <HAL_SPI_TransmitReceive+0x26>
 800aa62:	2302      	movs	r3, #2
 800aa64:	e18a      	b.n	800ad7c <HAL_SPI_TransmitReceive+0x33c>
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	2201      	movs	r2, #1
 800aa6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800aa6e:	f7fb fd93 	bl	8006598 <HAL_GetTick>
 800aa72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aa7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	685b      	ldr	r3, [r3, #4]
 800aa82:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800aa84:	887b      	ldrh	r3, [r7, #2]
 800aa86:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800aa88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aa8c:	2b01      	cmp	r3, #1
 800aa8e:	d00f      	beq.n	800aab0 <HAL_SPI_TransmitReceive+0x70>
 800aa90:	69fb      	ldr	r3, [r7, #28]
 800aa92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800aa96:	d107      	bne.n	800aaa8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	689b      	ldr	r3, [r3, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d103      	bne.n	800aaa8 <HAL_SPI_TransmitReceive+0x68>
 800aaa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800aaa4:	2b04      	cmp	r3, #4
 800aaa6:	d003      	beq.n	800aab0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800aaa8:	2302      	movs	r3, #2
 800aaaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aaae:	e15b      	b.n	800ad68 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d005      	beq.n	800aac2 <HAL_SPI_TransmitReceive+0x82>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d002      	beq.n	800aac2 <HAL_SPI_TransmitReceive+0x82>
 800aabc:	887b      	ldrh	r3, [r7, #2]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d103      	bne.n	800aaca <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800aac2:	2301      	movs	r3, #1
 800aac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800aac8:	e14e      	b.n	800ad68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b04      	cmp	r3, #4
 800aad4:	d003      	beq.n	800aade <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	2205      	movs	r2, #5
 800aada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	687a      	ldr	r2, [r7, #4]
 800aae8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	887a      	ldrh	r2, [r7, #2]
 800aaee:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	887a      	ldrh	r2, [r7, #2]
 800aaf4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	68ba      	ldr	r2, [r7, #8]
 800aafa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	887a      	ldrh	r2, [r7, #2]
 800ab00:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	887a      	ldrh	r2, [r7, #2]
 800ab06:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	2200      	movs	r2, #0
 800ab12:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab1e:	2b40      	cmp	r3, #64	; 0x40
 800ab20:	d007      	beq.n	800ab32 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681a      	ldr	r2, [r3, #0]
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab30:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	68db      	ldr	r3, [r3, #12]
 800ab36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab3a:	d178      	bne.n	800ac2e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d002      	beq.n	800ab4a <HAL_SPI_TransmitReceive+0x10a>
 800ab44:	8b7b      	ldrh	r3, [r7, #26]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d166      	bne.n	800ac18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab4e:	881a      	ldrh	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab5a:	1c9a      	adds	r2, r3, #2
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	3b01      	subs	r3, #1
 800ab68:	b29a      	uxth	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab6e:	e053      	b.n	800ac18 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	689b      	ldr	r3, [r3, #8]
 800ab76:	f003 0302 	and.w	r3, r3, #2
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d11b      	bne.n	800abb6 <HAL_SPI_TransmitReceive+0x176>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d016      	beq.n	800abb6 <HAL_SPI_TransmitReceive+0x176>
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d113      	bne.n	800abb6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab92:	881a      	ldrh	r2, [r3, #0]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab9e:	1c9a      	adds	r2, r3, #2
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aba8:	b29b      	uxth	r3, r3
 800abaa:	3b01      	subs	r3, #1
 800abac:	b29a      	uxth	r2, r3
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abb2:	2300      	movs	r3, #0
 800abb4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	f003 0301 	and.w	r3, r3, #1
 800abc0:	2b01      	cmp	r3, #1
 800abc2:	d119      	bne.n	800abf8 <HAL_SPI_TransmitReceive+0x1b8>
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abc8:	b29b      	uxth	r3, r3
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d014      	beq.n	800abf8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68da      	ldr	r2, [r3, #12]
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abd8:	b292      	uxth	r2, r2
 800abda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abe0:	1c9a      	adds	r2, r3, #2
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abea:	b29b      	uxth	r3, r3
 800abec:	3b01      	subs	r3, #1
 800abee:	b29a      	uxth	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800abf4:	2301      	movs	r3, #1
 800abf6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800abf8:	f7fb fcce 	bl	8006598 <HAL_GetTick>
 800abfc:	4602      	mov	r2, r0
 800abfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac00:	1ad3      	subs	r3, r2, r3
 800ac02:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d807      	bhi.n	800ac18 <HAL_SPI_TransmitReceive+0x1d8>
 800ac08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0e:	d003      	beq.n	800ac18 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ac10:	2303      	movs	r3, #3
 800ac12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ac16:	e0a7      	b.n	800ad68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac1c:	b29b      	uxth	r3, r3
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d1a6      	bne.n	800ab70 <HAL_SPI_TransmitReceive+0x130>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac26:	b29b      	uxth	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1a1      	bne.n	800ab70 <HAL_SPI_TransmitReceive+0x130>
 800ac2c:	e07c      	b.n	800ad28 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d002      	beq.n	800ac3c <HAL_SPI_TransmitReceive+0x1fc>
 800ac36:	8b7b      	ldrh	r3, [r7, #26]
 800ac38:	2b01      	cmp	r3, #1
 800ac3a:	d16b      	bne.n	800ad14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	330c      	adds	r3, #12
 800ac46:	7812      	ldrb	r2, [r2, #0]
 800ac48:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac62:	e057      	b.n	800ad14 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	689b      	ldr	r3, [r3, #8]
 800ac6a:	f003 0302 	and.w	r3, r3, #2
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d11c      	bne.n	800acac <HAL_SPI_TransmitReceive+0x26c>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d017      	beq.n	800acac <HAL_SPI_TransmitReceive+0x26c>
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d114      	bne.n	800acac <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	330c      	adds	r3, #12
 800ac8c:	7812      	ldrb	r2, [r2, #0]
 800ac8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac94:	1c5a      	adds	r2, r3, #1
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	3b01      	subs	r3, #1
 800aca2:	b29a      	uxth	r2, r3
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aca8:	2300      	movs	r3, #0
 800acaa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	689b      	ldr	r3, [r3, #8]
 800acb2:	f003 0301 	and.w	r3, r3, #1
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d119      	bne.n	800acee <HAL_SPI_TransmitReceive+0x2ae>
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acbe:	b29b      	uxth	r3, r3
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d014      	beq.n	800acee <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	68da      	ldr	r2, [r3, #12]
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	b2d2      	uxtb	r2, r2
 800acd0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	3b01      	subs	r3, #1
 800ace4:	b29a      	uxth	r2, r3
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800acea:	2301      	movs	r3, #1
 800acec:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800acee:	f7fb fc53 	bl	8006598 <HAL_GetTick>
 800acf2:	4602      	mov	r2, r0
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	1ad3      	subs	r3, r2, r3
 800acf8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800acfa:	429a      	cmp	r2, r3
 800acfc:	d803      	bhi.n	800ad06 <HAL_SPI_TransmitReceive+0x2c6>
 800acfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad04:	d102      	bne.n	800ad0c <HAL_SPI_TransmitReceive+0x2cc>
 800ad06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d103      	bne.n	800ad14 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ad12:	e029      	b.n	800ad68 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d1a2      	bne.n	800ac64 <HAL_SPI_TransmitReceive+0x224>
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad22:	b29b      	uxth	r3, r3
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d19d      	bne.n	800ac64 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ad28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ad2c:	68f8      	ldr	r0, [r7, #12]
 800ad2e:	f000 f9cf 	bl	800b0d0 <SPI_EndRxTxTransaction>
 800ad32:	4603      	mov	r3, r0
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d006      	beq.n	800ad46 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ad38:	2301      	movs	r3, #1
 800ad3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	2220      	movs	r2, #32
 800ad42:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ad44:	e010      	b.n	800ad68 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	689b      	ldr	r3, [r3, #8]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10b      	bne.n	800ad66 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ad4e:	2300      	movs	r3, #0
 800ad50:	617b      	str	r3, [r7, #20]
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	617b      	str	r3, [r7, #20]
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	617b      	str	r3, [r7, #20]
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	e000      	b.n	800ad68 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ad66:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ad78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3730      	adds	r7, #48	; 0x30
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad9c:	69bb      	ldr	r3, [r7, #24]
 800ad9e:	099b      	lsrs	r3, r3, #6
 800ada0:	f003 0301 	and.w	r3, r3, #1
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d10f      	bne.n	800adc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ada8:	69bb      	ldr	r3, [r7, #24]
 800adaa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d00a      	beq.n	800adc8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	099b      	lsrs	r3, r3, #6
 800adb6:	f003 0301 	and.w	r3, r3, #1
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	4798      	blx	r3
    return;
 800adc6:	e0d7      	b.n	800af78 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800adc8:	69bb      	ldr	r3, [r7, #24]
 800adca:	085b      	lsrs	r3, r3, #1
 800adcc:	f003 0301 	and.w	r3, r3, #1
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00a      	beq.n	800adea <HAL_SPI_IRQHandler+0x66>
 800add4:	69fb      	ldr	r3, [r7, #28]
 800add6:	09db      	lsrs	r3, r3, #7
 800add8:	f003 0301 	and.w	r3, r3, #1
 800addc:	2b00      	cmp	r3, #0
 800adde:	d004      	beq.n	800adea <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	4798      	blx	r3
    return;
 800ade8:	e0c6      	b.n	800af78 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	095b      	lsrs	r3, r3, #5
 800adee:	f003 0301 	and.w	r3, r3, #1
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d10c      	bne.n	800ae10 <HAL_SPI_IRQHandler+0x8c>
 800adf6:	69bb      	ldr	r3, [r7, #24]
 800adf8:	099b      	lsrs	r3, r3, #6
 800adfa:	f003 0301 	and.w	r3, r3, #1
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d106      	bne.n	800ae10 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800ae02:	69bb      	ldr	r3, [r7, #24]
 800ae04:	0a1b      	lsrs	r3, r3, #8
 800ae06:	f003 0301 	and.w	r3, r3, #1
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	f000 80b4 	beq.w	800af78 <HAL_SPI_IRQHandler+0x1f4>
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	095b      	lsrs	r3, r3, #5
 800ae14:	f003 0301 	and.w	r3, r3, #1
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	f000 80ad 	beq.w	800af78 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ae1e:	69bb      	ldr	r3, [r7, #24]
 800ae20:	099b      	lsrs	r3, r3, #6
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d023      	beq.n	800ae72 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d011      	beq.n	800ae5a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae3a:	f043 0204 	orr.w	r2, r3, #4
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae42:	2300      	movs	r3, #0
 800ae44:	617b      	str	r3, [r7, #20]
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	617b      	str	r3, [r7, #20]
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	e00b      	b.n	800ae72 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	613b      	str	r3, [r7, #16]
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	613b      	str	r3, [r7, #16]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	689b      	ldr	r3, [r3, #8]
 800ae6c:	613b      	str	r3, [r7, #16]
 800ae6e:	693b      	ldr	r3, [r7, #16]
        return;
 800ae70:	e082      	b.n	800af78 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	095b      	lsrs	r3, r3, #5
 800ae76:	f003 0301 	and.w	r3, r3, #1
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d014      	beq.n	800aea8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae82:	f043 0201 	orr.w	r2, r3, #1
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	689b      	ldr	r3, [r3, #8]
 800ae94:	60fb      	str	r3, [r7, #12]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aea4:	601a      	str	r2, [r3, #0]
 800aea6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	0a1b      	lsrs	r3, r3, #8
 800aeac:	f003 0301 	and.w	r3, r3, #1
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00c      	beq.n	800aece <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeb8:	f043 0208 	orr.w	r2, r3, #8
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aec0:	2300      	movs	r3, #0
 800aec2:	60bb      	str	r3, [r7, #8]
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	689b      	ldr	r3, [r3, #8]
 800aeca:	60bb      	str	r3, [r7, #8]
 800aecc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d04f      	beq.n	800af76 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685a      	ldr	r2, [r3, #4]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800aee4:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aeee:	69fb      	ldr	r3, [r7, #28]
 800aef0:	f003 0302 	and.w	r3, r3, #2
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d104      	bne.n	800af02 <HAL_SPI_IRQHandler+0x17e>
 800aef8:	69fb      	ldr	r3, [r7, #28]
 800aefa:	f003 0301 	and.w	r3, r3, #1
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d034      	beq.n	800af6c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	685a      	ldr	r2, [r3, #4]
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f022 0203 	bic.w	r2, r2, #3
 800af10:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af16:	2b00      	cmp	r3, #0
 800af18:	d011      	beq.n	800af3e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af1e:	4a18      	ldr	r2, [pc, #96]	; (800af80 <HAL_SPI_IRQHandler+0x1fc>)
 800af20:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af26:	4618      	mov	r0, r3
 800af28:	f7fb fdf0 	bl	8006b0c <HAL_DMA_Abort_IT>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d005      	beq.n	800af3e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af36:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af42:	2b00      	cmp	r3, #0
 800af44:	d016      	beq.n	800af74 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af4a:	4a0d      	ldr	r2, [pc, #52]	; (800af80 <HAL_SPI_IRQHandler+0x1fc>)
 800af4c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800af52:	4618      	mov	r0, r3
 800af54:	f7fb fdda 	bl	8006b0c <HAL_DMA_Abort_IT>
 800af58:	4603      	mov	r3, r0
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d00a      	beq.n	800af74 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800af6a:	e003      	b.n	800af74 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 f809 	bl	800af84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800af72:	e000      	b.n	800af76 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800af74:	bf00      	nop
    return;
 800af76:	bf00      	nop
  }
}
 800af78:	3720      	adds	r7, #32
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	0800af99 	.word	0x0800af99

0800af84 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afa4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2200      	movs	r2, #0
 800afaa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	2200      	movs	r2, #0
 800afb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f7ff ffe6 	bl	800af84 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800afb8:	bf00      	nop
 800afba:	3710      	adds	r7, #16
 800afbc:	46bd      	mov	sp, r7
 800afbe:	bd80      	pop	{r7, pc}

0800afc0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	4613      	mov	r3, r2
 800afce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800afd0:	f7fb fae2 	bl	8006598 <HAL_GetTick>
 800afd4:	4602      	mov	r2, r0
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	1a9b      	subs	r3, r3, r2
 800afda:	683a      	ldr	r2, [r7, #0]
 800afdc:	4413      	add	r3, r2
 800afde:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800afe0:	f7fb fada 	bl	8006598 <HAL_GetTick>
 800afe4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800afe6:	4b39      	ldr	r3, [pc, #228]	; (800b0cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	015b      	lsls	r3, r3, #5
 800afec:	0d1b      	lsrs	r3, r3, #20
 800afee:	69fa      	ldr	r2, [r7, #28]
 800aff0:	fb02 f303 	mul.w	r3, r2, r3
 800aff4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aff6:	e054      	b.n	800b0a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800affe:	d050      	beq.n	800b0a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b000:	f7fb faca 	bl	8006598 <HAL_GetTick>
 800b004:	4602      	mov	r2, r0
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	1ad3      	subs	r3, r2, r3
 800b00a:	69fa      	ldr	r2, [r7, #28]
 800b00c:	429a      	cmp	r2, r3
 800b00e:	d902      	bls.n	800b016 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b010:	69fb      	ldr	r3, [r7, #28]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d13d      	bne.n	800b092 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	685a      	ldr	r2, [r3, #4]
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b024:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b02e:	d111      	bne.n	800b054 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b038:	d004      	beq.n	800b044 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	689b      	ldr	r3, [r3, #8]
 800b03e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b042:	d107      	bne.n	800b054 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	681a      	ldr	r2, [r3, #0]
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b052:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b05c:	d10f      	bne.n	800b07e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b06c:	601a      	str	r2, [r3, #0]
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	681a      	ldr	r2, [r3, #0]
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b07c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b08e:	2303      	movs	r3, #3
 800b090:	e017      	b.n	800b0c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b098:	2300      	movs	r3, #0
 800b09a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	3b01      	subs	r3, #1
 800b0a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	689a      	ldr	r2, [r3, #8]
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	68ba      	ldr	r2, [r7, #8]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	bf0c      	ite	eq
 800b0b2:	2301      	moveq	r3, #1
 800b0b4:	2300      	movne	r3, #0
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	79fb      	ldrb	r3, [r7, #7]
 800b0bc:	429a      	cmp	r2, r3
 800b0be:	d19b      	bne.n	800aff8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b0c0:	2300      	movs	r3, #0
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
 800b0ca:	bf00      	nop
 800b0cc:	2000000c 	.word	0x2000000c

0800b0d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b088      	sub	sp, #32
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b0dc:	4b1b      	ldr	r3, [pc, #108]	; (800b14c <SPI_EndRxTxTransaction+0x7c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a1b      	ldr	r2, [pc, #108]	; (800b150 <SPI_EndRxTxTransaction+0x80>)
 800b0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0e6:	0d5b      	lsrs	r3, r3, #21
 800b0e8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0ec:	fb02 f303 	mul.w	r3, r2, r3
 800b0f0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	685b      	ldr	r3, [r3, #4]
 800b0f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0fa:	d112      	bne.n	800b122 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	9300      	str	r3, [sp, #0]
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	2200      	movs	r2, #0
 800b104:	2180      	movs	r1, #128	; 0x80
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f7ff ff5a 	bl	800afc0 <SPI_WaitFlagStateUntilTimeout>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d016      	beq.n	800b140 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b116:	f043 0220 	orr.w	r2, r3, #32
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b11e:	2303      	movs	r3, #3
 800b120:	e00f      	b.n	800b142 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d00a      	beq.n	800b13e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	3b01      	subs	r3, #1
 800b12c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b138:	2b80      	cmp	r3, #128	; 0x80
 800b13a:	d0f2      	beq.n	800b122 <SPI_EndRxTxTransaction+0x52>
 800b13c:	e000      	b.n	800b140 <SPI_EndRxTxTransaction+0x70>
        break;
 800b13e:	bf00      	nop
  }

  return HAL_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3718      	adds	r7, #24
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}
 800b14a:	bf00      	nop
 800b14c:	2000000c 	.word	0x2000000c
 800b150:	165e9f81 	.word	0x165e9f81

0800b154 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e041      	b.n	800b1ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d106      	bne.n	800b180 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f000 f839 	bl	800b1f2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	2202      	movs	r2, #2
 800b184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	3304      	adds	r3, #4
 800b190:	4619      	mov	r1, r3
 800b192:	4610      	mov	r0, r2
 800b194:	f000 fbb2 	bl	800b8fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	2201      	movs	r2, #1
 800b19c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2201      	movs	r2, #1
 800b1bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2201      	movs	r2, #1
 800b1c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2201      	movs	r2, #1
 800b1dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	2201      	movs	r2, #1
 800b1e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b1f2:	b480      	push	{r7}
 800b1f4:	b083      	sub	sp, #12
 800b1f6:	af00      	add	r7, sp, #0
 800b1f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b1fa:	bf00      	nop
 800b1fc:	370c      	adds	r7, #12
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
	...

0800b208 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b208:	b480      	push	{r7}
 800b20a:	b085      	sub	sp, #20
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b216:	b2db      	uxtb	r3, r3
 800b218:	2b01      	cmp	r3, #1
 800b21a:	d001      	beq.n	800b220 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b21c:	2301      	movs	r3, #1
 800b21e:	e04e      	b.n	800b2be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2202      	movs	r2, #2
 800b224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	68da      	ldr	r2, [r3, #12]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f042 0201 	orr.w	r2, r2, #1
 800b236:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	4a23      	ldr	r2, [pc, #140]	; (800b2cc <HAL_TIM_Base_Start_IT+0xc4>)
 800b23e:	4293      	cmp	r3, r2
 800b240:	d022      	beq.n	800b288 <HAL_TIM_Base_Start_IT+0x80>
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b24a:	d01d      	beq.n	800b288 <HAL_TIM_Base_Start_IT+0x80>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a1f      	ldr	r2, [pc, #124]	; (800b2d0 <HAL_TIM_Base_Start_IT+0xc8>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d018      	beq.n	800b288 <HAL_TIM_Base_Start_IT+0x80>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a1e      	ldr	r2, [pc, #120]	; (800b2d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d013      	beq.n	800b288 <HAL_TIM_Base_Start_IT+0x80>
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	4a1c      	ldr	r2, [pc, #112]	; (800b2d8 <HAL_TIM_Base_Start_IT+0xd0>)
 800b266:	4293      	cmp	r3, r2
 800b268:	d00e      	beq.n	800b288 <HAL_TIM_Base_Start_IT+0x80>
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	4a1b      	ldr	r2, [pc, #108]	; (800b2dc <HAL_TIM_Base_Start_IT+0xd4>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d009      	beq.n	800b288 <HAL_TIM_Base_Start_IT+0x80>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a19      	ldr	r2, [pc, #100]	; (800b2e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800b27a:	4293      	cmp	r3, r2
 800b27c:	d004      	beq.n	800b288 <HAL_TIM_Base_Start_IT+0x80>
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4a18      	ldr	r2, [pc, #96]	; (800b2e4 <HAL_TIM_Base_Start_IT+0xdc>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d111      	bne.n	800b2ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	689b      	ldr	r3, [r3, #8]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b06      	cmp	r3, #6
 800b298:	d010      	beq.n	800b2bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f042 0201 	orr.w	r2, r2, #1
 800b2a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b2aa:	e007      	b.n	800b2bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681a      	ldr	r2, [r3, #0]
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f042 0201 	orr.w	r2, r2, #1
 800b2ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3714      	adds	r7, #20
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c8:	4770      	bx	lr
 800b2ca:	bf00      	nop
 800b2cc:	40010000 	.word	0x40010000
 800b2d0:	40000400 	.word	0x40000400
 800b2d4:	40000800 	.word	0x40000800
 800b2d8:	40000c00 	.word	0x40000c00
 800b2dc:	40010400 	.word	0x40010400
 800b2e0:	40014000 	.word	0x40014000
 800b2e4:	40001800 	.word	0x40001800

0800b2e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d101      	bne.n	800b2fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e041      	b.n	800b37e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b300:	b2db      	uxtb	r3, r3
 800b302:	2b00      	cmp	r3, #0
 800b304:	d106      	bne.n	800b314 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2200      	movs	r2, #0
 800b30a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b30e:	6878      	ldr	r0, [r7, #4]
 800b310:	f7fa fd06 	bl	8005d20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	2202      	movs	r2, #2
 800b318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681a      	ldr	r2, [r3, #0]
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	3304      	adds	r3, #4
 800b324:	4619      	mov	r1, r3
 800b326:	4610      	mov	r0, r2
 800b328:	f000 fae8 	bl	800b8fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2201      	movs	r2, #1
 800b330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	2201      	movs	r2, #1
 800b338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2201      	movs	r2, #1
 800b340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2201      	movs	r2, #1
 800b350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	2201      	movs	r2, #1
 800b358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2201      	movs	r2, #1
 800b360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	2201      	movs	r2, #1
 800b370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3708      	adds	r7, #8
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
	...

0800b388 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b084      	sub	sp, #16
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d109      	bne.n	800b3ac <HAL_TIM_PWM_Start+0x24>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b39e:	b2db      	uxtb	r3, r3
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	bf14      	ite	ne
 800b3a4:	2301      	movne	r3, #1
 800b3a6:	2300      	moveq	r3, #0
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	e022      	b.n	800b3f2 <HAL_TIM_PWM_Start+0x6a>
 800b3ac:	683b      	ldr	r3, [r7, #0]
 800b3ae:	2b04      	cmp	r3, #4
 800b3b0:	d109      	bne.n	800b3c6 <HAL_TIM_PWM_Start+0x3e>
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	bf14      	ite	ne
 800b3be:	2301      	movne	r3, #1
 800b3c0:	2300      	moveq	r3, #0
 800b3c2:	b2db      	uxtb	r3, r3
 800b3c4:	e015      	b.n	800b3f2 <HAL_TIM_PWM_Start+0x6a>
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b08      	cmp	r3, #8
 800b3ca:	d109      	bne.n	800b3e0 <HAL_TIM_PWM_Start+0x58>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b3d2:	b2db      	uxtb	r3, r3
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	bf14      	ite	ne
 800b3d8:	2301      	movne	r3, #1
 800b3da:	2300      	moveq	r3, #0
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	e008      	b.n	800b3f2 <HAL_TIM_PWM_Start+0x6a>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b3e6:	b2db      	uxtb	r3, r3
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	bf14      	ite	ne
 800b3ec:	2301      	movne	r3, #1
 800b3ee:	2300      	moveq	r3, #0
 800b3f0:	b2db      	uxtb	r3, r3
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d001      	beq.n	800b3fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e07c      	b.n	800b4f4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d104      	bne.n	800b40a <HAL_TIM_PWM_Start+0x82>
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	2202      	movs	r2, #2
 800b404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b408:	e013      	b.n	800b432 <HAL_TIM_PWM_Start+0xaa>
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b04      	cmp	r3, #4
 800b40e:	d104      	bne.n	800b41a <HAL_TIM_PWM_Start+0x92>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	2202      	movs	r2, #2
 800b414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b418:	e00b      	b.n	800b432 <HAL_TIM_PWM_Start+0xaa>
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	2b08      	cmp	r3, #8
 800b41e:	d104      	bne.n	800b42a <HAL_TIM_PWM_Start+0xa2>
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2202      	movs	r2, #2
 800b424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b428:	e003      	b.n	800b432 <HAL_TIM_PWM_Start+0xaa>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2202      	movs	r2, #2
 800b42e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	2201      	movs	r2, #1
 800b438:	6839      	ldr	r1, [r7, #0]
 800b43a:	4618      	mov	r0, r3
 800b43c:	f000 fcae 	bl	800bd9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	4a2d      	ldr	r2, [pc, #180]	; (800b4fc <HAL_TIM_PWM_Start+0x174>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d004      	beq.n	800b454 <HAL_TIM_PWM_Start+0xcc>
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	4a2c      	ldr	r2, [pc, #176]	; (800b500 <HAL_TIM_PWM_Start+0x178>)
 800b450:	4293      	cmp	r3, r2
 800b452:	d101      	bne.n	800b458 <HAL_TIM_PWM_Start+0xd0>
 800b454:	2301      	movs	r3, #1
 800b456:	e000      	b.n	800b45a <HAL_TIM_PWM_Start+0xd2>
 800b458:	2300      	movs	r3, #0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d007      	beq.n	800b46e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b46c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	4a22      	ldr	r2, [pc, #136]	; (800b4fc <HAL_TIM_PWM_Start+0x174>)
 800b474:	4293      	cmp	r3, r2
 800b476:	d022      	beq.n	800b4be <HAL_TIM_PWM_Start+0x136>
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b480:	d01d      	beq.n	800b4be <HAL_TIM_PWM_Start+0x136>
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	4a1f      	ldr	r2, [pc, #124]	; (800b504 <HAL_TIM_PWM_Start+0x17c>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d018      	beq.n	800b4be <HAL_TIM_PWM_Start+0x136>
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	4a1d      	ldr	r2, [pc, #116]	; (800b508 <HAL_TIM_PWM_Start+0x180>)
 800b492:	4293      	cmp	r3, r2
 800b494:	d013      	beq.n	800b4be <HAL_TIM_PWM_Start+0x136>
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	4a1c      	ldr	r2, [pc, #112]	; (800b50c <HAL_TIM_PWM_Start+0x184>)
 800b49c:	4293      	cmp	r3, r2
 800b49e:	d00e      	beq.n	800b4be <HAL_TIM_PWM_Start+0x136>
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	4a16      	ldr	r2, [pc, #88]	; (800b500 <HAL_TIM_PWM_Start+0x178>)
 800b4a6:	4293      	cmp	r3, r2
 800b4a8:	d009      	beq.n	800b4be <HAL_TIM_PWM_Start+0x136>
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	4a18      	ldr	r2, [pc, #96]	; (800b510 <HAL_TIM_PWM_Start+0x188>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d004      	beq.n	800b4be <HAL_TIM_PWM_Start+0x136>
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a16      	ldr	r2, [pc, #88]	; (800b514 <HAL_TIM_PWM_Start+0x18c>)
 800b4ba:	4293      	cmp	r3, r2
 800b4bc:	d111      	bne.n	800b4e2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	f003 0307 	and.w	r3, r3, #7
 800b4c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	2b06      	cmp	r3, #6
 800b4ce:	d010      	beq.n	800b4f2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681a      	ldr	r2, [r3, #0]
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f042 0201 	orr.w	r2, r2, #1
 800b4de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4e0:	e007      	b.n	800b4f2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681a      	ldr	r2, [r3, #0]
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	f042 0201 	orr.w	r2, r2, #1
 800b4f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3710      	adds	r7, #16
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bd80      	pop	{r7, pc}
 800b4fc:	40010000 	.word	0x40010000
 800b500:	40010400 	.word	0x40010400
 800b504:	40000400 	.word	0x40000400
 800b508:	40000800 	.word	0x40000800
 800b50c:	40000c00 	.word	0x40000c00
 800b510:	40014000 	.word	0x40014000
 800b514:	40001800 	.word	0x40001800

0800b518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	f003 0302 	and.w	r3, r3, #2
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d122      	bne.n	800b574 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	68db      	ldr	r3, [r3, #12]
 800b534:	f003 0302 	and.w	r3, r3, #2
 800b538:	2b02      	cmp	r3, #2
 800b53a:	d11b      	bne.n	800b574 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f06f 0202 	mvn.w	r2, #2
 800b544:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	699b      	ldr	r3, [r3, #24]
 800b552:	f003 0303 	and.w	r3, r3, #3
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b55a:	6878      	ldr	r0, [r7, #4]
 800b55c:	f000 f9b0 	bl	800b8c0 <HAL_TIM_IC_CaptureCallback>
 800b560:	e005      	b.n	800b56e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 f9a2 	bl	800b8ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f9b3 	bl	800b8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	f003 0304 	and.w	r3, r3, #4
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d122      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	68db      	ldr	r3, [r3, #12]
 800b588:	f003 0304 	and.w	r3, r3, #4
 800b58c:	2b04      	cmp	r3, #4
 800b58e:	d11b      	bne.n	800b5c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f06f 0204 	mvn.w	r2, #4
 800b598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	2202      	movs	r2, #2
 800b59e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	699b      	ldr	r3, [r3, #24]
 800b5a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d003      	beq.n	800b5b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ae:	6878      	ldr	r0, [r7, #4]
 800b5b0:	f000 f986 	bl	800b8c0 <HAL_TIM_IC_CaptureCallback>
 800b5b4:	e005      	b.n	800b5c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5b6:	6878      	ldr	r0, [r7, #4]
 800b5b8:	f000 f978 	bl	800b8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 f989 	bl	800b8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0308 	and.w	r3, r3, #8
 800b5d2:	2b08      	cmp	r3, #8
 800b5d4:	d122      	bne.n	800b61c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	68db      	ldr	r3, [r3, #12]
 800b5dc:	f003 0308 	and.w	r3, r3, #8
 800b5e0:	2b08      	cmp	r3, #8
 800b5e2:	d11b      	bne.n	800b61c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f06f 0208 	mvn.w	r2, #8
 800b5ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2204      	movs	r2, #4
 800b5f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	69db      	ldr	r3, [r3, #28]
 800b5fa:	f003 0303 	and.w	r3, r3, #3
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d003      	beq.n	800b60a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f95c 	bl	800b8c0 <HAL_TIM_IC_CaptureCallback>
 800b608:	e005      	b.n	800b616 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b60a:	6878      	ldr	r0, [r7, #4]
 800b60c:	f000 f94e 	bl	800b8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f95f 	bl	800b8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	2200      	movs	r2, #0
 800b61a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	f003 0310 	and.w	r3, r3, #16
 800b626:	2b10      	cmp	r3, #16
 800b628:	d122      	bne.n	800b670 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f003 0310 	and.w	r3, r3, #16
 800b634:	2b10      	cmp	r3, #16
 800b636:	d11b      	bne.n	800b670 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f06f 0210 	mvn.w	r2, #16
 800b640:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2208      	movs	r2, #8
 800b646:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	69db      	ldr	r3, [r3, #28]
 800b64e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b656:	6878      	ldr	r0, [r7, #4]
 800b658:	f000 f932 	bl	800b8c0 <HAL_TIM_IC_CaptureCallback>
 800b65c:	e005      	b.n	800b66a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 f924 	bl	800b8ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f935 	bl	800b8d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	691b      	ldr	r3, [r3, #16]
 800b676:	f003 0301 	and.w	r3, r3, #1
 800b67a:	2b01      	cmp	r3, #1
 800b67c:	d10e      	bne.n	800b69c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	f003 0301 	and.w	r3, r3, #1
 800b688:	2b01      	cmp	r3, #1
 800b68a:	d107      	bne.n	800b69c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	f06f 0201 	mvn.w	r2, #1
 800b694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f7f9 fe5c 	bl	8005354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	691b      	ldr	r3, [r3, #16]
 800b6a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6a6:	2b80      	cmp	r3, #128	; 0x80
 800b6a8:	d10e      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	68db      	ldr	r3, [r3, #12]
 800b6b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b4:	2b80      	cmp	r3, #128	; 0x80
 800b6b6:	d107      	bne.n	800b6c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b6c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f000 fc68 	bl	800bf98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6d2:	2b40      	cmp	r3, #64	; 0x40
 800b6d4:	d10e      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	68db      	ldr	r3, [r3, #12]
 800b6dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e0:	2b40      	cmp	r3, #64	; 0x40
 800b6e2:	d107      	bne.n	800b6f4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b6ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f8fa 	bl	800b8e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	691b      	ldr	r3, [r3, #16]
 800b6fa:	f003 0320 	and.w	r3, r3, #32
 800b6fe:	2b20      	cmp	r3, #32
 800b700:	d10e      	bne.n	800b720 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	f003 0320 	and.w	r3, r3, #32
 800b70c:	2b20      	cmp	r3, #32
 800b70e:	d107      	bne.n	800b720 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f06f 0220 	mvn.w	r2, #32
 800b718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fc32 	bl	800bf84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b720:	bf00      	nop
 800b722:	3708      	adds	r7, #8
 800b724:	46bd      	mov	sp, r7
 800b726:	bd80      	pop	{r7, pc}

0800b728 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b086      	sub	sp, #24
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b734:	2300      	movs	r3, #0
 800b736:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b73e:	2b01      	cmp	r3, #1
 800b740:	d101      	bne.n	800b746 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800b742:	2302      	movs	r3, #2
 800b744:	e0ae      	b.n	800b8a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	2201      	movs	r2, #1
 800b74a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b0c      	cmp	r3, #12
 800b752:	f200 809f 	bhi.w	800b894 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800b756:	a201      	add	r2, pc, #4	; (adr r2, 800b75c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800b758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b75c:	0800b791 	.word	0x0800b791
 800b760:	0800b895 	.word	0x0800b895
 800b764:	0800b895 	.word	0x0800b895
 800b768:	0800b895 	.word	0x0800b895
 800b76c:	0800b7d1 	.word	0x0800b7d1
 800b770:	0800b895 	.word	0x0800b895
 800b774:	0800b895 	.word	0x0800b895
 800b778:	0800b895 	.word	0x0800b895
 800b77c:	0800b813 	.word	0x0800b813
 800b780:	0800b895 	.word	0x0800b895
 800b784:	0800b895 	.word	0x0800b895
 800b788:	0800b895 	.word	0x0800b895
 800b78c:	0800b853 	.word	0x0800b853
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	68b9      	ldr	r1, [r7, #8]
 800b796:	4618      	mov	r0, r3
 800b798:	f000 f950 	bl	800ba3c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	699a      	ldr	r2, [r3, #24]
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f042 0208 	orr.w	r2, r2, #8
 800b7aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	699a      	ldr	r2, [r3, #24]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f022 0204 	bic.w	r2, r2, #4
 800b7ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6999      	ldr	r1, [r3, #24]
 800b7c2:	68bb      	ldr	r3, [r7, #8]
 800b7c4:	691a      	ldr	r2, [r3, #16]
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	619a      	str	r2, [r3, #24]
      break;
 800b7ce:	e064      	b.n	800b89a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68b9      	ldr	r1, [r7, #8]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 f9a0 	bl	800bb1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	699a      	ldr	r2, [r3, #24]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b7ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	699a      	ldr	r2, [r3, #24]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b7fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6999      	ldr	r1, [r3, #24]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	691b      	ldr	r3, [r3, #16]
 800b806:	021a      	lsls	r2, r3, #8
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	430a      	orrs	r2, r1
 800b80e:	619a      	str	r2, [r3, #24]
      break;
 800b810:	e043      	b.n	800b89a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	68b9      	ldr	r1, [r7, #8]
 800b818:	4618      	mov	r0, r3
 800b81a:	f000 f9f5 	bl	800bc08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	69da      	ldr	r2, [r3, #28]
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	f042 0208 	orr.w	r2, r2, #8
 800b82c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	69da      	ldr	r2, [r3, #28]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	f022 0204 	bic.w	r2, r2, #4
 800b83c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	69d9      	ldr	r1, [r3, #28]
 800b844:	68bb      	ldr	r3, [r7, #8]
 800b846:	691a      	ldr	r2, [r3, #16]
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	61da      	str	r2, [r3, #28]
      break;
 800b850:	e023      	b.n	800b89a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 fa49 	bl	800bcf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	69da      	ldr	r2, [r3, #28]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b86c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69da      	ldr	r2, [r3, #28]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b87c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	69d9      	ldr	r1, [r3, #28]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	691b      	ldr	r3, [r3, #16]
 800b888:	021a      	lsls	r2, r3, #8
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	430a      	orrs	r2, r1
 800b890:	61da      	str	r2, [r3, #28]
      break;
 800b892:	e002      	b.n	800b89a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800b894:	2301      	movs	r3, #1
 800b896:	75fb      	strb	r3, [r7, #23]
      break;
 800b898:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	2200      	movs	r2, #0
 800b89e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b8a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3718      	adds	r7, #24
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	bd80      	pop	{r7, pc}

0800b8ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b8ac:	b480      	push	{r7}
 800b8ae:	b083      	sub	sp, #12
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b8b4:	bf00      	nop
 800b8b6:	370c      	adds	r7, #12
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8be:	4770      	bx	lr

0800b8c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b083      	sub	sp, #12
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b8c8:	bf00      	nop
 800b8ca:	370c      	adds	r7, #12
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr

0800b8d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b083      	sub	sp, #12
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b8dc:	bf00      	nop
 800b8de:	370c      	adds	r7, #12
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e6:	4770      	bx	lr

0800b8e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b8e8:	b480      	push	{r7}
 800b8ea:	b083      	sub	sp, #12
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b8f0:	bf00      	nop
 800b8f2:	370c      	adds	r7, #12
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	4a40      	ldr	r2, [pc, #256]	; (800ba10 <TIM_Base_SetConfig+0x114>)
 800b910:	4293      	cmp	r3, r2
 800b912:	d013      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b91a:	d00f      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	4a3d      	ldr	r2, [pc, #244]	; (800ba14 <TIM_Base_SetConfig+0x118>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d00b      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	4a3c      	ldr	r2, [pc, #240]	; (800ba18 <TIM_Base_SetConfig+0x11c>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d007      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	4a3b      	ldr	r2, [pc, #236]	; (800ba1c <TIM_Base_SetConfig+0x120>)
 800b930:	4293      	cmp	r3, r2
 800b932:	d003      	beq.n	800b93c <TIM_Base_SetConfig+0x40>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	4a3a      	ldr	r2, [pc, #232]	; (800ba20 <TIM_Base_SetConfig+0x124>)
 800b938:	4293      	cmp	r3, r2
 800b93a:	d108      	bne.n	800b94e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	685b      	ldr	r3, [r3, #4]
 800b948:	68fa      	ldr	r2, [r7, #12]
 800b94a:	4313      	orrs	r3, r2
 800b94c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	4a2f      	ldr	r2, [pc, #188]	; (800ba10 <TIM_Base_SetConfig+0x114>)
 800b952:	4293      	cmp	r3, r2
 800b954:	d02b      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b95c:	d027      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	4a2c      	ldr	r2, [pc, #176]	; (800ba14 <TIM_Base_SetConfig+0x118>)
 800b962:	4293      	cmp	r3, r2
 800b964:	d023      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	4a2b      	ldr	r2, [pc, #172]	; (800ba18 <TIM_Base_SetConfig+0x11c>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d01f      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	4a2a      	ldr	r2, [pc, #168]	; (800ba1c <TIM_Base_SetConfig+0x120>)
 800b972:	4293      	cmp	r3, r2
 800b974:	d01b      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	4a29      	ldr	r2, [pc, #164]	; (800ba20 <TIM_Base_SetConfig+0x124>)
 800b97a:	4293      	cmp	r3, r2
 800b97c:	d017      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	4a28      	ldr	r2, [pc, #160]	; (800ba24 <TIM_Base_SetConfig+0x128>)
 800b982:	4293      	cmp	r3, r2
 800b984:	d013      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a27      	ldr	r2, [pc, #156]	; (800ba28 <TIM_Base_SetConfig+0x12c>)
 800b98a:	4293      	cmp	r3, r2
 800b98c:	d00f      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	4a26      	ldr	r2, [pc, #152]	; (800ba2c <TIM_Base_SetConfig+0x130>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d00b      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	4a25      	ldr	r2, [pc, #148]	; (800ba30 <TIM_Base_SetConfig+0x134>)
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d007      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	4a24      	ldr	r2, [pc, #144]	; (800ba34 <TIM_Base_SetConfig+0x138>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d003      	beq.n	800b9ae <TIM_Base_SetConfig+0xb2>
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	4a23      	ldr	r2, [pc, #140]	; (800ba38 <TIM_Base_SetConfig+0x13c>)
 800b9aa:	4293      	cmp	r3, r2
 800b9ac:	d108      	bne.n	800b9c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	68db      	ldr	r3, [r3, #12]
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	695b      	ldr	r3, [r3, #20]
 800b9ca:	4313      	orrs	r3, r2
 800b9cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b9d4:	683b      	ldr	r3, [r7, #0]
 800b9d6:	689a      	ldr	r2, [r3, #8]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b9dc:	683b      	ldr	r3, [r7, #0]
 800b9de:	681a      	ldr	r2, [r3, #0]
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	4a0a      	ldr	r2, [pc, #40]	; (800ba10 <TIM_Base_SetConfig+0x114>)
 800b9e8:	4293      	cmp	r3, r2
 800b9ea:	d003      	beq.n	800b9f4 <TIM_Base_SetConfig+0xf8>
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	4a0c      	ldr	r2, [pc, #48]	; (800ba20 <TIM_Base_SetConfig+0x124>)
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	d103      	bne.n	800b9fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	691a      	ldr	r2, [r3, #16]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2201      	movs	r2, #1
 800ba00:	615a      	str	r2, [r3, #20]
}
 800ba02:	bf00      	nop
 800ba04:	3714      	adds	r7, #20
 800ba06:	46bd      	mov	sp, r7
 800ba08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0c:	4770      	bx	lr
 800ba0e:	bf00      	nop
 800ba10:	40010000 	.word	0x40010000
 800ba14:	40000400 	.word	0x40000400
 800ba18:	40000800 	.word	0x40000800
 800ba1c:	40000c00 	.word	0x40000c00
 800ba20:	40010400 	.word	0x40010400
 800ba24:	40014000 	.word	0x40014000
 800ba28:	40014400 	.word	0x40014400
 800ba2c:	40014800 	.word	0x40014800
 800ba30:	40001800 	.word	0x40001800
 800ba34:	40001c00 	.word	0x40001c00
 800ba38:	40002000 	.word	0x40002000

0800ba3c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b087      	sub	sp, #28
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	6a1b      	ldr	r3, [r3, #32]
 800ba4a:	f023 0201 	bic.w	r2, r3, #1
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	6a1b      	ldr	r3, [r3, #32]
 800ba56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	699b      	ldr	r3, [r3, #24]
 800ba62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f023 0303 	bic.w	r3, r3, #3
 800ba72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	68fa      	ldr	r2, [r7, #12]
 800ba7a:	4313      	orrs	r3, r2
 800ba7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ba7e:	697b      	ldr	r3, [r7, #20]
 800ba80:	f023 0302 	bic.w	r3, r3, #2
 800ba84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ba86:	683b      	ldr	r3, [r7, #0]
 800ba88:	689b      	ldr	r3, [r3, #8]
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4a20      	ldr	r2, [pc, #128]	; (800bb14 <TIM_OC1_SetConfig+0xd8>)
 800ba94:	4293      	cmp	r3, r2
 800ba96:	d003      	beq.n	800baa0 <TIM_OC1_SetConfig+0x64>
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a1f      	ldr	r2, [pc, #124]	; (800bb18 <TIM_OC1_SetConfig+0xdc>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d10c      	bne.n	800baba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	f023 0308 	bic.w	r3, r3, #8
 800baa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800baa8:	683b      	ldr	r3, [r7, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	697a      	ldr	r2, [r7, #20]
 800baae:	4313      	orrs	r3, r2
 800bab0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bab2:	697b      	ldr	r3, [r7, #20]
 800bab4:	f023 0304 	bic.w	r3, r3, #4
 800bab8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	4a15      	ldr	r2, [pc, #84]	; (800bb14 <TIM_OC1_SetConfig+0xd8>)
 800babe:	4293      	cmp	r3, r2
 800bac0:	d003      	beq.n	800baca <TIM_OC1_SetConfig+0x8e>
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	4a14      	ldr	r2, [pc, #80]	; (800bb18 <TIM_OC1_SetConfig+0xdc>)
 800bac6:	4293      	cmp	r3, r2
 800bac8:	d111      	bne.n	800baee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800baca:	693b      	ldr	r3, [r7, #16]
 800bacc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bad0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bad2:	693b      	ldr	r3, [r7, #16]
 800bad4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bad8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	695b      	ldr	r3, [r3, #20]
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	4313      	orrs	r3, r2
 800bae2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	699b      	ldr	r3, [r3, #24]
 800bae8:	693a      	ldr	r2, [r7, #16]
 800baea:	4313      	orrs	r3, r2
 800baec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	693a      	ldr	r2, [r7, #16]
 800baf2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	685a      	ldr	r2, [r3, #4]
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	697a      	ldr	r2, [r7, #20]
 800bb06:	621a      	str	r2, [r3, #32]
}
 800bb08:	bf00      	nop
 800bb0a:	371c      	adds	r7, #28
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb12:	4770      	bx	lr
 800bb14:	40010000 	.word	0x40010000
 800bb18:	40010400 	.word	0x40010400

0800bb1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bb1c:	b480      	push	{r7}
 800bb1e:	b087      	sub	sp, #28
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	6078      	str	r0, [r7, #4]
 800bb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6a1b      	ldr	r3, [r3, #32]
 800bb2a:	f023 0210 	bic.w	r2, r3, #16
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6a1b      	ldr	r3, [r3, #32]
 800bb36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	685b      	ldr	r3, [r3, #4]
 800bb3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	699b      	ldr	r3, [r3, #24]
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	021b      	lsls	r3, r3, #8
 800bb5a:	68fa      	ldr	r2, [r7, #12]
 800bb5c:	4313      	orrs	r3, r2
 800bb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	f023 0320 	bic.w	r3, r3, #32
 800bb66:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	689b      	ldr	r3, [r3, #8]
 800bb6c:	011b      	lsls	r3, r3, #4
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4313      	orrs	r3, r2
 800bb72:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a22      	ldr	r2, [pc, #136]	; (800bc00 <TIM_OC2_SetConfig+0xe4>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d003      	beq.n	800bb84 <TIM_OC2_SetConfig+0x68>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	4a21      	ldr	r2, [pc, #132]	; (800bc04 <TIM_OC2_SetConfig+0xe8>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d10d      	bne.n	800bba0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800bb84:	697b      	ldr	r3, [r7, #20]
 800bb86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	68db      	ldr	r3, [r3, #12]
 800bb90:	011b      	lsls	r3, r3, #4
 800bb92:	697a      	ldr	r2, [r7, #20]
 800bb94:	4313      	orrs	r3, r2
 800bb96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb9e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	4a17      	ldr	r2, [pc, #92]	; (800bc00 <TIM_OC2_SetConfig+0xe4>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d003      	beq.n	800bbb0 <TIM_OC2_SetConfig+0x94>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	4a16      	ldr	r2, [pc, #88]	; (800bc04 <TIM_OC2_SetConfig+0xe8>)
 800bbac:	4293      	cmp	r3, r2
 800bbae:	d113      	bne.n	800bbd8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bbb6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bbbe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	695b      	ldr	r3, [r3, #20]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	693a      	ldr	r2, [r7, #16]
 800bbc8:	4313      	orrs	r3, r2
 800bbca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bbcc:	683b      	ldr	r3, [r7, #0]
 800bbce:	699b      	ldr	r3, [r3, #24]
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	693a      	ldr	r2, [r7, #16]
 800bbd4:	4313      	orrs	r3, r2
 800bbd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	693a      	ldr	r2, [r7, #16]
 800bbdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	685a      	ldr	r2, [r3, #4]
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	621a      	str	r2, [r3, #32]
}
 800bbf2:	bf00      	nop
 800bbf4:	371c      	adds	r7, #28
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr
 800bbfe:	bf00      	nop
 800bc00:	40010000 	.word	0x40010000
 800bc04:	40010400 	.word	0x40010400

0800bc08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b087      	sub	sp, #28
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6a1b      	ldr	r3, [r3, #32]
 800bc16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	685b      	ldr	r3, [r3, #4]
 800bc28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	69db      	ldr	r3, [r3, #28]
 800bc2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f023 0303 	bic.w	r3, r3, #3
 800bc3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	68fa      	ldr	r2, [r7, #12]
 800bc46:	4313      	orrs	r3, r2
 800bc48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bc50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	689b      	ldr	r3, [r3, #8]
 800bc56:	021b      	lsls	r3, r3, #8
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	4313      	orrs	r3, r2
 800bc5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	4a21      	ldr	r2, [pc, #132]	; (800bce8 <TIM_OC3_SetConfig+0xe0>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d003      	beq.n	800bc6e <TIM_OC3_SetConfig+0x66>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	4a20      	ldr	r2, [pc, #128]	; (800bcec <TIM_OC3_SetConfig+0xe4>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d10d      	bne.n	800bc8a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bc74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	021b      	lsls	r3, r3, #8
 800bc7c:	697a      	ldr	r2, [r7, #20]
 800bc7e:	4313      	orrs	r3, r2
 800bc80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bc88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a16      	ldr	r2, [pc, #88]	; (800bce8 <TIM_OC3_SetConfig+0xe0>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d003      	beq.n	800bc9a <TIM_OC3_SetConfig+0x92>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	4a15      	ldr	r2, [pc, #84]	; (800bcec <TIM_OC3_SetConfig+0xe4>)
 800bc96:	4293      	cmp	r3, r2
 800bc98:	d113      	bne.n	800bcc2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bc9a:	693b      	ldr	r3, [r7, #16]
 800bc9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bca0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bca2:	693b      	ldr	r3, [r7, #16]
 800bca4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bca8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	011b      	lsls	r3, r3, #4
 800bcb0:	693a      	ldr	r2, [r7, #16]
 800bcb2:	4313      	orrs	r3, r2
 800bcb4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bcb6:	683b      	ldr	r3, [r7, #0]
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	011b      	lsls	r3, r3, #4
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	4313      	orrs	r3, r2
 800bcc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685a      	ldr	r2, [r3, #4]
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	697a      	ldr	r2, [r7, #20]
 800bcda:	621a      	str	r2, [r3, #32]
}
 800bcdc:	bf00      	nop
 800bcde:	371c      	adds	r7, #28
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr
 800bce8:	40010000 	.word	0x40010000
 800bcec:	40010400 	.word	0x40010400

0800bcf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b087      	sub	sp, #28
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]
 800bcf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6a1b      	ldr	r3, [r3, #32]
 800bcfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6a1b      	ldr	r3, [r3, #32]
 800bd0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	685b      	ldr	r3, [r3, #4]
 800bd10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	69db      	ldr	r3, [r3, #28]
 800bd16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	681b      	ldr	r3, [r3, #0]
 800bd2c:	021b      	lsls	r3, r3, #8
 800bd2e:	68fa      	ldr	r2, [r7, #12]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bd3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	689b      	ldr	r3, [r3, #8]
 800bd40:	031b      	lsls	r3, r3, #12
 800bd42:	693a      	ldr	r2, [r7, #16]
 800bd44:	4313      	orrs	r3, r2
 800bd46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	4a12      	ldr	r2, [pc, #72]	; (800bd94 <TIM_OC4_SetConfig+0xa4>)
 800bd4c:	4293      	cmp	r3, r2
 800bd4e:	d003      	beq.n	800bd58 <TIM_OC4_SetConfig+0x68>
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	4a11      	ldr	r2, [pc, #68]	; (800bd98 <TIM_OC4_SetConfig+0xa8>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d109      	bne.n	800bd6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800bd58:	697b      	ldr	r3, [r7, #20]
 800bd5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800bd60:	683b      	ldr	r3, [r7, #0]
 800bd62:	695b      	ldr	r3, [r3, #20]
 800bd64:	019b      	lsls	r3, r3, #6
 800bd66:	697a      	ldr	r2, [r7, #20]
 800bd68:	4313      	orrs	r3, r2
 800bd6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	697a      	ldr	r2, [r7, #20]
 800bd70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	685a      	ldr	r2, [r3, #4]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	693a      	ldr	r2, [r7, #16]
 800bd84:	621a      	str	r2, [r3, #32]
}
 800bd86:	bf00      	nop
 800bd88:	371c      	adds	r7, #28
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd90:	4770      	bx	lr
 800bd92:	bf00      	nop
 800bd94:	40010000 	.word	0x40010000
 800bd98:	40010400 	.word	0x40010400

0800bd9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b087      	sub	sp, #28
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	60f8      	str	r0, [r7, #12]
 800bda4:	60b9      	str	r1, [r7, #8]
 800bda6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	f003 031f 	and.w	r3, r3, #31
 800bdae:	2201      	movs	r2, #1
 800bdb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a1a      	ldr	r2, [r3, #32]
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	43db      	mvns	r3, r3
 800bdbe:	401a      	ands	r2, r3
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	6a1a      	ldr	r2, [r3, #32]
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	f003 031f 	and.w	r3, r3, #31
 800bdce:	6879      	ldr	r1, [r7, #4]
 800bdd0:	fa01 f303 	lsl.w	r3, r1, r3
 800bdd4:	431a      	orrs	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	621a      	str	r2, [r3, #32]
}
 800bdda:	bf00      	nop
 800bddc:	371c      	adds	r7, #28
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr
	...

0800bde8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
 800bdf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bdf8:	2b01      	cmp	r3, #1
 800bdfa:	d101      	bne.n	800be00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bdfc:	2302      	movs	r3, #2
 800bdfe:	e05a      	b.n	800beb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2201      	movs	r2, #1
 800be04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2202      	movs	r2, #2
 800be0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	685b      	ldr	r3, [r3, #4]
 800be16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	689b      	ldr	r3, [r3, #8]
 800be1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	68fa      	ldr	r2, [r7, #12]
 800be2e:	4313      	orrs	r3, r2
 800be30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	4a21      	ldr	r2, [pc, #132]	; (800bec4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d022      	beq.n	800be8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be4c:	d01d      	beq.n	800be8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a1d      	ldr	r2, [pc, #116]	; (800bec8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800be54:	4293      	cmp	r3, r2
 800be56:	d018      	beq.n	800be8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	4a1b      	ldr	r2, [pc, #108]	; (800becc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d013      	beq.n	800be8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a1a      	ldr	r2, [pc, #104]	; (800bed0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d00e      	beq.n	800be8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	4a18      	ldr	r2, [pc, #96]	; (800bed4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800be72:	4293      	cmp	r3, r2
 800be74:	d009      	beq.n	800be8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	4a17      	ldr	r2, [pc, #92]	; (800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d004      	beq.n	800be8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a15      	ldr	r2, [pc, #84]	; (800bedc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d10c      	bne.n	800bea4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800be8a:	68bb      	ldr	r3, [r7, #8]
 800be8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800be92:	683b      	ldr	r3, [r7, #0]
 800be94:	685b      	ldr	r3, [r3, #4]
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	4313      	orrs	r3, r2
 800be9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	2201      	movs	r2, #1
 800bea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800beb4:	2300      	movs	r3, #0
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	3714      	adds	r7, #20
 800beba:	46bd      	mov	sp, r7
 800bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec0:	4770      	bx	lr
 800bec2:	bf00      	nop
 800bec4:	40010000 	.word	0x40010000
 800bec8:	40000400 	.word	0x40000400
 800becc:	40000800 	.word	0x40000800
 800bed0:	40000c00 	.word	0x40000c00
 800bed4:	40010400 	.word	0x40010400
 800bed8:	40014000 	.word	0x40014000
 800bedc:	40001800 	.word	0x40001800

0800bee0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800beea:	2300      	movs	r3, #0
 800beec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d101      	bne.n	800befc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bef8:	2302      	movs	r3, #2
 800befa:	e03d      	b.n	800bf78 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	4313      	orrs	r3, r2
 800bf10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	4313      	orrs	r3, r2
 800bf1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	4313      	orrs	r3, r2
 800bf2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bf34:	683b      	ldr	r3, [r7, #0]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	4313      	orrs	r3, r2
 800bf3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bf50:	683b      	ldr	r3, [r7, #0]
 800bf52:	695b      	ldr	r3, [r3, #20]
 800bf54:	4313      	orrs	r3, r2
 800bf56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	69db      	ldr	r3, [r3, #28]
 800bf62:	4313      	orrs	r3, r2
 800bf64:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf84:	b480      	push	{r7}
 800bf86:	b083      	sub	sp, #12
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf8c:	bf00      	nop
 800bf8e:	370c      	adds	r7, #12
 800bf90:	46bd      	mov	sp, r7
 800bf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf96:	4770      	bx	lr

0800bf98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b083      	sub	sp, #12
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bfa0:	bf00      	nop
 800bfa2:	370c      	adds	r7, #12
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e03f      	b.n	800c03e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d106      	bne.n	800bfd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7f9 ffb6 	bl	8005f44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2224      	movs	r2, #36	; 0x24
 800bfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	68da      	ldr	r2, [r3, #12]
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bfee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f000 fddf 	bl	800cbb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	691a      	ldr	r2, [r3, #16]
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c004:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	695a      	ldr	r2, [r3, #20]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c014:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	68da      	ldr	r2, [r3, #12]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c024:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2220      	movs	r2, #32
 800c038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3708      	adds	r7, #8
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b08a      	sub	sp, #40	; 0x28
 800c04a:	af02      	add	r7, sp, #8
 800c04c:	60f8      	str	r0, [r7, #12]
 800c04e:	60b9      	str	r1, [r7, #8]
 800c050:	603b      	str	r3, [r7, #0]
 800c052:	4613      	mov	r3, r2
 800c054:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800c056:	2300      	movs	r3, #0
 800c058:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2b20      	cmp	r3, #32
 800c064:	d17c      	bne.n	800c160 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800c066:	68bb      	ldr	r3, [r7, #8]
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d002      	beq.n	800c072 <HAL_UART_Transmit+0x2c>
 800c06c:	88fb      	ldrh	r3, [r7, #6]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800c072:	2301      	movs	r3, #1
 800c074:	e075      	b.n	800c162 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d101      	bne.n	800c084 <HAL_UART_Transmit+0x3e>
 800c080:	2302      	movs	r3, #2
 800c082:	e06e      	b.n	800c162 <HAL_UART_Transmit+0x11c>
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	2201      	movs	r2, #1
 800c088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2200      	movs	r2, #0
 800c090:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	2221      	movs	r2, #33	; 0x21
 800c096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c09a:	f7fa fa7d 	bl	8006598 <HAL_GetTick>
 800c09e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	88fa      	ldrh	r2, [r7, #6]
 800c0a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	88fa      	ldrh	r2, [r7, #6]
 800c0aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	689b      	ldr	r3, [r3, #8]
 800c0b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0b4:	d108      	bne.n	800c0c8 <HAL_UART_Transmit+0x82>
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d104      	bne.n	800c0c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800c0be:	2300      	movs	r3, #0
 800c0c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	61bb      	str	r3, [r7, #24]
 800c0c6:	e003      	b.n	800c0d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800c0d8:	e02a      	b.n	800c130 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	9300      	str	r3, [sp, #0]
 800c0de:	697b      	ldr	r3, [r7, #20]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	2180      	movs	r1, #128	; 0x80
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 fb1f 	bl	800c728 <UART_WaitOnFlagUntilTimeout>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d001      	beq.n	800c0f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e036      	b.n	800c162 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800c0f4:	69fb      	ldr	r3, [r7, #28]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	881b      	ldrh	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800c10a:	69bb      	ldr	r3, [r7, #24]
 800c10c:	3302      	adds	r3, #2
 800c10e:	61bb      	str	r3, [r7, #24]
 800c110:	e007      	b.n	800c122 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	781a      	ldrb	r2, [r3, #0]
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800c11c:	69fb      	ldr	r3, [r7, #28]
 800c11e:	3301      	adds	r3, #1
 800c120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c126:	b29b      	uxth	r3, r3
 800c128:	3b01      	subs	r3, #1
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c134:	b29b      	uxth	r3, r3
 800c136:	2b00      	cmp	r3, #0
 800c138:	d1cf      	bne.n	800c0da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	9300      	str	r3, [sp, #0]
 800c13e:	697b      	ldr	r3, [r7, #20]
 800c140:	2200      	movs	r2, #0
 800c142:	2140      	movs	r1, #64	; 0x40
 800c144:	68f8      	ldr	r0, [r7, #12]
 800c146:	f000 faef 	bl	800c728 <UART_WaitOnFlagUntilTimeout>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d001      	beq.n	800c154 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800c150:	2303      	movs	r3, #3
 800c152:	e006      	b.n	800c162 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2220      	movs	r2, #32
 800c158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800c15c:	2300      	movs	r3, #0
 800c15e:	e000      	b.n	800c162 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800c160:	2302      	movs	r3, #2
  }
}
 800c162:	4618      	mov	r0, r3
 800c164:	3720      	adds	r7, #32
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}

0800c16a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c16a:	b580      	push	{r7, lr}
 800c16c:	b084      	sub	sp, #16
 800c16e:	af00      	add	r7, sp, #0
 800c170:	60f8      	str	r0, [r7, #12]
 800c172:	60b9      	str	r1, [r7, #8]
 800c174:	4613      	mov	r3, r2
 800c176:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c178:	68fb      	ldr	r3, [r7, #12]
 800c17a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c17e:	b2db      	uxtb	r3, r3
 800c180:	2b20      	cmp	r3, #32
 800c182:	d11d      	bne.n	800c1c0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800c184:	68bb      	ldr	r3, [r7, #8]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d002      	beq.n	800c190 <HAL_UART_Receive_IT+0x26>
 800c18a:	88fb      	ldrh	r3, [r7, #6]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d101      	bne.n	800c194 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800c190:	2301      	movs	r3, #1
 800c192:	e016      	b.n	800c1c2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c19a:	2b01      	cmp	r3, #1
 800c19c:	d101      	bne.n	800c1a2 <HAL_UART_Receive_IT+0x38>
 800c19e:	2302      	movs	r3, #2
 800c1a0:	e00f      	b.n	800c1c2 <HAL_UART_Receive_IT+0x58>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c1b0:	88fb      	ldrh	r3, [r7, #6]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	68b9      	ldr	r1, [r7, #8]
 800c1b6:	68f8      	ldr	r0, [r7, #12]
 800c1b8:	f000 fb24 	bl	800c804 <UART_Start_Receive_IT>
 800c1bc:	4603      	mov	r3, r0
 800c1be:	e000      	b.n	800c1c2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800c1c0:	2302      	movs	r3, #2
  }
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
	...

0800c1cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b0ba      	sub	sp, #232	; 0xe8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	68db      	ldr	r3, [r3, #12]
 800c1e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	695b      	ldr	r3, [r3, #20]
 800c1ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c202:	f003 030f 	and.w	r3, r3, #15
 800c206:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c20a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10f      	bne.n	800c232 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d009      	beq.n	800c232 <HAL_UART_IRQHandler+0x66>
 800c21e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c222:	f003 0320 	and.w	r3, r3, #32
 800c226:	2b00      	cmp	r3, #0
 800c228:	d003      	beq.n	800c232 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f000 fc07 	bl	800ca3e <UART_Receive_IT>
      return;
 800c230:	e256      	b.n	800c6e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c232:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c236:	2b00      	cmp	r3, #0
 800c238:	f000 80de 	beq.w	800c3f8 <HAL_UART_IRQHandler+0x22c>
 800c23c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c240:	f003 0301 	and.w	r3, r3, #1
 800c244:	2b00      	cmp	r3, #0
 800c246:	d106      	bne.n	800c256 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c24c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 80d1 	beq.w	800c3f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25a:	f003 0301 	and.w	r3, r3, #1
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d00b      	beq.n	800c27a <HAL_UART_IRQHandler+0xae>
 800c262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d005      	beq.n	800c27a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c272:	f043 0201 	orr.w	r2, r3, #1
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c27e:	f003 0304 	and.w	r3, r3, #4
 800c282:	2b00      	cmp	r3, #0
 800c284:	d00b      	beq.n	800c29e <HAL_UART_IRQHandler+0xd2>
 800c286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c28a:	f003 0301 	and.w	r3, r3, #1
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d005      	beq.n	800c29e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c296:	f043 0202 	orr.w	r2, r3, #2
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2a2:	f003 0302 	and.w	r3, r3, #2
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d00b      	beq.n	800c2c2 <HAL_UART_IRQHandler+0xf6>
 800c2aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2ae:	f003 0301 	and.w	r3, r3, #1
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d005      	beq.n	800c2c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ba:	f043 0204 	orr.w	r2, r3, #4
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c2c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2c6:	f003 0308 	and.w	r3, r3, #8
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d011      	beq.n	800c2f2 <HAL_UART_IRQHandler+0x126>
 800c2ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2d2:	f003 0320 	and.w	r3, r3, #32
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d105      	bne.n	800c2e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c2da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2de:	f003 0301 	and.w	r3, r3, #1
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d005      	beq.n	800c2f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ea:	f043 0208 	orr.w	r2, r3, #8
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	f000 81ed 	beq.w	800c6d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c300:	f003 0320 	and.w	r3, r3, #32
 800c304:	2b00      	cmp	r3, #0
 800c306:	d008      	beq.n	800c31a <HAL_UART_IRQHandler+0x14e>
 800c308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c30c:	f003 0320 	and.w	r3, r3, #32
 800c310:	2b00      	cmp	r3, #0
 800c312:	d002      	beq.n	800c31a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 fb92 	bl	800ca3e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	695b      	ldr	r3, [r3, #20]
 800c320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c324:	2b40      	cmp	r3, #64	; 0x40
 800c326:	bf0c      	ite	eq
 800c328:	2301      	moveq	r3, #1
 800c32a:	2300      	movne	r3, #0
 800c32c:	b2db      	uxtb	r3, r3
 800c32e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c336:	f003 0308 	and.w	r3, r3, #8
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d103      	bne.n	800c346 <HAL_UART_IRQHandler+0x17a>
 800c33e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c342:	2b00      	cmp	r3, #0
 800c344:	d04f      	beq.n	800c3e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa9a 	bl	800c880 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	695b      	ldr	r3, [r3, #20]
 800c352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c356:	2b40      	cmp	r3, #64	; 0x40
 800c358:	d141      	bne.n	800c3de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	3314      	adds	r3, #20
 800c360:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c364:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c368:	e853 3f00 	ldrex	r3, [r3]
 800c36c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c370:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c374:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c378:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	3314      	adds	r3, #20
 800c382:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c386:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c38a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c38e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c392:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c396:	e841 2300 	strex	r3, r2, [r1]
 800c39a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c39e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d1d9      	bne.n	800c35a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d013      	beq.n	800c3d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b2:	4a7d      	ldr	r2, [pc, #500]	; (800c5a8 <HAL_UART_IRQHandler+0x3dc>)
 800c3b4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f7fa fba6 	bl	8006b0c <HAL_DMA_Abort_IT>
 800c3c0:	4603      	mov	r3, r0
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d016      	beq.n	800c3f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800c3d0:	4610      	mov	r0, r2
 800c3d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3d4:	e00e      	b.n	800c3f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	f000 f990 	bl	800c6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3dc:	e00a      	b.n	800c3f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3de:	6878      	ldr	r0, [r7, #4]
 800c3e0:	f000 f98c 	bl	800c6fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3e4:	e006      	b.n	800c3f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f000 f988 	bl	800c6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800c3f2:	e170      	b.n	800c6d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3f4:	bf00      	nop
    return;
 800c3f6:	e16e      	b.n	800c6d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	f040 814a 	bne.w	800c696 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c406:	f003 0310 	and.w	r3, r3, #16
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 8143 	beq.w	800c696 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c414:	f003 0310 	and.w	r3, r3, #16
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f000 813c 	beq.w	800c696 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c41e:	2300      	movs	r3, #0
 800c420:	60bb      	str	r3, [r7, #8]
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	60bb      	str	r3, [r7, #8]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	685b      	ldr	r3, [r3, #4]
 800c430:	60bb      	str	r3, [r7, #8]
 800c432:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	695b      	ldr	r3, [r3, #20]
 800c43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c43e:	2b40      	cmp	r3, #64	; 0x40
 800c440:	f040 80b4 	bne.w	800c5ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c450:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 8140 	beq.w	800c6da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c45e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c462:	429a      	cmp	r2, r3
 800c464:	f080 8139 	bcs.w	800c6da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c46e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c474:	69db      	ldr	r3, [r3, #28]
 800c476:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c47a:	f000 8088 	beq.w	800c58e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	330c      	adds	r3, #12
 800c484:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c488:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c48c:	e853 3f00 	ldrex	r3, [r3]
 800c490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c494:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c498:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c49c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	330c      	adds	r3, #12
 800c4a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c4aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c4ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c4b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c4ba:	e841 2300 	strex	r3, r2, [r1]
 800c4be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c4c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1d9      	bne.n	800c47e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	3314      	adds	r3, #20
 800c4d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4d4:	e853 3f00 	ldrex	r3, [r3]
 800c4d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4dc:	f023 0301 	bic.w	r3, r3, #1
 800c4e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	3314      	adds	r3, #20
 800c4ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4fa:	e841 2300 	strex	r3, r2, [r1]
 800c4fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c500:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c502:	2b00      	cmp	r3, #0
 800c504:	d1e1      	bne.n	800c4ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	3314      	adds	r3, #20
 800c50c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c510:	e853 3f00 	ldrex	r3, [r3]
 800c514:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c516:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c518:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c51c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	3314      	adds	r3, #20
 800c526:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c52a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c52c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c530:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c532:	e841 2300 	strex	r3, r2, [r1]
 800c536:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c538:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1e3      	bne.n	800c506 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2220      	movs	r2, #32
 800c542:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	2200      	movs	r2, #0
 800c54a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	330c      	adds	r3, #12
 800c552:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c556:	e853 3f00 	ldrex	r3, [r3]
 800c55a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c55e:	f023 0310 	bic.w	r3, r3, #16
 800c562:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	330c      	adds	r3, #12
 800c56c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c570:	65ba      	str	r2, [r7, #88]	; 0x58
 800c572:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c574:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c576:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c578:	e841 2300 	strex	r3, r2, [r1]
 800c57c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c57e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c580:	2b00      	cmp	r3, #0
 800c582:	d1e3      	bne.n	800c54c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c588:	4618      	mov	r0, r3
 800c58a:	f7fa fa4f 	bl	8006a2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c596:	b29b      	uxth	r3, r3
 800c598:	1ad3      	subs	r3, r2, r3
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	4619      	mov	r1, r3
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f000 f8b6 	bl	800c710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c5a4:	e099      	b.n	800c6da <HAL_UART_IRQHandler+0x50e>
 800c5a6:	bf00      	nop
 800c5a8:	0800c947 	.word	0x0800c947
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c5b4:	b29b      	uxth	r3, r3
 800c5b6:	1ad3      	subs	r3, r2, r3
 800c5b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c5c0:	b29b      	uxth	r3, r3
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 808b 	beq.w	800c6de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c5c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f000 8086 	beq.w	800c6de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	330c      	adds	r3, #12
 800c5d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5dc:	e853 3f00 	ldrex	r3, [r3]
 800c5e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	330c      	adds	r3, #12
 800c5f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c5f6:	647a      	str	r2, [r7, #68]	; 0x44
 800c5f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5fe:	e841 2300 	strex	r3, r2, [r1]
 800c602:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c606:	2b00      	cmp	r3, #0
 800c608:	d1e3      	bne.n	800c5d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3314      	adds	r3, #20
 800c610:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c614:	e853 3f00 	ldrex	r3, [r3]
 800c618:	623b      	str	r3, [r7, #32]
   return(result);
 800c61a:	6a3b      	ldr	r3, [r7, #32]
 800c61c:	f023 0301 	bic.w	r3, r3, #1
 800c620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	3314      	adds	r3, #20
 800c62a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c62e:	633a      	str	r2, [r7, #48]	; 0x30
 800c630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c636:	e841 2300 	strex	r3, r2, [r1]
 800c63a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c63c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d1e3      	bne.n	800c60a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2220      	movs	r2, #32
 800c646:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	330c      	adds	r3, #12
 800c656:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	e853 3f00 	ldrex	r3, [r3]
 800c65e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	f023 0310 	bic.w	r3, r3, #16
 800c666:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	330c      	adds	r3, #12
 800c670:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c674:	61fa      	str	r2, [r7, #28]
 800c676:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c678:	69b9      	ldr	r1, [r7, #24]
 800c67a:	69fa      	ldr	r2, [r7, #28]
 800c67c:	e841 2300 	strex	r3, r2, [r1]
 800c680:	617b      	str	r3, [r7, #20]
   return(result);
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d1e3      	bne.n	800c650 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c688:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c68c:	4619      	mov	r1, r3
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f000 f83e 	bl	800c710 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c694:	e023      	b.n	800c6de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c69a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d009      	beq.n	800c6b6 <HAL_UART_IRQHandler+0x4ea>
 800c6a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d003      	beq.n	800c6b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f95d 	bl	800c96e <UART_Transmit_IT>
    return;
 800c6b4:	e014      	b.n	800c6e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00e      	beq.n	800c6e0 <HAL_UART_IRQHandler+0x514>
 800c6c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d008      	beq.n	800c6e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f000 f99d 	bl	800ca0e <UART_EndTransmit_IT>
    return;
 800c6d4:	e004      	b.n	800c6e0 <HAL_UART_IRQHandler+0x514>
    return;
 800c6d6:	bf00      	nop
 800c6d8:	e002      	b.n	800c6e0 <HAL_UART_IRQHandler+0x514>
      return;
 800c6da:	bf00      	nop
 800c6dc:	e000      	b.n	800c6e0 <HAL_UART_IRQHandler+0x514>
      return;
 800c6de:	bf00      	nop
  }
}
 800c6e0:	37e8      	adds	r7, #232	; 0xe8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop

0800c6e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6e8:	b480      	push	{r7}
 800c6ea:	b083      	sub	sp, #12
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c6f0:	bf00      	nop
 800c6f2:	370c      	adds	r7, #12
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b083      	sub	sp, #12
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c704:	bf00      	nop
 800c706:	370c      	adds	r7, #12
 800c708:	46bd      	mov	sp, r7
 800c70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70e:	4770      	bx	lr

0800c710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c710:	b480      	push	{r7}
 800c712:	b083      	sub	sp, #12
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
 800c718:	460b      	mov	r3, r1
 800c71a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c71c:	bf00      	nop
 800c71e:	370c      	adds	r7, #12
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b090      	sub	sp, #64	; 0x40
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	60f8      	str	r0, [r7, #12]
 800c730:	60b9      	str	r1, [r7, #8]
 800c732:	603b      	str	r3, [r7, #0]
 800c734:	4613      	mov	r3, r2
 800c736:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c738:	e050      	b.n	800c7dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c740:	d04c      	beq.n	800c7dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c744:	2b00      	cmp	r3, #0
 800c746:	d007      	beq.n	800c758 <UART_WaitOnFlagUntilTimeout+0x30>
 800c748:	f7f9 ff26 	bl	8006598 <HAL_GetTick>
 800c74c:	4602      	mov	r2, r0
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c754:	429a      	cmp	r2, r3
 800c756:	d241      	bcs.n	800c7dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	330c      	adds	r3, #12
 800c75e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c762:	e853 3f00 	ldrex	r3, [r3]
 800c766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c76a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c76e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	330c      	adds	r3, #12
 800c776:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c778:	637a      	str	r2, [r7, #52]	; 0x34
 800c77a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c77e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c780:	e841 2300 	strex	r3, r2, [r1]
 800c784:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e5      	bne.n	800c758 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3314      	adds	r3, #20
 800c792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	e853 3f00 	ldrex	r3, [r3]
 800c79a:	613b      	str	r3, [r7, #16]
   return(result);
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	f023 0301 	bic.w	r3, r3, #1
 800c7a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	3314      	adds	r3, #20
 800c7aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c7ac:	623a      	str	r2, [r7, #32]
 800c7ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b0:	69f9      	ldr	r1, [r7, #28]
 800c7b2:	6a3a      	ldr	r2, [r7, #32]
 800c7b4:	e841 2300 	strex	r3, r2, [r1]
 800c7b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c7ba:	69bb      	ldr	r3, [r7, #24]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1e5      	bne.n	800c78c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	2220      	movs	r2, #32
 800c7c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c7c8:	68fb      	ldr	r3, [r7, #12]
 800c7ca:	2220      	movs	r2, #32
 800c7cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c7d8:	2303      	movs	r3, #3
 800c7da:	e00f      	b.n	800c7fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	681a      	ldr	r2, [r3, #0]
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	4013      	ands	r3, r2
 800c7e6:	68ba      	ldr	r2, [r7, #8]
 800c7e8:	429a      	cmp	r2, r3
 800c7ea:	bf0c      	ite	eq
 800c7ec:	2301      	moveq	r3, #1
 800c7ee:	2300      	movne	r3, #0
 800c7f0:	b2db      	uxtb	r3, r3
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	79fb      	ldrb	r3, [r7, #7]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d09f      	beq.n	800c73a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c7fa:	2300      	movs	r3, #0
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3740      	adds	r7, #64	; 0x40
 800c800:	46bd      	mov	sp, r7
 800c802:	bd80      	pop	{r7, pc}

0800c804 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	4613      	mov	r3, r2
 800c810:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	68ba      	ldr	r2, [r7, #8]
 800c816:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	88fa      	ldrh	r2, [r7, #6]
 800c81c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	88fa      	ldrh	r2, [r7, #6]
 800c822:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2222      	movs	r2, #34	; 0x22
 800c82e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2200      	movs	r2, #0
 800c836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d007      	beq.n	800c852 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68da      	ldr	r2, [r3, #12]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c850:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	695a      	ldr	r2, [r3, #20]
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	f042 0201 	orr.w	r2, r2, #1
 800c860:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	68da      	ldr	r2, [r3, #12]
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f042 0220 	orr.w	r2, r2, #32
 800c870:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3714      	adds	r7, #20
 800c878:	46bd      	mov	sp, r7
 800c87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c87e:	4770      	bx	lr

0800c880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c880:	b480      	push	{r7}
 800c882:	b095      	sub	sp, #84	; 0x54
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	330c      	adds	r3, #12
 800c88e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c892:	e853 3f00 	ldrex	r3, [r3]
 800c896:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c89e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	330c      	adds	r3, #12
 800c8a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8a8:	643a      	str	r2, [r7, #64]	; 0x40
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c8ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c8b0:	e841 2300 	strex	r3, r2, [r1]
 800c8b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c8b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d1e5      	bne.n	800c888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3314      	adds	r3, #20
 800c8c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c4:	6a3b      	ldr	r3, [r7, #32]
 800c8c6:	e853 3f00 	ldrex	r3, [r3]
 800c8ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8cc:	69fb      	ldr	r3, [r7, #28]
 800c8ce:	f023 0301 	bic.w	r3, r3, #1
 800c8d2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	3314      	adds	r3, #20
 800c8da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c8de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8e4:	e841 2300 	strex	r3, r2, [r1]
 800c8e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d1e5      	bne.n	800c8bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8f4:	2b01      	cmp	r3, #1
 800c8f6:	d119      	bne.n	800c92c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	330c      	adds	r3, #12
 800c8fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	e853 3f00 	ldrex	r3, [r3]
 800c906:	60bb      	str	r3, [r7, #8]
   return(result);
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	f023 0310 	bic.w	r3, r3, #16
 800c90e:	647b      	str	r3, [r7, #68]	; 0x44
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	330c      	adds	r3, #12
 800c916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c918:	61ba      	str	r2, [r7, #24]
 800c91a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91c:	6979      	ldr	r1, [r7, #20]
 800c91e:	69ba      	ldr	r2, [r7, #24]
 800c920:	e841 2300 	strex	r3, r2, [r1]
 800c924:	613b      	str	r3, [r7, #16]
   return(result);
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d1e5      	bne.n	800c8f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2220      	movs	r2, #32
 800c930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2200      	movs	r2, #0
 800c938:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c93a:	bf00      	nop
 800c93c:	3754      	adds	r7, #84	; 0x54
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b084      	sub	sp, #16
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c952:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	2200      	movs	r2, #0
 800c958:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	2200      	movs	r2, #0
 800c95e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f7ff fecb 	bl	800c6fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c966:	bf00      	nop
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}

0800c96e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c96e:	b480      	push	{r7}
 800c970:	b085      	sub	sp, #20
 800c972:	af00      	add	r7, sp, #0
 800c974:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	2b21      	cmp	r3, #33	; 0x21
 800c980:	d13e      	bne.n	800ca00 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	689b      	ldr	r3, [r3, #8]
 800c986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c98a:	d114      	bne.n	800c9b6 <UART_Transmit_IT+0x48>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d110      	bne.n	800c9b6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	461a      	mov	r2, r3
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9a8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	6a1b      	ldr	r3, [r3, #32]
 800c9ae:	1c9a      	adds	r2, r3, #2
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	621a      	str	r2, [r3, #32]
 800c9b4:	e008      	b.n	800c9c8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6a1b      	ldr	r3, [r3, #32]
 800c9ba:	1c59      	adds	r1, r3, #1
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	6211      	str	r1, [r2, #32]
 800c9c0:	781a      	ldrb	r2, [r3, #0]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c9cc:	b29b      	uxth	r3, r3
 800c9ce:	3b01      	subs	r3, #1
 800c9d0:	b29b      	uxth	r3, r3
 800c9d2:	687a      	ldr	r2, [r7, #4]
 800c9d4:	4619      	mov	r1, r3
 800c9d6:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d10f      	bne.n	800c9fc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	68da      	ldr	r2, [r3, #12]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9ea:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68da      	ldr	r2, [r3, #12]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9fa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9fc:	2300      	movs	r3, #0
 800c9fe:	e000      	b.n	800ca02 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800ca00:	2302      	movs	r3, #2
  }
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3714      	adds	r7, #20
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b082      	sub	sp, #8
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	68da      	ldr	r2, [r3, #12]
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca24:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2220      	movs	r2, #32
 800ca2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ca2e:	6878      	ldr	r0, [r7, #4]
 800ca30:	f7ff fe5a 	bl	800c6e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3708      	adds	r7, #8
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b08c      	sub	sp, #48	; 0x30
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	2b22      	cmp	r3, #34	; 0x22
 800ca50:	f040 80ab 	bne.w	800cbaa <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	689b      	ldr	r3, [r3, #8]
 800ca58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca5c:	d117      	bne.n	800ca8e <UART_Receive_IT+0x50>
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d113      	bne.n	800ca8e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca66:	2300      	movs	r3, #0
 800ca68:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca6e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca80:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca86:	1c9a      	adds	r2, r3, #2
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	629a      	str	r2, [r3, #40]	; 0x28
 800ca8c:	e026      	b.n	800cadc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca92:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca94:	2300      	movs	r3, #0
 800ca96:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	689b      	ldr	r3, [r3, #8]
 800ca9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caa0:	d007      	beq.n	800cab2 <UART_Receive_IT+0x74>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	689b      	ldr	r3, [r3, #8]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d10a      	bne.n	800cac0 <UART_Receive_IT+0x82>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	691b      	ldr	r3, [r3, #16]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d106      	bne.n	800cac0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	685b      	ldr	r3, [r3, #4]
 800cab8:	b2da      	uxtb	r2, r3
 800caba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cabc:	701a      	strb	r2, [r3, #0]
 800cabe:	e008      	b.n	800cad2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cad6:	1c5a      	adds	r2, r3, #1
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cae0:	b29b      	uxth	r3, r3
 800cae2:	3b01      	subs	r3, #1
 800cae4:	b29b      	uxth	r3, r3
 800cae6:	687a      	ldr	r2, [r7, #4]
 800cae8:	4619      	mov	r1, r3
 800caea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800caec:	2b00      	cmp	r3, #0
 800caee:	d15a      	bne.n	800cba6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	68da      	ldr	r2, [r3, #12]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	f022 0220 	bic.w	r2, r2, #32
 800cafe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	68da      	ldr	r2, [r3, #12]
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cb0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	695a      	ldr	r2, [r3, #20]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f022 0201 	bic.w	r2, r2, #1
 800cb1e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2220      	movs	r2, #32
 800cb24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb2c:	2b01      	cmp	r3, #1
 800cb2e:	d135      	bne.n	800cb9c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	2200      	movs	r2, #0
 800cb34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	330c      	adds	r3, #12
 800cb3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	e853 3f00 	ldrex	r3, [r3]
 800cb44:	613b      	str	r3, [r7, #16]
   return(result);
 800cb46:	693b      	ldr	r3, [r7, #16]
 800cb48:	f023 0310 	bic.w	r3, r3, #16
 800cb4c:	627b      	str	r3, [r7, #36]	; 0x24
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	330c      	adds	r3, #12
 800cb54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb56:	623a      	str	r2, [r7, #32]
 800cb58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb5a:	69f9      	ldr	r1, [r7, #28]
 800cb5c:	6a3a      	ldr	r2, [r7, #32]
 800cb5e:	e841 2300 	strex	r3, r2, [r1]
 800cb62:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb64:	69bb      	ldr	r3, [r7, #24]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d1e5      	bne.n	800cb36 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 0310 	and.w	r3, r3, #16
 800cb74:	2b10      	cmp	r3, #16
 800cb76:	d10a      	bne.n	800cb8e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb78:	2300      	movs	r3, #0
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	60fb      	str	r3, [r7, #12]
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	60fb      	str	r3, [r7, #12]
 800cb8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb92:	4619      	mov	r1, r3
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f7ff fdbb 	bl	800c710 <HAL_UARTEx_RxEventCallback>
 800cb9a:	e002      	b.n	800cba2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f7f8 f8c7 	bl	8004d30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cba2:	2300      	movs	r3, #0
 800cba4:	e002      	b.n	800cbac <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800cba6:	2300      	movs	r3, #0
 800cba8:	e000      	b.n	800cbac <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cbaa:	2302      	movs	r3, #2
  }
}
 800cbac:	4618      	mov	r0, r3
 800cbae:	3730      	adds	r7, #48	; 0x30
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	bd80      	pop	{r7, pc}

0800cbb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cbb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cbb8:	b0c0      	sub	sp, #256	; 0x100
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cbc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	691b      	ldr	r3, [r3, #16]
 800cbc8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cbcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbd0:	68d9      	ldr	r1, [r3, #12]
 800cbd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbd6:	681a      	ldr	r2, [r3, #0]
 800cbd8:	ea40 0301 	orr.w	r3, r0, r1
 800cbdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cbde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbe2:	689a      	ldr	r2, [r3, #8]
 800cbe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbe8:	691b      	ldr	r3, [r3, #16]
 800cbea:	431a      	orrs	r2, r3
 800cbec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbf0:	695b      	ldr	r3, [r3, #20]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cbf8:	69db      	ldr	r3, [r3, #28]
 800cbfa:	4313      	orrs	r3, r2
 800cbfc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cc00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cc0c:	f021 010c 	bic.w	r1, r1, #12
 800cc10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800cc1a:	430b      	orrs	r3, r1
 800cc1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cc1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	695b      	ldr	r3, [r3, #20]
 800cc26:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cc2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc2e:	6999      	ldr	r1, [r3, #24]
 800cc30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	ea40 0301 	orr.w	r3, r0, r1
 800cc3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cc3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	4b8f      	ldr	r3, [pc, #572]	; (800ce80 <UART_SetConfig+0x2cc>)
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d005      	beq.n	800cc54 <UART_SetConfig+0xa0>
 800cc48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc4c:	681a      	ldr	r2, [r3, #0]
 800cc4e:	4b8d      	ldr	r3, [pc, #564]	; (800ce84 <UART_SetConfig+0x2d0>)
 800cc50:	429a      	cmp	r2, r3
 800cc52:	d104      	bne.n	800cc5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cc54:	f7fc fe3a 	bl	80098cc <HAL_RCC_GetPCLK2Freq>
 800cc58:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800cc5c:	e003      	b.n	800cc66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc5e:	f7fc fe21 	bl	80098a4 <HAL_RCC_GetPCLK1Freq>
 800cc62:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cc66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cc6a:	69db      	ldr	r3, [r3, #28]
 800cc6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cc70:	f040 810c 	bne.w	800ce8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cc74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800cc7e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800cc82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800cc86:	4622      	mov	r2, r4
 800cc88:	462b      	mov	r3, r5
 800cc8a:	1891      	adds	r1, r2, r2
 800cc8c:	65b9      	str	r1, [r7, #88]	; 0x58
 800cc8e:	415b      	adcs	r3, r3
 800cc90:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cc92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800cc96:	4621      	mov	r1, r4
 800cc98:	eb12 0801 	adds.w	r8, r2, r1
 800cc9c:	4629      	mov	r1, r5
 800cc9e:	eb43 0901 	adc.w	r9, r3, r1
 800cca2:	f04f 0200 	mov.w	r2, #0
 800cca6:	f04f 0300 	mov.w	r3, #0
 800ccaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ccae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ccb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ccb6:	4690      	mov	r8, r2
 800ccb8:	4699      	mov	r9, r3
 800ccba:	4623      	mov	r3, r4
 800ccbc:	eb18 0303 	adds.w	r3, r8, r3
 800ccc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ccc4:	462b      	mov	r3, r5
 800ccc6:	eb49 0303 	adc.w	r3, r9, r3
 800ccca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ccce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	2200      	movs	r2, #0
 800ccd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ccda:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ccde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800cce2:	460b      	mov	r3, r1
 800cce4:	18db      	adds	r3, r3, r3
 800cce6:	653b      	str	r3, [r7, #80]	; 0x50
 800cce8:	4613      	mov	r3, r2
 800ccea:	eb42 0303 	adc.w	r3, r2, r3
 800ccee:	657b      	str	r3, [r7, #84]	; 0x54
 800ccf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800ccf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800ccf8:	f7f3 fde8 	bl	80008cc <__aeabi_uldivmod>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	460b      	mov	r3, r1
 800cd00:	4b61      	ldr	r3, [pc, #388]	; (800ce88 <UART_SetConfig+0x2d4>)
 800cd02:	fba3 2302 	umull	r2, r3, r3, r2
 800cd06:	095b      	lsrs	r3, r3, #5
 800cd08:	011c      	lsls	r4, r3, #4
 800cd0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cd14:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800cd18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800cd1c:	4642      	mov	r2, r8
 800cd1e:	464b      	mov	r3, r9
 800cd20:	1891      	adds	r1, r2, r2
 800cd22:	64b9      	str	r1, [r7, #72]	; 0x48
 800cd24:	415b      	adcs	r3, r3
 800cd26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800cd2c:	4641      	mov	r1, r8
 800cd2e:	eb12 0a01 	adds.w	sl, r2, r1
 800cd32:	4649      	mov	r1, r9
 800cd34:	eb43 0b01 	adc.w	fp, r3, r1
 800cd38:	f04f 0200 	mov.w	r2, #0
 800cd3c:	f04f 0300 	mov.w	r3, #0
 800cd40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800cd44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800cd48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd4c:	4692      	mov	sl, r2
 800cd4e:	469b      	mov	fp, r3
 800cd50:	4643      	mov	r3, r8
 800cd52:	eb1a 0303 	adds.w	r3, sl, r3
 800cd56:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800cd5a:	464b      	mov	r3, r9
 800cd5c:	eb4b 0303 	adc.w	r3, fp, r3
 800cd60:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800cd64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cd70:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800cd74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800cd78:	460b      	mov	r3, r1
 800cd7a:	18db      	adds	r3, r3, r3
 800cd7c:	643b      	str	r3, [r7, #64]	; 0x40
 800cd7e:	4613      	mov	r3, r2
 800cd80:	eb42 0303 	adc.w	r3, r2, r3
 800cd84:	647b      	str	r3, [r7, #68]	; 0x44
 800cd86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cd8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800cd8e:	f7f3 fd9d 	bl	80008cc <__aeabi_uldivmod>
 800cd92:	4602      	mov	r2, r0
 800cd94:	460b      	mov	r3, r1
 800cd96:	4611      	mov	r1, r2
 800cd98:	4b3b      	ldr	r3, [pc, #236]	; (800ce88 <UART_SetConfig+0x2d4>)
 800cd9a:	fba3 2301 	umull	r2, r3, r3, r1
 800cd9e:	095b      	lsrs	r3, r3, #5
 800cda0:	2264      	movs	r2, #100	; 0x64
 800cda2:	fb02 f303 	mul.w	r3, r2, r3
 800cda6:	1acb      	subs	r3, r1, r3
 800cda8:	00db      	lsls	r3, r3, #3
 800cdaa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800cdae:	4b36      	ldr	r3, [pc, #216]	; (800ce88 <UART_SetConfig+0x2d4>)
 800cdb0:	fba3 2302 	umull	r2, r3, r3, r2
 800cdb4:	095b      	lsrs	r3, r3, #5
 800cdb6:	005b      	lsls	r3, r3, #1
 800cdb8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cdbc:	441c      	add	r4, r3
 800cdbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cdc8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800cdcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800cdd0:	4642      	mov	r2, r8
 800cdd2:	464b      	mov	r3, r9
 800cdd4:	1891      	adds	r1, r2, r2
 800cdd6:	63b9      	str	r1, [r7, #56]	; 0x38
 800cdd8:	415b      	adcs	r3, r3
 800cdda:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cde0:	4641      	mov	r1, r8
 800cde2:	1851      	adds	r1, r2, r1
 800cde4:	6339      	str	r1, [r7, #48]	; 0x30
 800cde6:	4649      	mov	r1, r9
 800cde8:	414b      	adcs	r3, r1
 800cdea:	637b      	str	r3, [r7, #52]	; 0x34
 800cdec:	f04f 0200 	mov.w	r2, #0
 800cdf0:	f04f 0300 	mov.w	r3, #0
 800cdf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800cdf8:	4659      	mov	r1, fp
 800cdfa:	00cb      	lsls	r3, r1, #3
 800cdfc:	4651      	mov	r1, sl
 800cdfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ce02:	4651      	mov	r1, sl
 800ce04:	00ca      	lsls	r2, r1, #3
 800ce06:	4610      	mov	r0, r2
 800ce08:	4619      	mov	r1, r3
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	4642      	mov	r2, r8
 800ce0e:	189b      	adds	r3, r3, r2
 800ce10:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ce14:	464b      	mov	r3, r9
 800ce16:	460a      	mov	r2, r1
 800ce18:	eb42 0303 	adc.w	r3, r2, r3
 800ce1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ce20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	2200      	movs	r2, #0
 800ce28:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800ce2c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800ce30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800ce34:	460b      	mov	r3, r1
 800ce36:	18db      	adds	r3, r3, r3
 800ce38:	62bb      	str	r3, [r7, #40]	; 0x28
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	eb42 0303 	adc.w	r3, r2, r3
 800ce40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ce42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800ce46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800ce4a:	f7f3 fd3f 	bl	80008cc <__aeabi_uldivmod>
 800ce4e:	4602      	mov	r2, r0
 800ce50:	460b      	mov	r3, r1
 800ce52:	4b0d      	ldr	r3, [pc, #52]	; (800ce88 <UART_SetConfig+0x2d4>)
 800ce54:	fba3 1302 	umull	r1, r3, r3, r2
 800ce58:	095b      	lsrs	r3, r3, #5
 800ce5a:	2164      	movs	r1, #100	; 0x64
 800ce5c:	fb01 f303 	mul.w	r3, r1, r3
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	3332      	adds	r3, #50	; 0x32
 800ce66:	4a08      	ldr	r2, [pc, #32]	; (800ce88 <UART_SetConfig+0x2d4>)
 800ce68:	fba2 2303 	umull	r2, r3, r2, r3
 800ce6c:	095b      	lsrs	r3, r3, #5
 800ce6e:	f003 0207 	and.w	r2, r3, #7
 800ce72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	4422      	add	r2, r4
 800ce7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ce7c:	e105      	b.n	800d08a <UART_SetConfig+0x4d6>
 800ce7e:	bf00      	nop
 800ce80:	40011000 	.word	0x40011000
 800ce84:	40011400 	.word	0x40011400
 800ce88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ce8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ce90:	2200      	movs	r2, #0
 800ce92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800ce96:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ce9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800ce9e:	4642      	mov	r2, r8
 800cea0:	464b      	mov	r3, r9
 800cea2:	1891      	adds	r1, r2, r2
 800cea4:	6239      	str	r1, [r7, #32]
 800cea6:	415b      	adcs	r3, r3
 800cea8:	627b      	str	r3, [r7, #36]	; 0x24
 800ceaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800ceae:	4641      	mov	r1, r8
 800ceb0:	1854      	adds	r4, r2, r1
 800ceb2:	4649      	mov	r1, r9
 800ceb4:	eb43 0501 	adc.w	r5, r3, r1
 800ceb8:	f04f 0200 	mov.w	r2, #0
 800cebc:	f04f 0300 	mov.w	r3, #0
 800cec0:	00eb      	lsls	r3, r5, #3
 800cec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800cec6:	00e2      	lsls	r2, r4, #3
 800cec8:	4614      	mov	r4, r2
 800ceca:	461d      	mov	r5, r3
 800cecc:	4643      	mov	r3, r8
 800cece:	18e3      	adds	r3, r4, r3
 800ced0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ced4:	464b      	mov	r3, r9
 800ced6:	eb45 0303 	adc.w	r3, r5, r3
 800ceda:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800ceea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800ceee:	f04f 0200 	mov.w	r2, #0
 800cef2:	f04f 0300 	mov.w	r3, #0
 800cef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800cefa:	4629      	mov	r1, r5
 800cefc:	008b      	lsls	r3, r1, #2
 800cefe:	4621      	mov	r1, r4
 800cf00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cf04:	4621      	mov	r1, r4
 800cf06:	008a      	lsls	r2, r1, #2
 800cf08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800cf0c:	f7f3 fcde 	bl	80008cc <__aeabi_uldivmod>
 800cf10:	4602      	mov	r2, r0
 800cf12:	460b      	mov	r3, r1
 800cf14:	4b60      	ldr	r3, [pc, #384]	; (800d098 <UART_SetConfig+0x4e4>)
 800cf16:	fba3 2302 	umull	r2, r3, r3, r2
 800cf1a:	095b      	lsrs	r3, r3, #5
 800cf1c:	011c      	lsls	r4, r3, #4
 800cf1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cf22:	2200      	movs	r2, #0
 800cf24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800cf28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800cf2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800cf30:	4642      	mov	r2, r8
 800cf32:	464b      	mov	r3, r9
 800cf34:	1891      	adds	r1, r2, r2
 800cf36:	61b9      	str	r1, [r7, #24]
 800cf38:	415b      	adcs	r3, r3
 800cf3a:	61fb      	str	r3, [r7, #28]
 800cf3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cf40:	4641      	mov	r1, r8
 800cf42:	1851      	adds	r1, r2, r1
 800cf44:	6139      	str	r1, [r7, #16]
 800cf46:	4649      	mov	r1, r9
 800cf48:	414b      	adcs	r3, r1
 800cf4a:	617b      	str	r3, [r7, #20]
 800cf4c:	f04f 0200 	mov.w	r2, #0
 800cf50:	f04f 0300 	mov.w	r3, #0
 800cf54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800cf58:	4659      	mov	r1, fp
 800cf5a:	00cb      	lsls	r3, r1, #3
 800cf5c:	4651      	mov	r1, sl
 800cf5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800cf62:	4651      	mov	r1, sl
 800cf64:	00ca      	lsls	r2, r1, #3
 800cf66:	4610      	mov	r0, r2
 800cf68:	4619      	mov	r1, r3
 800cf6a:	4603      	mov	r3, r0
 800cf6c:	4642      	mov	r2, r8
 800cf6e:	189b      	adds	r3, r3, r2
 800cf70:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf74:	464b      	mov	r3, r9
 800cf76:	460a      	mov	r2, r1
 800cf78:	eb42 0303 	adc.w	r3, r2, r3
 800cf7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cf80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800cf84:	685b      	ldr	r3, [r3, #4]
 800cf86:	2200      	movs	r2, #0
 800cf88:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf8a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800cf8c:	f04f 0200 	mov.w	r2, #0
 800cf90:	f04f 0300 	mov.w	r3, #0
 800cf94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800cf98:	4649      	mov	r1, r9
 800cf9a:	008b      	lsls	r3, r1, #2
 800cf9c:	4641      	mov	r1, r8
 800cf9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800cfa2:	4641      	mov	r1, r8
 800cfa4:	008a      	lsls	r2, r1, #2
 800cfa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800cfaa:	f7f3 fc8f 	bl	80008cc <__aeabi_uldivmod>
 800cfae:	4602      	mov	r2, r0
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	4b39      	ldr	r3, [pc, #228]	; (800d098 <UART_SetConfig+0x4e4>)
 800cfb4:	fba3 1302 	umull	r1, r3, r3, r2
 800cfb8:	095b      	lsrs	r3, r3, #5
 800cfba:	2164      	movs	r1, #100	; 0x64
 800cfbc:	fb01 f303 	mul.w	r3, r1, r3
 800cfc0:	1ad3      	subs	r3, r2, r3
 800cfc2:	011b      	lsls	r3, r3, #4
 800cfc4:	3332      	adds	r3, #50	; 0x32
 800cfc6:	4a34      	ldr	r2, [pc, #208]	; (800d098 <UART_SetConfig+0x4e4>)
 800cfc8:	fba2 2303 	umull	r2, r3, r2, r3
 800cfcc:	095b      	lsrs	r3, r3, #5
 800cfce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cfd2:	441c      	add	r4, r3
 800cfd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800cfd8:	2200      	movs	r2, #0
 800cfda:	673b      	str	r3, [r7, #112]	; 0x70
 800cfdc:	677a      	str	r2, [r7, #116]	; 0x74
 800cfde:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800cfe2:	4642      	mov	r2, r8
 800cfe4:	464b      	mov	r3, r9
 800cfe6:	1891      	adds	r1, r2, r2
 800cfe8:	60b9      	str	r1, [r7, #8]
 800cfea:	415b      	adcs	r3, r3
 800cfec:	60fb      	str	r3, [r7, #12]
 800cfee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cff2:	4641      	mov	r1, r8
 800cff4:	1851      	adds	r1, r2, r1
 800cff6:	6039      	str	r1, [r7, #0]
 800cff8:	4649      	mov	r1, r9
 800cffa:	414b      	adcs	r3, r1
 800cffc:	607b      	str	r3, [r7, #4]
 800cffe:	f04f 0200 	mov.w	r2, #0
 800d002:	f04f 0300 	mov.w	r3, #0
 800d006:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d00a:	4659      	mov	r1, fp
 800d00c:	00cb      	lsls	r3, r1, #3
 800d00e:	4651      	mov	r1, sl
 800d010:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d014:	4651      	mov	r1, sl
 800d016:	00ca      	lsls	r2, r1, #3
 800d018:	4610      	mov	r0, r2
 800d01a:	4619      	mov	r1, r3
 800d01c:	4603      	mov	r3, r0
 800d01e:	4642      	mov	r2, r8
 800d020:	189b      	adds	r3, r3, r2
 800d022:	66bb      	str	r3, [r7, #104]	; 0x68
 800d024:	464b      	mov	r3, r9
 800d026:	460a      	mov	r2, r1
 800d028:	eb42 0303 	adc.w	r3, r2, r3
 800d02c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d02e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	2200      	movs	r2, #0
 800d036:	663b      	str	r3, [r7, #96]	; 0x60
 800d038:	667a      	str	r2, [r7, #100]	; 0x64
 800d03a:	f04f 0200 	mov.w	r2, #0
 800d03e:	f04f 0300 	mov.w	r3, #0
 800d042:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800d046:	4649      	mov	r1, r9
 800d048:	008b      	lsls	r3, r1, #2
 800d04a:	4641      	mov	r1, r8
 800d04c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d050:	4641      	mov	r1, r8
 800d052:	008a      	lsls	r2, r1, #2
 800d054:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d058:	f7f3 fc38 	bl	80008cc <__aeabi_uldivmod>
 800d05c:	4602      	mov	r2, r0
 800d05e:	460b      	mov	r3, r1
 800d060:	4b0d      	ldr	r3, [pc, #52]	; (800d098 <UART_SetConfig+0x4e4>)
 800d062:	fba3 1302 	umull	r1, r3, r3, r2
 800d066:	095b      	lsrs	r3, r3, #5
 800d068:	2164      	movs	r1, #100	; 0x64
 800d06a:	fb01 f303 	mul.w	r3, r1, r3
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	011b      	lsls	r3, r3, #4
 800d072:	3332      	adds	r3, #50	; 0x32
 800d074:	4a08      	ldr	r2, [pc, #32]	; (800d098 <UART_SetConfig+0x4e4>)
 800d076:	fba2 2303 	umull	r2, r3, r2, r3
 800d07a:	095b      	lsrs	r3, r3, #5
 800d07c:	f003 020f 	and.w	r2, r3, #15
 800d080:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	4422      	add	r2, r4
 800d088:	609a      	str	r2, [r3, #8]
}
 800d08a:	bf00      	nop
 800d08c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800d090:	46bd      	mov	sp, r7
 800d092:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d096:	bf00      	nop
 800d098:	51eb851f 	.word	0x51eb851f

0800d09c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d09c:	b580      	push	{r7, lr}
 800d09e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d0a0:	4904      	ldr	r1, [pc, #16]	; (800d0b4 <MX_FATFS_Init+0x18>)
 800d0a2:	4805      	ldr	r0, [pc, #20]	; (800d0b8 <MX_FATFS_Init+0x1c>)
 800d0a4:	f008 f97c 	bl	80153a0 <FATFS_LinkDriver>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	4b03      	ldr	r3, [pc, #12]	; (800d0bc <MX_FATFS_Init+0x20>)
 800d0ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d0b0:	bf00      	nop
 800d0b2:	bd80      	pop	{r7, pc}
 800d0b4:	20013454 	.word	0x20013454
 800d0b8:	20000018 	.word	0x20000018
 800d0bc:	20013450 	.word	0x20013450

0800d0c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d0c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ce:	4770      	bx	lr

0800d0d0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b082      	sub	sp, #8
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800d0da:	79fb      	ldrb	r3, [r7, #7]
 800d0dc:	4618      	mov	r0, r3
 800d0de:	f7f4 fc4f 	bl	8001980 <SD_disk_initialize>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	b2db      	uxtb	r3, r3
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	3708      	adds	r7, #8
 800d0ea:	46bd      	mov	sp, r7
 800d0ec:	bd80      	pop	{r7, pc}

0800d0ee <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d0ee:	b580      	push	{r7, lr}
 800d0f0:	b082      	sub	sp, #8
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	4603      	mov	r3, r0
 800d0f6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800d0f8:	79fb      	ldrb	r3, [r7, #7]
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7f4 fd26 	bl	8001b4c <SD_disk_status>
 800d100:	4603      	mov	r3, r0
 800d102:	b2db      	uxtb	r3, r3
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800d104:	4618      	mov	r0, r3
 800d106:	3708      	adds	r7, #8
 800d108:	46bd      	mov	sp, r7
 800d10a:	bd80      	pop	{r7, pc}

0800d10c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	60b9      	str	r1, [r7, #8]
 800d114:	607a      	str	r2, [r7, #4]
 800d116:	603b      	str	r3, [r7, #0]
 800d118:	4603      	mov	r3, r0
 800d11a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800d11c:	7bf8      	ldrb	r0, [r7, #15]
 800d11e:	683b      	ldr	r3, [r7, #0]
 800d120:	687a      	ldr	r2, [r7, #4]
 800d122:	68b9      	ldr	r1, [r7, #8]
 800d124:	f7f4 fd28 	bl	8001b78 <SD_disk_read>
 800d128:	4603      	mov	r3, r0
 800d12a:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END READ */
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	60b9      	str	r1, [r7, #8]
 800d13c:	607a      	str	r2, [r7, #4]
 800d13e:	603b      	str	r3, [r7, #0]
 800d140:	4603      	mov	r3, r0
 800d142:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800d144:	7bf8      	ldrb	r0, [r7, #15]
 800d146:	683b      	ldr	r3, [r7, #0]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	68b9      	ldr	r1, [r7, #8]
 800d14c:	f7f4 fd82 	bl	8001c54 <SD_disk_write>
 800d150:	4603      	mov	r3, r0
 800d152:	b2db      	uxtb	r3, r3
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800d154:	4618      	mov	r0, r3
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}

0800d15c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d15c:	b580      	push	{r7, lr}
 800d15e:	b082      	sub	sp, #8
 800d160:	af00      	add	r7, sp, #0
 800d162:	4603      	mov	r3, r0
 800d164:	603a      	str	r2, [r7, #0]
 800d166:	71fb      	strb	r3, [r7, #7]
 800d168:	460b      	mov	r3, r1
 800d16a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800d16c:	79fb      	ldrb	r3, [r7, #7]
 800d16e:	79b9      	ldrb	r1, [r7, #6]
 800d170:	683a      	ldr	r2, [r7, #0]
 800d172:	4618      	mov	r0, r3
 800d174:	f7f4 fdf8 	bl	8001d68 <SD_disk_ioctl>
 800d178:	4603      	mov	r3, r0
 800d17a:	b2db      	uxtb	r3, r3
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3708      	adds	r7, #8
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <xmp3_SetBitstreamPointer>:
 **************************************************************************************/
void SetBitstreamPointer(BitStreamInfo *bsi, int nBytes, unsigned char *buf)
{
	/* init bitstream */
	bsi->bytePtr = buf;
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d184:	2300      	movs	r3, #0
 800d186:	e9c0 2300 	strd	r2, r3, [r0]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
	bsi->nBytes = nBytes;
 800d18a:	e9c0 3102 	strd	r3, r1, [r0, #8]
}
 800d18e:	4770      	bx	lr

0800d190 <xmp3_GetBits>:
unsigned int GetBits(BitStreamInfo *bsi, int nBits)
{
	unsigned int data, lowBits;

	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800d190:	6842      	ldr	r2, [r0, #4]
	nBits &= 0x1f;							/* nBits mod 32 to avoid unpredictable results like >> by negative amount */
 800d192:	f001 011f 	and.w	r1, r1, #31
{
 800d196:	b4f0      	push	{r4, r5, r6, r7}
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800d198:	f1c1 031f 	rsb	r3, r1, #31
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
	bsi->iCache <<= nBits;					/* left-justify cache */
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800d19c:	6884      	ldr	r4, [r0, #8]
	data = bsi->iCache >> (31 - nBits);		/* unsigned >> so zero-extend */
 800d19e:	fa22 f303 	lsr.w	r3, r2, r3
	bsi->iCache <<= nBits;					/* left-justify cache */
 800d1a2:	408a      	lsls	r2, r1
 800d1a4:	6042      	str	r2, [r0, #4]
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800d1a6:	1a62      	subs	r2, r4, r1

	/* if we cross an int boundary, refill the cache */
	if (bsi->cachedBits < 0) {
 800d1a8:	2a00      	cmp	r2, #0
	data >>= 1;								/* do as >> 31, >> 1 so that nBits = 0 works okay (returns 0) */
 800d1aa:	ea4f 0353 	mov.w	r3, r3, lsr #1
	bsi->cachedBits -= nBits;				/* how many bits have we drawn from the cache so far */
 800d1ae:	6082      	str	r2, [r0, #8]
	if (bsi->cachedBits < 0) {
 800d1b0:	db02      	blt.n	800d1b8 <xmp3_GetBits+0x28>
		bsi->cachedBits -= lowBits;			/* how many bits have we drawn from the cache so far */
		bsi->iCache <<= lowBits;			/* left-justify cache */
	}

	return data;
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	bcf0      	pop	{r4, r5, r6, r7}
 800d1b6:	4770      	bx	lr
	int nBytes = bsi->nBytes;
 800d1b8:	68c6      	ldr	r6, [r0, #12]
	if (nBytes >= 4) {
 800d1ba:	2e03      	cmp	r6, #3
		lowBits = -bsi->cachedBits;
 800d1bc:	eba1 0104 	sub.w	r1, r1, r4
	if (nBytes >= 4) {
 800d1c0:	dc1e      	bgt.n	800d200 <xmp3_GetBits+0x70>
		bsi->iCache = 0;
 800d1c2:	2400      	movs	r4, #0
 800d1c4:	6044      	str	r4, [r0, #4]
		while (nBytes--) {
 800d1c6:	2e00      	cmp	r6, #0
 800d1c8:	d03d      	beq.n	800d246 <xmp3_GetBits+0xb6>
			bsi->iCache |= (*bsi->bytePtr++);
 800d1ca:	6805      	ldr	r5, [r0, #0]
 800d1cc:	19af      	adds	r7, r5, r6
 800d1ce:	3501      	adds	r5, #1
 800d1d0:	6005      	str	r5, [r0, #0]
 800d1d2:	f815 cc01 	ldrb.w	ip, [r5, #-1]
 800d1d6:	ea4c 0404 	orr.w	r4, ip, r4
			bsi->iCache <<= 8;
 800d1da:	0224      	lsls	r4, r4, #8
		while (nBytes--) {
 800d1dc:	42bd      	cmp	r5, r7
			bsi->iCache <<= 8;
 800d1de:	6044      	str	r4, [r0, #4]
		while (nBytes--) {
 800d1e0:	d1f5      	bne.n	800d1ce <xmp3_GetBits+0x3e>
		bsi->iCache <<= ((3 - bsi->nBytes)*8);
 800d1e2:	f1c6 0503 	rsb	r5, r6, #3
 800d1e6:	00ed      	lsls	r5, r5, #3
 800d1e8:	40ac      	lsls	r4, r5
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d1ea:	f102 0520 	add.w	r5, r2, #32
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d1ee:	fa04 f101 	lsl.w	r1, r4, r1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d1f2:	40ec      	lsrs	r4, r5
 800d1f4:	4323      	orrs	r3, r4
		bsi->nBytes = 0;
 800d1f6:	2400      	movs	r4, #0
 800d1f8:	eb02 02c6 	add.w	r2, r2, r6, lsl #3
 800d1fc:	60c4      	str	r4, [r0, #12]
 800d1fe:	e01d      	b.n	800d23c <xmp3_GetBits+0xac>
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d200:	6805      	ldr	r5, [r0, #0]
 800d202:	462f      	mov	r7, r5
 800d204:	1c6c      	adds	r4, r5, #1
 800d206:	6004      	str	r4, [r0, #0]
 800d208:	f817 4b02 	ldrb.w	r4, [r7], #2
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d20c:	6007      	str	r7, [r0, #0]
		bsi->iCache  = (*bsi->bytePtr++) << 24;
 800d20e:	0624      	lsls	r4, r4, #24
 800d210:	6044      	str	r4, [r0, #4]
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d212:	786f      	ldrb	r7, [r5, #1]
 800d214:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d218:	1cef      	adds	r7, r5, #3
		bsi->iCache |= (*bsi->bytePtr++) << 16;
 800d21a:	6044      	str	r4, [r0, #4]
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d21c:	6007      	str	r7, [r0, #0]
 800d21e:	78af      	ldrb	r7, [r5, #2]
 800d220:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
		bsi->iCache |= (*bsi->bytePtr++);
 800d224:	1d2f      	adds	r7, r5, #4
		bsi->iCache |= (*bsi->bytePtr++) <<  8;
 800d226:	6044      	str	r4, [r0, #4]
		bsi->iCache |= (*bsi->bytePtr++);
 800d228:	6007      	str	r7, [r0, #0]
 800d22a:	78ed      	ldrb	r5, [r5, #3]
 800d22c:	3220      	adds	r2, #32
 800d22e:	432c      	orrs	r4, r5
		bsi->nBytes -= 4;
 800d230:	3e04      	subs	r6, #4
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d232:	fa04 f101 	lsl.w	r1, r4, r1
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d236:	40d4      	lsrs	r4, r2
		bsi->nBytes -= 4;
 800d238:	60c6      	str	r6, [r0, #12]
		data |= bsi->iCache >> (32 - lowBits);		/* get the low-order bits */
 800d23a:	4323      	orrs	r3, r4
		bsi->iCache <<= lowBits;			/* left-justify cache */
 800d23c:	e9c0 1201 	strd	r1, r2, [r0, #4]
}
 800d240:	bcf0      	pop	{r4, r5, r6, r7}
 800d242:	4618      	mov	r0, r3
 800d244:	4770      	bx	lr
		while (nBytes--) {
 800d246:	4631      	mov	r1, r6
 800d248:	e7d5      	b.n	800d1f6 <xmp3_GetBits+0x66>
 800d24a:	bf00      	nop

0800d24c <xmp3_CalcBitsUsed>:
 * Outputs:     none
 *
 * Return:      number of bits read from bitstream, as offset from startBuf:startOffset
 **************************************************************************************/
int CalcBitsUsed(BitStreamInfo *bsi, unsigned char *startBuf, int startOffset)
{
 800d24c:	b410      	push	{r4}
	int bitsUsed;

	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800d24e:	6804      	ldr	r4, [r0, #0]
	bitsUsed -= bsi->cachedBits;
 800d250:	6883      	ldr	r3, [r0, #8]
	bitsUsed  = (bsi->bytePtr - startBuf) * 8;
 800d252:	1a61      	subs	r1, r4, r1
	bitsUsed -= bsi->cachedBits;
 800d254:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
	bitsUsed -= startOffset;

	return bitsUsed;
}
 800d258:	1a98      	subs	r0, r3, r2
 800d25a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <xmp3_CheckPadBit>:
int CheckPadBit(MP3DecInfo *mp3DecInfo)
{
	FrameHeader *fh;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS)
 800d260:	b130      	cbz	r0, 800d270 <xmp3_CheckPadBit+0x10>
 800d262:	6803      	ldr	r3, [r0, #0]
 800d264:	b123      	cbz	r3, 800d270 <xmp3_CheckPadBit+0x10>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	return (fh->paddingBit ? 1 : 0);
 800d266:	6958      	ldr	r0, [r3, #20]
 800d268:	3800      	subs	r0, #0
 800d26a:	bf18      	it	ne
 800d26c:	2001      	movne	r0, #1
 800d26e:	4770      	bx	lr
		return -1;
 800d270:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d274:	4770      	bx	lr
 800d276:	bf00      	nop

0800d278 <xmp3_UnpackFrameHeader>:

	int verIdx;
	FrameHeader *fh;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800d278:	2800      	cmp	r0, #0
 800d27a:	f000 80c9 	beq.w	800d410 <xmp3_UnpackFrameHeader+0x198>
 800d27e:	6803      	ldr	r3, [r0, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f000 80c5 	beq.w	800d410 <xmp3_UnpackFrameHeader+0x198>
 800d286:	780a      	ldrb	r2, [r1, #0]
 800d288:	2aff      	cmp	r2, #255	; 0xff
 800d28a:	f040 80c1 	bne.w	800d410 <xmp3_UnpackFrameHeader+0x198>
 800d28e:	784a      	ldrb	r2, [r1, #1]
{
 800d290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || (buf[0] & SYNCWORDH) != SYNCWORDH || (buf[1] & SYNCWORDL) != SYNCWORDL)
 800d294:	f002 04e0 	and.w	r4, r2, #224	; 0xe0
 800d298:	2ce0      	cmp	r4, #224	; 0xe0
 800d29a:	f040 80b6 	bne.w	800d40a <xmp3_UnpackFrameHeader+0x192>
		return -1;

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));

	/* read header fields - use bitmasks instead of GetBits() for speed, since format never varies */
	verIdx =         (buf[1] >> 3) & 0x03;
 800d29e:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
	fh->ver =        (MPEGVersion)( verIdx == 0 ? MPEG25 : ((verIdx & 0x01) ? MPEG1 : MPEG2) );
 800d2a2:	f012 0f18 	tst.w	r2, #24
 800d2a6:	bf1a      	itte	ne
 800d2a8:	ea6f 0c0c 	mvnne.w	ip, ip
 800d2ac:	f00c 0c01 	andne.w	ip, ip, #1
 800d2b0:	f04f 0c02 	moveq.w	ip, #2
 800d2b4:	f883 c000 	strb.w	ip, [r3]
	fh->layer = 4 - ((buf[1] >> 1) & 0x03);     /* easy mapping of index to layer number, 4 = error */
 800d2b8:	f891 e001 	ldrb.w	lr, [r1, #1]
 800d2bc:	f3ce 0e41 	ubfx	lr, lr, #1, #2
 800d2c0:	f1ce 0904 	rsb	r9, lr, #4
 800d2c4:	f8c3 9004 	str.w	r9, [r3, #4]
	fh->crc =   1 - ((buf[1] >> 0) & 0x01);
 800d2c8:	784d      	ldrb	r5, [r1, #1]
 800d2ca:	43ed      	mvns	r5, r5
 800d2cc:	f005 0501 	and.w	r5, r5, #1
 800d2d0:	609d      	str	r5, [r3, #8]
	fh->brIdx =      (buf[2] >> 4) & 0x0f;
 800d2d2:	788a      	ldrb	r2, [r1, #2]
 800d2d4:	0917      	lsrs	r7, r2, #4
 800d2d6:	60df      	str	r7, [r3, #12]
	fh->srIdx =      (buf[2] >> 2) & 0x03;
 800d2d8:	788a      	ldrb	r2, [r1, #2]
 800d2da:	f3c2 0281 	ubfx	r2, r2, #2, #2
 800d2de:	611a      	str	r2, [r3, #16]
	fh->paddingBit = (buf[2] >> 1) & 0x01;
 800d2e0:	788e      	ldrb	r6, [r1, #2]
 800d2e2:	f3c6 0640 	ubfx	r6, r6, #1, #1
 800d2e6:	615e      	str	r6, [r3, #20]
	fh->privateBit = (buf[2] >> 0) & 0x01;
 800d2e8:	788c      	ldrb	r4, [r1, #2]
 800d2ea:	f004 0401 	and.w	r4, r4, #1
 800d2ee:	619c      	str	r4, [r3, #24]
	fh->sMode =      (StereoMode)((buf[3] >> 6) & 0x03);      /* maps to correct enum (see definition) */    
 800d2f0:	f891 8003 	ldrb.w	r8, [r1, #3]
 800d2f4:	ea4f 1898 	mov.w	r8, r8, lsr #6
 800d2f8:	f883 801c 	strb.w	r8, [r3, #28]
	fh->modeExt =    (buf[3] >> 4) & 0x03;
 800d2fc:	78cc      	ldrb	r4, [r1, #3]
 800d2fe:	f3c4 1401 	ubfx	r4, r4, #4, #2
 800d302:	621c      	str	r4, [r3, #32]
	fh->copyFlag =   (buf[3] >> 3) & 0x01;
 800d304:	78cc      	ldrb	r4, [r1, #3]
 800d306:	f3c4 04c0 	ubfx	r4, r4, #3, #1
 800d30a:	625c      	str	r4, [r3, #36]	; 0x24
	fh->origFlag =   (buf[3] >> 2) & 0x01;
 800d30c:	78cc      	ldrb	r4, [r1, #3]
 800d30e:	f3c4 0480 	ubfx	r4, r4, #2, #1
 800d312:	629c      	str	r4, [r3, #40]	; 0x28
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 800d314:	78cc      	ldrb	r4, [r1, #3]

	/* check parameters to avoid indexing tables with bad values */
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800d316:	2a03      	cmp	r2, #3
	fh->emphasis =   (buf[3] >> 0) & 0x03;
 800d318:	f004 0403 	and.w	r4, r4, #3
 800d31c:	62dc      	str	r4, [r3, #44]	; 0x2c
	if (fh->srIdx == 3 || fh->layer == 4 || fh->brIdx == 15)
 800d31e:	d074      	beq.n	800d40a <xmp3_UnpackFrameHeader+0x192>
 800d320:	f1b9 0f04 	cmp.w	r9, #4
 800d324:	d071      	beq.n	800d40a <xmp3_UnpackFrameHeader+0x192>
 800d326:	2f0f      	cmp	r7, #15
 800d328:	d06f      	beq.n	800d40a <xmp3_UnpackFrameHeader+0x192>
		return -1;

	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800d32a:	eb02 04c2 	add.w	r4, r2, r2, lsl #3
 800d32e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
 800d332:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 800d42c <xmp3_UnpackFrameHeader+0x1b4>
 800d336:	0064      	lsls	r4, r4, #1
 800d338:	f04f 0bde 	mov.w	fp, #222	; 0xde
 800d33c:	fb0b 440c 	mla	r4, fp, ip, r4
 800d340:	4454      	add	r4, sl
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800d342:	f1b8 0f01 	cmp.w	r8, #1
	fh->sfBand = &sfBandTable[fh->ver][fh->srIdx];	/* for readability (we reference sfBandTable many times in decoder) */
 800d346:	635c      	str	r4, [r3, #52]	; 0x34
	if (fh->sMode != Joint)		/* just to be safe (dequant, stproc check fh->modeExt) */
 800d348:	d006      	beq.n	800d358 <xmp3_UnpackFrameHeader+0xe0>
		fh->modeExt = 0;
 800d34a:	2400      	movs	r4, #0

	/* init user-accessible data */
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800d34c:	f1b8 0f03 	cmp.w	r8, #3
		fh->modeExt = 0;
 800d350:	621c      	str	r4, [r3, #32]
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800d352:	d101      	bne.n	800d358 <xmp3_UnpackFrameHeader+0xe0>
 800d354:	2401      	movs	r4, #1
 800d356:	e000      	b.n	800d35a <xmp3_UnpackFrameHeader+0xe2>
 800d358:	2402      	movs	r4, #2
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
	mp3DecInfo->layer = fh->layer;
 800d35a:	f8c0 97d0 	str.w	r9, [r0, #2000]	; 0x7d0
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800d35e:	eb0c 094c 	add.w	r9, ip, ip, lsl #1
 800d362:	eb09 0a02 	add.w	sl, r9, r2
	mp3DecInfo->nChans = (fh->sMode == Mono ? 1 : 2);
 800d366:	f8c0 47bc 	str.w	r4, [r0, #1980]	; 0x7bc
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800d36a:	4c2b      	ldr	r4, [pc, #172]	; (800d418 <xmp3_UnpackFrameHeader+0x1a0>)
	mp3DecInfo->version = fh->ver;
 800d36c:	f880 c7d4 	strb.w	ip, [r0, #2004]	; 0x7d4
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800d370:	f854 402a 	ldr.w	r4, [r4, sl, lsl #2]
 800d374:	f8c0 47c0 	str.w	r4, [r0, #1984]	; 0x7c0
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800d378:	f1ce 0e03 	rsb	lr, lr, #3
 800d37c:	eb09 0a0e 	add.w	sl, r9, lr
 800d380:	4c26      	ldr	r4, [pc, #152]	; (800d41c <xmp3_UnpackFrameHeader+0x1a4>)
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800d382:	f1bc 0f00 	cmp.w	ip, #0
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800d386:	f934 401a 	ldrsh.w	r4, [r4, sl, lsl #1]
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800d38a:	bf0c      	ite	eq
 800d38c:	f04f 0a02 	moveq.w	sl, #2
 800d390:	f04f 0a01 	movne.w	sl, #1
	mp3DecInfo->samprate = samplerateTab[fh->ver][fh->srIdx];
 800d394:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800d398:	fb94 f4fa 	sdiv	r4, r4, sl
	mp3DecInfo->nGrans = (fh->ver == MPEG1 ? NGRANS_MPEG1 : NGRANS_MPEG2);
 800d39c:	f8c0 a7c4 	str.w	sl, [r0, #1988]	; 0x7c4
	mp3DecInfo->nGranSamps = ((int)samplesPerFrameTab[fh->ver][fh->layer - 1]) / mp3DecInfo->nGrans;
 800d3a0:	f8c0 47c8 	str.w	r4, [r0, #1992]	; 0x7c8
	/* get bitrate and nSlots from table, unless brIdx == 0 (free mode) in which case caller must figure it out himself
	 * question - do we want to overwrite mp3DecInfo->bitrate with 0 each time if it's free mode, and
	 *  copy the pre-calculated actual free bitrate into it in mp3dec.c (according to the spec, 
	 *  this shouldn't be necessary, since it should be either all frames free or none free)
	 */
	if (fh->brIdx) {
 800d3a4:	b32f      	cbz	r7, 800d3f2 <xmp3_UnpackFrameHeader+0x17a>
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3a6:	ebc9 1909 	rsb	r9, r9, r9, lsl #4
 800d3aa:	ebce 1e0e 	rsb	lr, lr, lr, lsl #4
	
		/* nSlots = total frame bytes (from table) - sideInfo bytes - header - CRC (if present) + pad (if present) */
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3ae:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3b2:	44ce      	add	lr, r9
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3b4:	444a      	add	r2, r9
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3b6:	44be      	add	lr, r7
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3b8:	443a      	add	r2, r7
 800d3ba:	4f19      	ldr	r7, [pc, #100]	; (800d420 <xmp3_UnpackFrameHeader+0x1a8>)
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3bc:	4c19      	ldr	r4, [pc, #100]	; (800d424 <xmp3_UnpackFrameHeader+0x1ac>)
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3be:	f937 2012 	ldrsh.w	r2, [r7, r2, lsl #1]
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800d3c2:	4f19      	ldr	r7, [pc, #100]	; (800d428 <xmp3_UnpackFrameHeader+0x1b0>)
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3c4:	f934 401e 	ldrsh.w	r4, [r4, lr, lsl #1]
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800d3c8:	f1b8 0f03 	cmp.w	r8, #3
 800d3cc:	bf18      	it	ne
 800d3ce:	f10c 0c01 	addne.w	ip, ip, #1
 800d3d2:	f937 701c 	ldrsh.w	r7, [r7, ip, lsl #1]
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3d6:	1bd2      	subs	r2, r2, r7
		mp3DecInfo->bitrate = ((int)bitrateTab[fh->ver][fh->layer - 1][fh->brIdx]) * 1000;
 800d3d8:	ebc4 1744 	rsb	r7, r4, r4, lsl #5
 800d3dc:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800d3e0:	00e4      	lsls	r4, r4, #3
 800d3e2:	f8c0 47b8 	str.w	r4, [r0, #1976]	; 0x7b8
			(int)sideBytesTab[fh->ver][(fh->sMode == Mono ? 0 : 1)] - 
 800d3e6:	1f14      	subs	r4, r2, #4
			4 - (fh->crc ? 2 : 0) + (fh->paddingBit ? 1 : 0);
 800d3e8:	b105      	cbz	r5, 800d3ec <xmp3_UnpackFrameHeader+0x174>
 800d3ea:	1f94      	subs	r4, r2, #6
 800d3ec:	4426      	add	r6, r4
		mp3DecInfo->nSlots = (int)slotTab[fh->ver][fh->srIdx][fh->brIdx] - 
 800d3ee:	f8c0 67cc 	str.w	r6, [r0, #1996]	; 0x7cc
	}

	/* load crc word, if enabled, and return length of frame header (in bytes) */
	if (fh->crc) {
 800d3f2:	b91d      	cbnz	r5, 800d3fc <xmp3_UnpackFrameHeader+0x184>
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
		return 6;
	} else {
		fh->CRCWord = 0;
 800d3f4:	631d      	str	r5, [r3, #48]	; 0x30
		return 4;
 800d3f6:	2004      	movs	r0, #4
	}
}
 800d3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800d3fc:	888a      	ldrh	r2, [r1, #4]
 800d3fe:	ba52      	rev16	r2, r2
 800d400:	b292      	uxth	r2, r2
		return 6;
 800d402:	2006      	movs	r0, #6
		fh->CRCWord = ((int)buf[4] << 8 | (int)buf[5] << 0);
 800d404:	631a      	str	r2, [r3, #48]	; 0x30
}
 800d406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -1;
 800d40a:	f04f 30ff 	mov.w	r0, #4294967295
 800d40e:	e7f3      	b.n	800d3f8 <xmp3_UnpackFrameHeader+0x180>
 800d410:	f04f 30ff 	mov.w	r0, #4294967295
}
 800d414:	4770      	bx	lr
 800d416:	bf00      	nop
 800d418:	08028014 	.word	0x08028014
 800d41c:	08028038 	.word	0x08028038
 800d420:	080282f4 	.word	0x080282f4
 800d424:	08027f04 	.word	0x08027f04
 800d428:	080282e8 	.word	0x080282e8
 800d42c:	0802804c 	.word	0x0802804c

0800d430 <xmp3_UnpackSideInfo>:
 *
 * Return:      length (in bytes) of side info data
 *              -1 if null input pointers
 **************************************************************************************/
int UnpackSideInfo(MP3DecInfo *mp3DecInfo, unsigned char *buf)
{
 800d430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d434:	b087      	sub	sp, #28
	FrameHeader *fh;
	SideInfo *si;
	SideInfoSub *sis;

	/* validate pointers and sync word */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS)
 800d436:	2800      	cmp	r0, #0
 800d438:	f000 811c 	beq.w	800d674 <xmp3_UnpackSideInfo+0x244>
 800d43c:	f8d0 8000 	ldr.w	r8, [r0]
 800d440:	4606      	mov	r6, r0
 800d442:	f1b8 0f00 	cmp.w	r8, #0
 800d446:	f000 8115 	beq.w	800d674 <xmp3_UnpackSideInfo+0x244>
 800d44a:	f8d0 b004 	ldr.w	fp, [r0, #4]
 800d44e:	f1bb 0f00 	cmp.w	fp, #0
 800d452:	f000 810f 	beq.w	800d674 <xmp3_UnpackSideInfo+0x244>

	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));

	bsi = &bitStreamInfo;
	if (fh->ver == MPEG1) {
 800d456:	f898 7000 	ldrb.w	r7, [r8]
 800d45a:	2f00      	cmp	r7, #0
 800d45c:	f000 80a3 	beq.w	800d5a6 <xmp3_UnpackSideInfo+0x176>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
			for (bd = 0; bd < MAX_SCFBD; bd++)
				si->scfsi[ch][bd] = GetBits(bsi, 1);
	} else {
		/* MPEG 2, MPEG 2.5 */
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800d460:	f898 301c 	ldrb.w	r3, [r8, #28]
	bsi->bytePtr = buf;
 800d464:	9102      	str	r1, [sp, #8]
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800d466:	2b03      	cmp	r3, #3
		SetBitstreamPointer(bsi, nBytes, buf);
		si->mainDataBegin = GetBits(bsi, 8);
 800d468:	ad02      	add	r5, sp, #8
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800d46a:	bf0c      	ite	eq
 800d46c:	2209      	moveq	r2, #9
 800d46e:	2211      	movne	r2, #17
		si->mainDataBegin = GetBits(bsi, 8);
 800d470:	2108      	movs	r1, #8
	bsi->iCache = 0;		/* 4-byte unsigned int */
 800d472:	2300      	movs	r3, #0
		si->mainDataBegin = GetBits(bsi, 8);
 800d474:	4628      	mov	r0, r5
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800d476:	e9cd 3303 	strd	r3, r3, [sp, #12]
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG2_MONO : SIBYTES_MPEG2_STEREO);
 800d47a:	9201      	str	r2, [sp, #4]
	bsi->nBytes = nBytes;
 800d47c:	9205      	str	r2, [sp, #20]
		si->mainDataBegin = GetBits(bsi, 8);
 800d47e:	f7ff fe87 	bl	800d190 <xmp3_GetBits>
 800d482:	f8cb 0000 	str.w	r0, [fp]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 1 : 2));
 800d486:	f898 301c 	ldrb.w	r3, [r8, #28]
 800d48a:	2b03      	cmp	r3, #3
 800d48c:	bf0c      	ite	eq
 800d48e:	2101      	moveq	r1, #1
 800d490:	2102      	movne	r1, #2
 800d492:	4628      	mov	r0, r5
 800d494:	f7ff fe7c 	bl	800d190 <xmp3_GetBits>
 800d498:	f8cb 0004 	str.w	r0, [fp, #4]
	}

	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800d49c:	f8d6 27c4 	ldr.w	r2, [r6, #1988]	; 0x7c4
 800d4a0:	2a00      	cmp	r2, #0
 800d4a2:	dd78      	ble.n	800d596 <xmp3_UnpackSideInfo+0x166>
 800d4a4:	f8d6 37bc 	ldr.w	r3, [r6, #1980]	; 0x7bc
 800d4a8:	46da      	mov	sl, fp
 800d4aa:	f04f 0900 	mov.w	r9, #0
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	dd6b      	ble.n	800d58a <xmp3_UnpackSideInfo+0x15a>
 800d4b2:	4654      	mov	r4, sl
 800d4b4:	2700      	movs	r7, #0
			sis = &si->sis[gr][ch];						/* side info subblock for this granule, channel */

			sis->part23Length =    GetBits(bsi, 12);
 800d4b6:	210c      	movs	r1, #12
 800d4b8:	4628      	mov	r0, r5
 800d4ba:	f7ff fe69 	bl	800d190 <xmp3_GetBits>
			sis->nBigvals =        GetBits(bsi, 9);
 800d4be:	2109      	movs	r1, #9
			sis->part23Length =    GetBits(bsi, 12);
 800d4c0:	62a0      	str	r0, [r4, #40]	; 0x28
			sis->nBigvals =        GetBits(bsi, 9);
 800d4c2:	4628      	mov	r0, r5
 800d4c4:	f7ff fe64 	bl	800d190 <xmp3_GetBits>
			sis->globalGain =      GetBits(bsi, 8);
 800d4c8:	2108      	movs	r1, #8
			sis->nBigvals =        GetBits(bsi, 9);
 800d4ca:	62e0      	str	r0, [r4, #44]	; 0x2c
			sis->globalGain =      GetBits(bsi, 8);
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	f7ff fe5f 	bl	800d190 <xmp3_GetBits>
 800d4d2:	6320      	str	r0, [r4, #48]	; 0x30
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800d4d4:	f898 3000 	ldrb.w	r3, [r8]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	bf0c      	ite	eq
 800d4dc:	2104      	moveq	r1, #4
 800d4de:	2109      	movne	r1, #9
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	f7ff fe55 	bl	800d190 <xmp3_GetBits>
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800d4e6:	2101      	movs	r1, #1
			sis->sfCompress =      GetBits(bsi, (fh->ver == MPEG1 ? 4 : 9));
 800d4e8:	6360      	str	r0, [r4, #52]	; 0x34
			sis->winSwitchFlag =   GetBits(bsi, 1);
 800d4ea:	4628      	mov	r0, r5
 800d4ec:	f7ff fe50 	bl	800d190 <xmp3_GetBits>
 800d4f0:	63a0      	str	r0, [r4, #56]	; 0x38

			if(sis->winSwitchFlag) {
 800d4f2:	2800      	cmp	r0, #0
 800d4f4:	f000 808d 	beq.w	800d612 <xmp3_UnpackSideInfo+0x1e2>
				/* this is a start, stop, short, or mixed block */
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800d4f8:	2102      	movs	r1, #2
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f7ff fe48 	bl	800d190 <xmp3_GetBits>
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800d500:	2101      	movs	r1, #1
				sis->blockType =       GetBits(bsi, 2);		/* 0 = normal, 1 = start, 2 = short, 3 = stop */
 800d502:	63e0      	str	r0, [r4, #60]	; 0x3c
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800d504:	4628      	mov	r0, r5
 800d506:	f7ff fe43 	bl	800d190 <xmp3_GetBits>
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d50a:	2105      	movs	r1, #5
				sis->mixedBlock =      GetBits(bsi, 1);		/* 0 = not mixed, 1 = mixed */
 800d50c:	6420      	str	r0, [r4, #64]	; 0x40
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d50e:	4628      	mov	r0, r5
 800d510:	f7ff fe3e 	bl	800d190 <xmp3_GetBits>
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d514:	2105      	movs	r1, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d516:	6460      	str	r0, [r4, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d518:	4628      	mov	r0, r5
 800d51a:	f7ff fe39 	bl	800d190 <xmp3_GetBits>
				sis->tableSelect[2] =  0;					/* unused */
 800d51e:	2300      	movs	r3, #0
 800d520:	64e3      	str	r3, [r4, #76]	; 0x4c
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d522:	64a0      	str	r0, [r4, #72]	; 0x48
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800d524:	2103      	movs	r1, #3
 800d526:	4628      	mov	r0, r5
 800d528:	f7ff fe32 	bl	800d190 <xmp3_GetBits>
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800d52c:	2103      	movs	r1, #3
				sis->subBlockGain[0] = GetBits(bsi, 3);
 800d52e:	6520      	str	r0, [r4, #80]	; 0x50
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800d530:	4628      	mov	r0, r5
 800d532:	f7ff fe2d 	bl	800d190 <xmp3_GetBits>
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800d536:	2103      	movs	r1, #3
				sis->subBlockGain[1] = GetBits(bsi, 3);
 800d538:	6560      	str	r0, [r4, #84]	; 0x54
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800d53a:	4628      	mov	r0, r5
 800d53c:	f7ff fe28 	bl	800d190 <xmp3_GetBits>

				/* TODO - check logic */
				if (sis->blockType == 0) {
 800d540:	6be3      	ldr	r3, [r4, #60]	; 0x3c
				sis->subBlockGain[2] = GetBits(bsi, 3);
 800d542:	65a0      	str	r0, [r4, #88]	; 0x58
				if (sis->blockType == 0) {
 800d544:	2b00      	cmp	r3, #0
 800d546:	f040 8088 	bne.w	800d65a <xmp3_UnpackSideInfo+0x22a>
					/* this should not be allowed, according to spec */
					sis->nBigvals = 0;
					sis->part23Length = 0;
 800d54a:	e9c4 330a 	strd	r3, r3, [r4, #40]	; 0x28
					sis->sfCompress = 0;
 800d54e:	6363      	str	r3, [r4, #52]	; 0x34
					sis->region0Count = 8;
				} else {
					/* start, stop, or short-mixed */
					sis->region0Count = 7;
				}
				sis->region1Count = 20 - sis->region0Count;
 800d550:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800d552:	f1c3 0314 	rsb	r3, r3, #20
 800d556:	6623      	str	r3, [r4, #96]	; 0x60
				sis->tableSelect[1] =  GetBits(bsi, 5);
				sis->tableSelect[2] =  GetBits(bsi, 5);
				sis->region0Count =    GetBits(bsi, 4);
				sis->region1Count =    GetBits(bsi, 3);
			}
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800d558:	f898 3000 	ldrb.w	r3, [r8]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d077      	beq.n	800d650 <xmp3_UnpackSideInfo+0x220>
 800d560:	2000      	movs	r0, #0
 800d562:	6660      	str	r0, [r4, #100]	; 0x64
			sis->sfactScale =        GetBits(bsi, 1);
 800d564:	2101      	movs	r1, #1
 800d566:	4628      	mov	r0, r5
 800d568:	f7ff fe12 	bl	800d190 <xmp3_GetBits>
			sis->count1TableSelect = GetBits(bsi, 1);
 800d56c:	2101      	movs	r1, #1
			sis->sfactScale =        GetBits(bsi, 1);
 800d56e:	66a0      	str	r0, [r4, #104]	; 0x68
			sis->count1TableSelect = GetBits(bsi, 1);
 800d570:	4628      	mov	r0, r5
 800d572:	f7ff fe0d 	bl	800d190 <xmp3_GetBits>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d576:	f8d6 37bc 	ldr.w	r3, [r6, #1980]	; 0x7bc
			sis->count1TableSelect = GetBits(bsi, 1);
 800d57a:	66e0      	str	r0, [r4, #108]	; 0x6c
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800d57c:	3701      	adds	r7, #1
 800d57e:	42bb      	cmp	r3, r7
 800d580:	f104 0448 	add.w	r4, r4, #72	; 0x48
 800d584:	dc97      	bgt.n	800d4b6 <xmp3_UnpackSideInfo+0x86>
 800d586:	f8d6 27c4 	ldr.w	r2, [r6, #1988]	; 0x7c4
	for(gr =0; gr < mp3DecInfo->nGrans; gr++) {
 800d58a:	f109 0901 	add.w	r9, r9, #1
 800d58e:	454a      	cmp	r2, r9
 800d590:	f10a 0a90 	add.w	sl, sl, #144	; 0x90
 800d594:	dc8b      	bgt.n	800d4ae <xmp3_UnpackSideInfo+0x7e>
		}
	}
	mp3DecInfo->mainDataBegin = si->mainDataBegin;	/* needed by main decode loop */
 800d596:	f8db 3000 	ldr.w	r3, [fp]
 800d59a:	f8c6 37d8 	str.w	r3, [r6, #2008]	; 0x7d8

	ASSERT(nBytes == CalcBitsUsed(bsi, buf, 0) >> 3);

	return nBytes;	
}
 800d59e:	9801      	ldr	r0, [sp, #4]
 800d5a0:	b007      	add	sp, #28
 800d5a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800d5a6:	f898 301c 	ldrb.w	r3, [r8, #28]
	bsi->bytePtr = buf;
 800d5aa:	9102      	str	r1, [sp, #8]
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800d5ac:	2b03      	cmp	r3, #3
		si->mainDataBegin = GetBits(bsi, 9);
 800d5ae:	ad02      	add	r5, sp, #8
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800d5b0:	bf0c      	ite	eq
 800d5b2:	2311      	moveq	r3, #17
 800d5b4:	2320      	movne	r3, #32
		si->mainDataBegin = GetBits(bsi, 9);
 800d5b6:	2109      	movs	r1, #9
 800d5b8:	4628      	mov	r0, r5
		nBytes = (fh->sMode == Mono ? SIBYTES_MPEG1_MONO : SIBYTES_MPEG1_STEREO);
 800d5ba:	9301      	str	r3, [sp, #4]
	bsi->nBytes = nBytes;
 800d5bc:	9305      	str	r3, [sp, #20]
	bsi->cachedBits = 0;	/* i.e. zero bits in cache */
 800d5be:	e9cd 7703 	strd	r7, r7, [sp, #12]
		si->mainDataBegin = GetBits(bsi, 9);
 800d5c2:	f7ff fde5 	bl	800d190 <xmp3_GetBits>
 800d5c6:	f8cb 0000 	str.w	r0, [fp]
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800d5ca:	f898 301c 	ldrb.w	r3, [r8, #28]
 800d5ce:	2b03      	cmp	r3, #3
 800d5d0:	bf0c      	ite	eq
 800d5d2:	2105      	moveq	r1, #5
 800d5d4:	2103      	movne	r1, #3
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f7ff fdda 	bl	800d190 <xmp3_GetBits>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800d5dc:	f8d6 37bc 	ldr.w	r3, [r6, #1980]	; 0x7bc
		si->privateBits =   GetBits(bsi, (fh->sMode == Mono ? 5 : 3));
 800d5e0:	f8cb 0004 	str.w	r0, [fp, #4]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	f77f af59 	ble.w	800d49c <xmp3_UnpackSideInfo+0x6c>
 800d5ea:	f10b 0418 	add.w	r4, fp, #24
 800d5ee:	f1a4 0910 	sub.w	r9, r4, #16
				si->scfsi[ch][bd] = GetBits(bsi, 1);
 800d5f2:	2101      	movs	r1, #1
 800d5f4:	4628      	mov	r0, r5
 800d5f6:	f7ff fdcb 	bl	800d190 <xmp3_GetBits>
 800d5fa:	f849 0b04 	str.w	r0, [r9], #4
			for (bd = 0; bd < MAX_SCFBD; bd++)
 800d5fe:	45a1      	cmp	r9, r4
 800d600:	d1f7      	bne.n	800d5f2 <xmp3_UnpackSideInfo+0x1c2>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800d602:	f8d6 37bc 	ldr.w	r3, [r6, #1980]	; 0x7bc
 800d606:	3701      	adds	r7, #1
 800d608:	42bb      	cmp	r3, r7
 800d60a:	f104 0410 	add.w	r4, r4, #16
 800d60e:	dcee      	bgt.n	800d5ee <xmp3_UnpackSideInfo+0x1be>
 800d610:	e744      	b.n	800d49c <xmp3_UnpackSideInfo+0x6c>
				sis->mixedBlock = 0;
 800d612:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d616:	2105      	movs	r1, #5
 800d618:	4628      	mov	r0, r5
 800d61a:	f7ff fdb9 	bl	800d190 <xmp3_GetBits>
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d61e:	2105      	movs	r1, #5
				sis->tableSelect[0] =  GetBits(bsi, 5);
 800d620:	6460      	str	r0, [r4, #68]	; 0x44
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d622:	4628      	mov	r0, r5
 800d624:	f7ff fdb4 	bl	800d190 <xmp3_GetBits>
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800d628:	2105      	movs	r1, #5
				sis->tableSelect[1] =  GetBits(bsi, 5);
 800d62a:	64a0      	str	r0, [r4, #72]	; 0x48
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800d62c:	4628      	mov	r0, r5
 800d62e:	f7ff fdaf 	bl	800d190 <xmp3_GetBits>
				sis->region0Count =    GetBits(bsi, 4);
 800d632:	2104      	movs	r1, #4
				sis->tableSelect[2] =  GetBits(bsi, 5);
 800d634:	64e0      	str	r0, [r4, #76]	; 0x4c
				sis->region0Count =    GetBits(bsi, 4);
 800d636:	4628      	mov	r0, r5
 800d638:	f7ff fdaa 	bl	800d190 <xmp3_GetBits>
				sis->region1Count =    GetBits(bsi, 3);
 800d63c:	2103      	movs	r1, #3
				sis->region0Count =    GetBits(bsi, 4);
 800d63e:	65e0      	str	r0, [r4, #92]	; 0x5c
				sis->region1Count =    GetBits(bsi, 3);
 800d640:	4628      	mov	r0, r5
 800d642:	f7ff fda5 	bl	800d190 <xmp3_GetBits>
 800d646:	6620      	str	r0, [r4, #96]	; 0x60
			sis->preFlag =           (fh->ver == MPEG1 ? GetBits(bsi, 1) : 0);
 800d648:	f898 3000 	ldrb.w	r3, [r8]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d187      	bne.n	800d560 <xmp3_UnpackSideInfo+0x130>
 800d650:	2101      	movs	r1, #1
 800d652:	4628      	mov	r0, r5
 800d654:	f7ff fd9c 	bl	800d190 <xmp3_GetBits>
 800d658:	e783      	b.n	800d562 <xmp3_UnpackSideInfo+0x132>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800d65a:	2b02      	cmp	r3, #2
 800d65c:	d003      	beq.n	800d666 <xmp3_UnpackSideInfo+0x236>
					sis->region0Count = 7;
 800d65e:	2307      	movs	r3, #7
 800d660:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d662:	230d      	movs	r3, #13
 800d664:	e777      	b.n	800d556 <xmp3_UnpackSideInfo+0x126>
				} else if (sis->blockType == 2 && sis->mixedBlock == 0) {
 800d666:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d1f8      	bne.n	800d65e <xmp3_UnpackSideInfo+0x22e>
					sis->region0Count = 8;
 800d66c:	2308      	movs	r3, #8
 800d66e:	65e3      	str	r3, [r4, #92]	; 0x5c
 800d670:	230c      	movs	r3, #12
 800d672:	e770      	b.n	800d556 <xmp3_UnpackSideInfo+0x126>
		return -1;
 800d674:	f04f 33ff 	mov.w	r3, #4294967295
 800d678:	9301      	str	r3, [sp, #4]
 800d67a:	e790      	b.n	800d59e <xmp3_UnpackSideInfo+0x16e>

0800d67c <xmp3_AllocateBuffers>:
 *
 * Notes:       if one or more mallocs fail, function frees any buffers already
 *                allocated before returning
 **************************************************************************************/
MP3DecInfo *AllocateBuffers(void)
{
 800d67c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		cbuf[i] = 0;
 800d680:	4c22      	ldr	r4, [pc, #136]	; (800d70c <xmp3_AllocateBuffers+0x90>)
 800d682:	f8df b098 	ldr.w	fp, [pc, #152]	; 800d71c <xmp3_AllocateBuffers+0xa0>
 800d686:	f8df a098 	ldr.w	sl, [pc, #152]	; 800d720 <xmp3_AllocateBuffers+0xa4>
 800d68a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 800d724 <xmp3_AllocateBuffers+0xa8>
 800d68e:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800d728 <xmp3_AllocateBuffers+0xac>
 800d692:	4f1f      	ldr	r7, [pc, #124]	; (800d710 <xmp3_AllocateBuffers+0x94>)
 800d694:	4e1f      	ldr	r6, [pc, #124]	; (800d714 <xmp3_AllocateBuffers+0x98>)
 800d696:	4d20      	ldr	r5, [pc, #128]	; (800d718 <xmp3_AllocateBuffers+0x9c>)
 800d698:	f44f 62fe 	mov.w	r2, #2032	; 0x7f0
 800d69c:	2100      	movs	r1, #0
 800d69e:	4620      	mov	r0, r4
 800d6a0:	f010 fe68 	bl	801e374 <memset>
 800d6a4:	2238      	movs	r2, #56	; 0x38
 800d6a6:	2100      	movs	r1, #0
 800d6a8:	4658      	mov	r0, fp
 800d6aa:	f010 fe63 	bl	801e374 <memset>
 800d6ae:	f44f 72a4 	mov.w	r2, #328	; 0x148
 800d6b2:	2100      	movs	r1, #0
 800d6b4:	4650      	mov	r0, sl
 800d6b6:	f010 fe5d 	bl	801e374 <memset>
 800d6ba:	f44f 728e 	mov.w	r2, #284	; 0x11c
 800d6be:	2100      	movs	r1, #0
 800d6c0:	4648      	mov	r0, r9
 800d6c2:	f010 fe57 	bl	801e374 <memset>
 800d6c6:	f241 2210 	movw	r2, #4624	; 0x1210
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	4640      	mov	r0, r8
 800d6ce:	f010 fe51 	bl	801e374 <memset>
 800d6d2:	f44f 7252 	mov.w	r2, #840	; 0x348
 800d6d6:	2100      	movs	r1, #0
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f010 fe4b 	bl	801e374 <memset>
 800d6de:	f44f 52d9 	mov.w	r2, #6944	; 0x1b20
 800d6e2:	2100      	movs	r1, #0
 800d6e4:	4630      	mov	r0, r6
 800d6e6:	f010 fe45 	bl	801e374 <memset>
 800d6ea:	f242 2204 	movw	r2, #8708	; 0x2204
 800d6ee:	2100      	movs	r1, #0
 800d6f0:	4628      	mov	r0, r5
 800d6f2:	f010 fe3f 	bl	801e374 <memset>
	ClearBuffer(sbi, sizeof(SubbandInfo));

#endif

	mp3DecInfo->FrameHeaderPS =     (void *)fh;
	mp3DecInfo->SideInfoPS =        (void *)si;
 800d6f6:	e9c4 ba00 	strd	fp, sl, [r4]
	mp3DecInfo->ScaleFactorInfoPS = (void *)sfi;
	mp3DecInfo->HuffmanInfoPS =     (void *)hi;
 800d6fa:	e9c4 9802 	strd	r9, r8, [r4, #8]
	mp3DecInfo->DequantInfoPS =     (void *)di;
	mp3DecInfo->IMDCTInfoPS =       (void *)mi;
 800d6fe:	e9c4 7604 	strd	r7, r6, [r4, #16]
	mp3DecInfo->SubbandInfoPS =     (void *)sbi;
 800d702:	61a5      	str	r5, [r4, #24]
	DV_DEBUG_USART_Trace( COPY_DEBUG_BUFFER );
#endif
#endif

	return mp3DecInfo;
}
 800d704:	4620      	mov	r0, r4
 800d706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d70a:	bf00      	nop
 800d70c:	20016508 	.word	0x20016508
 800d710:	20013458 	.word	0x20013458
 800d714:	200149e8 	.word	0x200149e8
 800d718:	20016cf8 	.word	0x20016cf8
 800d71c:	200137a0 	.word	0x200137a0
 800d720:	20019018 	.word	0x20019018
 800d724:	20018efc 	.word	0x20018efc
 800d728:	200137d8 	.word	0x200137d8

0800d72c <xmp3_FDCT32>:
 *              possibly interleave stereo (cut # of coef loads in half - may not have
 *                enough registers)
 **************************************************************************************/
// about 1ms faster in RAM
/*__attribute__ ((section (".data")))*/ void FDCT32(int *buf, int *dest, int offset, int oddBlock, int gb)
{
 800d72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d730:	b08b      	sub	sp, #44	; 0x2c
 800d732:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800d736:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800d738:	9307      	str	r3, [sp, #28]
	/* scaling - ensure at least 6 guard bits for DCT 
	 * (in practice this is already true 99% of time, so this code is
	 *  almost never triggered)
	 */
	es = 0;
	if (gb < 6) {
 800d73a:	2c05      	cmp	r4, #5
 800d73c:	f300 8331 	bgt.w	800dda2 <xmp3_FDCT32+0x676>
		es = 6 - gb;
 800d740:	f1c4 0a06 	rsb	sl, r4, #6
		for (i = 0; i < 32; i++)
 800d744:	1f03      	subs	r3, r0, #4
 800d746:	f100 017c 	add.w	r1, r0, #124	; 0x7c
			buf[i] >>= es;
 800d74a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800d74e:	fa42 f20a 	asr.w	r2, r2, sl
		for (i = 0; i < 32; i++)
 800d752:	4299      	cmp	r1, r3
			buf[i] >>= es;
 800d754:	601a      	str	r2, [r3, #0]
		for (i = 0; i < 32; i++)
 800d756:	d1f8      	bne.n	800d74a <xmp3_FDCT32+0x1e>
	}

	/* first pass */    
	D32FP(0, 1, 5, 1);
 800d758:	6801      	ldr	r1, [r0, #0]
 800d75a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 800d75c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800d75e:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800d760:	1a8b      	subs	r3, r1, r2
 800d762:	440a      	add	r2, r1
	 * For inline assembly, x and y are not assumed to be R0, R1 so it shouldn't matter
	 *   which one is returned. (If this were a function call, returning y (R1) would
	 *   require an extra "mov r0, r1")
     */
    int zlow;
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800d764:	49be      	ldr	r1, [pc, #760]	; (800da60 <xmp3_FDCT32+0x334>)
 800d766:	fb81 4303 	smull	r4, r3, r1, r3
 800d76a:	005c      	lsls	r4, r3, #1
 800d76c:	1ba9      	subs	r1, r5, r6
 800d76e:	4bbd      	ldr	r3, [pc, #756]	; (800da64 <xmp3_FDCT32+0x338>)
 800d770:	4435      	add	r5, r6
 800d772:	fb83 6101 	smull	r6, r1, r3, r1
 800d776:	014b      	lsls	r3, r1, #5
 800d778:	1951      	adds	r1, r2, r5
 800d77a:	6001      	str	r1, [r0, #0]
 800d77c:	1b52      	subs	r2, r2, r5
 800d77e:	4dba      	ldr	r5, [pc, #744]	; (800da68 <xmp3_FDCT32+0x33c>)
 800d780:	fb85 6202 	smull	r6, r2, r5, r2
 800d784:	0052      	lsls	r2, r2, #1
 800d786:	63c2      	str	r2, [r0, #60]	; 0x3c
 800d788:	18e2      	adds	r2, r4, r3
 800d78a:	6402      	str	r2, [r0, #64]	; 0x40
 800d78c:	1ae3      	subs	r3, r4, r3
 800d78e:	fb85 2303 	smull	r2, r3, r5, r3
	D32FP(1, 1, 3, 1);
 800d792:	6844      	ldr	r4, [r0, #4]
 800d794:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800d796:	6b86      	ldr	r6, [r0, #56]	; 0x38
 800d798:	6c45      	ldr	r5, [r0, #68]	; 0x44
	D32FP(0, 1, 5, 1);
 800d79a:	005b      	lsls	r3, r3, #1
 800d79c:	67c3      	str	r3, [r0, #124]	; 0x7c
	D32FP(1, 1, 3, 1);
 800d79e:	1aa3      	subs	r3, r4, r2
 800d7a0:	4422      	add	r2, r4
 800d7a2:	4cb2      	ldr	r4, [pc, #712]	; (800da6c <xmp3_FDCT32+0x340>)
 800d7a4:	fb84 7303 	smull	r7, r3, r4, r3
 800d7a8:	1b74      	subs	r4, r6, r5
 800d7aa:	005b      	lsls	r3, r3, #1
 800d7ac:	4435      	add	r5, r6
 800d7ae:	4eb0      	ldr	r6, [pc, #704]	; (800da70 <xmp3_FDCT32+0x344>)
 800d7b0:	fb86 7404 	smull	r7, r4, r6, r4
 800d7b4:	1956      	adds	r6, r2, r5
 800d7b6:	00e4      	lsls	r4, r4, #3
 800d7b8:	1b52      	subs	r2, r2, r5
 800d7ba:	9600      	str	r6, [sp, #0]
 800d7bc:	6046      	str	r6, [r0, #4]
 800d7be:	4dad      	ldr	r5, [pc, #692]	; (800da74 <xmp3_FDCT32+0x348>)
 800d7c0:	fb85 6202 	smull	r6, r2, r5, r2
 800d7c4:	0052      	lsls	r2, r2, #1
 800d7c6:	6382      	str	r2, [r0, #56]	; 0x38
 800d7c8:	191a      	adds	r2, r3, r4
 800d7ca:	6442      	str	r2, [r0, #68]	; 0x44
 800d7cc:	1b1b      	subs	r3, r3, r4
 800d7ce:	fb85 2303 	smull	r2, r3, r5, r3
	D32FP(2, 1, 3, 1);
 800d7d2:	6885      	ldr	r5, [r0, #8]
 800d7d4:	6f42      	ldr	r2, [r0, #116]	; 0x74
 800d7d6:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800d7d8:	6c86      	ldr	r6, [r0, #72]	; 0x48
	D32FP(1, 1, 3, 1);
 800d7da:	005b      	lsls	r3, r3, #1
 800d7dc:	6783      	str	r3, [r0, #120]	; 0x78
	D32FP(2, 1, 3, 1);
 800d7de:	1aab      	subs	r3, r5, r2
 800d7e0:	442a      	add	r2, r5
 800d7e2:	4da5      	ldr	r5, [pc, #660]	; (800da78 <xmp3_FDCT32+0x34c>)
 800d7e4:	fb85 7303 	smull	r7, r3, r5, r3
 800d7e8:	1ba5      	subs	r5, r4, r6
 800d7ea:	005b      	lsls	r3, r3, #1
 800d7ec:	4434      	add	r4, r6
 800d7ee:	4ea3      	ldr	r6, [pc, #652]	; (800da7c <xmp3_FDCT32+0x350>)
 800d7f0:	fb86 7505 	smull	r7, r5, r6, r5
 800d7f4:	1917      	adds	r7, r2, r4
 800d7f6:	00ed      	lsls	r5, r5, #3
 800d7f8:	1b12      	subs	r2, r2, r4
 800d7fa:	9706      	str	r7, [sp, #24]
 800d7fc:	6087      	str	r7, [r0, #8]
 800d7fe:	4ca0      	ldr	r4, [pc, #640]	; (800da80 <xmp3_FDCT32+0x354>)
 800d800:	fb84 6202 	smull	r6, r2, r4, r2
 800d804:	0052      	lsls	r2, r2, #1
 800d806:	6342      	str	r2, [r0, #52]	; 0x34
 800d808:	195a      	adds	r2, r3, r5
 800d80a:	6482      	str	r2, [r0, #72]	; 0x48
 800d80c:	1b5b      	subs	r3, r3, r5
 800d80e:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(3, 1, 2, 1);
 800d812:	68c5      	ldr	r5, [r0, #12]
 800d814:	6f02      	ldr	r2, [r0, #112]	; 0x70
 800d816:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800d818:	6cc6      	ldr	r6, [r0, #76]	; 0x4c
	D32FP(2, 1, 3, 1);
 800d81a:	005b      	lsls	r3, r3, #1
 800d81c:	6743      	str	r3, [r0, #116]	; 0x74
	D32FP(3, 1, 2, 1);
 800d81e:	1aab      	subs	r3, r5, r2
 800d820:	442a      	add	r2, r5
 800d822:	4d98      	ldr	r5, [pc, #608]	; (800da84 <xmp3_FDCT32+0x358>)
 800d824:	fb85 7303 	smull	r7, r3, r5, r3
 800d828:	1ba5      	subs	r5, r4, r6
 800d82a:	005b      	lsls	r3, r3, #1
 800d82c:	4434      	add	r4, r6
 800d82e:	4e96      	ldr	r6, [pc, #600]	; (800da88 <xmp3_FDCT32+0x35c>)
 800d830:	fb86 7505 	smull	r7, r5, r6, r5
 800d834:	eb02 0c04 	add.w	ip, r2, r4
 800d838:	00ad      	lsls	r5, r5, #2
 800d83a:	1b12      	subs	r2, r2, r4
 800d83c:	f8c0 c00c 	str.w	ip, [r0, #12]
 800d840:	4c92      	ldr	r4, [pc, #584]	; (800da8c <xmp3_FDCT32+0x360>)
 800d842:	fb84 6202 	smull	r6, r2, r4, r2
 800d846:	0052      	lsls	r2, r2, #1
 800d848:	6302      	str	r2, [r0, #48]	; 0x30
 800d84a:	195a      	adds	r2, r3, r5
 800d84c:	64c2      	str	r2, [r0, #76]	; 0x4c
 800d84e:	1b5b      	subs	r3, r3, r5
 800d850:	fb84 2303 	smull	r2, r3, r4, r3
	D32FP(4, 1, 2, 1);
 800d854:	6904      	ldr	r4, [r0, #16]
 800d856:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
 800d858:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
 800d85a:	6d05      	ldr	r5, [r0, #80]	; 0x50
	D32FP(3, 1, 2, 1);
 800d85c:	005b      	lsls	r3, r3, #1
 800d85e:	6703      	str	r3, [r0, #112]	; 0x70
	D32FP(4, 1, 2, 1);
 800d860:	1aa3      	subs	r3, r4, r2
 800d862:	4422      	add	r2, r4
 800d864:	4c8a      	ldr	r4, [pc, #552]	; (800da90 <xmp3_FDCT32+0x364>)
 800d866:	fb84 7303 	smull	r7, r3, r4, r3
 800d86a:	1b74      	subs	r4, r6, r5
 800d86c:	005b      	lsls	r3, r3, #1
 800d86e:	4435      	add	r5, r6
 800d870:	4e88      	ldr	r6, [pc, #544]	; (800da94 <xmp3_FDCT32+0x368>)
 800d872:	fb86 7404 	smull	r7, r4, r6, r4
 800d876:	eb02 0b05 	add.w	fp, r2, r5
 800d87a:	00a4      	lsls	r4, r4, #2
 800d87c:	1b52      	subs	r2, r2, r5
 800d87e:	f8c0 b010 	str.w	fp, [r0, #16]
 800d882:	4d85      	ldr	r5, [pc, #532]	; (800da98 <xmp3_FDCT32+0x36c>)
 800d884:	fb85 6202 	smull	r6, r2, r5, r2
 800d888:	0052      	lsls	r2, r2, #1
 800d88a:	62c2      	str	r2, [r0, #44]	; 0x2c
 800d88c:	191a      	adds	r2, r3, r4
 800d88e:	6502      	str	r2, [r0, #80]	; 0x50
 800d890:	1b1c      	subs	r4, r3, r4
 800d892:	fb85 3404 	smull	r3, r4, r5, r4
 800d896:	0064      	lsls	r4, r4, #1
	D32FP(5, 1, 1, 2);
 800d898:	6e82      	ldr	r2, [r0, #104]	; 0x68
	D32FP(4, 1, 2, 1);
 800d89a:	66c4      	str	r4, [r0, #108]	; 0x6c
	D32FP(5, 1, 1, 2);
 800d89c:	6944      	ldr	r4, [r0, #20]
 800d89e:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800d8a0:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800d8a2:	1aa3      	subs	r3, r4, r2
 800d8a4:	4422      	add	r2, r4
 800d8a6:	4c7d      	ldr	r4, [pc, #500]	; (800da9c <xmp3_FDCT32+0x370>)
 800d8a8:	fb84 7303 	smull	r7, r3, r4, r3
 800d8ac:	1b74      	subs	r4, r6, r5
 800d8ae:	005b      	lsls	r3, r3, #1
 800d8b0:	4435      	add	r5, r6
 800d8b2:	4e7b      	ldr	r6, [pc, #492]	; (800daa0 <xmp3_FDCT32+0x374>)
 800d8b4:	fb86 7404 	smull	r7, r4, r6, r4
 800d8b8:	eb02 0905 	add.w	r9, r2, r5
 800d8bc:	0064      	lsls	r4, r4, #1
 800d8be:	1b52      	subs	r2, r2, r5
 800d8c0:	f8c0 9014 	str.w	r9, [r0, #20]
 800d8c4:	4d77      	ldr	r5, [pc, #476]	; (800daa4 <xmp3_FDCT32+0x378>)
 800d8c6:	fb85 6202 	smull	r6, r2, r5, r2
 800d8ca:	0092      	lsls	r2, r2, #2
 800d8cc:	6282      	str	r2, [r0, #40]	; 0x28
 800d8ce:	191a      	adds	r2, r3, r4
 800d8d0:	6542      	str	r2, [r0, #84]	; 0x54
 800d8d2:	1b1c      	subs	r4, r3, r4
 800d8d4:	fb85 3404 	smull	r3, r4, r5, r4
 800d8d8:	00a4      	lsls	r4, r4, #2
	D32FP(6, 1, 1, 2);
 800d8da:	6e42      	ldr	r2, [r0, #100]	; 0x64
	D32FP(5, 1, 1, 2);
 800d8dc:	6684      	str	r4, [r0, #104]	; 0x68
	D32FP(6, 1, 1, 2);
 800d8de:	6984      	ldr	r4, [r0, #24]
 800d8e0:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8e2:	6d85      	ldr	r5, [r0, #88]	; 0x58
 800d8e4:	1aa3      	subs	r3, r4, r2
 800d8e6:	4422      	add	r2, r4
 800d8e8:	4c6f      	ldr	r4, [pc, #444]	; (800daa8 <xmp3_FDCT32+0x37c>)
 800d8ea:	fb84 7303 	smull	r7, r3, r4, r3
 800d8ee:	1b74      	subs	r4, r6, r5
 800d8f0:	005b      	lsls	r3, r3, #1
 800d8f2:	442e      	add	r6, r5
 800d8f4:	4d6d      	ldr	r5, [pc, #436]	; (800daac <xmp3_FDCT32+0x380>)
 800d8f6:	fb85 7404 	smull	r7, r4, r5, r4
 800d8fa:	0065      	lsls	r5, r4, #1
 800d8fc:	1994      	adds	r4, r2, r6
 800d8fe:	6184      	str	r4, [r0, #24]
 800d900:	1b92      	subs	r2, r2, r6
 800d902:	4e6b      	ldr	r6, [pc, #428]	; (800dab0 <xmp3_FDCT32+0x384>)
 800d904:	fb86 7202 	smull	r7, r2, r6, r2
 800d908:	0092      	lsls	r2, r2, #2
 800d90a:	6242      	str	r2, [r0, #36]	; 0x24
 800d90c:	195a      	adds	r2, r3, r5
 800d90e:	6582      	str	r2, [r0, #88]	; 0x58
 800d910:	1b5b      	subs	r3, r3, r5
 800d912:	fb86 2303 	smull	r2, r3, r6, r3
	D32FP(7, 1, 1, 4);
 800d916:	69c5      	ldr	r5, [r0, #28]
 800d918:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800d91a:	f8d0 e020 	ldr.w	lr, [r0, #32]
 800d91e:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
	D32FP(6, 1, 1, 2);
 800d920:	009b      	lsls	r3, r3, #2
 800d922:	6643      	str	r3, [r0, #100]	; 0x64
	D32FP(7, 1, 1, 4);
 800d924:	1aab      	subs	r3, r5, r2
 800d926:	442a      	add	r2, r5
 800d928:	4d62      	ldr	r5, [pc, #392]	; (800dab4 <xmp3_FDCT32+0x388>)
 800d92a:	fb85 7303 	smull	r7, r3, r5, r3
 800d92e:	4f62      	ldr	r7, [pc, #392]	; (800dab8 <xmp3_FDCT32+0x38c>)
 800d930:	ebae 0506 	sub.w	r5, lr, r6
 800d934:	005b      	lsls	r3, r3, #1
 800d936:	4476      	add	r6, lr
 800d938:	fb87 e505 	smull	lr, r5, r7, r5
 800d93c:	eb02 0806 	add.w	r8, r2, r6
 800d940:	006d      	lsls	r5, r5, #1
 800d942:	1b92      	subs	r2, r2, r6
 800d944:	f8c0 801c 	str.w	r8, [r0, #28]
 800d948:	4e5c      	ldr	r6, [pc, #368]	; (800dabc <xmp3_FDCT32+0x390>)
 800d94a:	fb86 7202 	smull	r7, r2, r6, r2
 800d94e:	0112      	lsls	r2, r2, #4
 800d950:	6202      	str	r2, [r0, #32]
 800d952:	195a      	adds	r2, r3, r5
 800d954:	65c2      	str	r2, [r0, #92]	; 0x5c
 800d956:	1b5d      	subs	r5, r3, r5
 800d958:	fb86 3505 	smull	r3, r5, r6, r5
 800d95c:	4a58      	ldr	r2, [pc, #352]	; (800dac0 <xmp3_FDCT32+0x394>)
 800d95e:	4b59      	ldr	r3, [pc, #356]	; (800dac4 <xmp3_FDCT32+0x398>)
 800d960:	4e59      	ldr	r6, [pc, #356]	; (800dac8 <xmp3_FDCT32+0x39c>)
 800d962:	f8cd a020 	str.w	sl, [sp, #32]
 800d966:	e9cd 2301 	strd	r2, r3, [sp, #4]
 800d96a:	4b58      	ldr	r3, [pc, #352]	; (800dacc <xmp3_FDCT32+0x3a0>)
 800d96c:	9009      	str	r0, [sp, #36]	; 0x24
 800d96e:	012d      	lsls	r5, r5, #4
 800d970:	6605      	str	r5, [r0, #96]	; 0x60

	/* second pass */
	for (i = 4; i > 0; i--) {
 800d972:	f100 0220 	add.w	r2, r0, #32
 800d976:	469e      	mov	lr, r3
 800d978:	46a2      	mov	sl, r4
 800d97a:	4663      	mov	r3, ip
	D32FP(7, 1, 1, 4);
 800d97c:	4f54      	ldr	r7, [pc, #336]	; (800dad0 <xmp3_FDCT32+0x3a4>)
 800d97e:	4d55      	ldr	r5, [pc, #340]	; (800dad4 <xmp3_FDCT32+0x3a8>)
 800d980:	f8df c15c 	ldr.w	ip, [pc, #348]	; 800dae0 <xmp3_FDCT32+0x3b4>
 800d984:	9c00      	ldr	r4, [sp, #0]
 800d986:	9806      	ldr	r0, [sp, #24]
 800d988:	9603      	str	r6, [sp, #12]
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800d98a:	eba1 0608 	sub.w	r6, r1, r8
 800d98e:	4441      	add	r1, r8
 800d990:	fb85 8606 	smull	r8, r6, r5, r6
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800d994:	eba3 050b 	sub.w	r5, r3, fp
		b0 = a0 + a7;	    b7 = MULSHIFT32(*cptr++, a0 - a7) << 1;
 800d998:	0076      	lsls	r6, r6, #1
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800d99a:	445b      	add	r3, fp
 800d99c:	fb8e 8505 	smull	r8, r5, lr, r5
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800d9a0:	eba1 0e03 	sub.w	lr, r1, r3
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800d9a4:	00ed      	lsls	r5, r5, #3
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800d9a6:	440b      	add	r3, r1
 800d9a8:	fb87 1e0e 	smull	r1, lr, r7, lr
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800d9ac:	1b71      	subs	r1, r6, r5
 800d9ae:	4435      	add	r5, r6
		a0 = b0 + b3;	    a3 = MULSHIFT32(*cptr,   b0 - b3) << 1;
 800d9b0:	ea4f 084e 	mov.w	r8, lr, lsl #1
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800d9b4:	9500      	str	r5, [sp, #0]
 800d9b6:	468e      	mov	lr, r1
 800d9b8:	fb87 1e0e 	smull	r1, lr, r7, lr

		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800d9bc:	eba4 010a 	sub.w	r1, r4, sl
 800d9c0:	9d03      	ldr	r5, [sp, #12]
		a4 = b4 + b7;		a7 = MULSHIFT32(*cptr++, b7 - b4) << 1;
 800d9c2:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800d9c6:	4454      	add	r4, sl
 800d9c8:	fb85 6101 	smull	r6, r1, r5, r1
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800d9cc:	eba0 0609 	sub.w	r6, r0, r9
 800d9d0:	9d01      	ldr	r5, [sp, #4]
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800d9d2:	0049      	lsls	r1, r1, #1
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800d9d4:	4448      	add	r0, r9
 800d9d6:	fb85 7606 	smull	r7, r6, r5, r6
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800d9da:	1a27      	subs	r7, r4, r0
 800d9dc:	9d02      	ldr	r5, [sp, #8]
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800d9de:	ea4f 0b46 	mov.w	fp, r6, lsl #1
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800d9e2:	4404      	add	r4, r0
 800d9e4:	fb85 0707 	smull	r0, r7, r5, r7
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800d9e8:	eba1 060b 	sub.w	r6, r1, fp
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800d9ec:	00bf      	lsls	r7, r7, #2
		a5 = b5 + b6;	    a6 = MULSHIFT32(*cptr++, b6 - b5) << 2;
 800d9ee:	4459      	add	r1, fp
 800d9f0:	fb85 0606 	smull	r0, r6, r5, r6
 800d9f4:	4d38      	ldr	r5, [pc, #224]	; (800dad8 <xmp3_FDCT32+0x3ac>)
 800d9f6:	00b6      	lsls	r6, r6, #2

		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800d9f8:	1b18      	subs	r0, r3, r4
 800d9fa:	fb85 9000 	smull	r9, r0, r5, r0
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800d9fe:	eba8 0b07 	sub.w	fp, r8, r7
 800da02:	fb85 9b0b 	smull	r9, fp, r5, fp
		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800da06:	4423      	add	r3, r4
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800da08:	4447      	add	r7, r8
		buf[0] = b0;	    buf[1] = b1;
 800da0a:	f842 3c20 	str.w	r3, [r2, #-32]
		buf[2] = b2 + b3;	buf[3] = b3;

		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800da0e:	9b00      	ldr	r3, [sp, #0]
		buf[2] = b2 + b3;	buf[3] = b3;
 800da10:	eb07 044b 	add.w	r4, r7, fp, lsl #1
		b0 = a0 + a1;	    b1 = MULSHIFT32(COS4_0, a0 - a1) << 1;
 800da14:	0040      	lsls	r0, r0, #1
		b2 = a2 + a3;	    b3 = MULSHIFT32(COS4_0, a3 - a2) << 1;
 800da16:	ea4f 074b 	mov.w	r7, fp, lsl #1
		buf[2] = b2 + b3;	buf[3] = b3;
 800da1a:	e942 0407 	strd	r0, r4, [r2, #-28]
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800da1e:	1a5b      	subs	r3, r3, r1
		buf[2] = b2 + b3;	buf[3] = b3;
 800da20:	f842 7c14 	str.w	r7, [r2, #-20]
 800da24:	fb85 0303 	smull	r0, r3, r5, r3
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800da28:	ebae 0006 	sub.w	r0, lr, r6
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800da2c:	005b      	lsls	r3, r3, #1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800da2e:	44b6      	add	lr, r6
 800da30:	fb85 4000 	smull	r4, r0, r5, r0
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800da34:	9d00      	ldr	r5, [sp, #0]
		b6 += b7;
 800da36:	eb0e 0e40 	add.w	lr, lr, r0, lsl #1
		b4 = a4 + a5;	    b5 = MULSHIFT32(COS4_0, a4 - a5) << 1;
 800da3a:	440d      	add	r5, r1
		b6 = a6 + a7;	    b7 = MULSHIFT32(COS4_0, a7 - a6) << 1;
 800da3c:	0041      	lsls	r1, r0, #1
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800da3e:	eb03 0040 	add.w	r0, r3, r0, lsl #1
		buf[6] = b5 + b6;	buf[7] = b7;
 800da42:	4473      	add	r3, lr
 800da44:	e942 3102 	strd	r3, r1, [r2, #-8]
	for (i = 4; i > 0; i--) {
 800da48:	4b24      	ldr	r3, [pc, #144]	; (800dadc <xmp3_FDCT32+0x3b0>)
 800da4a:	f10c 0c18 	add.w	ip, ip, #24
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800da4e:	4475      	add	r5, lr
	for (i = 4; i > 0; i--) {
 800da50:	4563      	cmp	r3, ip
		buf[4] = b4 + b6;	buf[5] = b5 + b7;
 800da52:	e942 5004 	strd	r5, r0, [r2, #-16]
	for (i = 4; i > 0; i--) {
 800da56:	f102 0220 	add.w	r2, r2, #32
 800da5a:	d05d      	beq.n	800db18 <xmp3_FDCT32+0x3ec>
 800da5c:	e042      	b.n	800dae4 <xmp3_FDCT32+0x3b8>
 800da5e:	bf00      	nop
 800da60:	4013c251 	.word	0x4013c251
 800da64:	518522fb 	.word	0x518522fb
 800da68:	404f4672 	.word	0x404f4672
 800da6c:	40b345bd 	.word	0x40b345bd
 800da70:	6d0b20cf 	.word	0x6d0b20cf
 800da74:	42e13c10 	.word	0x42e13c10
 800da78:	41fa2d6d 	.word	0x41fa2d6d
 800da7c:	41d95790 	.word	0x41d95790
 800da80:	48919f44 	.word	0x48919f44
 800da84:	43f93421 	.word	0x43f93421
 800da88:	5efc8d96 	.word	0x5efc8d96
 800da8c:	52cb0e63 	.word	0x52cb0e63
 800da90:	46cc1bc4 	.word	0x46cc1bc4
 800da94:	4ad81a97 	.word	0x4ad81a97
 800da98:	64e2402e 	.word	0x64e2402e
 800da9c:	4a9d9cf0 	.word	0x4a9d9cf0
 800daa0:	7c7d1db3 	.word	0x7c7d1db3
 800daa4:	43e224a9 	.word	0x43e224a9
 800daa8:	4fae3711 	.word	0x4fae3711
 800daac:	6b6fcf26 	.word	0x6b6fcf26
 800dab0:	6e3c92c1 	.word	0x6e3c92c1
 800dab4:	56601ea7 	.word	0x56601ea7
 800dab8:	5f4cf6eb 	.word	0x5f4cf6eb
 800dabc:	519e4e04 	.word	0x519e4e04
 800dac0:	73326bbf 	.word	0x73326bbf
 800dac4:	539eba45 	.word	0x539eba45
 800dac8:	4cf8de88 	.word	0x4cf8de88
 800dacc:	52036742 	.word	0x52036742
 800dad0:	4545e9ef 	.word	0x4545e9ef
 800dad4:	4140fb46 	.word	0x4140fb46
 800dad8:	5a82799a 	.word	0x5a82799a
 800dadc:	0802590c 	.word	0x0802590c
 800dae0:	080258ac 	.word	0x080258ac
		b1 = a1 + a6;	    b6 = MULSHIFT32(*cptr++, a1 - a6) << 1;
 800dae4:	e9dc 731a 	ldrd	r7, r3, [ip, #104]	; 0x68
 800dae8:	9303      	str	r3, [sp, #12]
		b2 = a2 + a5;	    b5 = MULSHIFT32(*cptr++, a2 - a5) << 1;
 800daea:	f8dc 3070 	ldr.w	r3, [ip, #112]	; 0x70
 800daee:	9301      	str	r3, [sp, #4]
		a1 = b1 + b2;		a2 = MULSHIFT32(*cptr,   b1 - b2) << 2;
 800daf0:	f8dc 3074 	ldr.w	r3, [ip, #116]	; 0x74
 800daf4:	9302      	str	r3, [sp, #8]
		b3 = a3 + a4;	    b4 = MULSHIFT32(*cptr++, a3 - a4) << 3;
 800daf6:	e9dc 5e18 	ldrd	r5, lr, [ip, #96]	; 0x60
		a0 = buf[0]; 	    a7 = buf[7];		a3 = buf[3];	    a4 = buf[4];
 800dafa:	e952 3b05 	ldrd	r3, fp, [r2, #-20]
 800dafe:	f852 1c20 	ldr.w	r1, [r2, #-32]
 800db02:	f852 8c04 	ldr.w	r8, [r2, #-4]
		a1 = buf[1];	    a6 = buf[6];	    a2 = buf[2];	    a5 = buf[5];
 800db06:	f852 4c1c 	ldr.w	r4, [r2, #-28]
 800db0a:	f852 ac08 	ldr.w	sl, [r2, #-8]
 800db0e:	f852 0c18 	ldr.w	r0, [r2, #-24]
 800db12:	f852 9c0c 	ldr.w	r9, [r2, #-12]
 800db16:	e738      	b.n	800d98a <xmp3_FDCT32+0x25e>
		buf += 8;
	}
	buf -= 32;	/* reset */

	/* sample 0 - always delayed one block */
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db18:	9b05      	ldr	r3, [sp, #20]
 800db1a:	9907      	ldr	r1, [sp, #28]
 800db1c:	1a5b      	subs	r3, r3, r1
 800db1e:	f003 0307 	and.w	r3, r3, #7
 800db22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800db26:	e9dd a008 	ldrd	sl, r0, [sp, #32]
 800db2a:	009a      	lsls	r2, r3, #2
 800db2c:	2900      	cmp	r1, #0
 800db2e:	f000 812c 	beq.w	800dd8a <xmp3_FDCT32+0x65e>
 800db32:	9d04      	ldr	r5, [sp, #16]
	s = buf[ 0];				d[0] = d[8] = s;
    
	/* samples 16 to 31 */
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db34:	9905      	ldr	r1, [sp, #20]
	s = buf[ 0];				d[0] = d[8] = s;
 800db36:	6804      	ldr	r4, [r0, #0]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db38:	18ae      	adds	r6, r5, r2
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db3a:	0089      	lsls	r1, r1, #2
	s = buf[ 0];				d[0] = d[8] = s;
 800db3c:	6234      	str	r4, [r6, #32]
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db3e:	f501 5188 	add.w	r1, r1, #4352	; 0x1100
	s = buf[ 0];				d[0] = d[8] = s;
 800db42:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db46:	2400      	movs	r4, #0
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db48:	9d04      	ldr	r5, [sp, #16]

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800db4a:	6843      	ldr	r3, [r0, #4]
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
	s = buf[15];				d[0] = d[8] = s;	d += 64;
	s = tmp;					d[0] = d[8] = s;

	/* samples 16 to 1 (sample 16 used again) */
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db4c:	f5a2 627c 	sub.w	r2, r2, #4032	; 0xfc0
 800db50:	4414      	add	r4, r2
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800db52:	186a      	adds	r2, r5, r1
	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800db54:	6213      	str	r3, [r2, #32]
 800db56:	506b      	str	r3, [r5, r1]
	d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800db58:	192b      	adds	r3, r5, r4
	tmp = buf[25] + buf[29];
 800db5a:	6e41      	ldr	r1, [r0, #100]	; 0x64
 800db5c:	6f45      	ldr	r5, [r0, #116]	; 0x74
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800db5e:	6c47      	ldr	r7, [r0, #68]	; 0x44
	tmp = buf[25] + buf[29];
 800db60:	4429      	add	r1, r5
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800db62:	440f      	add	r7, r1
 800db64:	f8c2 7120 	str.w	r7, [r2, #288]	; 0x120
 800db68:	f8c2 7100 	str.w	r7, [r2, #256]	; 0x100
	s = buf[ 9] + buf[13];		d[0] = d[8] = s;	d += 64;
 800db6c:	6b47      	ldr	r7, [r0, #52]	; 0x34
 800db6e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800db70:	443d      	add	r5, r7
 800db72:	f8c2 5220 	str.w	r5, [r2, #544]	; 0x220
 800db76:	f8c2 5200 	str.w	r5, [r2, #512]	; 0x200
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800db7a:	6d47      	ldr	r7, [r0, #84]	; 0x54
 800db7c:	4439      	add	r1, r7
 800db7e:	f8c2 1320 	str.w	r1, [r2, #800]	; 0x320
 800db82:	f8c2 1300 	str.w	r1, [r2, #768]	; 0x300
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800db86:	6947      	ldr	r7, [r0, #20]
	tmp = buf[29] + buf[27];
 800db88:	6f45      	ldr	r5, [r0, #116]	; 0x74
 800db8a:	6ec1      	ldr	r1, [r0, #108]	; 0x6c
	s = buf[ 5];				d[0] = d[8] = s;	d += 64;
 800db8c:	f8c2 7420 	str.w	r7, [r2, #1056]	; 0x420
 800db90:	f8c2 7400 	str.w	r7, [r2, #1024]	; 0x400
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800db94:	6d47      	ldr	r7, [r0, #84]	; 0x54
	tmp = buf[29] + buf[27];
 800db96:	4429      	add	r1, r5
	s = buf[21] + tmp;			d[0] = d[8] = s;	d += 64;
 800db98:	440f      	add	r7, r1
 800db9a:	f8c2 7520 	str.w	r7, [r2, #1312]	; 0x520
 800db9e:	f8c2 7500 	str.w	r7, [r2, #1280]	; 0x500
	s = buf[13] + buf[11];		d[0] = d[8] = s;	d += 64;
 800dba2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
 800dba4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800dba6:	443d      	add	r5, r7
 800dba8:	f8c2 5620 	str.w	r5, [r2, #1568]	; 0x620
 800dbac:	f8c2 5600 	str.w	r5, [r2, #1536]	; 0x600
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbb0:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 800dbb2:	4439      	add	r1, r7
 800dbb4:	f8c2 1720 	str.w	r1, [r2, #1824]	; 0x720
 800dbb8:	f8c2 1700 	str.w	r1, [r2, #1792]	; 0x700
	tmp = buf[27] + buf[31];
 800dbbc:	6ec5      	ldr	r5, [r0, #108]	; 0x6c
 800dbbe:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
 800dbc0:	4429      	add	r1, r5
	s = buf[ 3];				d[0] = d[8] = s;	d += 64;
 800dbc2:	68c5      	ldr	r5, [r0, #12]
 800dbc4:	f8c2 5820 	str.w	r5, [r2, #2080]	; 0x820
 800dbc8:	f8c2 5800 	str.w	r5, [r2, #2048]	; 0x800
	s = buf[19] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbcc:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
 800dbce:	440f      	add	r7, r1
 800dbd0:	f8c2 7920 	str.w	r7, [r2, #2336]	; 0x920
 800dbd4:	f8c2 7900 	str.w	r7, [r2, #2304]	; 0x900
	s = buf[11] + buf[15];		d[0] = d[8] = s;	d += 64;
 800dbd8:	6bc7      	ldr	r7, [r0, #60]	; 0x3c
 800dbda:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
 800dbdc:	443d      	add	r5, r7
 800dbde:	f8c2 5a20 	str.w	r5, [r2, #2592]	; 0xa20
 800dbe2:	f8c2 5a00 	str.w	r5, [r2, #2560]	; 0xa00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbe6:	6dc7      	ldr	r7, [r0, #92]	; 0x5c
 800dbe8:	4439      	add	r1, r7
 800dbea:	f8c2 1b20 	str.w	r1, [r2, #2848]	; 0xb20
 800dbee:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800dbf2:	69c1      	ldr	r1, [r0, #28]
	tmp = buf[31];
 800dbf4:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
	s = buf[ 7];				d[0] = d[8] = s;	d += 64;
 800dbf6:	f8c2 1c20 	str.w	r1, [r2, #3104]	; 0xc20
 800dbfa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
	s = buf[23] + tmp;			d[0] = d[8] = s;	d += 64;
 800dbfe:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
 800dc00:	4429      	add	r1, r5
 800dc02:	f8c2 1d20 	str.w	r1, [r2, #3360]	; 0xd20
 800dc06:	f8c2 1d00 	str.w	r1, [r2, #3328]	; 0xd00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800dc0a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800dc0c:	f8c2 1e20 	str.w	r1, [r2, #3616]	; 0xe20
	s = tmp;					d[0] = d[8] = s;
 800dc10:	f8c2 5f20 	str.w	r5, [r2, #3872]	; 0xf20
 800dc14:	f8c2 5f00 	str.w	r5, [r2, #3840]	; 0xf00
	s = buf[15];				d[0] = d[8] = s;	d += 64;
 800dc18:	f8c2 1e00 	str.w	r1, [r2, #3584]	; 0xe00

	s = buf[ 1];				d[0] = d[8] = s;	d += 64;
 800dc1c:	9d04      	ldr	r5, [sp, #16]
 800dc1e:	6841      	ldr	r1, [r0, #4]
 800dc20:	6219      	str	r1, [r3, #32]
 800dc22:	5129      	str	r1, [r5, r4]

	tmp = buf[30] + buf[25];
 800dc24:	6f81      	ldr	r1, [r0, #120]	; 0x78
 800dc26:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800dc28:	4421      	add	r1, r4
	s = buf[17] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc2a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800dc2c:	440c      	add	r4, r1
 800dc2e:	f8c3 4120 	str.w	r4, [r3, #288]	; 0x120
 800dc32:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	s = buf[14] + buf[ 9];		d[0] = d[8] = s;	d += 64;
 800dc36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc38:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800dc3a:	442c      	add	r4, r5
 800dc3c:	f8c3 4220 	str.w	r4, [r3, #544]	; 0x220
 800dc40:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc44:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800dc46:	4421      	add	r1, r4
 800dc48:	f8c3 1320 	str.w	r1, [r3, #800]	; 0x320
 800dc4c:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
	s = buf[ 6];				d[0] = d[8] = s;	d += 64;
 800dc50:	6981      	ldr	r1, [r0, #24]
 800dc52:	f8c3 1420 	str.w	r1, [r3, #1056]	; 0x420
 800dc56:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400

	tmp = buf[26] + buf[30];
 800dc5a:	6f84      	ldr	r4, [r0, #120]	; 0x78
 800dc5c:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800dc5e:	4421      	add	r1, r4
	s = buf[22] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc60:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800dc62:	440c      	add	r4, r1
 800dc64:	f8c3 4520 	str.w	r4, [r3, #1312]	; 0x520
 800dc68:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	s = buf[10] + buf[14];		d[0] = d[8] = s;	d += 64;
 800dc6c:	6b85      	ldr	r5, [r0, #56]	; 0x38
 800dc6e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800dc70:	442c      	add	r4, r5
 800dc72:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
 800dc76:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc7a:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800dc7c:	4421      	add	r1, r4
 800dc7e:	f8c3 1720 	str.w	r1, [r3, #1824]	; 0x720
 800dc82:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
	s = buf[ 2];				d[0] = d[8] = s;	d += 64;
 800dc86:	6881      	ldr	r1, [r0, #8]
 800dc88:	f8c3 1820 	str.w	r1, [r3, #2080]	; 0x820
 800dc8c:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800

	tmp = buf[28] + buf[26];
 800dc90:	6e84      	ldr	r4, [r0, #104]	; 0x68
 800dc92:	6f01      	ldr	r1, [r0, #112]	; 0x70
 800dc94:	4421      	add	r1, r4
	s = buf[18] + tmp;			d[0] = d[8] = s;	d += 64;
 800dc96:	6c84      	ldr	r4, [r0, #72]	; 0x48
 800dc98:	440c      	add	r4, r1
 800dc9a:	f8c3 4920 	str.w	r4, [r3, #2336]	; 0x920
 800dc9e:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
	s = buf[12] + buf[10];		d[0] = d[8] = s;	d += 64;
 800dca2:	6a85      	ldr	r5, [r0, #40]	; 0x28
 800dca4:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800dca6:	442c      	add	r4, r5
 800dca8:	f8c3 4a20 	str.w	r4, [r3, #2592]	; 0xa20
 800dcac:	f8c3 4a00 	str.w	r4, [r3, #2560]	; 0xa00
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800dcb0:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800dcb2:	4421      	add	r1, r4
 800dcb4:	f8c3 1b20 	str.w	r1, [r3, #2848]	; 0xb20
 800dcb8:	f8c3 1b00 	str.w	r1, [r3, #2816]	; 0xb00
	s = buf[ 4];				d[0] = d[8] = s;	d += 64;
 800dcbc:	6901      	ldr	r1, [r0, #16]
 800dcbe:	f8c3 1c20 	str.w	r1, [r3, #3104]	; 0xc20
 800dcc2:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00

	tmp = buf[24] + buf[28];
 800dcc6:	6f04      	ldr	r4, [r0, #112]	; 0x70
 800dcc8:	6e01      	ldr	r1, [r0, #96]	; 0x60
 800dcca:	4421      	add	r1, r4
	s = buf[20] + tmp;			d[0] = d[8] = s;	d += 64;
 800dccc:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800dcce:	440c      	add	r4, r1
 800dcd0:	f8c3 4d20 	str.w	r4, [r3, #3360]	; 0xd20
 800dcd4:	f8c3 4d00 	str.w	r4, [r3, #3328]	; 0xd00
	s = buf[ 8] + buf[12];		d[0] = d[8] = s;	d += 64;
 800dcd8:	6a04      	ldr	r4, [r0, #32]
 800dcda:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800dcdc:	442c      	add	r4, r5
 800dcde:	f8c3 4e20 	str.w	r4, [r3, #3616]	; 0xe20
 800dce2:	f8c3 4e00 	str.w	r4, [r3, #3584]	; 0xe00
	s = buf[16] + tmp;			d[0] = d[8] = s;
 800dce6:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800dce8:	4401      	add	r1, r0
 800dcea:	f8c3 1f20 	str.w	r1, [r3, #3872]	; 0xf20
 800dcee:	f8c3 1f00 	str.w	r1, [r3, #3840]	; 0xf00

	/* this is so rarely invoked that it's not worth making two versions of the output
	 *   shuffle code (one for no shift, one for clip + variable shift) like in IMDCT
	 * here we just load, clip, shift, and store on the rare instances that es != 0
	 */
	if (es) {
 800dcf2:	f1ba 0f00 	cmp.w	sl, #0
 800dcf6:	d045      	beq.n	800dd84 <xmp3_FDCT32+0x658>
		d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);
 800dcf8:	6831      	ldr	r1, [r6, #0]
 800dcfa:	f1ca 041f 	rsb	r4, sl, #31
 800dcfe:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 800dd02:	fa41 f004 	asr.w	r0, r1, r4
 800dd06:	fa25 f50a 	lsr.w	r5, r5, sl
 800dd0a:	ebb0 7fe1 	cmp.w	r0, r1, asr #31
 800dd0e:	ea4f 77e1 	mov.w	r7, r1, asr #31
 800dd12:	f105 35ff 	add.w	r5, r5, #4294967295
 800dd16:	bf18      	it	ne
 800dd18:	ea85 0107 	eorne.w	r1, r5, r7
 800dd1c:	fa01 f10a 	lsl.w	r1, r1, sl
 800dd20:	f102 0020 	add.w	r0, r2, #32
 800dd24:	6231      	str	r1, [r6, #32]
 800dd26:	6031      	str	r1, [r6, #0]
	
		d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
		for (i = 16; i <= 31; i++) {
 800dd28:	f502 5281 	add.w	r2, r2, #4128	; 0x1020
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800dd2c:	f850 1c20 	ldr.w	r1, [r0, #-32]
 800dd30:	fa41 f604 	asr.w	r6, r1, r4
 800dd34:	ebb6 7fe1 	cmp.w	r6, r1, asr #31
 800dd38:	ea4f 77e1 	mov.w	r7, r1, asr #31
 800dd3c:	bf18      	it	ne
 800dd3e:	ea85 0107 	eorne.w	r1, r5, r7
 800dd42:	fa01 f10a 	lsl.w	r1, r1, sl
 800dd46:	6001      	str	r1, [r0, #0]
 800dd48:	f840 1c20 	str.w	r1, [r0, #-32]
		for (i = 16; i <= 31; i++) {
 800dd4c:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800dd50:	4282      	cmp	r2, r0
 800dd52:	d1eb      	bne.n	800dd2c <xmp3_FDCT32+0x600>
 800dd54:	f103 0120 	add.w	r1, r3, #32
 800dd58:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
		}

		d = dest + 16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
		for (i = 15; i >= 0; i--) {
			s = d[0];	CLIP_2N(s, 31 - es);	d[0] = d[8] = (s << es);	d += 64;
 800dd5c:	f851 2c20 	ldr.w	r2, [r1, #-32]
 800dd60:	fa42 f004 	asr.w	r0, r2, r4
 800dd64:	ebb0 7fe2 	cmp.w	r0, r2, asr #31
 800dd68:	ea4f 76e2 	mov.w	r6, r2, asr #31
 800dd6c:	bf18      	it	ne
 800dd6e:	ea85 0206 	eorne.w	r2, r5, r6
 800dd72:	fa02 f20a 	lsl.w	r2, r2, sl
 800dd76:	600a      	str	r2, [r1, #0]
 800dd78:	f841 2c20 	str.w	r2, [r1, #-32]
		for (i = 15; i >= 0; i--) {
 800dd7c:	f501 7180 	add.w	r1, r1, #256	; 0x100
 800dd80:	428b      	cmp	r3, r1
 800dd82:	d1eb      	bne.n	800dd5c <xmp3_FDCT32+0x630>
		}
	}
}
 800dd84:	b00b      	add	sp, #44	; 0x2c
 800dd86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800dd8a:	9b05      	ldr	r3, [sp, #20]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800dd8c:	9d04      	ldr	r5, [sp, #16]
	s = buf[ 0];				d[0] = d[8] = s;
 800dd8e:	6804      	ldr	r4, [r0, #0]
	d = dest + offset + (oddBlock ? VBUF_LENGTH  : 0);
 800dd90:	0099      	lsls	r1, r3, #2
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800dd92:	f502 5388 	add.w	r3, r2, #4352	; 0x1100
 800dd96:	18ee      	adds	r6, r5, r3
	s = buf[ 0];				d[0] = d[8] = s;
 800dd98:	6234      	str	r4, [r6, #32]
 800dd9a:	50ec      	str	r4, [r5, r3]
	d = dest + 64*16 + ((offset - oddBlock) & 7) + (oddBlock ? 0 : VBUF_LENGTH);
 800dd9c:	f44f 5488 	mov.w	r4, #4352	; 0x1100
 800dda0:	e6d2      	b.n	800db48 <xmp3_FDCT32+0x41c>
	es = 0;
 800dda2:	f04f 0a00 	mov.w	sl, #0
 800dda6:	e4d7      	b.n	800d758 <xmp3_FDCT32+0x2c>

0800dda8 <xmp3_Dequantize>:
 *                round to PCM (>> by 15 less than we otherwise would have).
 *              Equivalently, we can think of the dequantized coefficients as 
 *                Q(DQ_FRACBITS_OUT - 15) with no implicit bias. 
 **************************************************************************************/
int Dequantize(MP3DecInfo *mp3DecInfo, int gr)
{
 800dda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddac:	b08f      	sub	sp, #60	; 0x3c
 800ddae:	9108      	str	r1, [sp, #32]
	HuffmanInfo *hi;
	DequantInfo *di;
	CriticalBandInfo *cbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800ddb0:	2800      	cmp	r0, #0
 800ddb2:	f000 8133 	beq.w	800e01c <xmp3_Dequantize+0x274>
 800ddb6:	f8d0 9000 	ldr.w	r9, [r0]
 800ddba:	f1b9 0f00 	cmp.w	r9, #0
 800ddbe:	f000 812d 	beq.w	800e01c <xmp3_Dequantize+0x274>
 800ddc2:	6843      	ldr	r3, [r0, #4]
 800ddc4:	9309      	str	r3, [sp, #36]	; 0x24
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	f000 8128 	beq.w	800e01c <xmp3_Dequantize+0x274>
 800ddcc:	6883      	ldr	r3, [r0, #8]
 800ddce:	930a      	str	r3, [sp, #40]	; 0x28
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f000 8123 	beq.w	800e01c <xmp3_Dequantize+0x274>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800ddd6:	68c3      	ldr	r3, [r0, #12]
 800ddd8:	9307      	str	r3, [sp, #28]
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || 
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	f000 811e 	beq.w	800e01c <xmp3_Dequantize+0x274>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->DequantInfoPS)
 800dde0:	6901      	ldr	r1, [r0, #16]
 800dde2:	2900      	cmp	r1, #0
 800dde4:	f000 811a 	beq.w	800e01c <xmp3_Dequantize+0x274>
	di = (DequantInfo *)mp3DecInfo->DequantInfoPS;
	cbi = di->cbi;
	mOut[0] = mOut[1] = 0;

	/* dequantize all the samples in each channel */
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800dde8:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
	mOut[0] = mOut[1] = 0;
 800ddec:	2500      	movs	r5, #0
	cbi = di->cbi;
 800ddee:	f501 7246 	add.w	r2, r1, #792	; 0x318
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800ddf2:	42ab      	cmp	r3, r5
	mOut[0] = mOut[1] = 0;
 800ddf4:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
	cbi = di->cbi;
 800ddf8:	920b      	str	r2, [sp, #44]	; 0x2c
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800ddfa:	dd32      	ble.n	800de62 <xmp3_Dequantize+0xba>
 800ddfc:	9b08      	ldr	r3, [sp, #32]
 800ddfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de00:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 800de04:	eb03 06c3 	add.w	r6, r3, r3, lsl #3
 800de08:	ebc3 1843 	rsb	r8, r3, r3, lsl #5
 800de0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de0e:	eb02 1606 	add.w	r6, r2, r6, lsl #4
 800de12:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 800de16:	9b07      	ldr	r3, [sp, #28]
 800de18:	3628      	adds	r6, #40	; 0x28
 800de1a:	4632      	mov	r2, r6
 800de1c:	f503 5790 	add.w	r7, r3, #4608	; 0x1200
 800de20:	4646      	mov	r6, r8
 800de22:	4654      	mov	r4, sl
 800de24:	3708      	adds	r7, #8
 800de26:	469b      	mov	fp, r3
 800de28:	4682      	mov	sl, r0
 800de2a:	4690      	mov	r8, r2
		hi->gb[ch] = DequantChannel(hi->huffDecBuf[ch], di->workBuf, &hi->nonZeroBound[ch], fh, 
 800de2c:	e9cd 6401 	strd	r6, r4, [sp, #4]
 800de30:	f8cd 8000 	str.w	r8, [sp]
 800de34:	f1a7 0208 	sub.w	r2, r7, #8
 800de38:	4658      	mov	r0, fp
 800de3a:	464b      	mov	r3, r9
 800de3c:	9106      	str	r1, [sp, #24]
 800de3e:	f000 f9e5 	bl	800e20c <xmp3_DequantChannel>
 800de42:	f847 0b04 	str.w	r0, [r7], #4
	for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800de46:	f8da 37bc 	ldr.w	r3, [sl, #1980]	; 0x7bc
 800de4a:	9906      	ldr	r1, [sp, #24]
 800de4c:	3501      	adds	r5, #1
 800de4e:	42ab      	cmp	r3, r5
 800de50:	f108 0848 	add.w	r8, r8, #72	; 0x48
 800de54:	f106 063e 	add.w	r6, r6, #62	; 0x3e
 800de58:	f104 0418 	add.w	r4, r4, #24
 800de5c:	f50b 6b10 	add.w	fp, fp, #2304	; 0x900
 800de60:	dce4      	bgt.n	800de2c <xmp3_Dequantize+0x84>
	/* joint stereo processing assumes one guard bit in input samples
	 * it's extremely rare not to have at least one gb, so if this is the case
	 *   just make a pass over the data and clip to [-2^30+1, 2^30-1]
	 * in practice this may never happen
	 */
	if (fh->modeExt && (hi->gb[0] < 1 || hi->gb[1] < 1)) {
 800de62:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800de66:	2800      	cmp	r0, #0
 800de68:	d06d      	beq.n	800df46 <xmp3_Dequantize+0x19e>
 800de6a:	9b07      	ldr	r3, [sp, #28]
 800de6c:	f503 5480 	add.w	r4, r3, #4096	; 0x1000
 800de70:	f8d4 3208 	ldr.w	r3, [r4, #520]	; 0x208
 800de74:	2b00      	cmp	r3, #0
 800de76:	dd69      	ble.n	800df4c <xmp3_Dequantize+0x1a4>
 800de78:	f8d4 320c 	ldr.w	r3, [r4, #524]	; 0x20c
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	dd65      	ble.n	800df4c <xmp3_Dequantize+0x1a4>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
		}
	}

	/* do mid-side stereo processing, if enabled */
	if (fh->modeExt >> 1) {
 800de80:	0843      	lsrs	r3, r0, #1
 800de82:	f000 80ce 	beq.w	800e022 <xmp3_Dequantize+0x27a>
		if (fh->modeExt & 0x01) {
 800de86:	07c2      	lsls	r2, r0, #31
 800de88:	d50c      	bpl.n	800dea4 <xmp3_Dequantize+0xfc>
			/* intensity stereo enabled - run mid-side up to start of right zero region */
			if (cbi[1].cbType == 0)
 800de8a:	f8d1 3330 	ldr.w	r3, [r1, #816]	; 0x330
 800de8e:	2b00      	cmp	r3, #0
 800de90:	f040 80af 	bne.w	800dff2 <xmp3_Dequantize+0x24a>
				nSamps = fh->sfBand->l[cbi[1].cbEndL + 1];
 800de94:	f8d1 3344 	ldr.w	r3, [r1, #836]	; 0x344
 800de98:	f8d9 2034 	ldr.w	r2, [r9, #52]	; 0x34
 800de9c:	3301      	adds	r3, #1
 800de9e:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800dea2:	e004      	b.n	800deae <xmp3_Dequantize+0x106>
			else 
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
		} else {
			/* intensity stereo disabled - run mid-side on whole spectrum */
			nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800dea4:	e9d4 3180 	ldrd	r3, r1, [r4, #512]	; 0x200
 800dea8:	4299      	cmp	r1, r3
 800deaa:	bfb8      	it	lt
 800deac:	4619      	movlt	r1, r3
		}
		MidSideProc(hi->huffDecBuf, nSamps, mOut);
 800deae:	ad0c      	add	r5, sp, #48	; 0x30
 800deb0:	9807      	ldr	r0, [sp, #28]
 800deb2:	462a      	mov	r2, r5
 800deb4:	f003 f948 	bl	8011148 <xmp3_MidSideProc>
	}

	/* do intensity stereo processing, if enabled */
	if (fh->modeExt & 0x01) {
 800deb8:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800debc:	07c3      	lsls	r3, r0, #31
 800debe:	d51f      	bpl.n	800df00 <xmp3_Dequantize+0x158>
		nSamps = hi->nonZeroBound[0];
		if (fh->ver == MPEG1) {
 800dec0:	f899 3000 	ldrb.w	r3, [r9]
		nSamps = hi->nonZeroBound[0];
 800dec4:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
		if (fh->ver == MPEG1) {
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d175      	bne.n	800dfb8 <xmp3_Dequantize+0x210>
			IntensityProcMPEG1(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, 
 800decc:	9503      	str	r5, [sp, #12]
 800dece:	1045      	asrs	r5, r0, #1
 800ded0:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 800ded4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800ded6:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800deda:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 800dede:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800dee0:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800dee4:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800dee8:	e9cd 5201 	strd	r5, r2, [sp, #4]
 800deec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800def0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800def2:	9200      	str	r2, [sp, #0]
 800def4:	333e      	adds	r3, #62	; 0x3e
 800def6:	464a      	mov	r2, r9
 800def8:	f003 f95a 	bl	80111b0 <xmp3_IntensityProcMPEG1>
				fh->modeExt >> 1, si->sis[gr][1].mixedBlock, mOut);
		}
	}

	/* adjust guard bit count and nonZeroBound if we did any stereo processing */
	if (fh->modeExt) {
 800defc:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800df00:	b308      	cbz	r0, 800df46 <xmp3_Dequantize+0x19e>
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800df02:	9b0c      	ldr	r3, [sp, #48]	; 0x30

static __inline int CLZ(int x)
{
	int numZeros;

	if (!x)
 800df04:	2b00      	cmp	r3, #0
 800df06:	f000 8081 	beq.w	800e00c <xmp3_Dequantize+0x264>
		return (sizeof(int) * 8);

	numZeros = 0;
	while (!(x & 0x80000000)) {
 800df0a:	f2c0 8084 	blt.w	800e016 <xmp3_Dequantize+0x26e>
	numZeros = 0;
 800df0e:	2200      	movs	r2, #0
	while (!(x & 0x80000000)) {
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	4611      	mov	r1, r2
		numZeros++;
 800df14:	f102 0201 	add.w	r2, r2, #1
	while (!(x & 0x80000000)) {
 800df18:	d5fa      	bpl.n	800df10 <xmp3_Dequantize+0x168>
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800df1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
		hi->gb[0] = CLZ(mOut[0]) - 1;
 800df1c:	f8c4 1208 	str.w	r1, [r4, #520]	; 0x208
	if (!x)
 800df20:	2b00      	cmp	r3, #0
 800df22:	d071      	beq.n	800e008 <xmp3_Dequantize+0x260>
	while (!(x & 0x80000000)) {
 800df24:	db74      	blt.n	800e010 <xmp3_Dequantize+0x268>
	numZeros = 0;
 800df26:	2200      	movs	r2, #0
	while (!(x & 0x80000000)) {
 800df28:	005b      	lsls	r3, r3, #1
 800df2a:	4611      	mov	r1, r2
		numZeros++;
 800df2c:	f102 0201 	add.w	r2, r2, #1
	while (!(x & 0x80000000)) {
 800df30:	d5fa      	bpl.n	800df28 <xmp3_Dequantize+0x180>
		nSamps = MAX(hi->nonZeroBound[0], hi->nonZeroBound[1]);
 800df32:	e9d4 2380 	ldrd	r2, r3, [r4, #512]	; 0x200
 800df36:	4293      	cmp	r3, r2
 800df38:	bfb8      	it	lt
 800df3a:	4613      	movlt	r3, r2
		hi->nonZeroBound[0] = nSamps;
		hi->nonZeroBound[1] = nSamps;
 800df3c:	e9c4 3380 	strd	r3, r3, [r4, #512]	; 0x200
		hi->gb[1] = CLZ(mOut[1]) - 1;
 800df40:	f8c4 120c 	str.w	r1, [r4, #524]	; 0x20c
	}

	/* output format Q(DQ_FRACBITS_OUT) */
	return 0;
 800df44:	2000      	movs	r0, #0
}
 800df46:	b00f      	add	sp, #60	; 0x3c
 800df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800df4c:	f8d4 5200 	ldr.w	r5, [r4, #512]	; 0x200
 800df50:	2d00      	cmp	r5, #0
 800df52:	dd15      	ble.n	800df80 <xmp3_Dequantize+0x1d8>
 800df54:	9b07      	ldr	r3, [sp, #28]
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800df56:	4f34      	ldr	r7, [pc, #208]	; (800e028 <xmp3_Dequantize+0x280>)
 800df58:	3b04      	subs	r3, #4
 800df5a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800df5e:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800df62:	e002      	b.n	800df6a <xmp3_Dequantize+0x1c2>
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800df64:	42ab      	cmp	r3, r5
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800df66:	601f      	str	r7, [r3, #0]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800df68:	d00a      	beq.n	800df80 <xmp3_Dequantize+0x1d8>
			if (hi->huffDecBuf[0][i] < -0x3fffffff)	 hi->huffDecBuf[0][i] = -0x3fffffff;
 800df6a:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800df6e:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800df72:	ddf7      	ble.n	800df64 <xmp3_Dequantize+0x1bc>
			if (hi->huffDecBuf[0][i] >  0x3fffffff)	 hi->huffDecBuf[0][i] =  0x3fffffff;
 800df74:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800df78:	bfa8      	it	ge
 800df7a:	601e      	strge	r6, [r3, #0]
		for (i = 0; i < hi->nonZeroBound[0]; i++) {
 800df7c:	42ab      	cmp	r3, r5
 800df7e:	d1f4      	bne.n	800df6a <xmp3_Dequantize+0x1c2>
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800df80:	f8d4 5204 	ldr.w	r5, [r4, #516]	; 0x204
 800df84:	2d00      	cmp	r5, #0
 800df86:	f77f af7b 	ble.w	800de80 <xmp3_Dequantize+0xd8>
 800df8a:	9b07      	ldr	r3, [sp, #28]
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800df8c:	4f26      	ldr	r7, [pc, #152]	; (800e028 <xmp3_Dequantize+0x280>)
 800df8e:	f603 03fc 	addw	r3, r3, #2300	; 0x8fc
 800df92:	eb03 0585 	add.w	r5, r3, r5, lsl #2
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800df96:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
 800df9a:	e003      	b.n	800dfa4 <xmp3_Dequantize+0x1fc>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800df9c:	601f      	str	r7, [r3, #0]
		for (i = 0; i < hi->nonZeroBound[1]; i++) {
 800df9e:	42ab      	cmp	r3, r5
 800dfa0:	f43f af6e 	beq.w	800de80 <xmp3_Dequantize+0xd8>
			if (hi->huffDecBuf[1][i] < -0x3fffffff)	 hi->huffDecBuf[1][i] = -0x3fffffff;
 800dfa4:	f853 2f04 	ldr.w	r2, [r3, #4]!
 800dfa8:	f1b2 4f40 	cmp.w	r2, #3221225472	; 0xc0000000
 800dfac:	ddf6      	ble.n	800df9c <xmp3_Dequantize+0x1f4>
			if (hi->huffDecBuf[1][i] >  0x3fffffff)	 hi->huffDecBuf[1][i] =  0x3fffffff;
 800dfae:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800dfb2:	bfa8      	it	ge
 800dfb4:	601e      	strge	r6, [r3, #0]
 800dfb6:	e7f2      	b.n	800df9e <xmp3_Dequantize+0x1f6>
			IntensityProcMPEG2(hi->huffDecBuf, nSamps, fh, &sfi->sfis[gr][1], di->cbi, &sfi->sfjs,
 800dfb8:	9504      	str	r5, [sp, #16]
 800dfba:	1045      	asrs	r5, r0, #1
 800dfbc:	e9dd 0307 	ldrd	r0, r3, [sp, #28]
 800dfc0:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800dfc2:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800dfc6:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 800dfca:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 800dfce:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800dfd2:	e9cd 5202 	strd	r5, r2, [sp, #8]
 800dfd6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dfd8:	9200      	str	r2, [sp, #0]
 800dfda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfdc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800dfe0:	32f8      	adds	r2, #248	; 0xf8
 800dfe2:	9201      	str	r2, [sp, #4]
 800dfe4:	333e      	adds	r3, #62	; 0x3e
 800dfe6:	464a      	mov	r2, r9
 800dfe8:	f003 fa60 	bl	80114ac <xmp3_IntensityProcMPEG2>
	if (fh->modeExt) {
 800dfec:	f8d9 0020 	ldr.w	r0, [r9, #32]
 800dff0:	e786      	b.n	800df00 <xmp3_Dequantize+0x158>
				nSamps = 3 * fh->sfBand->s[cbi[1].cbEndSMax + 1];
 800dff2:	f8d1 2340 	ldr.w	r2, [r1, #832]	; 0x340
 800dff6:	f8d9 3034 	ldr.w	r3, [r9, #52]	; 0x34
 800dffa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800dffe:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 800e002:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e006:	e752      	b.n	800deae <xmp3_Dequantize+0x106>
 800e008:	211f      	movs	r1, #31
 800e00a:	e792      	b.n	800df32 <xmp3_Dequantize+0x18a>
 800e00c:	211f      	movs	r1, #31
 800e00e:	e784      	b.n	800df1a <xmp3_Dequantize+0x172>
 800e010:	f04f 31ff 	mov.w	r1, #4294967295
 800e014:	e78d      	b.n	800df32 <xmp3_Dequantize+0x18a>
 800e016:	f04f 31ff 	mov.w	r1, #4294967295
 800e01a:	e77e      	b.n	800df1a <xmp3_Dequantize+0x172>
		return -1;
 800e01c:	f04f 30ff 	mov.w	r0, #4294967295
 800e020:	e791      	b.n	800df46 <xmp3_Dequantize+0x19e>
 800e022:	2001      	movs	r0, #1
 800e024:	ad0c      	add	r5, sp, #48	; 0x30
 800e026:	e74b      	b.n	800dec0 <xmp3_Dequantize+0x118>
 800e028:	c0000001 	.word	0xc0000001

0800e02c <DequantBlock>:
 * Outputs:     dequantized samples in Q25 format
 *
 * Return:      bitwise-OR of the unsigned outputs (for guard bit calculations)
 **************************************************************************************/
/*__attribute__ ((section (".data")))*/ static int DequantBlock(int *inbuf, int *outbuf, int num, int scale)
{
 800e02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int mask = 0;
	const int *tab16, *coef;

	tab16 = pow43_14[scale & 0x3];
	scalef = pow14[scale & 0x3];
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e030:	ea4f 08a3 	mov.w	r8, r3, asr #2
	tab16 = pow43_14[scale & 0x3];
 800e034:	f003 0403 	and.w	r4, r3, #3
 800e038:	4b64      	ldr	r3, [pc, #400]	; (800e1cc <DequantBlock+0x1a0>)
 800e03a:	eb03 1984 	add.w	r9, r3, r4, lsl #6

	/* cache first 4 values */
	shift = MIN(scalei + 3, 31);
 800e03e:	4643      	mov	r3, r8
 800e040:	2b1c      	cmp	r3, #28
{
 800e042:	4686      	mov	lr, r0
	scalef = pow14[scale & 0x3];
 800e044:	4862      	ldr	r0, [pc, #392]	; (800e1d0 <DequantBlock+0x1a4>)
	shift = MIN(scalei + 3, 31);
 800e046:	bfa8      	it	ge
 800e048:	231c      	movge	r3, #28
	scalef = pow14[scale & 0x3];
 800e04a:	f850 a024 	ldr.w	sl, [r0, r4, lsl #2]
	shift = MAX(shift, 0);
	tab4[0] = 0;
	tab4[1] = tab16[1] >> shift;
 800e04e:	f8d9 0004 	ldr.w	r0, [r9, #4]
	shift = MIN(scalei + 3, 31);
 800e052:	3303      	adds	r3, #3
{
 800e054:	b089      	sub	sp, #36	; 0x24
	shift = MAX(shift, 0);
 800e056:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
	tab4[1] = tab16[1] >> shift;
 800e05a:	4118      	asrs	r0, r3
 800e05c:	9005      	str	r0, [sp, #20]
	tab4[2] = tab16[2] >> shift;
 800e05e:	f8d9 0008 	ldr.w	r0, [r9, #8]
 800e062:	4118      	asrs	r0, r3
 800e064:	9006      	str	r0, [sp, #24]
	tab4[3] = tab16[3] >> shift;
 800e066:	f8d9 000c 	ldr.w	r0, [r9, #12]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e06a:	f1b8 0f1f 	cmp.w	r8, #31
 800e06e:	46c3      	mov	fp, r8
	tab4[3] = tab16[3] >> shift;
 800e070:	fa40 f303 	asr.w	r3, r0, r3
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e074:	bfa8      	it	ge
 800e076:	f04f 0b1f 	movge.w	fp, #31
	tab4[3] = tab16[3] >> shift;
 800e07a:	9307      	str	r3, [sp, #28]
	tab4[0] = 0;
 800e07c:	2000      	movs	r0, #0
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e07e:	465b      	mov	r3, fp
	tab4[0] = 0;
 800e080:	9004      	str	r0, [sp, #16]
	scalei = MIN(scale >> 2, 31);	/* smallest input scale = -47, so smallest scalei = -12 */
 800e082:	46c3      	mov	fp, r8
 800e084:	46c8      	mov	r8, r9
 800e086:	46d1      	mov	r9, sl
 800e088:	469a      	mov	sl, r3
 800e08a:	e00e      	b.n	800e0aa <DequantBlock+0x7e>
		sx = *inbuf++;
		x = sx & 0x7fffffff;	/* sx = sign|mag */

		if (x < 4) {

			y = tab4[x];
 800e08c:	ac08      	add	r4, sp, #32
 800e08e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800e092:	f855 4c10 	ldr.w	r4, [r5, #-16]
			}
		}

		/* sign and store */
		mask |= y;
		*outbuf++ = (sx < 0) ? -y : y;
 800e096:	2b00      	cmp	r3, #0
		mask |= y;
 800e098:	ea40 0004 	orr.w	r0, r0, r4
		*outbuf++ = (sx < 0) ? -y : y;
 800e09c:	bfb8      	it	lt
 800e09e:	4264      	neglt	r4, r4

	} while (--num);
 800e0a0:	3a01      	subs	r2, #1
		*outbuf++ = (sx < 0) ? -y : y;
 800e0a2:	f841 4b04 	str.w	r4, [r1], #4
	} while (--num);
 800e0a6:	f000 808e 	beq.w	800e1c6 <DequantBlock+0x19a>
		sx = *inbuf++;
 800e0aa:	f85e 3b04 	ldr.w	r3, [lr], #4
		if (x < 4) {
 800e0ae:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e0b2:	f024 0403 	bic.w	r4, r4, #3
		x = sx & 0x7fffffff;	/* sx = sign|mag */
 800e0b6:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
		if (x < 4) {
 800e0ba:	2c00      	cmp	r4, #0
 800e0bc:	d0e6      	beq.n	800e08c <DequantBlock+0x60>
		} else if (x < 16) {
 800e0be:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e0c2:	f024 040f 	bic.w	r4, r4, #15
 800e0c6:	b954      	cbnz	r4, 800e0de <DequantBlock+0xb2>
			y = tab16[x];
 800e0c8:	f858 4025 	ldr.w	r4, [r8, r5, lsl #2]
			y = (scalei < 0) ? y << -scalei : y >> scalei;
 800e0cc:	f1bb 0f00 	cmp.w	fp, #0
 800e0d0:	bfba      	itte	lt
 800e0d2:	f1ca 0500 	rsblt	r5, sl, #0
 800e0d6:	40ac      	lsllt	r4, r5
 800e0d8:	fa44 f40a 	asrge.w	r4, r4, sl
 800e0dc:	e7db      	b.n	800e096 <DequantBlock+0x6a>
			if (x < 64) {
 800e0de:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800e0e2:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 800e0e6:	b974      	cbnz	r4, 800e106 <DequantBlock+0xda>
				y = pow43[x-16];
 800e0e8:	4c3a      	ldr	r4, [pc, #232]	; (800e1d4 <DequantBlock+0x1a8>)
 800e0ea:	3d10      	subs	r5, #16
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800e0ec:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800e0f0:	464c      	mov	r4, r9
 800e0f2:	fb85 6404 	smull	r6, r4, r5, r4
 800e0f6:	4625      	mov	r5, r4
				shift = scalei - 3;
 800e0f8:	f1aa 0403 	sub.w	r4, sl, #3
			if (shift < 0) {
 800e0fc:	2c00      	cmp	r4, #0
 800e0fe:	db57      	blt.n	800e1b0 <DequantBlock+0x184>
				y >>= shift;
 800e100:	fa45 f404 	asr.w	r4, r5, r4
 800e104:	e7c7      	b.n	800e096 <DequantBlock+0x6a>
				x <<= 17;
 800e106:	046c      	lsls	r4, r5, #17
				if (x < 0x08000000)
 800e108:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
					x <<= 4, shift += 4;
 800e10c:	bfb6      	itet	lt
 800e10e:	056c      	lsllt	r4, r5, #21
				shift = 0;
 800e110:	2500      	movge	r5, #0
					x <<= 4, shift += 4;
 800e112:	2504      	movlt	r5, #4
				if (x < 0x20000000)
 800e114:	f1b4 5f00 	cmp.w	r4, #536870912	; 0x20000000
				shift = 0;
 800e118:	9500      	str	r5, [sp, #0]
				if (x < 0x20000000)
 800e11a:	da03      	bge.n	800e124 <DequantBlock+0xf8>
					x <<= 2, shift += 2;
 800e11c:	9d00      	ldr	r5, [sp, #0]
 800e11e:	3502      	adds	r5, #2
 800e120:	00a4      	lsls	r4, r4, #2
 800e122:	9500      	str	r5, [sp, #0]
				if (x < 0x40000000)
 800e124:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800e128:	da03      	bge.n	800e132 <DequantBlock+0x106>
					x <<= 1, shift += 1;
 800e12a:	9d00      	ldr	r5, [sp, #0]
 800e12c:	3501      	adds	r5, #1
 800e12e:	0064      	lsls	r4, r4, #1
 800e130:	9500      	str	r5, [sp, #0]
				coef = (x < SQRTHALF) ? poly43lo : poly43hi;
 800e132:	4d29      	ldr	r5, [pc, #164]	; (800e1d8 <DequantBlock+0x1ac>)
 800e134:	4e29      	ldr	r6, [pc, #164]	; (800e1dc <DequantBlock+0x1b0>)
 800e136:	4f2a      	ldr	r7, [pc, #168]	; (800e1e0 <DequantBlock+0x1b4>)
 800e138:	42ac      	cmp	r4, r5
 800e13a:	4d2a      	ldr	r5, [pc, #168]	; (800e1e4 <DequantBlock+0x1b8>)
 800e13c:	bfc8      	it	gt
 800e13e:	46ac      	movgt	ip, r5
 800e140:	4d29      	ldr	r5, [pc, #164]	; (800e1e8 <DequantBlock+0x1bc>)
 800e142:	bfd8      	it	le
 800e144:	46b4      	movle	ip, r6
 800e146:	4e29      	ldr	r6, [pc, #164]	; (800e1ec <DequantBlock+0x1c0>)
 800e148:	bfd8      	it	le
 800e14a:	462e      	movle	r6, r5
 800e14c:	4d28      	ldr	r5, [pc, #160]	; (800e1f0 <DequantBlock+0x1c4>)
 800e14e:	bfd8      	it	le
 800e150:	462f      	movle	r7, r5
 800e152:	4d28      	ldr	r5, [pc, #160]	; (800e1f4 <DequantBlock+0x1c8>)
 800e154:	9702      	str	r7, [sp, #8]
 800e156:	4f28      	ldr	r7, [pc, #160]	; (800e1f8 <DequantBlock+0x1cc>)
 800e158:	bfd8      	it	le
 800e15a:	462f      	movle	r7, r5
 800e15c:	4d27      	ldr	r5, [pc, #156]	; (800e1fc <DequantBlock+0x1d0>)
 800e15e:	9701      	str	r7, [sp, #4]
 800e160:	4f27      	ldr	r7, [pc, #156]	; (800e200 <DequantBlock+0x1d4>)
 800e162:	bfd8      	it	le
 800e164:	462f      	movle	r7, r5
 800e166:	9703      	str	r7, [sp, #12]
 800e168:	4625      	mov	r5, r4
 800e16a:	fb86 7505 	smull	r7, r5, r6, r5
				y = MULSHIFT32(y, x) + coef[1];
 800e16e:	4465      	add	r5, ip
 800e170:	4626      	mov	r6, r4
 800e172:	fb85 c606 	smull	ip, r6, r5, r6
				y = MULSHIFT32(y, x) + coef[2];
 800e176:	9f03      	ldr	r7, [sp, #12]
 800e178:	4625      	mov	r5, r4
 800e17a:	443e      	add	r6, r7
 800e17c:	fb86 c505 	smull	ip, r5, r6, r5
				y = MULSHIFT32(y, x) + coef[3];
 800e180:	9f01      	ldr	r7, [sp, #4]
 800e182:	443d      	add	r5, r7
 800e184:	fb85 6404 	smull	r6, r4, r5, r4
				y = MULSHIFT32(y, x) + coef[4];
 800e188:	9f02      	ldr	r7, [sp, #8]
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800e18a:	4d1e      	ldr	r5, [pc, #120]	; (800e204 <DequantBlock+0x1d8>)
				y = MULSHIFT32(y, x) + coef[4];
 800e18c:	443c      	add	r4, r7
 800e18e:	9f00      	ldr	r7, [sp, #0]
 800e190:	f855 5027 	ldr.w	r5, [r5, r7, lsl #2]
 800e194:	fb84 6505 	smull	r6, r5, r4, r5
				y = MULSHIFT32(y, pow2frac[shift]) << 3;
 800e198:	00ed      	lsls	r5, r5, #3
 800e19a:	464c      	mov	r4, r9
 800e19c:	fb85 6404 	smull	r6, r4, r5, r4
 800e1a0:	4625      	mov	r5, r4
				shift = scalei - pow2exp[shift];
 800e1a2:	4c19      	ldr	r4, [pc, #100]	; (800e208 <DequantBlock+0x1dc>)
 800e1a4:	f854 4027 	ldr.w	r4, [r4, r7, lsl #2]
 800e1a8:	ebaa 0404 	sub.w	r4, sl, r4
			if (shift < 0) {
 800e1ac:	2c00      	cmp	r4, #0
 800e1ae:	daa7      	bge.n	800e100 <DequantBlock+0xd4>
				shift = -shift;
 800e1b0:	4266      	negs	r6, r4
				if (y > (0x7fffffff >> shift))
 800e1b2:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800e1b6:	fa44 f706 	asr.w	r7, r4, r6
 800e1ba:	42af      	cmp	r7, r5
 800e1bc:	f6ff af6b 	blt.w	800e096 <DequantBlock+0x6a>
					y <<= shift;
 800e1c0:	fa05 f406 	lsl.w	r4, r5, r6
 800e1c4:	e767      	b.n	800e096 <DequantBlock+0x6a>

	return mask;
}
 800e1c6:	b009      	add	sp, #36	; 0x24
 800e1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1cc:	08025a7c 	.word	0x08025a7c
 800e1d0:	0802596c 	.word	0x0802596c
 800e1d4:	080259bc 	.word	0x080259bc
 800e1d8:	5a827999 	.word	0x5a827999
 800e1dc:	b02e4828 	.word	0xb02e4828
 800e1e0:	fef577b4 	.word	0xfef577b4
 800e1e4:	d333f6a4 	.word	0xd333f6a4
 800e1e8:	29a0bda9 	.word	0x29a0bda9
 800e1ec:	10852163 	.word	0x10852163
 800e1f0:	ff581859 	.word	0xff581859
 800e1f4:	236c498d 	.word	0x236c498d
 800e1f8:	27c2cef0 	.word	0x27c2cef0
 800e1fc:	5957aa1b 	.word	0x5957aa1b
 800e200:	46e9408b 	.word	0x46e9408b
 800e204:	0802599c 	.word	0x0802599c
 800e208:	0802597c 	.word	0x0802597c

0800e20c <xmp3_DequantChannel>:
 *
 * Notes:       dequantized samples in Q(DQ_FRACBITS_OUT) format 
 **************************************************************************************/
/*__attribute__ ((section (".data")))*/ int DequantChannel(int *sampleBuf, int *workBuf, int *nonZeroBound, FrameHeader *fh, SideInfoSub *sis, 
					ScaleFactorInfoSub *sfis, CriticalBandInfo *cbi)
{
 800e20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e210:	b091      	sub	sp, #68	; 0x44
 800e212:	930a      	str	r3, [sp, #40]	; 0x28
	int globalGain, gainI;
	int cbMax[3];
	ARRAY3 *buf;    /* short block reorder */
	
	/* set default start/end points for short/long blocks - will update with non-zero cb info */
	if (sis->blockType == 2) {
 800e214:	9b1a      	ldr	r3, [sp, #104]	; 0x68
{
 800e216:	9006      	str	r0, [sp, #24]
	if (sis->blockType == 2) {
 800e218:	695b      	ldr	r3, [r3, #20]
{
 800e21a:	9108      	str	r1, [sp, #32]
	if (sis->blockType == 2) {
 800e21c:	2b02      	cmp	r3, #2
{
 800e21e:	9205      	str	r2, [sp, #20]
	if (sis->blockType == 2) {
 800e220:	f000 8114 	beq.w	800e44c <xmp3_DequantChannel+0x240>
		}
		cbEndS = 13;
	} else {
		/* long block */
		cbEndL =   22;
		cbStartS = 13;
 800e224:	230d      	movs	r3, #13
 800e226:	9302      	str	r3, [sp, #8]
		cbEndL =   22;
 800e228:	f04f 0816 	mov.w	r8, #22

	/* sfactScale = 0 --> quantizer step size = 2
	 * sfactScale = 1 --> quantizer step size = sqrt(2)
	 *   so sfactMultiplier = 2 or 4 (jump through globalGain by powers of 2 or sqrt(2))
	 */
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e22c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e22e:	4d96      	ldr	r5, [pc, #600]	; (800e488 <xmp3_DequantChannel+0x27c>)
 800e230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e232:	9501      	str	r5, [sp, #4]
 800e234:	3301      	adds	r3, #1
 800e236:	005b      	lsls	r3, r3, #1
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 800e238:	2200      	movs	r2, #0
	sfactMultiplier = 2 * (sis->sfactScale + 1);
 800e23a:	9300      	str	r3, [sp, #0]
	/* offset globalGain by -2 if midSide enabled, for 1/sqrt(2) used in MidSideProc()
	 *  (DequantBlock() does 0.25 * gainI so knocking it down by two is the same as 
	 *   dividing every sample by sqrt(2) = multiplying by 2^-.5)
	 */
	globalGain = sis->globalGain;
	if (fh->modeExt >> 1)
 800e23c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	cbMax[2] = cbMax[1] = cbMax[0] = 0;
 800e23e:	920d      	str	r2, [sp, #52]	; 0x34
	globalGain = sis->globalGain;
 800e240:	9a1a      	ldr	r2, [sp, #104]	; 0x68
	if (fh->modeExt >> 1)
 800e242:	6a1b      	ldr	r3, [r3, #32]
	globalGain = sis->globalGain;
 800e244:	6892      	ldr	r2, [r2, #8]
 800e246:	9209      	str	r2, [sp, #36]	; 0x24
	if (fh->modeExt >> 1)
 800e248:	085b      	lsrs	r3, r3, #1
		 globalGain -= 2;
	globalGain += IMDCT_SCALE;		/* scale everything by sqrt(2), for fast IMDCT36 */
 800e24a:	bf08      	it	eq
 800e24c:	3202      	addeq	r2, #2
 800e24e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e250:	bf08      	it	eq
 800e252:	9209      	streq	r2, [sp, #36]	; 0x24

	/* long blocks */
	for (cb = 0; cb < cbEndL; cb++) {
 800e254:	1e5e      	subs	r6, r3, #1

		nonZero = 0;
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e256:	9b09      	ldr	r3, [sp, #36]	; 0x24
	gbMask = 0;
 800e258:	f04f 0b00 	mov.w	fp, #0
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e25c:	f1c3 09d2 	rsb	r9, r3, #210	; 0xd2
 800e260:	e9cd 6803 	strd	r6, r8, [sp, #12]
 800e264:	f8cd 901c 	str.w	r9, [sp, #28]
 800e268:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 800e26c:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
	for (cb = 0; cb < cbEndL; cb++) {
 800e270:	465c      	mov	r4, fp
	i = 0;
 800e272:	46da      	mov	sl, fp
	for (cb = 0; cb < cbEndL; cb++) {
 800e274:	e029      	b.n	800e2ca <xmp3_DequantChannel+0xbe>
 800e276:	f8d8 3034 	ldr.w	r3, [r8, #52]	; 0x34
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e27a:	9d03      	ldr	r5, [sp, #12]
 800e27c:	f8d9 603c 	ldr.w	r6, [r9, #60]	; 0x3c
 800e280:	eb03 0244 	add.w	r2, r3, r4, lsl #1
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e284:	f933 3014 	ldrsh.w	r3, [r3, r4, lsl #1]
 800e288:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800e28c:	1ad2      	subs	r2, r2, r3
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e28e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 800e292:	9503      	str	r5, [sp, #12]
		nSamps = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 800e294:	1c67      	adds	r7, r4, #1

		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
		i += nSamps;
 800e296:	4492      	add	sl, r2
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e298:	4608      	mov	r0, r1
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e29a:	b11e      	cbz	r6, 800e2a4 <xmp3_DequantChannel+0x98>
 800e29c:	9d01      	ldr	r5, [sp, #4]
 800e29e:	f895 c000 	ldrb.w	ip, [r5]
 800e2a2:	4463      	add	r3, ip
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e2a4:	9e07      	ldr	r6, [sp, #28]
 800e2a6:	9d00      	ldr	r5, [sp, #0]
 800e2a8:	fb03 6305 	mla	r3, r3, r5, r6
 800e2ac:	f7ff febe 	bl	800e02c <DequantBlock>
		/* update highest non-zero critical band */
		if (nonZero) 
			cbMax[0] = cb;
		gbMask |= nonZero;

		if (i >= *nonZeroBound) 
 800e2b0:	9b01      	ldr	r3, [sp, #4]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	9301      	str	r3, [sp, #4]
		gbMask |= nonZero;
 800e2b6:	ea4b 0b00 	orr.w	fp, fp, r0
		if (nonZero) 
 800e2ba:	b900      	cbnz	r0, 800e2be <xmp3_DequantChannel+0xb2>
			cbMax[0] = cb;
 800e2bc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
		if (i >= *nonZeroBound) 
 800e2be:	9b05      	ldr	r3, [sp, #20]
 800e2c0:	940d      	str	r4, [sp, #52]	; 0x34
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4553      	cmp	r3, sl
 800e2c6:	dd07      	ble.n	800e2d8 <xmp3_DequantChannel+0xcc>
	for (cb = 0; cb < cbEndL; cb++) {
 800e2c8:	463c      	mov	r4, r7
		nonZero |= DequantBlock(sampleBuf + i, sampleBuf + i, nSamps, gainI);
 800e2ca:	9b06      	ldr	r3, [sp, #24]
 800e2cc:	eb03 018a 	add.w	r1, r3, sl, lsl #2
	for (cb = 0; cb < cbEndL; cb++) {
 800e2d0:	9b04      	ldr	r3, [sp, #16]
 800e2d2:	429c      	cmp	r4, r3
 800e2d4:	d1cf      	bne.n	800e276 <xmp3_DequantChannel+0x6a>
			break;
	}

	/* set cbi (Type, EndS[], EndSMax will be overwritten if we proceed to do short blocks) */
	cbi->cbType = 0;			/* long only */
	cbi->cbEndL  = cbMax[0];
 800e2d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800e2d8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
	cbi->cbType = 0;			/* long only */
 800e2da:	9a1c      	ldr	r2, [sp, #112]	; 0x70
	cbi->cbEndL  = cbMax[0];
 800e2dc:	615c      	str	r4, [r3, #20]
	cbi->cbType = 0;			/* long only */
 800e2de:	2300      	movs	r3, #0
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e2e0:	e9c2 3302 	strd	r3, r3, [r2, #8]
	cbi->cbType = 0;			/* long only */
 800e2e4:	6013      	str	r3, [r2, #0]
	cbi->cbEndS[0] = cbi->cbEndS[1] = cbi->cbEndS[2] = 0;
 800e2e6:	6053      	str	r3, [r2, #4]
	cbi->cbEndSMax = 0;
 800e2e8:	6113      	str	r3, [r2, #16]
	
	/* early exit if no short blocks */
	if (cbStartS >= 12) 
 800e2ea:	9a02      	ldr	r2, [sp, #8]
 800e2ec:	2a0b      	cmp	r2, #11
 800e2ee:	f300 80a1 	bgt.w	800e434 <xmp3_DequantChannel+0x228>
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e2f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
		return CLZ(gbMask) - 1;
	
	/* short blocks */
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800e2f4:	9b02      	ldr	r3, [sp, #8]
 800e2f6:	930f      	str	r3, [sp, #60]	; 0x3c
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e2f8:	f1c2 02d2 	rsb	r2, r2, #210	; 0xd2
	cbMax[2] = cbMax[1] = cbMax[0] = cbStartS;
 800e2fc:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
		gainI = 210 - globalGain + sfactMultiplier * (sfis->l[cb] + (sis->preFlag ? (int)preTab[cb] : 0));
 800e300:	9203      	str	r2, [sp, #12]
 800e302:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e306:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e308:	f8cd a004 	str.w	sl, [sp, #4]
 800e30c:	3317      	adds	r3, #23
 800e30e:	18d3      	adds	r3, r2, r3
 800e310:	9304      	str	r3, [sp, #16]
 800e312:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e314:	3328      	adds	r3, #40	; 0x28
 800e316:	930b      	str	r3, [sp, #44]	; 0x2c
	for (cb = cbStartS; cb < cbEndS; cb++) {

		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e31a:	9a02      	ldr	r2, [sp, #8]
 800e31c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e31e:	9207      	str	r2, [sp, #28]
 800e320:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800e324:	3201      	adds	r2, #1
 800e326:	f9b3 1030 	ldrsh.w	r1, [r3, #48]	; 0x30
 800e32a:	9202      	str	r2, [sp, #8]
 800e32c:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	; 0x2e
 800e330:	9b06      	ldr	r3, [sp, #24]
 800e332:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
		for (w = 0; w < 3; w++) {
			nonZero =  0;
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);

			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e336:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e33a:	f8dd 9010 	ldr.w	r9, [sp, #16]
		nSamps = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 800e33e:	1a8a      	subs	r2, r1, r2
		for (w = 0; w < 3; w++) {
 800e340:	9901      	ldr	r1, [sp, #4]
 800e342:	eb03 0481 	add.w	r4, r3, r1, lsl #2
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e346:	4627      	mov	r7, r4
 800e348:	9409      	str	r4, [sp, #36]	; 0x24
 800e34a:	0095      	lsls	r5, r2, #2
 800e34c:	ae0d      	add	r6, sp, #52	; 0x34
 800e34e:	4614      	mov	r4, r2
			gainI = 210 - globalGain + 8*sis->subBlockGain[w] + sfactMultiplier*(sfis->s[cb][w]);
 800e350:	9a03      	ldr	r2, [sp, #12]
 800e352:	f85a 3b04 	ldr.w	r3, [sl], #4
 800e356:	f819 1b01 	ldrb.w	r1, [r9], #1
 800e35a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
			nonZero |= DequantBlock(sampleBuf + i + nSamps*w, workBuf + nSamps*w, nSamps, gainI);
 800e35e:	9a00      	ldr	r2, [sp, #0]
 800e360:	4638      	mov	r0, r7
 800e362:	fb02 3301 	mla	r3, r2, r1, r3
 800e366:	4641      	mov	r1, r8
 800e368:	4622      	mov	r2, r4
 800e36a:	f7ff fe5f 	bl	800e02c <DequantBlock>
		for (w = 0; w < 3; w++) {
 800e36e:	44a8      	add	r8, r5
 800e370:	442f      	add	r7, r5

			/* update highest non-zero critical band */
			if (nonZero)
				cbMax[w] = cb;
			gbMask |= nonZero;
 800e372:	ea4b 0b00 	orr.w	fp, fp, r0
			if (nonZero)
 800e376:	b108      	cbz	r0, 800e37c <xmp3_DequantChannel+0x170>
				cbMax[w] = cb;
 800e378:	9b07      	ldr	r3, [sp, #28]
 800e37a:	6033      	str	r3, [r6, #0]
		for (w = 0; w < 3; w++) {
 800e37c:	3604      	adds	r6, #4
 800e37e:	ab10      	add	r3, sp, #64	; 0x40
 800e380:	42b3      	cmp	r3, r6
 800e382:	d1e5      	bne.n	800e350 <xmp3_DequantChannel+0x144>
		}

		/* reorder blocks */
		buf = (ARRAY3 *)(sampleBuf + i);
		i += 3*nSamps;
 800e384:	4622      	mov	r2, r4
 800e386:	9901      	ldr	r1, [sp, #4]
 800e388:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800e38a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800e38e:	4419      	add	r1, r3
		for (j = 0; j < nSamps; j++) {
 800e390:	2a00      	cmp	r2, #0
		i += 3*nSamps;
 800e392:	9101      	str	r1, [sp, #4]
 800e394:	ea4f 0142 	mov.w	r1, r2, lsl #1
		for (j = 0; j < nSamps; j++) {
 800e398:	dd19      	ble.n	800e3ce <xmp3_DequantChannel+0x1c2>
 800e39a:	9b08      	ldr	r3, [sp, #32]
 800e39c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800e3a0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800e3a4:	3a01      	subs	r2, #1
 800e3a6:	3901      	subs	r1, #1
 800e3a8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800e3ac:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800e3b0:	3b04      	subs	r3, #4
 800e3b2:	441d      	add	r5, r3
			buf[j][0] = workBuf[0*nSamps + j];
 800e3b4:	f853 0f04 	ldr.w	r0, [r3, #4]!
 800e3b8:	6020      	str	r0, [r4, #0]
			buf[j][1] = workBuf[1*nSamps + j];
 800e3ba:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e3be:	6060      	str	r0, [r4, #4]
			buf[j][2] = workBuf[2*nSamps + j];
 800e3c0:	f851 0f04 	ldr.w	r0, [r1, #4]!
 800e3c4:	60a0      	str	r0, [r4, #8]
		for (j = 0; j < nSamps; j++) {
 800e3c6:	429d      	cmp	r5, r3
 800e3c8:	f104 040c 	add.w	r4, r4, #12
 800e3cc:	d1f2      	bne.n	800e3b4 <xmp3_DequantChannel+0x1a8>
		}

		ASSERT(3*nSamps <= MAX_REORDER_SAMPS);

		if (i >= *nonZeroBound) 
 800e3ce:	9b05      	ldr	r3, [sp, #20]
 800e3d0:	9a01      	ldr	r2, [sp, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	4293      	cmp	r3, r2
 800e3d6:	dd4b      	ble.n	800e470 <xmp3_DequantChannel+0x264>
	for (cb = cbStartS; cb < cbEndS; cb++) {
 800e3d8:	9b04      	ldr	r3, [sp, #16]
 800e3da:	3303      	adds	r3, #3
 800e3dc:	9304      	str	r3, [sp, #16]
 800e3de:	9b02      	ldr	r3, [sp, #8]
 800e3e0:	2b0d      	cmp	r3, #13
 800e3e2:	d199      	bne.n	800e318 <xmp3_DequantChannel+0x10c>
 800e3e4:	f8dd a004 	ldr.w	sl, [sp, #4]
	 * however, the original nzb is no longer necessarily true
	 *   for each cb, buf[][] is updated with 3*nSamps samples (i increases 3*nSamps each time)
	 *   (buf[j + 1][0] = 3 (input) samples ahead of buf[j][0])
     * so update nonZeroBound to i
	 */
	*nonZeroBound = i;
 800e3e8:	9b05      	ldr	r3, [sp, #20]

	ASSERT(*nonZeroBound <= MAX_NSAMP);

	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e3ea:	981c      	ldr	r0, [sp, #112]	; 0x70
	*nonZeroBound = i;
 800e3ec:	f8c3 a000 	str.w	sl, [r3]
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e3f0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e3f2:	699a      	ldr	r2, [r3, #24]

	cbi->cbEndS[0] = cbMax[0];
	cbi->cbEndS[1] = cbMax[1];
 800e3f4:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
	cbi->cbType = (sis->mixedBlock ? 2 : 1);	/* 2 = mixed short/long, 1 = short only */
 800e3f8:	2a00      	cmp	r2, #0
 800e3fa:	bf14      	ite	ne
 800e3fc:	2202      	movne	r2, #2
 800e3fe:	2201      	moveq	r2, #1
 800e400:	6002      	str	r2, [r0, #0]
	cbi->cbEndS[2] = cbMax[2];

	cbi->cbEndSMax = cbMax[0];
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800e402:	428b      	cmp	r3, r1
	cbi->cbEndS[2] = cbMax[2];
 800e404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
	cbi->cbEndS[0] = cbMax[0];
 800e406:	6043      	str	r3, [r0, #4]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[1]);
 800e408:	bfb8      	it	lt
 800e40a:	460b      	movlt	r3, r1
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800e40c:	4293      	cmp	r3, r2
 800e40e:	bfb8      	it	lt
 800e410:	4613      	movlt	r3, r2
	if (!x)
 800e412:	f1bb 0f00 	cmp.w	fp, #0
	cbi->cbEndS[2] = cbMax[2];
 800e416:	e9c0 1202 	strd	r1, r2, [r0, #8]
	cbi->cbEndSMax = MAX(cbi->cbEndSMax, cbMax[2]);
 800e41a:	6103      	str	r3, [r0, #16]
 800e41c:	d02a      	beq.n	800e474 <xmp3_DequantChannel+0x268>
	while (!(x & 0x80000000)) {
 800e41e:	db30      	blt.n	800e482 <xmp3_DequantChannel+0x276>
	numZeros = 0;
 800e420:	2300      	movs	r3, #0
	while (!(x & 0x80000000)) {
 800e422:	ea5f 0b4b 	movs.w	fp, fp, lsl #1
 800e426:	4618      	mov	r0, r3
		numZeros++;
 800e428:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 800e42c:	d5f9      	bpl.n	800e422 <xmp3_DequantChannel+0x216>

	return CLZ(gbMask) - 1;
}
 800e42e:	b011      	add	sp, #68	; 0x44
 800e430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!x)
 800e434:	459b      	cmp	fp, r3
 800e436:	d01d      	beq.n	800e474 <xmp3_DequantChannel+0x268>
	while (!(x & 0x80000000)) {
 800e438:	db23      	blt.n	800e482 <xmp3_DequantChannel+0x276>
 800e43a:	ea5f 0b4b 	movs.w	fp, fp, lsl #1
 800e43e:	4618      	mov	r0, r3
		numZeros++;
 800e440:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 800e444:	d5f9      	bpl.n	800e43a <xmp3_DequantChannel+0x22e>
 800e446:	b011      	add	sp, #68	; 0x44
 800e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sis->mixedBlock) { 
 800e44c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e44e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 800e452:	f1b8 0f00 	cmp.w	r8, #0
 800e456:	d011      	beq.n	800e47c <xmp3_DequantChannel+0x270>
			cbEndL = (fh->ver == MPEG1 ? 8 : 6); 
 800e458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e45a:	781b      	ldrb	r3, [r3, #0]
			cbStartS = 3; 
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	f04f 0303 	mov.w	r3, #3
 800e462:	9302      	str	r3, [sp, #8]
 800e464:	bf0c      	ite	eq
 800e466:	f04f 0808 	moveq.w	r8, #8
 800e46a:	f04f 0806 	movne.w	r8, #6
 800e46e:	e6dd      	b.n	800e22c <xmp3_DequantChannel+0x20>
 800e470:	4692      	mov	sl, r2
 800e472:	e7b9      	b.n	800e3e8 <xmp3_DequantChannel+0x1dc>
 800e474:	201f      	movs	r0, #31
}
 800e476:	b011      	add	sp, #68	; 0x44
 800e478:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cbStartS = 0;
 800e47c:	f8cd 8008 	str.w	r8, [sp, #8]
 800e480:	e6d4      	b.n	800e22c <xmp3_DequantChannel+0x20>
 800e482:	f04f 30ff 	mov.w	r0, #4294967295
	return CLZ(gbMask) - 1;
 800e486:	e7d2      	b.n	800e42e <xmp3_DequantChannel+0x222>
 800e488:	08025b7c 	.word	0x08025b7c

0800e48c <xmp3_DecodeHuffman>:
 *              -1 if null input pointers, huffBlockBits < 0, or decoder runs 
 *                out of bits prematurely (invalid bitstream)
 **************************************************************************************/
// .data about 1ms faster per frame
int DecodeHuffman(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int huffBlockBits, int gr, int ch)
{
 800e48c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e490:	b097      	sub	sp, #92	; 0x5c
 800e492:	910d      	str	r1, [sp, #52]	; 0x34
 800e494:	9205      	str	r2, [sp, #20]
 800e496:	9300      	str	r3, [sp, #0]
	SideInfo *si;
	SideInfoSub *sis;
	HuffmanInfo *hi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS || !mp3DecInfo->HuffmanInfoPS)
 800e498:	2800      	cmp	r0, #0
 800e49a:	f000 813e 	beq.w	800e71a <xmp3_DecodeHuffman+0x28e>
 800e49e:	6801      	ldr	r1, [r0, #0]
 800e4a0:	2900      	cmp	r1, #0
 800e4a2:	f000 813a 	beq.w	800e71a <xmp3_DecodeHuffman+0x28e>
 800e4a6:	6844      	ldr	r4, [r0, #4]
 800e4a8:	940a      	str	r4, [sp, #40]	; 0x28
 800e4aa:	2c00      	cmp	r4, #0
 800e4ac:	f000 8135 	beq.w	800e71a <xmp3_DecodeHuffman+0x28e>
 800e4b0:	6883      	ldr	r3, [r0, #8]
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	f000 8131 	beq.w	800e71a <xmp3_DecodeHuffman+0x28e>
 800e4b8:	68c3      	ldr	r3, [r0, #12]
 800e4ba:	930e      	str	r3, [sp, #56]	; 0x38
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	f000 812c 	beq.w	800e71a <xmp3_DecodeHuffman+0x28e>
	fh = ((FrameHeader *)(mp3DecInfo->FrameHeaderPS));
	si = ((SideInfo *)(mp3DecInfo->SideInfoPS));
	sis = &si->sis[gr][ch];
	hi = (HuffmanInfo*)(mp3DecInfo->HuffmanInfoPS);

	if (huffBlockBits < 0)
 800e4c2:	9b00      	ldr	r3, [sp, #0]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	f2c0 8128 	blt.w	800e71a <xmp3_DecodeHuffman+0x28e>
		return -1;

	/* figure out region boundaries (the first 2*bigVals coefficients divided into 3 regions) */
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800e4ca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800e4cc:	9820      	ldr	r0, [sp, #128]	; 0x80
 800e4ce:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800e4d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4d4:	0112      	lsls	r2, r2, #4
 800e4d6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800e4da:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800e4de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e4e0:	4422      	add	r2, r4
 800e4e2:	00db      	lsls	r3, r3, #3
 800e4e4:	9307      	str	r3, [sp, #28]
 800e4e6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800e4e8:	00c0      	lsls	r0, r0, #3
 800e4ea:	900b      	str	r0, [sp, #44]	; 0x2c
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	f040 826c 	bne.w	800e9ca <xmp3_DecodeHuffman+0x53e>
				r1Start = fh->sfBand->l[6] + 2*w;
			}
		}
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
	} else {
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800e4f2:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800e4f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e4f6:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e4f8:	9821      	ldr	r0, [sp, #132]	; 0x84
 800e4fa:	440b      	add	r3, r1
 800e4fc:	9907      	ldr	r1, [sp, #28]
 800e4fe:	011b      	lsls	r3, r3, #4
 800e500:	4401      	add	r1, r0
 800e502:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800e506:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e508:	440b      	add	r3, r1
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800e50a:	e9d3 1317 	ldrd	r1, r3, [r3, #92]	; 0x5c
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800e50e:	3101      	adds	r1, #1
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800e510:	440b      	add	r3, r1
 800e512:	3301      	adds	r3, #1
		r1Start = fh->sfBand->l[sis->region0Count + 1];
 800e514:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
		r2Start = fh->sfBand->l[sis->region0Count + 1 + sis->region1Count + 1];
 800e518:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
	}

	/* offset rEnd index by 1 so first region = rEnd[1] - rEnd[0], etc. */
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800e51c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e51e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e520:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800e522:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800e524:	4413      	add	r3, r2
 800e526:	9a07      	ldr	r2, [sp, #28]
 800e528:	011b      	lsls	r3, r3, #4
 800e52a:	4422      	add	r2, r4
 800e52c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
 800e530:	442c      	add	r4, r5
 800e532:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e536:	6ae4      	ldr	r4, [r4, #44]	; 0x2c
 800e538:	0064      	lsls	r4, r4, #1
 800e53a:	f5b4 7f10 	cmp.w	r4, #576	; 0x240
 800e53e:	bfa8      	it	ge
 800e540:	f44f 7410 	movge.w	r4, #576	; 0x240
	rEnd[2] = MIN(r2Start, rEnd[3]);
 800e544:	42a0      	cmp	r0, r4
 800e546:	f103 0344 	add.w	r3, r3, #68	; 0x44
 800e54a:	bfa8      	it	ge
 800e54c:	4620      	movge	r0, r4
 800e54e:	18eb      	adds	r3, r5, r3
 800e550:	9014      	str	r0, [sp, #80]	; 0x50
 800e552:	9304      	str	r3, [sp, #16]
	hi->nonZeroBound[ch] = rEnd[3];

	/* decode Huffman pairs (rEnd[i] are always even numbers) */
	bitsLeft = huffBlockBits;
	for (i = 0; i < 3; i++) {
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e554:	980e      	ldr	r0, [sp, #56]	; 0x38
 800e556:	9b21      	ldr	r3, [sp, #132]	; 0x84
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800e558:	9411      	str	r4, [sp, #68]	; 0x44
 800e55a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	hi->nonZeroBound[ch] = rEnd[3];
 800e55e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e562:	eb00 2202 	add.w	r2, r0, r2, lsl #8
	hi->nonZeroBound[ch] = rEnd[3];
 800e566:	9310      	str	r3, [sp, #64]	; 0x40
 800e568:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e56c:	9b05      	ldr	r3, [sp, #20]
 800e56e:	920c      	str	r2, [sp, #48]	; 0x30
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800e570:	42a1      	cmp	r1, r4
 800e572:	aa13      	add	r2, sp, #76	; 0x4c
 800e574:	bfa8      	it	ge
 800e576:	4621      	movge	r1, r4
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e578:	2700      	movs	r7, #0
 800e57a:	9203      	str	r2, [sp, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
	rEnd[1] = MIN(r1Start, rEnd[3]);
 800e580:	9113      	str	r1, [sp, #76]	; 0x4c
	rEnd[3] = MIN(MAX_NSAMP, 2 * sis->nBigvals);
 800e582:	9415      	str	r4, [sp, #84]	; 0x54
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e584:	9202      	str	r2, [sp, #8]
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e586:	463e      	mov	r6, r7
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e588:	9a03      	ldr	r2, [sp, #12]
 800e58a:	f852 0b04 	ldr.w	r0, [r2], #4
 800e58e:	9203      	str	r2, [sp, #12]
 800e590:	1b80      	subs	r0, r0, r6
	if(nVals <= 0) 
 800e592:	2800      	cmp	r0, #0
 800e594:	f340 8144 	ble.w	800e820 <xmp3_DecodeHuffman+0x394>
	if (bitsLeft < 0)
 800e598:	9a00      	ldr	r2, [sp, #0]
 800e59a:	2a00      	cmp	r2, #0
 800e59c:	f2c0 80bd 	blt.w	800e71a <xmp3_DecodeHuffman+0x28e>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e5a0:	9a04      	ldr	r2, [sp, #16]
	tabType = huffTabLookup[tabIdx].tabType;
 800e5a2:	f8df 95f8 	ldr.w	r9, [pc, #1528]	; 800eb9c <xmp3_DecodeHuffman+0x710>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e5a6:	6811      	ldr	r1, [r2, #0]
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800e5a8:	9d02      	ldr	r5, [sp, #8]
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e5aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	tabType = huffTabLookup[tabIdx].tabType;
 800e5ac:	eb09 02c1 	add.w	r2, r9, r1, lsl #3
	cachedBits = (8 - bitOffset) & 0x07;
 800e5b0:	425b      	negs	r3, r3
	tabType = huffTabLookup[tabIdx].tabType;
 800e5b2:	7917      	ldrb	r7, [r2, #4]
	if (cachedBits)
 800e5b4:	f013 0207 	ands.w	r2, r3, #7
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800e5b8:	bf1d      	ittte	ne
 800e5ba:	f815 cb01 	ldrbne.w	ip, [r5], #1
 800e5be:	f1c2 0320 	rsbne	r3, r2, #32
 800e5c2:	fa0c f303 	lslne.w	r3, ip, r3
	cache = 0;
 800e5c6:	4613      	moveq	r3, r2
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e5c8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
	if (tabType == noBits) {
 800e5cc:	2f00      	cmp	r7, #0
 800e5ce:	f000 81f1 	beq.w	800e9b4 <xmp3_DecodeHuffman+0x528>
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800e5d2:	f8df c5cc 	ldr.w	ip, [pc, #1484]	; 800eba0 <xmp3_DecodeHuffman+0x714>
	bitsLeft -= cachedBits;
 800e5d6:	9c00      	ldr	r4, [sp, #0]
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800e5d8:	f85c 8021 	ldr.w	r8, [ip, r1, lsl #2]
 800e5dc:	f8df c5c4 	ldr.w	ip, [pc, #1476]	; 800eba4 <xmp3_DecodeHuffman+0x718>
	} else if (tabType == oneShot) {
 800e5e0:	2f01      	cmp	r7, #1
	bitsLeft -= cachedBits;
 800e5e2:	eba4 0b02 	sub.w	fp, r4, r2
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800e5e6:	eb0c 0e48 	add.w	lr, ip, r8, lsl #1
	} else if (tabType == oneShot) {
 800e5ea:	f000 8238 	beq.w	800ea5e <xmp3_DecodeHuffman+0x5d2>
	} else if (tabType == loopLinbits || tabType == loopNoLinbits) {
 800e5ee:	f1a7 0c02 	sub.w	ip, r7, #2
 800e5f2:	f1bc 0f01 	cmp.w	ip, #1
 800e5f6:	f200 8090 	bhi.w	800e71a <xmp3_DecodeHuffman+0x28e>
	linBits = huffTabLookup[tabIdx].linBits;
 800e5fa:	f859 1031 	ldr.w	r1, [r9, r1, lsl #3]
 800e5fe:	9106      	str	r1, [sp, #24]
					minBits = linBits + 1;
 800e600:	1c4c      	adds	r4, r1, #1
			if (bitsLeft >= 16) {
 800e602:	f1bb 0f0f 	cmp.w	fp, #15
					y += (int)(cache >> (32 - linBits));
 800e606:	f1c1 0120 	rsb	r1, r1, #32
					minBits = linBits + 1;
 800e60a:	9408      	str	r4, [sp, #32]
		padBits = 0;
 800e60c:	f04f 0900 	mov.w	r9, #0
					y += (int)(cache >> (32 - linBits));
 800e610:	9109      	str	r1, [sp, #36]	; 0x24
 800e612:	46ba      	mov	sl, r7
 800e614:	4674      	mov	r4, lr
			if (bitsLeft >= 16) {
 800e616:	dd42      	ble.n	800e69e <xmp3_DecodeHuffman+0x212>
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e618:	786f      	ldrb	r7, [r5, #1]
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e61a:	f815 cb02 	ldrb.w	ip, [r5], #2
 800e61e:	9501      	str	r5, [sp, #4]
 800e620:	f1c2 0118 	rsb	r1, r2, #24
 800e624:	fa0c f101 	lsl.w	r1, ip, r1
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e628:	f1c2 0c10 	rsb	ip, r2, #16
 800e62c:	fa07 f70c 	lsl.w	r7, r7, ip
 800e630:	430f      	orrs	r7, r1
				bitsLeft -= 16;
 800e632:	f1ab 0b10 	sub.w	fp, fp, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e636:	433b      	orrs	r3, r7
				cachedBits += 16;
 800e638:	3210      	adds	r2, #16
			while (nVals > 0 && cachedBits >= 11 ) {
 800e63a:	2a0a      	cmp	r2, #10
 800e63c:	dd2b      	ble.n	800e696 <xmp3_DecodeHuffman+0x20a>
				maxBits = GetMaxbits(tCurr[0]);
 800e63e:	8827      	ldrh	r7, [r4, #0]
 800e640:	f007 070f 	and.w	r7, r7, #15
				cw = tCurr[(cache >> (32 - maxBits)) + 1];
 800e644:	f1c7 0120 	rsb	r1, r7, #32
 800e648:	fa23 f101 	lsr.w	r1, r3, r1
 800e64c:	3101      	adds	r1, #1
 800e64e:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
				if (!len) {
 800e652:	ea5f 3c11 	movs.w	ip, r1, lsr #12
 800e656:	d065      	beq.n	800e724 <xmp3_DecodeHuffman+0x298>
				cachedBits -= len;
 800e658:	f3c1 1703 	ubfx	r7, r1, #4, #4
 800e65c:	f3c1 2403 	ubfx	r4, r1, #8, #4
				if (x == 15 && tabType == loopLinbits) {
 800e660:	2f0f      	cmp	r7, #15
				cachedBits -= len;
 800e662:	eba2 020c 	sub.w	r2, r2, ip
				cache <<= len;
 800e666:	fa03 f30c 	lsl.w	r3, r3, ip
				y = GetCWY(cw);
 800e66a:	4621      	mov	r1, r4
				if (x == 15 && tabType == loopLinbits) {
 800e66c:	d03c      	beq.n	800e6e8 <xmp3_DecodeHuffman+0x25c>
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e66e:	2f00      	cmp	r7, #0
 800e670:	d13d      	bne.n	800e6ee <xmp3_DecodeHuffman+0x262>
				if (y == 15 && tabType == loopLinbits) {
 800e672:	2c0f      	cmp	r4, #15
 800e674:	d045      	beq.n	800e702 <xmp3_DecodeHuffman+0x276>
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e676:	2900      	cmp	r1, #0
 800e678:	d159      	bne.n	800e72e <xmp3_DecodeHuffman+0x2a2>
				if (cachedBits < padBits)
 800e67a:	454a      	cmp	r2, r9
 800e67c:	db4d      	blt.n	800e71a <xmp3_DecodeHuffman+0x28e>
				nVals -= 2;
 800e67e:	3802      	subs	r0, #2
				*xy++ = x;
 800e680:	4634      	mov	r4, r6
			while (nVals > 0 && cachedBits >= 11 ) {
 800e682:	2800      	cmp	r0, #0
				*xy++ = x;
 800e684:	f844 7b08 	str.w	r7, [r4], #8
				*xy++ = y;
 800e688:	6071      	str	r1, [r6, #4]
			while (nVals > 0 && cachedBits >= 11 ) {
 800e68a:	f340 827a 	ble.w	800eb82 <xmp3_DecodeHuffman+0x6f6>
 800e68e:	2a0a      	cmp	r2, #10
				*xy++ = y;
 800e690:	4626      	mov	r6, r4
	tBase = (unsigned short *)(huffTable + huffTabOffset[tabIdx]);
 800e692:	4674      	mov	r4, lr
			while (nVals > 0 && cachedBits >= 11 ) {
 800e694:	dcd3      	bgt.n	800e63e <xmp3_DecodeHuffman+0x1b2>
			if (bitsLeft >= 16) {
 800e696:	f1bb 0f0f 	cmp.w	fp, #15
 800e69a:	9d01      	ldr	r5, [sp, #4]
 800e69c:	dcbc      	bgt.n	800e618 <xmp3_DecodeHuffman+0x18c>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800e69e:	eb0b 0102 	add.w	r1, fp, r2
 800e6a2:	2900      	cmp	r1, #0
 800e6a4:	dd39      	ble.n	800e71a <xmp3_DecodeHuffman+0x28e>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e6a6:	f1bb 0f00 	cmp.w	fp, #0
 800e6aa:	dd06      	ble.n	800e6ba <xmp3_DecodeHuffman+0x22e>
 800e6ac:	f815 7b01 	ldrb.w	r7, [r5], #1
 800e6b0:	f1c2 0c18 	rsb	ip, r2, #24
 800e6b4:	fa07 f70c 	lsl.w	r7, r7, ip
 800e6b8:	433b      	orrs	r3, r7
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e6ba:	f1bb 0f08 	cmp.w	fp, #8
 800e6be:	dd05      	ble.n	800e6cc <xmp3_DecodeHuffman+0x240>
 800e6c0:	f1c2 0710 	rsb	r7, r2, #16
 800e6c4:	f815 2b01 	ldrb.w	r2, [r5], #1
 800e6c8:	40ba      	lsls	r2, r7
 800e6ca:	4313      	orrs	r3, r2
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e6cc:	1e4a      	subs	r2, r1, #1
 800e6ce:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800e6d2:	fa47 f202 	asr.w	r2, r7, r2
 800e6d6:	4013      	ands	r3, r2
				padBits = 11;
 800e6d8:	f04f 090b 	mov.w	r9, #11
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800e6dc:	f101 020b 	add.w	r2, r1, #11
				bitsLeft = 0;
 800e6e0:	f04f 0b00 	mov.w	fp, #0
			while (nVals > 0 && cachedBits >= 11 ) {
 800e6e4:	9501      	str	r5, [sp, #4]
 800e6e6:	e7a8      	b.n	800e63a <xmp3_DecodeHuffman+0x1ae>
				if (x == 15 && tabType == loopLinbits) {
 800e6e8:	f1ba 0f03 	cmp.w	sl, #3
 800e6ec:	d021      	beq.n	800e732 <xmp3_DecodeHuffman+0x2a6>
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e6ee:	f003 4c00 	and.w	ip, r3, #2147483648	; 0x80000000
				if (y == 15 && tabType == loopLinbits) {
 800e6f2:	2c0f      	cmp	r4, #15
				if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e6f4:	f102 32ff 	add.w	r2, r2, #4294967295
 800e6f8:	ea4c 0707 	orr.w	r7, ip, r7
 800e6fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
				if (y == 15 && tabType == loopLinbits) {
 800e700:	d1b9      	bne.n	800e676 <xmp3_DecodeHuffman+0x1ea>
 800e702:	f1ba 0f03 	cmp.w	sl, #3
 800e706:	d052      	beq.n	800e7ae <xmp3_DecodeHuffman+0x322>
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e708:	3a01      	subs	r2, #1
 800e70a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
				if (cachedBits < padBits)
 800e70e:	454a      	cmp	r2, r9
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e710:	ea41 0104 	orr.w	r1, r1, r4
 800e714:	ea4f 0343 	mov.w	r3, r3, lsl #1
				if (cachedBits < padBits)
 800e718:	dab1      	bge.n	800e67e <xmp3_DecodeHuffman+0x1f2>
		return -1;
 800e71a:	f04f 30ff 	mov.w	r0, #4294967295
	 */
	buf += (bitsLeft + *bitOffset) >> 3;
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
	
	return (buf - startBuf);
}
 800e71e:	b017      	add	sp, #92	; 0x5c
 800e720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tCurr += cw;
 800e724:	eb04 0441 	add.w	r4, r4, r1, lsl #1
					cachedBits -= maxBits;
 800e728:	1bd2      	subs	r2, r2, r7
					cache <<= maxBits;
 800e72a:	40bb      	lsls	r3, r7
			while (nVals > 0 && cachedBits >= 11 ) {
 800e72c:	e785      	b.n	800e63a <xmp3_DecodeHuffman+0x1ae>
				if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e72e:	460c      	mov	r4, r1
 800e730:	e7ea      	b.n	800e708 <xmp3_DecodeHuffman+0x27c>
					minBits = linBits + 1 + (y ? 1 : 0);
 800e732:	9f08      	ldr	r7, [sp, #32]
					if (cachedBits + bitsLeft < minBits)
 800e734:	eb02 0c0b 	add.w	ip, r2, fp
					minBits = linBits + 1 + (y ? 1 : 0);
 800e738:	2c00      	cmp	r4, #0
 800e73a:	bf18      	it	ne
 800e73c:	3701      	addne	r7, #1
					if (cachedBits + bitsLeft < minBits)
 800e73e:	4567      	cmp	r7, ip
 800e740:	dceb      	bgt.n	800e71a <xmp3_DecodeHuffman+0x28e>
					while (cachedBits < minBits) {
 800e742:	42ba      	cmp	r2, r7
 800e744:	f280 8202 	bge.w	800eb4c <xmp3_DecodeHuffman+0x6c0>
 800e748:	ea6f 0c02 	mvn.w	ip, r2
 800e74c:	4467      	add	r7, ip
 800e74e:	08fd      	lsrs	r5, r7, #3
 800e750:	f105 0801 	add.w	r8, r5, #1
 800e754:	950f      	str	r5, [sp, #60]	; 0x3c
 800e756:	9d01      	ldr	r5, [sp, #4]
 800e758:	f1c2 0c18 	rsb	ip, r2, #24
 800e75c:	44a8      	add	r8, r5
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e75e:	f815 7b01 	ldrb.w	r7, [r5], #1
 800e762:	fa07 f70c 	lsl.w	r7, r7, ip
					while (cachedBits < minBits) {
 800e766:	4545      	cmp	r5, r8
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e768:	ea43 0307 	orr.w	r3, r3, r7
					while (cachedBits < minBits) {
 800e76c:	f1ac 0c08 	sub.w	ip, ip, #8
 800e770:	d1f5      	bne.n	800e75e <xmp3_DecodeHuffman+0x2d2>
						cachedBits += 8;
 800e772:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e774:	3208      	adds	r2, #8
 800e776:	f1ab 0b08 	sub.w	fp, fp, #8
 800e77a:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
						bitsLeft -= 8;
 800e77e:	ebc5 7545 	rsb	r5, r5, r5, lsl #29
					if (bitsLeft < 0) {
 800e782:	eb1b 0bc5 	adds.w	fp, fp, r5, lsl #3
 800e786:	d508      	bpl.n	800e79a <xmp3_DecodeHuffman+0x30e>
						cachedBits += bitsLeft;
 800e788:	445a      	add	r2, fp
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e78a:	1e55      	subs	r5, r2, #1
 800e78c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 800e790:	fa47 f505 	asr.w	r5, r7, r5
 800e794:	402b      	ands	r3, r5
						bitsLeft = 0;
 800e796:	f04f 0b00 	mov.w	fp, #0
					x += (int)(cache >> (32 - linBits));
 800e79a:	9f09      	ldr	r7, [sp, #36]	; 0x24
					cachedBits -= linBits;
 800e79c:	9d06      	ldr	r5, [sp, #24]
					cache <<= linBits;
 800e79e:	f8cd 8004 	str.w	r8, [sp, #4]
					x += (int)(cache >> (32 - linBits));
 800e7a2:	fa23 f707 	lsr.w	r7, r3, r7
					cachedBits -= linBits;
 800e7a6:	1b52      	subs	r2, r2, r5
					x += (int)(cache >> (32 - linBits));
 800e7a8:	370f      	adds	r7, #15
					cache <<= linBits;
 800e7aa:	40ab      	lsls	r3, r5
 800e7ac:	e75f      	b.n	800e66e <xmp3_DecodeHuffman+0x1e2>
					if (cachedBits + bitsLeft < minBits)
 800e7ae:	9c08      	ldr	r4, [sp, #32]
 800e7b0:	eb0b 0102 	add.w	r1, fp, r2
 800e7b4:	428c      	cmp	r4, r1
 800e7b6:	dcb0      	bgt.n	800e71a <xmp3_DecodeHuffman+0x28e>
					while (cachedBits < minBits) {
 800e7b8:	4294      	cmp	r4, r2
 800e7ba:	f340 81ca 	ble.w	800eb52 <xmp3_DecodeHuffman+0x6c6>
 800e7be:	9906      	ldr	r1, [sp, #24]
 800e7c0:	9d01      	ldr	r5, [sp, #4]
 800e7c2:	eba1 0802 	sub.w	r8, r1, r2
 800e7c6:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800e7ca:	f108 0c01 	add.w	ip, r8, #1
 800e7ce:	44ac      	add	ip, r5
 800e7d0:	f1c2 0418 	rsb	r4, r2, #24
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e7d4:	f815 1b01 	ldrb.w	r1, [r5], #1
 800e7d8:	40a1      	lsls	r1, r4
					while (cachedBits < minBits) {
 800e7da:	4565      	cmp	r5, ip
						cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e7dc:	ea43 0301 	orr.w	r3, r3, r1
					while (cachedBits < minBits) {
 800e7e0:	f1a4 0408 	sub.w	r4, r4, #8
 800e7e4:	d1f6      	bne.n	800e7d4 <xmp3_DecodeHuffman+0x348>
					if (bitsLeft < 0) {
 800e7e6:	3208      	adds	r2, #8
 800e7e8:	f1ab 0b08 	sub.w	fp, fp, #8
						cachedBits += 8;
 800e7ec:	eb02 02c8 	add.w	r2, r2, r8, lsl #3
						bitsLeft -= 8;
 800e7f0:	ebc8 7848 	rsb	r8, r8, r8, lsl #29
					if (bitsLeft < 0) {
 800e7f4:	eb1b 0bc8 	adds.w	fp, fp, r8, lsl #3
 800e7f8:	d508      	bpl.n	800e80c <xmp3_DecodeHuffman+0x380>
						cachedBits += bitsLeft;
 800e7fa:	445a      	add	r2, fp
						cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800e7fc:	1e51      	subs	r1, r2, #1
 800e7fe:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e802:	fa44 f101 	asr.w	r1, r4, r1
 800e806:	400b      	ands	r3, r1
						bitsLeft = 0;
 800e808:	f04f 0b00 	mov.w	fp, #0
					y += (int)(cache >> (32 - linBits));
 800e80c:	9909      	ldr	r1, [sp, #36]	; 0x24
					cachedBits -= linBits;
 800e80e:	9c06      	ldr	r4, [sp, #24]
					cache <<= linBits;
 800e810:	f8cd c004 	str.w	ip, [sp, #4]
					y += (int)(cache >> (32 - linBits));
 800e814:	fa23 f101 	lsr.w	r1, r3, r1
					cachedBits -= linBits;
 800e818:	1b12      	subs	r2, r2, r4
					y += (int)(cache >> (32 - linBits));
 800e81a:	310f      	adds	r1, #15
					cache <<= linBits;
 800e81c:	40a3      	lsls	r3, r4
 800e81e:	e72a      	b.n	800e676 <xmp3_DecodeHuffman+0x1ea>
		return 0;
 800e820:	2300      	movs	r3, #0
		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
 800e822:	9a00      	ldr	r2, [sp, #0]
 800e824:	4293      	cmp	r3, r2
 800e826:	f73f af78 	bgt.w	800e71a <xmp3_DecodeHuffman+0x28e>
		bitsLeft -= bitsUsed;
 800e82a:	1ad2      	subs	r2, r2, r3
 800e82c:	9200      	str	r2, [sp, #0]
	for (i = 0; i < 3; i++) {
 800e82e:	9a04      	ldr	r2, [sp, #16]
		buf += (bitsUsed + *bitOffset) >> 3;
 800e830:	9905      	ldr	r1, [sp, #20]
	for (i = 0; i < 3; i++) {
 800e832:	3204      	adds	r2, #4
 800e834:	9204      	str	r2, [sp, #16]
		buf += (bitsUsed + *bitOffset) >> 3;
 800e836:	680a      	ldr	r2, [r1, #0]
 800e838:	4413      	add	r3, r2
 800e83a:	9a02      	ldr	r2, [sp, #8]
 800e83c:	eb02 02e3 	add.w	r2, r2, r3, asr #3
 800e840:	9202      	str	r2, [sp, #8]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800e842:	f003 0307 	and.w	r3, r3, #7
	for (i = 0; i < 3; i++) {
 800e846:	9a03      	ldr	r2, [sp, #12]
		*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 800e848:	600b      	str	r3, [r1, #0]
	for (i = 0; i < 3; i++) {
 800e84a:	a916      	add	r1, sp, #88	; 0x58
 800e84c:	4291      	cmp	r1, r2
 800e84e:	d002      	beq.n	800e856 <xmp3_DecodeHuffman+0x3ca>
		bitsUsed = DecodeHuffmanPairs(hi->huffDecBuf[ch] + rEnd[i], rEnd[i+1] - rEnd[i], sis->tableSelect[i], bitsLeft, buf, *bitOffset);
 800e850:	f852 6c04 	ldr.w	r6, [r2, #-4]
 800e854:	e698      	b.n	800e588 <xmp3_DecodeHuffman+0xfc>
	if (bitsLeft <= 0)
 800e856:	9a00      	ldr	r2, [sp, #0]
 800e858:	2a00      	cmp	r2, #0
 800e85a:	f340 8175 	ble.w	800eb48 <xmp3_DecodeHuffman+0x6bc>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e85e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800e860:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e862:	9821      	ldr	r0, [sp, #132]	; 0x84
 800e864:	440a      	add	r2, r1
 800e866:	9907      	ldr	r1, [sp, #28]
 800e868:	0112      	lsls	r2, r2, #4
 800e86a:	4401      	add	r1, r0
 800e86c:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800e870:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e872:	4411      	add	r1, r2
	cachedBits = (8 - bitOffset) & 0x07;
 800e874:	425b      	negs	r3, r3
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e876:	6eca      	ldr	r2, [r1, #108]	; 0x6c
	tBase = (unsigned char *)quadTable + quadTabOffset[tabIdx];
 800e878:	49c6      	ldr	r1, [pc, #792]	; (800eb94 <xmp3_DecodeHuffman+0x708>)
 800e87a:	f851 9022 	ldr.w	r9, [r1, r2, lsl #2]
	maxBits = quadTabMaxBits[tabIdx];
 800e87e:	49c6      	ldr	r1, [pc, #792]	; (800eb98 <xmp3_DecodeHuffman+0x70c>)
	if (cachedBits)
 800e880:	f013 0307 	ands.w	r3, r3, #7
	maxBits = quadTabMaxBits[tabIdx];
 800e884:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800e888:	9a02      	ldr	r2, [sp, #8]
	if (cachedBits)
 800e88a:	f040 80b8 	bne.w	800e9fe <xmp3_DecodeHuffman+0x572>
		buf += (bitsUsed + *bitOffset) >> 3;
 800e88e:	9201      	str	r2, [sp, #4]
	cache = 0;
 800e890:	4619      	mov	r1, r3
	while (i < (nVals - 3)) {
 800e892:	9a11      	ldr	r2, [sp, #68]	; 0x44
	bitsLeft -= cachedBits;
 800e894:	9c00      	ldr	r4, [sp, #0]
	while (i < (nVals - 3)) {
 800e896:	f5c2 7e0f 	rsb	lr, r2, #572	; 0x23c
 800e89a:	f10e 0e01 	add.w	lr, lr, #1
 800e89e:	f1be 0f00 	cmp.w	lr, #0
	bitsLeft -= cachedBits;
 800e8a2:	eba4 0b03 	sub.w	fp, r4, r3
	while (i < (nVals - 3)) {
 800e8a6:	f340 814f 	ble.w	800eb48 <xmp3_DecodeHuffman+0x6bc>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e8aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800e8ac:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 800eba8 <xmp3_DecodeHuffman+0x71c>
	i = padBits = 0;
 800e8b0:	f04f 0c00 	mov.w	ip, #0
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e8b4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			cw = tBase[cache >> (32 - maxBits)];
 800e8b8:	f1c0 0820 	rsb	r8, r0, #32
	i = padBits = 0;
 800e8bc:	4667      	mov	r7, ip
		if (bitsLeft >= 16) {
 800e8be:	f1bb 0f0f 	cmp.w	fp, #15
 800e8c2:	f340 80a4 	ble.w	800ea0e <xmp3_DecodeHuffman+0x582>
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e8c6:	9801      	ldr	r0, [sp, #4]
 800e8c8:	7844      	ldrb	r4, [r0, #1]
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e8ca:	f810 5b02 	ldrb.w	r5, [r0], #2
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e8ce:	9001      	str	r0, [sp, #4]
			cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800e8d0:	f1c3 0018 	rsb	r0, r3, #24
 800e8d4:	fa05 f000 	lsl.w	r0, r5, r0
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e8d8:	f1c3 0510 	rsb	r5, r3, #16
 800e8dc:	40ac      	lsls	r4, r5
 800e8de:	4320      	orrs	r0, r4
			bitsLeft -= 16;
 800e8e0:	f1ab 0b10 	sub.w	fp, fp, #16
			cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800e8e4:	4301      	orrs	r1, r0
			cachedBits += 16;
 800e8e6:	3310      	adds	r3, #16
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800e8e8:	f102 0010 	add.w	r0, r2, #16
 800e8ec:	e003      	b.n	800e8f6 <xmp3_DecodeHuffman+0x46a>
 800e8ee:	2b09      	cmp	r3, #9
 800e8f0:	f100 0010 	add.w	r0, r0, #16
 800e8f4:	dde3      	ble.n	800e8be <xmp3_DecodeHuffman+0x432>
			cw = tBase[cache >> (32 - maxBits)];
 800e8f6:	fa21 f208 	lsr.w	r2, r1, r8
 800e8fa:	444a      	add	r2, r9
 800e8fc:	f81a 2002 	ldrb.w	r2, [sl, r2]
			len = GetHLenQ(cw);
 800e900:	0914      	lsrs	r4, r2, #4
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800e902:	f012 0608 	ands.w	r6, r2, #8
			cachedBits -= len;
 800e906:	eba3 1312 	sub.w	r3, r3, r2, lsr #4
			cache <<= len;
 800e90a:	fa01 f104 	lsl.w	r1, r1, r4
			v = GetCWVQ(cw);	if(v) {ApplySign(v, cache); cache <<= 1; cachedBits--;}
 800e90e:	d005      	beq.n	800e91c <xmp3_DecodeHuffman+0x490>
 800e910:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800e914:	3b01      	subs	r3, #1
 800e916:	f046 0601 	orr.w	r6, r6, #1
 800e91a:	0049      	lsls	r1, r1, #1
			w = GetCWWQ(cw);	if(w) {ApplySign(w, cache); cache <<= 1; cachedBits--;}
 800e91c:	f012 0504 	ands.w	r5, r2, #4
 800e920:	d005      	beq.n	800e92e <xmp3_DecodeHuffman+0x4a2>
 800e922:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800e926:	3b01      	subs	r3, #1
 800e928:	f045 0501 	orr.w	r5, r5, #1
 800e92c:	0049      	lsls	r1, r1, #1
			x = GetCWXQ(cw);	if(x) {ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800e92e:	f012 0402 	ands.w	r4, r2, #2
 800e932:	d005      	beq.n	800e940 <xmp3_DecodeHuffman+0x4b4>
 800e934:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 800e938:	3b01      	subs	r3, #1
 800e93a:	f044 0401 	orr.w	r4, r4, #1
 800e93e:	0049      	lsls	r1, r1, #1
			y = GetCWYQ(cw);	if(y) {ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800e940:	f012 0201 	ands.w	r2, r2, #1
 800e944:	d005      	beq.n	800e952 <xmp3_DecodeHuffman+0x4c6>
 800e946:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800e94a:	3b01      	subs	r3, #1
 800e94c:	f042 0201 	orr.w	r2, r2, #1
 800e950:	0049      	lsls	r1, r1, #1
			if (cachedBits < padBits)
 800e952:	4563      	cmp	r3, ip
 800e954:	db07      	blt.n	800e966 <xmp3_DecodeHuffman+0x4da>
			i += 4;
 800e956:	3704      	adds	r7, #4
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800e958:	45be      	cmp	lr, r7
			*vwxy++ = y;
 800e95a:	e940 4202 	strd	r4, r2, [r0, #-8]
			*vwxy++ = w;
 800e95e:	e940 6504 	strd	r6, r5, [r0, #-16]
		while (i < (nVals - 3) && cachedBits >= 10 ) {
 800e962:	4602      	mov	r2, r0
 800e964:	dcc3      	bgt.n	800e8ee <xmp3_DecodeHuffman+0x462>
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e966:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e968:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
 800e96c:	443b      	add	r3, r7
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++) {
 800e96e:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
	hi->nonZeroBound[ch] += DecodeHuffmanQuads(hi->huffDecBuf[ch] + rEnd[3], MAX_NSAMP - rEnd[3], sis->count1TableSelect, bitsLeft, buf, *bitOffset);
 800e972:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	for (i = hi->nonZeroBound[ch]; i < MAX_NSAMP; i++) {
 800e976:	da0d      	bge.n	800e994 <xmp3_DecodeHuffman+0x508>
		hi->huffDecBuf[ch][i] = 0;
 800e978:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e97a:	9807      	ldr	r0, [sp, #28]
 800e97c:	4410      	add	r0, r2
 800e97e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e980:	eb03 1080 	add.w	r0, r3, r0, lsl #6
 800e984:	f5c3 7310 	rsb	r3, r3, #576	; 0x240
 800e988:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800e98c:	2100      	movs	r1, #0
 800e98e:	009a      	lsls	r2, r3, #2
 800e990:	f00f fcf0 	bl	801e374 <memset>
	buf += (bitsLeft + *bitOffset) >> 3;
 800e994:	9905      	ldr	r1, [sp, #20]
 800e996:	9a00      	ldr	r2, [sp, #0]
 800e998:	680b      	ldr	r3, [r1, #0]
 800e99a:	9802      	ldr	r0, [sp, #8]
 800e99c:	441a      	add	r2, r3
 800e99e:	4613      	mov	r3, r2
 800e9a0:	eb00 00e3 	add.w	r0, r0, r3, asr #3
	return (buf - startBuf);
 800e9a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800e9a6:	f002 0207 	and.w	r2, r2, #7
	return (buf - startBuf);
 800e9aa:	1ac0      	subs	r0, r0, r3
	*bitOffset = (bitsLeft + *bitOffset) & 0x07;
 800e9ac:	600a      	str	r2, [r1, #0]
}
 800e9ae:	b017      	add	sp, #92	; 0x5c
 800e9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9b4:	1d33      	adds	r3, r6, #4
			xy[i+0] = 0;
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
			xy[i+1] = 0;
 800e9bc:	f843 2027 	str.w	r2, [r3, r7, lsl #2]
		for (i = 0; i < nVals; i+=2) {
 800e9c0:	3702      	adds	r7, #2
 800e9c2:	42b8      	cmp	r0, r7
 800e9c4:	dcf7      	bgt.n	800e9b6 <xmp3_DecodeHuffman+0x52a>
		return 0;
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	e731      	b.n	800e82e <xmp3_DecodeHuffman+0x3a2>
	if (sis->winSwitchFlag && sis->blockType == 2) {
 800e9ca:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800e9cc:	2b02      	cmp	r3, #2
 800e9ce:	f47f ad90 	bne.w	800e4f2 <xmp3_DecodeHuffman+0x66>
		if (sis->mixedBlock == 0) {
 800e9d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f040 80bf 	bne.w	800eb58 <xmp3_DecodeHuffman+0x6cc>
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800e9da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800e9dc:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e9de:	3201      	adds	r2, #1
 800e9e0:	f1a3 33aa 	sub.w	r3, r3, #2863311530	; 0xaaaaaaaa
 800e9e4:	fb83 0302 	smull	r0, r3, r3, r2
 800e9e8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 800e9ec:	eb01 0343 	add.w	r3, r1, r3, lsl #1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800e9f0:	f44f 7010 	mov.w	r0, #576	; 0x240
			r1Start = fh->sfBand->s[(sis->region0Count + 1)/3] * 3;
 800e9f4:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 800e9f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800e9fc:	e58e      	b.n	800e51c <xmp3_DecodeHuffman+0x90>
		cache = (unsigned int)(*buf++) << (32 - cachedBits);
 800e9fe:	f812 4b01 	ldrb.w	r4, [r2], #1
 800ea02:	9201      	str	r2, [sp, #4]
 800ea04:	f1c3 0120 	rsb	r1, r3, #32
 800ea08:	fa04 f101 	lsl.w	r1, r4, r1
 800ea0c:	e741      	b.n	800e892 <xmp3_DecodeHuffman+0x406>
			if (cachedBits + bitsLeft <= 0) return i;
 800ea0e:	eb03 000b 	add.w	r0, r3, fp
 800ea12:	2800      	cmp	r0, #0
 800ea14:	dda7      	ble.n	800e966 <xmp3_DecodeHuffman+0x4da>
			if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ea16:	f1bb 0f00 	cmp.w	fp, #0
 800ea1a:	dd08      	ble.n	800ea2e <xmp3_DecodeHuffman+0x5a2>
 800ea1c:	9c01      	ldr	r4, [sp, #4]
 800ea1e:	f814 6b01 	ldrb.w	r6, [r4], #1
 800ea22:	9401      	str	r4, [sp, #4]
 800ea24:	f1c3 0518 	rsb	r5, r3, #24
 800ea28:	fa06 f505 	lsl.w	r5, r6, r5
 800ea2c:	4329      	orrs	r1, r5
			if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ea2e:	f1bb 0f08 	cmp.w	fp, #8
 800ea32:	dd07      	ble.n	800ea44 <xmp3_DecodeHuffman+0x5b8>
 800ea34:	9c01      	ldr	r4, [sp, #4]
 800ea36:	f1c3 0510 	rsb	r5, r3, #16
 800ea3a:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ea3e:	9401      	str	r4, [sp, #4]
 800ea40:	40ab      	lsls	r3, r5
 800ea42:	4319      	orrs	r1, r3
			cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800ea44:	1e43      	subs	r3, r0, #1
 800ea46:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800ea4a:	fa44 f303 	asr.w	r3, r4, r3
 800ea4e:	4019      	ands	r1, r3
			padBits = 10;
 800ea50:	f04f 0c0a 	mov.w	ip, #10
			cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800ea54:	f100 030a 	add.w	r3, r0, #10
			bitsLeft = 0;
 800ea58:	f04f 0b00 	mov.w	fp, #0
 800ea5c:	e744      	b.n	800e8e8 <xmp3_DecodeHuffman+0x45c>
		maxBits = GetMaxbits(tBase[0]);
 800ea5e:	f83c c018 	ldrh.w	ip, [ip, r8, lsl #1]
 800ea62:	f00c 0c0f 	and.w	ip, ip, #15
				cw = tBase[cache >> (32 - maxBits)];
 800ea66:	f1cc 0c20 	rsb	ip, ip, #32
		padBits = 0;
 800ea6a:	f04f 0800 	mov.w	r8, #0
 800ea6e:	4631      	mov	r1, r6
			if (bitsLeft >= 16) {
 800ea70:	f1bb 0f0f 	cmp.w	fp, #15
 800ea74:	dd43      	ble.n	800eafe <xmp3_DecodeHuffman+0x672>
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ea76:	786e      	ldrb	r6, [r5, #1]
				cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800ea78:	f815 4b02 	ldrb.w	r4, [r5], #2
 800ea7c:	f1c2 0718 	rsb	r7, r2, #24
 800ea80:	40bc      	lsls	r4, r7
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ea82:	f1c2 0710 	rsb	r7, r2, #16
 800ea86:	40be      	lsls	r6, r7
 800ea88:	4334      	orrs	r4, r6
				bitsLeft -= 16;
 800ea8a:	f1ab 0b10 	sub.w	fp, fp, #16
				cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800ea8e:	4323      	orrs	r3, r4
				cachedBits += 16;
 800ea90:	3210      	adds	r2, #16
			while (nVals > 0 && cachedBits >= 11 ) {
 800ea92:	f101 0408 	add.w	r4, r1, #8
 800ea96:	e001      	b.n	800ea9c <xmp3_DecodeHuffman+0x610>
 800ea98:	2a0a      	cmp	r2, #10
 800ea9a:	dde9      	ble.n	800ea70 <xmp3_DecodeHuffman+0x5e4>
				cw = tBase[cache >> (32 - maxBits)];
 800ea9c:	fa23 f10c 	lsr.w	r1, r3, ip
 800eaa0:	3101      	adds	r1, #1
 800eaa2:	f83e 1011 	ldrh.w	r1, [lr, r1, lsl #1]
				len = GetHLen(cw);
 800eaa6:	0b0e      	lsrs	r6, r1, #12
				cache <<= len;
 800eaa8:	40b3      	lsls	r3, r6
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800eaaa:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 800eaae:	f3c1 1603 	ubfx	r6, r1, #4, #4
 800eab2:	f003 4700 	and.w	r7, r3, #2147483648	; 0x80000000
				cachedBits -= len;
 800eab6:	eba2 3211 	sub.w	r2, r2, r1, lsr #12
				x = GetCWX(cw);		if (x)	{ApplySign(x, cache); cache <<= 1; cachedBits--;}
 800eaba:	bf1b      	ittet	ne
 800eabc:	4337      	orrne	r7, r6
 800eabe:	005b      	lslne	r3, r3, #1
 800eac0:	4637      	moveq	r7, r6
 800eac2:	f102 32ff 	addne.w	r2, r2, #4294967295
				y = GetCWY(cw);		if (y)	{ApplySign(y, cache); cache <<= 1; cachedBits--;}
 800eac6:	f411 6f70 	tst.w	r1, #3840	; 0xf00
 800eaca:	f3c1 2603 	ubfx	r6, r1, #8, #4
 800eace:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800ead2:	d002      	beq.n	800eada <xmp3_DecodeHuffman+0x64e>
 800ead4:	430e      	orrs	r6, r1
 800ead6:	005b      	lsls	r3, r3, #1
 800ead8:	3a01      	subs	r2, #1
				if (cachedBits < padBits)
 800eada:	4542      	cmp	r2, r8
				nVals -= 2;
 800eadc:	f1a0 0002 	sub.w	r0, r0, #2
 800eae0:	4621      	mov	r1, r4
				if (cachedBits < padBits)
 800eae2:	f6ff ae1a 	blt.w	800e71a <xmp3_DecodeHuffman+0x28e>
			while (nVals > 0 && cachedBits >= 11 ) {
 800eae6:	2800      	cmp	r0, #0
				*xy++ = y;
 800eae8:	e944 7602 	strd	r7, r6, [r4, #-8]
			while (nVals > 0 && cachedBits >= 11 ) {
 800eaec:	f104 0408 	add.w	r4, r4, #8
 800eaf0:	dcd2      	bgt.n	800ea98 <xmp3_DecodeHuffman+0x60c>
		bitsLeft += (cachedBits - padBits);
 800eaf2:	eba2 0308 	sub.w	r3, r2, r8
		return (startBits - bitsLeft);
 800eaf6:	9a00      	ldr	r2, [sp, #0]
		bitsLeft += (cachedBits - padBits);
 800eaf8:	445b      	add	r3, fp
		return (startBits - bitsLeft);
 800eafa:	1ad3      	subs	r3, r2, r3
 800eafc:	e046      	b.n	800eb8c <xmp3_DecodeHuffman+0x700>
				if (cachedBits + bitsLeft <= 0)	return -1;
 800eafe:	eb0b 0402 	add.w	r4, fp, r2
 800eb02:	2c00      	cmp	r4, #0
 800eb04:	f77f ae09 	ble.w	800e71a <xmp3_DecodeHuffman+0x28e>
				if (bitsLeft > 0)	cache |= (unsigned int)(*buf++) << (24 - cachedBits);
 800eb08:	f1bb 0f00 	cmp.w	fp, #0
 800eb0c:	dd06      	ble.n	800eb1c <xmp3_DecodeHuffman+0x690>
 800eb0e:	f815 7b01 	ldrb.w	r7, [r5], #1
 800eb12:	f1c2 0618 	rsb	r6, r2, #24
 800eb16:	fa07 f606 	lsl.w	r6, r7, r6
 800eb1a:	4333      	orrs	r3, r6
				if (bitsLeft > 8)	cache |= (unsigned int)(*buf++) << (16 - cachedBits);
 800eb1c:	f1bb 0f08 	cmp.w	fp, #8
 800eb20:	dd05      	ble.n	800eb2e <xmp3_DecodeHuffman+0x6a2>
 800eb22:	f1c2 0610 	rsb	r6, r2, #16
 800eb26:	f815 2b01 	ldrb.w	r2, [r5], #1
 800eb2a:	40b2      	lsls	r2, r6
 800eb2c:	4313      	orrs	r3, r2
				cache &= (signed int)0x80000000 >> (cachedBits - 1);
 800eb2e:	1e62      	subs	r2, r4, #1
 800eb30:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800eb34:	fa46 f202 	asr.w	r2, r6, r2
 800eb38:	4013      	ands	r3, r2
				padBits = 11;
 800eb3a:	f04f 080b 	mov.w	r8, #11
				cachedBits += padBits;	/* okay if this is > 32 (0's automatically shifted in from right) */
 800eb3e:	f104 020b 	add.w	r2, r4, #11
				bitsLeft = 0;
 800eb42:	f04f 0b00 	mov.w	fp, #0
 800eb46:	e7a4      	b.n	800ea92 <xmp3_DecodeHuffman+0x606>
		return 0;
 800eb48:	2700      	movs	r7, #0
 800eb4a:	e70c      	b.n	800e966 <xmp3_DecodeHuffman+0x4da>
					while (cachedBits < minBits) {
 800eb4c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800eb50:	e623      	b.n	800e79a <xmp3_DecodeHuffman+0x30e>
					while (cachedBits < minBits) {
 800eb52:	f8dd c004 	ldr.w	ip, [sp, #4]
 800eb56:	e659      	b.n	800e80c <xmp3_DecodeHuffman+0x380>
			if (fh->ver == MPEG1) {
 800eb58:	780b      	ldrb	r3, [r1, #0]
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800eb5a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
			if (fh->ver == MPEG1) {
 800eb5c:	bb33      	cbnz	r3, 800ebac <xmp3_DecodeHuffman+0x720>
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800eb5e:	9920      	ldr	r1, [sp, #128]	; 0x80
 800eb60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb62:	9821      	ldr	r0, [sp, #132]	; 0x84
 800eb64:	440b      	add	r3, r1
 800eb66:	9907      	ldr	r1, [sp, #28]
 800eb68:	011b      	lsls	r3, r3, #4
 800eb6a:	4401      	add	r1, r0
 800eb6c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800eb70:	990a      	ldr	r1, [sp, #40]	; 0x28
 800eb72:	440b      	add	r3, r1
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800eb74:	f44f 7010 	mov.w	r0, #576	; 0x240
				r1Start = fh->sfBand->l[sis->region0Count + 1];
 800eb78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 800eb80:	e4cc      	b.n	800e51c <xmp3_DecodeHuffman+0x90>
		bitsLeft += (cachedBits - padBits);
 800eb82:	eba2 0309 	sub.w	r3, r2, r9
		return (startBits - bitsLeft);
 800eb86:	9a00      	ldr	r2, [sp, #0]
		bitsLeft += (cachedBits - padBits);
 800eb88:	445b      	add	r3, fp
		return (startBits - bitsLeft);
 800eb8a:	1ad3      	subs	r3, r2, r3
		if (bitsUsed < 0 || bitsUsed > bitsLeft)	/* error - overran end of bitstream */
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	f6bf ae48 	bge.w	800e822 <xmp3_DecodeHuffman+0x396>
 800eb92:	e5c2      	b.n	800e71a <xmp3_DecodeHuffman+0x28e>
 800eb94:	08027e40 	.word	0x08027e40
 800eb98:	08027e38 	.word	0x08027e38
 800eb9c:	08025b94 	.word	0x08025b94
 800eba0:	08025c94 	.word	0x08025c94
 800eba4:	08025d14 	.word	0x08025d14
 800eba8:	08027e48 	.word	0x08027e48
				w = fh->sfBand->s[4] - fh->sfBand->s[3];
 800ebac:	f9b2 1034 	ldrsh.w	r1, [r2, #52]	; 0x34
 800ebb0:	f9b2 3036 	ldrsh.w	r3, [r2, #54]	; 0x36
 800ebb4:	1a5b      	subs	r3, r3, r1
				r1Start = fh->sfBand->l[6] + 2*w;
 800ebb6:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
		r2Start = MAX_NSAMP;	/* short blocks don't have region 2 */
 800ebba:	f44f 7010 	mov.w	r0, #576	; 0x240
				r1Start = fh->sfBand->l[6] + 2*w;
 800ebbe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 800ebc2:	e4ab      	b.n	800e51c <xmp3_DecodeHuffman+0x90>

0800ebc4 <FreqInvertRescale>:
 *              rescaled (as necessary) previous samples
 *
 * Return:      updated mOut (from new outputs y)
 **************************************************************************************/
static int FreqInvertRescale(int *y, int *xPrev, int blockIdx, int es)
{
 800ebc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i, d, mOut;
	int y0, y1, y2, y3, y4, y5, y6, y7, y8;

	if (es == 0) {
 800ebc8:	bb9b      	cbnz	r3, 800ec32 <FreqInvertRescale+0x6e>
		/* fast case - frequency invert only (no rescaling) - can fuse into overlap-add for speed, if desired */
		if (blockIdx & 0x01) {
 800ebca:	f012 0c01 	ands.w	ip, r2, #1
 800ebce:	d02d      	beq.n	800ec2c <FreqInvertRescale+0x68>
			y += NBANDS;
			y0 = *y;	y += 2*NBANDS;
			y1 = *y;	y += 2*NBANDS;
			y2 = *y;	y += 2*NBANDS;
 800ebd0:	f8d0 1280 	ldr.w	r1, [r0, #640]	; 0x280
			y3 = *y;	y += 2*NBANDS;
 800ebd4:	f8d0 2380 	ldr.w	r2, [r0, #896]	; 0x380
			y1 = *y;	y += 2*NBANDS;
 800ebd8:	f8d0 4180 	ldr.w	r4, [r0, #384]	; 0x180
			y8 = *y;	y += 2*NBANDS;

			y -= 18*NBANDS;
			*y = -y0;	y += 2*NBANDS;
			*y = -y1;	y += 2*NBANDS;
			*y = -y2;	y += 2*NBANDS;
 800ebdc:	4249      	negs	r1, r1
			*y = -y3;	y += 2*NBANDS;
 800ebde:	4252      	negs	r2, r2
			*y = -y2;	y += 2*NBANDS;
 800ebe0:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
			*y = -y3;	y += 2*NBANDS;
 800ebe4:	f8c0 2380 	str.w	r2, [r0, #896]	; 0x380
			y4 = *y;	y += 2*NBANDS;
 800ebe8:	f8d0 1480 	ldr.w	r1, [r0, #1152]	; 0x480
			y5 = *y;	y += 2*NBANDS;
 800ebec:	f8d0 2580 	ldr.w	r2, [r0, #1408]	; 0x580
			*y = -y5;	y += 2*NBANDS;
			*y = -y6;	y += 2*NBANDS;
			*y = -y7;	y += 2*NBANDS;
			*y = -y8;	y += 2*NBANDS;
		}
		return 0;
 800ebf0:	469c      	mov	ip, r3
			y6 = *y;	y += 2*NBANDS;
 800ebf2:	f8d0 3680 	ldr.w	r3, [r0, #1664]	; 0x680
			*y = -y4;	y += 2*NBANDS;
 800ebf6:	4249      	negs	r1, r1
			*y = -y5;	y += 2*NBANDS;
 800ebf8:	4252      	negs	r2, r2
			*y = -y6;	y += 2*NBANDS;
 800ebfa:	425b      	negs	r3, r3
			*y = -y4;	y += 2*NBANDS;
 800ebfc:	f8c0 1480 	str.w	r1, [r0, #1152]	; 0x480
			*y = -y5;	y += 2*NBANDS;
 800ec00:	f8c0 2580 	str.w	r2, [r0, #1408]	; 0x580
			*y = -y0;	y += 2*NBANDS;
 800ec04:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
			y7 = *y;	y += 2*NBANDS;
 800ec08:	f8d0 2780 	ldr.w	r2, [r0, #1920]	; 0x780
			*y = -y6;	y += 2*NBANDS;
 800ec0c:	f8c0 3680 	str.w	r3, [r0, #1664]	; 0x680
			y8 = *y;	y += 2*NBANDS;
 800ec10:	f8d0 3880 	ldr.w	r3, [r0, #2176]	; 0x880
			*y = -y1;	y += 2*NBANDS;
 800ec14:	4264      	negs	r4, r4
			*y = -y7;	y += 2*NBANDS;
 800ec16:	4252      	negs	r2, r2
			*y = -y0;	y += 2*NBANDS;
 800ec18:	4249      	negs	r1, r1
			*y = -y8;	y += 2*NBANDS;
 800ec1a:	425b      	negs	r3, r3
			*y = -y1;	y += 2*NBANDS;
 800ec1c:	f8c0 4180 	str.w	r4, [r0, #384]	; 0x180
			*y = -y0;	y += 2*NBANDS;
 800ec20:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
			*y = -y7;	y += 2*NBANDS;
 800ec24:	f8c0 2780 	str.w	r2, [r0, #1920]	; 0x780
			*y = -y8;	y += 2*NBANDS;
 800ec28:	f8c0 3880 	str.w	r3, [r0, #2176]	; 0x880
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
			}
		}
		return mOut;
	}
}
 800ec2c:	4660      	mov	r0, ip
 800ec2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ec32:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ec36:	40de      	lsrs	r6, r3
		if (blockIdx & 0x01) {
 800ec38:	f012 0c01 	ands.w	ip, r2, #1
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ec3c:	f106 36ff 	add.w	r6, r6, #4294967295
 800ec40:	f1c3 051f 	rsb	r5, r3, #31
		if (blockIdx & 0x01) {
 800ec44:	d047      	beq.n	800ecd6 <FreqInvertRescale+0x112>
		mOut = 0;
 800ec46:	f04f 0c00 	mov.w	ip, #0
 800ec4a:	f100 0480 	add.w	r4, r0, #128	; 0x80
 800ec4e:	f500 6810 	add.w	r8, r0, #2304	; 0x900
	__asm__ volatile (
 800ec52:	4667      	mov	r7, ip
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ec54:	f854 2c80 	ldr.w	r2, [r4, #-128]
 800ec58:	fa42 f905 	asr.w	r9, r2, r5
 800ec5c:	ea4f 7ae2 	mov.w	sl, r2, asr #31
 800ec60:	ebb9 7fe2 	cmp.w	r9, r2, asr #31
 800ec64:	bf18      	it	ne
 800ec66:	ea86 020a 	eorne.w	r2, r6, sl
 800ec6a:	409a      	lsls	r2, r3
 800ec6c:	46be      	mov	lr, r7
 800ec6e:	f844 2c80 	str.w	r2, [r4, #-128]
 800ec72:	ea82 7ee2 	eor.w	lr, r2, r2, asr #31
 800ec76:	ebae 7ee2 	sub.w	lr, lr, r2, asr #31
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ec7a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800ec7e:	4252      	negs	r2, r2
 800ec80:	fa42 fa05 	asr.w	sl, r2, r5
 800ec84:	ea4f 7be2 	mov.w	fp, r2, asr #31
 800ec88:	ebba 7fe2 	cmp.w	sl, r2, asr #31
 800ec8c:	bf18      	it	ne
 800ec8e:	ea86 020b 	eorne.w	r2, r6, fp
 800ec92:	409a      	lsls	r2, r3
 800ec94:	46b9      	mov	r9, r7
 800ec96:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800ec9a:	ea82 79e2 	eor.w	r9, r2, r2, asr #31
 800ec9e:	eba9 79e2 	sub.w	r9, r9, r2, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800eca2:	680a      	ldr	r2, [r1, #0]
				d = -*y;	CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800eca4:	ea4e 0e09 	orr.w	lr, lr, r9
 800eca8:	ea4c 0c0e 	orr.w	ip, ip, lr
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ecac:	fa42 fe05 	asr.w	lr, r2, r5
 800ecb0:	ebbe 7fe2 	cmp.w	lr, r2, asr #31
 800ecb4:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ecb8:	bf18      	it	ne
 800ecba:	ea86 0209 	eorne.w	r2, r6, r9
 800ecbe:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800ecc2:	409a      	lsls	r2, r3
			for (i = 0; i < 18; i+=2) {
 800ecc4:	4580      	cmp	r8, r0
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ecc6:	f841 2b04 	str.w	r2, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800ecca:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800ecce:	d1c1      	bne.n	800ec54 <FreqInvertRescale+0x90>
}
 800ecd0:	4660      	mov	r0, ip
 800ecd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ecd6:	f100 0480 	add.w	r4, r0, #128	; 0x80
 800ecda:	f500 6e10 	add.w	lr, r0, #2304	; 0x900
 800ecde:	4667      	mov	r7, ip
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ece0:	f854 2c80 	ldr.w	r2, [r4, #-128]
 800ece4:	fa42 f905 	asr.w	r9, r2, r5
 800ece8:	ea4f 7ae2 	mov.w	sl, r2, asr #31
 800ecec:	ebb9 7fe2 	cmp.w	r9, r2, asr #31
 800ecf0:	bf18      	it	ne
 800ecf2:	ea86 020a 	eorne.w	r2, r6, sl
 800ecf6:	409a      	lsls	r2, r3
 800ecf8:	46b8      	mov	r8, r7
 800ecfa:	f844 2c80 	str.w	r2, [r4, #-128]
 800ecfe:	ea82 78e2 	eor.w	r8, r2, r2, asr #31
 800ed02:	eba8 78e2 	sub.w	r8, r8, r2, asr #31
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ed06:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 800ed0a:	fa42 fa05 	asr.w	sl, r2, r5
 800ed0e:	ea4f 7be2 	mov.w	fp, r2, asr #31
 800ed12:	ebba 7fe2 	cmp.w	sl, r2, asr #31
 800ed16:	bf18      	it	ne
 800ed18:	ea86 020b 	eorne.w	r2, r6, fp
 800ed1c:	409a      	lsls	r2, r3
 800ed1e:	46b9      	mov	r9, r7
 800ed20:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800ed24:	ea82 79e2 	eor.w	r9, r2, r2, asr #31
 800ed28:	eba9 79e2 	sub.w	r9, r9, r2, asr #31
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ed2c:	680a      	ldr	r2, [r1, #0]
				d = *y;		CLIP_2N(d, 31 - es);	*y = d << es;	mOut |= FASTABS(*y);	y += NBANDS;
 800ed2e:	ea48 0809 	orr.w	r8, r8, r9
 800ed32:	ea4c 0c08 	orr.w	ip, ip, r8
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ed36:	fa42 f805 	asr.w	r8, r2, r5
 800ed3a:	ebb8 7fe2 	cmp.w	r8, r2, asr #31
 800ed3e:	ea4f 79e2 	mov.w	r9, r2, asr #31
 800ed42:	bf18      	it	ne
 800ed44:	ea86 0209 	eorne.w	r2, r6, r9
 800ed48:	f500 7080 	add.w	r0, r0, #256	; 0x100
 800ed4c:	409a      	lsls	r2, r3
			for (i = 0; i < 18; i+=2) {
 800ed4e:	4586      	cmp	lr, r0
				d = *xPrev;	CLIP_2N(d, 31 - es);	*xPrev++ = d << es;
 800ed50:	f841 2b04 	str.w	r2, [r1], #4
			for (i = 0; i < 18; i+=2) {
 800ed54:	f504 7480 	add.w	r4, r4, #256	; 0x100
 800ed58:	d1c2      	bne.n	800ece0 <FreqInvertRescale+0x11c>
}
 800ed5a:	4660      	mov	r0, ip
 800ed5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ed60 <WinPrevious>:
	if (btPrev == 2) {
 800ed60:	2a02      	cmp	r2, #2
{
 800ed62:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800ed66:	4b46      	ldr	r3, [pc, #280]	; (800ee80 <WinPrevious+0x120>)
	if (btPrev == 2) {
 800ed68:	d01e      	beq.n	800eda8 <WinPrevious+0x48>
		wpLo = imdctWin[btPrev] + 18;
 800ed6a:	eb02 0cc2 	add.w	ip, r2, r2, lsl #3
 800ed6e:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800ed72:	f10c 0648 	add.w	r6, ip, #72	; 0x48
		xpwHi = xPrevWin + 17;
 800ed76:	f101 0e44 	add.w	lr, r1, #68	; 0x44
		wpHi = wpLo + 17;
 800ed7a:	f10c 0c8c 	add.w	ip, ip, #140	; 0x8c
		for (i = 9; i > 0; i--) {
 800ed7e:	f100 0724 	add.w	r7, r0, #36	; 0x24
			x = *xp++;	wLo = *wpLo++;	wHi = *wpHi--;
 800ed82:	f850 3b04 	ldr.w	r3, [r0], #4
 800ed86:	f85c 4904 	ldr.w	r4, [ip], #-4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800ed8a:	f856 5b04 	ldr.w	r5, [r6], #4
 800ed8e:	461a      	mov	r2, r3
 800ed90:	fb85 8202 	smull	r8, r2, r5, r2
			*xpwLo++ = MULSHIFT32(wLo, x);
 800ed94:	f841 2b04 	str.w	r2, [r1], #4
 800ed98:	fb84 2303 	smull	r2, r3, r4, r3
		for (i = 9; i > 0; i--) {
 800ed9c:	4287      	cmp	r7, r0
			*xpwHi-- = MULSHIFT32(wHi, x);
 800ed9e:	f84e 3904 	str.w	r3, [lr], #-4
		for (i = 9; i > 0; i--) {
 800eda2:	d1ee      	bne.n	800ed82 <WinPrevious+0x22>
}
 800eda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800eda8:	6882      	ldr	r2, [r0, #8]
		xPrevWin[ 0] = MULSHIFT32(wpLo[ 6], xPrev[2]) + MULSHIFT32(wpLo[0], xPrev[6]);
 800edaa:	f8d3 c138 	ldr.w	ip, [r3, #312]	; 0x138
 800edae:	fb8c 4202 	smull	r4, r2, ip, r2
 800edb2:	6984      	ldr	r4, [r0, #24]
 800edb4:	f8d3 5120 	ldr.w	r5, [r3, #288]	; 0x120
 800edb8:	fb85 6404 	smull	r6, r4, r5, r4
 800edbc:	4422      	add	r2, r4
 800edbe:	600a      	str	r2, [r1, #0]
		xPrevWin[ 1] = MULSHIFT32(wpLo[ 7], xPrev[1]) + MULSHIFT32(wpLo[1], xPrev[7]);
 800edc0:	f8d3 713c 	ldr.w	r7, [r3, #316]	; 0x13c
 800edc4:	6842      	ldr	r2, [r0, #4]
 800edc6:	fb87 4202 	smull	r4, r2, r7, r2
 800edca:	69c4      	ldr	r4, [r0, #28]
 800edcc:	f8d3 5124 	ldr.w	r5, [r3, #292]	; 0x124
 800edd0:	fb85 6404 	smull	r6, r4, r5, r4
 800edd4:	4422      	add	r2, r4
 800edd6:	604a      	str	r2, [r1, #4]
 800edd8:	6802      	ldr	r2, [r0, #0]
		xPrevWin[ 2] = MULSHIFT32(wpLo[ 8], xPrev[0]) + MULSHIFT32(wpLo[2], xPrev[8]);
 800edda:	f8d3 6140 	ldr.w	r6, [r3, #320]	; 0x140
 800edde:	fb86 4202 	smull	r4, r2, r6, r2
 800ede2:	6a05      	ldr	r5, [r0, #32]
 800ede4:	f8d3 4128 	ldr.w	r4, [r3, #296]	; 0x128
 800ede8:	fb84 e505 	smull	lr, r5, r4, r5
 800edec:	442a      	add	r2, r5
 800edee:	608a      	str	r2, [r1, #8]
 800edf0:	6802      	ldr	r2, [r0, #0]
		xPrevWin[ 3] = MULSHIFT32(wpLo[ 9], xPrev[0]) + MULSHIFT32(wpLo[3], xPrev[8]);
 800edf2:	f8d3 5144 	ldr.w	r5, [r3, #324]	; 0x144
 800edf6:	4696      	mov	lr, r2
 800edf8:	fb85 2e0e 	smull	r2, lr, r5, lr
 800edfc:	6a02      	ldr	r2, [r0, #32]
 800edfe:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
 800ee02:	fb84 8202 	smull	r8, r2, r4, r2
 800ee06:	4472      	add	r2, lr
 800ee08:	60ca      	str	r2, [r1, #12]
 800ee0a:	6842      	ldr	r2, [r0, #4]
		xPrevWin[ 4] = MULSHIFT32(wpLo[10], xPrev[1]) + MULSHIFT32(wpLo[4], xPrev[7]);
 800ee0c:	f8d3 e148 	ldr.w	lr, [r3, #328]	; 0x148
 800ee10:	4691      	mov	r9, r2
 800ee12:	fb8e 4909 	smull	r4, r9, lr, r9
 800ee16:	69c4      	ldr	r4, [r0, #28]
 800ee18:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
 800ee1c:	fb82 8404 	smull	r8, r4, r2, r4
 800ee20:	eb09 0204 	add.w	r2, r9, r4
 800ee24:	610a      	str	r2, [r1, #16]
 800ee26:	6882      	ldr	r2, [r0, #8]
		xPrevWin[ 5] = MULSHIFT32(wpLo[11], xPrev[2]) + MULSHIFT32(wpLo[5], xPrev[6]);
 800ee28:	f8d3 814c 	ldr.w	r8, [r3, #332]	; 0x14c
 800ee2c:	fb88 4202 	smull	r4, r2, r8, r2
 800ee30:	f8d3 4134 	ldr.w	r4, [r3, #308]	; 0x134
 800ee34:	6983      	ldr	r3, [r0, #24]
 800ee36:	fb84 9303 	smull	r9, r3, r4, r3
 800ee3a:	441a      	add	r2, r3
 800ee3c:	614a      	str	r2, [r1, #20]
 800ee3e:	6943      	ldr	r3, [r0, #20]
 800ee40:	fb8c 2303 	smull	r2, r3, ip, r3
		xPrevWin[ 6] = MULSHIFT32(wpLo[ 6], xPrev[5]);
 800ee44:	618b      	str	r3, [r1, #24]
 800ee46:	6903      	ldr	r3, [r0, #16]
 800ee48:	fb87 2303 	smull	r2, r3, r7, r3
		xPrevWin[ 7] = MULSHIFT32(wpLo[ 7], xPrev[4]);
 800ee4c:	61cb      	str	r3, [r1, #28]
 800ee4e:	68c3      	ldr	r3, [r0, #12]
 800ee50:	fb86 2303 	smull	r2, r3, r6, r3
		xPrevWin[ 8] = MULSHIFT32(wpLo[ 8], xPrev[3]);
 800ee54:	620b      	str	r3, [r1, #32]
 800ee56:	68c3      	ldr	r3, [r0, #12]
 800ee58:	fb85 2303 	smull	r2, r3, r5, r3
		xPrevWin[ 9] = MULSHIFT32(wpLo[ 9], xPrev[3]);
 800ee5c:	624b      	str	r3, [r1, #36]	; 0x24
 800ee5e:	6903      	ldr	r3, [r0, #16]
 800ee60:	fb8e 2303 	smull	r2, r3, lr, r3
		xPrevWin[10] = MULSHIFT32(wpLo[10], xPrev[4]);
 800ee64:	628b      	str	r3, [r1, #40]	; 0x28
 800ee66:	6942      	ldr	r2, [r0, #20]
 800ee68:	fb88 3202 	smull	r3, r2, r8, r2
		xPrevWin[12] = xPrevWin[13] = xPrevWin[14] = xPrevWin[15] = xPrevWin[16] = xPrevWin[17] = 0;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	e9c1 3310 	strd	r3, r3, [r1, #64]	; 0x40
 800ee72:	e9c1 330e 	strd	r3, r3, [r1, #56]	; 0x38
 800ee76:	e9c1 330c 	strd	r3, r3, [r1, #48]	; 0x30
		xPrevWin[11] = MULSHIFT32(wpLo[11], xPrev[5]);
 800ee7a:	62ca      	str	r2, [r1, #44]	; 0x2c
}
 800ee7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee80:	080285f4 	.word	0x080285f4

0800ee84 <xmp3_IMDCT>:
 *
 * Return:      0 on success,  -1 if null input pointers
 **************************************************************************************/
 // a bit faster in RAM
/*__attribute__ ((section (".data")))*/ int IMDCT(MP3DecInfo *mp3DecInfo, int gr, int ch)
{
 800ee84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee88:	b0c5      	sub	sp, #276	; 0x114
 800ee8a:	911d      	str	r1, [sp, #116]	; 0x74
 800ee8c:	921a      	str	r2, [sp, #104]	; 0x68
	HuffmanInfo *hi;
	IMDCTInfo *mi;
	BlockCount bc;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800ee8e:	2800      	cmp	r0, #0
 800ee90:	f000 86a5 	beq.w	800fbde <xmp3_IMDCT+0xd5a>
 800ee94:	6803      	ldr	r3, [r0, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	f000 86a1 	beq.w	800fbde <xmp3_IMDCT+0xd5a>
 800ee9c:	6844      	ldr	r4, [r0, #4]
 800ee9e:	941c      	str	r4, [sp, #112]	; 0x70
 800eea0:	2c00      	cmp	r4, #0
 800eea2:	f000 869c 	beq.w	800fbde <xmp3_IMDCT+0xd5a>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800eea6:	68c5      	ldr	r5, [r0, #12]
 800eea8:	950c      	str	r5, [sp, #48]	; 0x30
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || 
 800eeaa:	2d00      	cmp	r5, #0
 800eeac:	f000 8697 	beq.w	800fbde <xmp3_IMDCT+0xd5a>
		!mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS)
 800eeb0:	6940      	ldr	r0, [r0, #20]
 800eeb2:	900d      	str	r0, [sp, #52]	; 0x34
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	f000 8692 	beq.w	800fbde <xmp3_IMDCT+0xd5a>
	/* anti-aliasing done on whole long blocks only
	 * for mixed blocks, nBfly always 1, except 3 for 8 kHz MPEG 2.5 (see sfBandTab) 
     *   nLongBlocks = number of blocks with (possibly) non-zero power 
	 *   nBfly = number of butterflies to do (nLongBlocks - 1, unless no long blocks)
	 */
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eeba:	4616      	mov	r6, r2
 800eebc:	781a      	ldrb	r2, [r3, #0]
 800eebe:	48c6      	ldr	r0, [pc, #792]	; (800f1d8 <xmp3_IMDCT+0x354>)
 800eec0:	2a00      	cmp	r2, #0
 800eec2:	460f      	mov	r7, r1
 800eec4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
	if (si->sis[gr][ch].blockType != 2) {
 800eec6:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eeca:	bf0c      	ite	eq
 800eecc:	2108      	moveq	r1, #8
 800eece:	2106      	movne	r1, #6
	if (si->sis[gr][ch].blockType != 2) {
 800eed0:	011b      	lsls	r3, r3, #4
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eed2:	f932 1011 	ldrsh.w	r1, [r2, r1, lsl #1]
	if (si->sis[gr][ch].blockType != 2) {
 800eed6:	eb06 02c6 	add.w	r2, r6, r6, lsl #3
 800eeda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eede:	4423      	add	r3, r4
	blockCutoff = fh->sfBand->l[(fh->ver == MPEG1 ? 8 : 6)] / 18;	/* same as 3* num short sfb's in spec */
 800eee0:	17cc      	asrs	r4, r1, #31
 800eee2:	fb80 c101 	smull	ip, r1, r0, r1
 800eee6:	ebc4 01a1 	rsb	r1, r4, r1, asr #2
 800eeea:	b209      	sxth	r1, r1
 800eeec:	9116      	str	r1, [sp, #88]	; 0x58
	if (si->sis[gr][ch].blockType != 2) {
 800eeee:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800eef0:	00f4      	lsls	r4, r6, #3
 800eef2:	941b      	str	r4, [sp, #108]	; 0x6c
 800eef4:	2902      	cmp	r1, #2
 800eef6:	ea4f 04c7 	mov.w	r4, r7, lsl #3
 800eefa:	941e      	str	r4, [sp, #120]	; 0x78
 800eefc:	f000 8644 	beq.w	800fb88 <xmp3_IMDCT+0xd04>
		/* all long transforms */
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800ef00:	f506 6390 	add.w	r3, r6, #1152	; 0x480
 800ef04:	f240 2126 	movw	r1, #550	; 0x226
 800ef08:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 800ef0c:	428b      	cmp	r3, r1
 800ef0e:	f340 8304 	ble.w	800f51a <xmp3_IMDCT+0x696>
		/* all short transforms */
		bc.nBlocksLong = 0;
		nBfly = 0;
	}
 
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800ef12:	0213      	lsls	r3, r2, #8
 800ef14:	930f      	str	r3, [sp, #60]	; 0x3c
 800ef16:	eb05 2302 	add.w	r3, r5, r2, lsl #8
 800ef1a:	9318      	str	r3, [sp, #96]	; 0x60
 800ef1c:	f240 2336 	movw	r3, #566	; 0x236
 800ef20:	930e      	str	r3, [sp, #56]	; 0x38
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800ef22:	2320      	movs	r3, #32
 800ef24:	9304      	str	r3, [sp, #16]
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800ef26:	231f      	movs	r3, #31
 800ef28:	9918      	ldr	r1, [sp, #96]	; 0x60
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800ef2a:	4aac      	ldr	r2, [pc, #688]	; (800f1dc <xmp3_IMDCT+0x358>)
 800ef2c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800ef30:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800ef34:	9309      	str	r3, [sp, #36]	; 0x24
 800ef36:	460b      	mov	r3, r1
 800ef38:	6811      	ldr	r1, [r2, #0]
 800ef3a:	9100      	str	r1, [sp, #0]
 800ef3c:	6851      	ldr	r1, [r2, #4]
 800ef3e:	9101      	str	r1, [sp, #4]
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800ef40:	6891      	ldr	r1, [r2, #8]
 800ef42:	9102      	str	r1, [sp, #8]
 800ef44:	68d1      	ldr	r1, [r2, #12]
 800ef46:	9103      	str	r1, [sp, #12]
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800ef48:	6911      	ldr	r1, [r2, #16]
 800ef4a:	9105      	str	r1, [sp, #20]
 800ef4c:	6951      	ldr	r1, [r2, #20]
 800ef4e:	9106      	str	r1, [sp, #24]
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800ef50:	6991      	ldr	r1, [r2, #24]
 800ef52:	9107      	str	r1, [sp, #28]
 800ef54:	69d1      	ldr	r1, [r2, #28]
 800ef56:	9108      	str	r1, [sp, #32]
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800ef58:	e9d2 010e 	ldrd	r0, r1, [r2, #56]	; 0x38
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800ef5c:	e9d2 c708 	ldrd	ip, r7, [r2, #32]
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800ef60:	e9d2 650a 	ldrd	r6, r5, [r2, #40]	; 0x28
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800ef64:	e9d2 4b0c 	ldrd	r4, fp, [r2, #48]	; 0x30
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800ef68:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		a0 = x[-1];			c0 = *c;	c++;	b0 = x[0];		c1 = *c;	c++;
 800ef6c:	e9d3 8211 	ldrd	r8, r2, [r3, #68]	; 0x44
 800ef70:	9900      	ldr	r1, [sp, #0]
 800ef72:	46c6      	mov	lr, r8
 800ef74:	fb81 9e0e 	smull	r9, lr, r1, lr
 800ef78:	9801      	ldr	r0, [sp, #4]
 800ef7a:	4691      	mov	r9, r2
 800ef7c:	fb80 a909 	smull	sl, r9, r0, r9
		x[-1] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800ef80:	ebae 0e09 	sub.w	lr, lr, r9
 800ef84:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800ef88:	9900      	ldr	r1, [sp, #0]
 800ef8a:	f8c3 e044 	str.w	lr, [r3, #68]	; 0x44
 800ef8e:	fb81 e202 	smull	lr, r2, r1, r2
 800ef92:	fb80 e808 	smull	lr, r8, r0, r8
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800ef96:	4442      	add	r2, r8
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800ef98:	f8d3 8040 	ldr.w	r8, [r3, #64]	; 0x40
 800ef9c:	9902      	ldr	r1, [sp, #8]
		x[0] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800ef9e:	0052      	lsls	r2, r2, #1
 800efa0:	649a      	str	r2, [r3, #72]	; 0x48
 800efa2:	46c6      	mov	lr, r8
		a0 = x[-2];			c0 = *c;	c++;	b0 = x[1];		c1 = *c;	c++;
 800efa4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800efa6:	fb81 9e0e 	smull	r9, lr, r1, lr
 800efaa:	9803      	ldr	r0, [sp, #12]
 800efac:	4691      	mov	r9, r2
 800efae:	fb80 a909 	smull	sl, r9, r0, r9
		x[-2] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800efb2:	ebae 0e09 	sub.w	lr, lr, r9
 800efb6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800efba:	f8c3 e040 	str.w	lr, [r3, #64]	; 0x40
 800efbe:	fb81 e202 	smull	lr, r2, r1, r2
 800efc2:	fb80 e808 	smull	lr, r8, r0, r8
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800efc6:	4442      	add	r2, r8
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800efc8:	f8d3 803c 	ldr.w	r8, [r3, #60]	; 0x3c
 800efcc:	9905      	ldr	r1, [sp, #20]
		x[1] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800efce:	0052      	lsls	r2, r2, #1
 800efd0:	64da      	str	r2, [r3, #76]	; 0x4c
 800efd2:	46c6      	mov	lr, r8
		a0 = x[-3];			c0 = *c;	c++;	b0 = x[2];		c1 = *c;	c++;
 800efd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800efd6:	fb81 9e0e 	smull	r9, lr, r1, lr
 800efda:	9806      	ldr	r0, [sp, #24]
 800efdc:	4691      	mov	r9, r2
 800efde:	fb80 a909 	smull	sl, r9, r0, r9
		x[-3] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800efe2:	ebae 0e09 	sub.w	lr, lr, r9
 800efe6:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800efea:	f8c3 e03c 	str.w	lr, [r3, #60]	; 0x3c
 800efee:	fb81 e202 	smull	lr, r2, r1, r2
 800eff2:	fb80 e808 	smull	lr, r8, r0, r8
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800eff6:	4442      	add	r2, r8
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800eff8:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
 800effc:	9907      	ldr	r1, [sp, #28]
		x[2] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800effe:	0052      	lsls	r2, r2, #1
 800f000:	651a      	str	r2, [r3, #80]	; 0x50
 800f002:	46c6      	mov	lr, r8
		a0 = x[-4];			c0 = *c;	c++;	b0 = x[3];		c1 = *c;	c++;
 800f004:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f006:	fb81 9e0e 	smull	r9, lr, r1, lr
 800f00a:	9808      	ldr	r0, [sp, #32]
 800f00c:	4691      	mov	r9, r2
 800f00e:	fb80 a909 	smull	sl, r9, r0, r9
		x[-4] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f012:	ebae 0e09 	sub.w	lr, lr, r9
 800f016:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f01a:	f8c3 e038 	str.w	lr, [r3, #56]	; 0x38
 800f01e:	fb81 e202 	smull	lr, r2, r1, r2
 800f022:	fb80 e808 	smull	lr, r8, r0, r8
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f026:	4442      	add	r2, r8
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800f028:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
		x[3] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f02c:	0052      	lsls	r2, r2, #1
 800f02e:	655a      	str	r2, [r3, #84]	; 0x54
 800f030:	46c6      	mov	lr, r8
		a0 = x[-5];			c0 = *c;	c++;	b0 = x[4];		c1 = *c;	c++;
 800f032:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f034:	fb8c 9e0e 	smull	r9, lr, ip, lr
 800f038:	4691      	mov	r9, r2
 800f03a:	fb87 a909 	smull	sl, r9, r7, r9
		x[-5] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f03e:	ebae 0e09 	sub.w	lr, lr, r9
 800f042:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f046:	f8c3 e034 	str.w	lr, [r3, #52]	; 0x34
 800f04a:	fb8c e202 	smull	lr, r2, ip, r2
 800f04e:	fb87 e808 	smull	lr, r8, r7, r8
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f052:	4442      	add	r2, r8
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800f054:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
		x[4] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f058:	0052      	lsls	r2, r2, #1
 800f05a:	659a      	str	r2, [r3, #88]	; 0x58
 800f05c:	46c6      	mov	lr, r8
		a0 = x[-6];			c0 = *c;	c++;	b0 = x[5];		c1 = *c;	c++;
 800f05e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f060:	fb86 9e0e 	smull	r9, lr, r6, lr
 800f064:	4691      	mov	r9, r2
 800f066:	fb85 a909 	smull	sl, r9, r5, r9
		x[-6] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f06a:	ebae 0e09 	sub.w	lr, lr, r9
 800f06e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f072:	f8c3 e030 	str.w	lr, [r3, #48]	; 0x30
 800f076:	fb86 e202 	smull	lr, r2, r6, r2
 800f07a:	fb85 e808 	smull	lr, r8, r5, r8
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f07e:	4442      	add	r2, r8
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800f080:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
		x[5] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f084:	0052      	lsls	r2, r2, #1
 800f086:	65da      	str	r2, [r3, #92]	; 0x5c
 800f088:	46c6      	mov	lr, r8
		a0 = x[-7];			c0 = *c;	c++;	b0 = x[6];		c1 = *c;	c++;
 800f08a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800f08c:	fb84 9e0e 	smull	r9, lr, r4, lr
 800f090:	4691      	mov	r9, r2
 800f092:	fb8b a909 	smull	sl, r9, fp, r9
		x[-7] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f096:	ebae 0e09 	sub.w	lr, lr, r9
 800f09a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f09e:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
 800f0a2:	fb84 e202 	smull	lr, r2, r4, r2
 800f0a6:	fb8b e808 	smull	lr, r8, fp, r8
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f0aa:	4442      	add	r2, r8
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f0ac:	f8d3 8028 	ldr.w	r8, [r3, #40]	; 0x28
 800f0b0:	980a      	ldr	r0, [sp, #40]	; 0x28
		x[6] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f0b2:	0052      	lsls	r2, r2, #1
 800f0b4:	661a      	str	r2, [r3, #96]	; 0x60
 800f0b6:	46c6      	mov	lr, r8
		a0 = x[-8];			c0 = *c;	c++;	b0 = x[7];		c1 = *c;	c++;
 800f0b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800f0ba:	fb80 9e0e 	smull	r9, lr, r0, lr
 800f0be:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f0c0:	4691      	mov	r9, r2
 800f0c2:	fb81 a909 	smull	sl, r9, r1, r9
		x[-8] = (MULSHIFT32(c0, a0) - MULSHIFT32(c1, b0)) << 1;	
 800f0c6:	ebae 0e09 	sub.w	lr, lr, r9
 800f0ca:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f0ce:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
 800f0d2:	fb80 e202 	smull	lr, r2, r0, r2
 800f0d6:	fb81 e808 	smull	lr, r8, r1, r8
		x[7] =  (MULSHIFT32(c0, b0) + MULSHIFT32(c1, a0)) << 1;
 800f0da:	4442      	add	r2, r8
 800f0dc:	0052      	lsls	r2, r2, #1
 800f0de:	665a      	str	r2, [r3, #100]	; 0x64
	for (k = nBfly; k > 0; k--) {
 800f0e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f0e2:	3348      	adds	r3, #72	; 0x48
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	f47f af41 	bne.w	800ef6c <xmp3_IMDCT+0xe8>
	/* for readability, use a struct instead of passing a million parameters to HybridTransform() */
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
	bc.prevType = mi->prevType[ch];
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f0ea:	e9dd 231d 	ldrd	r2, r3, [sp, #116]	; 0x74
 800f0ee:	4413      	add	r3, r2
 800f0f0:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 800f0f4:	011b      	lsls	r3, r3, #4
 800f0f6:	440a      	add	r2, r1
 800f0f8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f0fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f0fe:	4413      	add	r3, r2
 800f100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f102:	981a      	ldr	r0, [sp, #104]	; 0x68
 800f104:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f106:	9e0e      	ldr	r6, [sp, #56]	; 0x38
	bc.gbIn = hi->gb[ch];

	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f108:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800f10a:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800f10c:	eb02 0180 	add.w	r1, r2, r0, lsl #2
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f110:	f501 5180 	add.w	r1, r1, #4096	; 0x1000
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f114:	442c      	add	r4, r5
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f116:	f8d1 2200 	ldr.w	r2, [r1, #512]	; 0x200
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f11a:	9414      	str	r4, [sp, #80]	; 0x50
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f11c:	4296      	cmp	r6, r2
 800f11e:	bfb8      	it	lt
 800f120:	4616      	movlt	r6, r2
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f122:	2b00      	cmp	r3, #0
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f124:	4632      	mov	r2, r6
 800f126:	f8c1 6200 	str.w	r6, [r1, #512]	; 0x200
	bc.gbIn = hi->gb[ch];
 800f12a:	f8d1 6208 	ldr.w	r6, [r1, #520]	; 0x208
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f12e:	9916      	ldr	r1, [sp, #88]	; 0x58
	bc.gbIn = hi->gb[ch];
 800f130:	960c      	str	r6, [sp, #48]	; 0x30
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f132:	bf08      	it	eq
 800f134:	2100      	moveq	r1, #0
 800f136:	9116      	str	r1, [sp, #88]	; 0x58
	bc.nBlocksTotal = (hi->nonZeroBound[ch] + 17) / 18;
 800f138:	4927      	ldr	r1, [pc, #156]	; (800f1d8 <xmp3_IMDCT+0x354>)
 800f13a:	3211      	adds	r2, #17
 800f13c:	fb81 7102 	smull	r7, r1, r1, r2
 800f140:	17d2      	asrs	r2, r2, #31
 800f142:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
 800f146:	920b      	str	r2, [sp, #44]	; 0x2c
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f148:	eb05 0280 	add.w	r2, r5, r0, lsl #2
 800f14c:	4601      	mov	r1, r0
 800f14e:	f502 5080 	add.w	r0, r2, #4096	; 0x1000
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f152:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f154:	901f      	str	r0, [sp, #124]	; 0x7c
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f156:	1851      	adds	r1, r2, r1
 800f158:	eb05 12c1 	add.w	r2, r5, r1, lsl #7
 800f15c:	f502 5590 	add.w	r5, r2, #4608	; 0x1200
	bc.nBlocksPrev = mi->numPrevIMDCT[ch];
 800f160:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 800f164:	9213      	str	r2, [sp, #76]	; 0x4c
	bc.prevType = mi->prevType[ch];
 800f166:	f8d0 2b08 	ldr.w	r2, [r0, #2824]	; 0xb08
 800f16a:	920a      	str	r2, [sp, #40]	; 0x28
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 800f16c:	f8d0 2b10 	ldr.w	r2, [r0, #2832]	; 0xb10
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f170:	9804      	ldr	r0, [sp, #16]
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800f172:	9517      	str	r5, [sp, #92]	; 0x5c
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f174:	2800      	cmp	r0, #0
	bc.prevWinSwitch = mi->prevWinSwitch[ch];
 800f176:	9207      	str	r2, [sp, #28]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f178:	f340 852a 	ble.w	800fbd0 <xmp3_IMDCT+0xd4c>
		currWinIdx = sis->blockType;
 800f17c:	e9dd 721d 	ldrd	r7, r2, [sp, #116]	; 0x74
 800f180:	443a      	add	r2, r7
 800f182:	0112      	lsls	r2, r2, #4
 800f184:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800f188:	991c      	ldr	r1, [sp, #112]	; 0x70
 800f18a:	9400      	str	r4, [sp, #0]
 800f18c:	188a      	adds	r2, r1, r2
 800f18e:	2e06      	cmp	r6, #6
	mOut = 0;
 800f190:	f04f 0100 	mov.w	r1, #0
		currWinIdx = sis->blockType;
 800f194:	9211      	str	r2, [sp, #68]	; 0x44
		es = 7 - gb;
 800f196:	f1c6 0207 	rsb	r2, r6, #7
 800f19a:	9219      	str	r2, [sp, #100]	; 0x64
 800f19c:	bfc8      	it	gt
 800f19e:	460a      	movgt	r2, r1
 800f1a0:	ee07 2a90 	vmov	s15, r2
 800f1a4:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800f1a8:	9203      	str	r2, [sp, #12]
 800f1aa:	4622      	mov	r2, r4
 800f1ac:	9c18      	ldr	r4, [sp, #96]	; 0x60
	mOut = 0;
 800f1ae:	9102      	str	r1, [sp, #8]
 800f1b0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800f1b4:	3c0c      	subs	r4, #12
 800f1b6:	9215      	str	r2, [sp, #84]	; 0x54
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f1b8:	9101      	str	r1, [sp, #4]
		currWinIdx = sis->blockType;
 800f1ba:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800f1bc:	9903      	ldr	r1, [sp, #12]
 800f1be:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800f1c0:	9206      	str	r2, [sp, #24]
 800f1c2:	3924      	subs	r1, #36	; 0x24
 800f1c4:	9105      	str	r1, [sp, #20]
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800f1c6:	b15b      	cbz	r3, 800f1e0 <xmp3_IMDCT+0x35c>
			currWinIdx = 0;
 800f1c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f1ca:	9901      	ldr	r1, [sp, #4]
 800f1cc:	428b      	cmp	r3, r1
 800f1ce:	bfc8      	it	gt
 800f1d0:	2200      	movgt	r2, #0
 800f1d2:	9206      	str	r2, [sp, #24]
 800f1d4:	e004      	b.n	800f1e0 <xmp3_IMDCT+0x35c>
 800f1d6:	bf00      	nop
 800f1d8:	38e38e39 	.word	0x38e38e39
 800f1dc:	080285b4 	.word	0x080285b4
		if (i < bc->prevWinSwitch)
 800f1e0:	9b07      	ldr	r3, [sp, #28]
 800f1e2:	9a01      	ldr	r2, [sp, #4]
 800f1e4:	4293      	cmp	r3, r2
 800f1e6:	f300 822b 	bgt.w	800f640 <xmp3_IMDCT+0x7bc>
 800f1ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f1ec:	9a06      	ldr	r2, [sp, #24]
		prevWinIdx = bc->prevType;
 800f1ee:	9312      	str	r3, [sp, #72]	; 0x48
 800f1f0:	ea43 0502 	orr.w	r5, r3, r2
	if (gb < 7) {
 800f1f4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f1f6:	2b06      	cmp	r3, #6
 800f1f8:	f104 0348 	add.w	r3, r4, #72	; 0x48
 800f1fc:	9310      	str	r3, [sp, #64]	; 0x40
	acc1 = acc2 = 0;
 800f1fe:	f04f 0000 	mov.w	r0, #0
 800f202:	4619      	mov	r1, r3
	if (gb < 7) {
 800f204:	f300 820d 	bgt.w	800f622 <xmp3_IMDCT+0x79e>
 800f208:	9e03      	ldr	r6, [sp, #12]
	acc1 = acc2 = 0;
 800f20a:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 800f20e:	af29      	add	r7, sp, #164	; 0xa4
 800f210:	4603      	mov	r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800f212:	688a      	ldr	r2, [r1, #8]
 800f214:	fa42 f20c 	asr.w	r2, r2, ip
 800f218:	1ad3      	subs	r3, r2, r3
			acc1 = ((*xCurr--) >> es) - acc1;
 800f21a:	684a      	ldr	r2, [r1, #4]
 800f21c:	fa42 f20c 	asr.w	r2, r2, ip
			acc2 = acc1 - acc2;
 800f220:	1a18      	subs	r0, r3, r0
			acc1 = ((*xCurr--) >> es) - acc1;
 800f222:	1ad3      	subs	r3, r2, r3
			xPrev[i] >>= es;
 800f224:	f856 2d04 	ldr.w	r2, [r6, #-4]!
			xBuf[i+9] = acc2;	/* odd */
 800f228:	6238      	str	r0, [r7, #32]
		for (i = 8; i >= 0; i--) {	
 800f22a:	3908      	subs	r1, #8
			xPrev[i] >>= es;
 800f22c:	fa42 f20c 	asr.w	r2, r2, ip
		for (i = 8; i >= 0; i--) {	
 800f230:	428c      	cmp	r4, r1
			xBuf[i+0] = acc1;	/* even */
 800f232:	f847 3d04 	str.w	r3, [r7, #-4]!
			xPrev[i] >>= es;
 800f236:	6032      	str	r2, [r6, #0]
		for (i = 8; i >= 0; i--) {	
 800f238:	d1eb      	bne.n	800f212 <xmp3_IMDCT+0x38e>
	xBuf[9] >>= 1;
 800f23a:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 800f23c:	9823      	ldr	r0, [sp, #140]	; 0x8c
	xBuf[0] >>= 1;
 800f23e:	9920      	ldr	r1, [sp, #128]	; 0x80
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800f240:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800f242:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
	xBuf[9] >>= 1;
 800f246:	1072      	asrs	r2, r6, #1
 800f248:	4680      	mov	r8, r0
	a1 = x0 - x6;
 800f24a:	9826      	ldr	r0, [sp, #152]	; 0x98
	xBuf[9] >>= 1;
 800f24c:	9208      	str	r2, [sp, #32]
	x5 = x[5]; x6 = x[6]; x7 = x[7]; x8 = x[8];
 800f24e:	e9dd 2727 	ldrd	r2, r7, [sp, #156]	; 0x9c
	xBuf[0] >>= 1;
 800f252:	104c      	asrs	r4, r1, #1
	a1 = x0 - x6;
 800f254:	ebc0 0e61 	rsb	lr, r0, r1, asr #1
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f258:	9925      	ldr	r1, [sp, #148]	; 0x94
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800f25a:	9e21      	ldr	r6, [sp, #132]	; 0x84
	xBuf[0] >>= 1;
 800f25c:	940d      	str	r4, [sp, #52]	; 0x34
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f25e:	1a89      	subs	r1, r1, r2
	a4 = x2 - x4;
 800f260:	eba3 090a 	sub.w	r9, r3, sl
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f264:	9109      	str	r1, [sp, #36]	; 0x24
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800f266:	eba9 0907 	sub.w	r9, r9, r7
 800f26a:	49bd      	ldr	r1, [pc, #756]	; (800f560 <xmp3_IMDCT+0x6dc>)
	a5 = x2 + x4;
 800f26c:	eb03 000a 	add.w	r0, r3, sl
 800f270:	fb81 4808 	smull	r4, r8, r1, r8
	a2 = x1 - x5;
 800f274:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f276:	eba6 0c01 	sub.w	ip, r6, r1
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800f27a:	ebac 0c02 	sub.w	ip, ip, r2
 800f27e:	49b8      	ldr	r1, [pc, #736]	; (800f560 <xmp3_IMDCT+0x6dc>)
 800f280:	fb81 4c0c 	smull	r4, ip, r1, ip
 800f284:	49b7      	ldr	r1, [pc, #732]	; (800f564 <xmp3_IMDCT+0x6e0>)
 800f286:	4604      	mov	r4, r0
 800f288:	fb81 b404 	smull	fp, r4, r1, r4
 800f28c:	940e      	str	r4, [sp, #56]	; 0x38
	a6 = x2 + x8;
 800f28e:	443b      	add	r3, r7
 800f290:	4cb5      	ldr	r4, [pc, #724]	; (800f568 <xmp3_IMDCT+0x6e4>)
 800f292:	fb84 b303 	smull	fp, r3, r4, r3
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800f296:	eba7 070a 	sub.w	r7, r7, sl
 800f29a:	fb81 a707 	smull	sl, r7, r1, r7
 800f29e:	970f      	str	r7, [sp, #60]	; 0x3c
 800f2a0:	fb84 a000 	smull	sl, r0, r4, r0
 800f2a4:	f104 5470 	add.w	r4, r4, #1006632960	; 0x3c000000
 800f2a8:	f504 244c 	add.w	r4, r4, #835584	; 0xcc000
 800f2ac:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f2b0:	f204 24cb 	addw	r4, r4, #715	; 0x2cb
 800f2b4:	fb84 ba0a 	smull	fp, sl, r4, sl
 800f2b8:	49ac      	ldr	r1, [pc, #688]	; (800f56c <xmp3_IMDCT+0x6e8>)
	a7 = x1 + x7;
 800f2ba:	4432      	add	r2, r6
 800f2bc:	460f      	mov	r7, r1
 800f2be:	fb81 b202 	smull	fp, r2, r1, r2
	a3 = x1 + x5;
 800f2c2:	9925      	ldr	r1, [sp, #148]	; 0x94
 800f2c4:	440e      	add	r6, r1
 800f2c6:	fb84 b606 	smull	fp, r6, r4, r6
 800f2ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f2cc:	fb87 b101 	smull	fp, r1, r7, r1
	a12 = x[0] +  (x[6] >> 1);
 800f2d0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 800f2d2:	9f26      	ldr	r7, [sp, #152]	; 0x98
 800f2d4:	eb04 0b67 	add.w	fp, r4, r7, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800f2d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	a17 = ( m7 << 1) - (m8 << 1);
 800f2da:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
	a16 = ( m5 << 1) + (m6 << 1);
 800f2dc:	005b      	lsls	r3, r3, #1
	a19 = ( m9 << 1) + (m10 << 1);
 800f2de:	0052      	lsls	r2, r2, #1
 800f2e0:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
	a16 = ( m5 << 1) + (m6 << 1);
 800f2e4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
	a13 = a12  +  (  m1 << 1);
 800f2e8:	eb0b 0248 	add.w	r2, fp, r8, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800f2ec:	0040      	lsls	r0, r0, #1
 800f2ee:	ebc0 0747 	rsb	r7, r0, r7, lsl #1
	x4 = a1 - a11;			x[4] = x4;
 800f2f2:	ebae 0309 	sub.w	r3, lr, r9
	a15 = a1   +  ( a11 >> 1);
 800f2f6:	eb0e 0069 	add.w	r0, lr, r9, asr #1
	a22 = a13 + a16;
 800f2fa:	eb02 0e04 	add.w	lr, r2, r4
	a14 = a12  -  (  m1 << 1);
 800f2fe:	ebab 0b48 	sub.w	fp, fp, r8, lsl #1
	x0 = a22 + a19;			x[0] = x0;
 800f302:	44d6      	add	lr, sl
	a20 = (m11 << 1) - (m12 << 1);
 800f304:	0049      	lsls	r1, r1, #1
 800f306:	ebc1 0646 	rsb	r6, r1, r6, lsl #1
	x0 = a22 + a19;			x[0] = x0;
 800f30a:	f8cd e080 	str.w	lr, [sp, #128]	; 0x80
	a18 = a16 + a17;
 800f30e:	19e1      	adds	r1, r4, r7
	a24 = a14 + a17;
 800f310:	eb0b 0e07 	add.w	lr, fp, r7
	x4 = a1 - a11;			x[4] = x4;
 800f314:	9324      	str	r3, [sp, #144]	; 0x90
	a23 = a14 + a16;
 800f316:	445c      	add	r4, fp
	a21 = a20 - a19;
 800f318:	eba6 030a 	sub.w	r3, r6, sl
	a26 = a14 - a18;
 800f31c:	ebab 0b01 	sub.w	fp, fp, r1
	a25 = a13 + a17;
 800f320:	4417      	add	r7, r2
	a27 = a13 - a18;
 800f322:	1a51      	subs	r1, r2, r1
	x2 = a24 + a20;			x[2] = x2;
 800f324:	eb0e 0206 	add.w	r2, lr, r6
	x6 = a25 - a20;			x[6] = x6;
 800f328:	1bbf      	subs	r7, r7, r6
	x5 = a27 + a21;			x[5] = x5;
 800f32a:	4419      	add	r1, r3
	x2 = a24 + a20;			x[2] = x2;
 800f32c:	9222      	str	r2, [sp, #136]	; 0x88
	x3 = a26 - a21;			x[3] = x3;
 800f32e:	ebab 0203 	sub.w	r2, fp, r3
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800f332:	eb00 034c 	add.w	r3, r0, ip, lsl #1
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800f336:	eba0 004c 	sub.w	r0, r0, ip, lsl #1
	x6 = a25 - a20;			x[6] = x6;
 800f33a:	9726      	str	r7, [sp, #152]	; 0x98
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800f33c:	9027      	str	r0, [sp, #156]	; 0x9c
	a4 = x2 - x4;
 800f33e:	9f2b      	ldr	r7, [sp, #172]	; 0xac
 800f340:	982d      	ldr	r0, [sp, #180]	; 0xb4
	x3 = a26 - a21;			x[3] = x3;
 800f342:	9223      	str	r2, [sp, #140]	; 0x8c
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800f344:	9321      	str	r3, [sp, #132]	; 0x84
	a1 = x0 - x6;
 800f346:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f348:	9e30      	ldr	r6, [sp, #192]	; 0xc0
	x5 = a27 + a21;			x[5] = x5;
 800f34a:	9125      	str	r1, [sp, #148]	; 0x94
	a4 = x2 - x4;
 800f34c:	1a3b      	subs	r3, r7, r0
	a1 = x0 - x6;
 800f34e:	9808      	ldr	r0, [sp, #32]
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800f350:	9f31      	ldr	r7, [sp, #196]	; 0xc4
 800f352:	f8dd 80b0 	ldr.w	r8, [sp, #176]	; 0xb0
	a1 = x0 - x6;
 800f356:	eba0 0902 	sub.w	r9, r0, r2
	a5 = x2 + x4;
 800f35a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 800f35c:	982b      	ldr	r0, [sp, #172]	; 0xac
 800f35e:	4410      	add	r0, r2
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f360:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
	x8 = a23 - a19;			x[8] = x8;
 800f362:	eba4 040a 	sub.w	r4, r4, sl
	a11 = a4 - x8;		/* ie x[2] - x[4] - x[8] */
 800f366:	1bdf      	subs	r7, r3, r7
 800f368:	970d      	str	r7, [sp, #52]	; 0x34
	a9 = a3 - a7;		/* ie x[5] - x[7] */
 800f36a:	1b91      	subs	r1, r2, r6
	x0 = x[0]; x1 = x[1]; x2 = x[2]; x3 = x[3]; x4 = x[4];
 800f36c:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 800f36e:	4a7c      	ldr	r2, [pc, #496]	; (800f560 <xmp3_IMDCT+0x6dc>)
	x8 = a23 - a19;			x[8] = x8;
 800f370:	9409      	str	r4, [sp, #36]	; 0x24
 800f372:	9428      	str	r4, [sp, #160]	; 0xa0
 800f374:	fb82 3808 	smull	r3, r8, r2, r8
	a2 = x1 - x5;
 800f378:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800f37a:	eba7 0e06 	sub.w	lr, r7, r6
	a10 = a2 - x7;		/* ie x[1] - x[5] - x[7] */
 800f37e:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 800f380:	ebae 0e06 	sub.w	lr, lr, r6
 800f384:	fb82 3e0e 	smull	r3, lr, r2, lr
 800f388:	4e76      	ldr	r6, [pc, #472]	; (800f564 <xmp3_IMDCT+0x6e0>)
 800f38a:	4683      	mov	fp, r0
 800f38c:	fb86 3b0b 	smull	r3, fp, r6, fp
	a6 = x2 + x8;
 800f390:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 800f392:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 800f394:	4c74      	ldr	r4, [pc, #464]	; (800f568 <xmp3_IMDCT+0x6e4>)
 800f396:	18d3      	adds	r3, r2, r3
 800f398:	fb84 2303 	smull	r2, r3, r4, r3
	a8 = a6 - a5;		/* ie x[8] - x[4] */
 800f39c:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 800f39e:	930e      	str	r3, [sp, #56]	; 0x38
 800f3a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 800f3a2:	eba2 0c03 	sub.w	ip, r2, r3
 800f3a6:	fb86 2c0c 	smull	r2, ip, r6, ip
 800f3aa:	fb84 2000 	smull	r2, r0, r4, r0
 800f3ae:	f104 5470 	add.w	r4, r4, #1006632960	; 0x3c000000
 800f3b2:	f504 244c 	add.w	r4, r4, #835584	; 0xcc000
 800f3b6:	468a      	mov	sl, r1
 800f3b8:	f204 24cb 	addw	r4, r4, #715	; 0x2cb
 800f3bc:	fb84 2a0a 	smull	r2, sl, r4, sl
	a7 = x1 + x7;
 800f3c0:	9a30      	ldr	r2, [sp, #192]	; 0xc0
 800f3c2:	4b6a      	ldr	r3, [pc, #424]	; (800f56c <xmp3_IMDCT+0x6e8>)
 800f3c4:	18ba      	adds	r2, r7, r2
 800f3c6:	fb83 6202 	smull	r6, r2, r3, r2
	a3 = x1 + x5;
 800f3ca:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
 800f3cc:	4437      	add	r7, r6
 800f3ce:	fb84 6707 	smull	r6, r7, r4, r7
 800f3d2:	fb83 6101 	smull	r6, r1, r3, r1
	a12 = x[0] +  (x[6] >> 1);
 800f3d6:	9b08      	ldr	r3, [sp, #32]
 800f3d8:	9e2f      	ldr	r6, [sp, #188]	; 0xbc
	a15 = a1   +  ( a11 >> 1);
 800f3da:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	a12 = x[0] +  (x[6] >> 1);
 800f3dc:	eb03 0666 	add.w	r6, r3, r6, asr #1
	a16 = ( m5 << 1) + (m6 << 1);
 800f3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	a17 = ( m7 << 1) - (m8 << 1);
 800f3e2:	0040      	lsls	r0, r0, #1
	a19 = ( m9 << 1) + (m10 << 1);
 800f3e4:	0052      	lsls	r2, r2, #1
	a16 = ( m5 << 1) + (m6 << 1);
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	eb03 034b 	add.w	r3, r3, fp, lsl #1
	a19 = ( m9 << 1) + (m10 << 1);
 800f3ec:	eb02 0a4a 	add.w	sl, r2, sl, lsl #1
	a17 = ( m7 << 1) - (m8 << 1);
 800f3f0:	ebc0 0c4c 	rsb	ip, r0, ip, lsl #1
	a13 = a12  +  (  m1 << 1);
 800f3f4:	eb06 0248 	add.w	r2, r6, r8, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800f3f8:	0049      	lsls	r1, r1, #1
	a14 = a12  -  (  m1 << 1);
 800f3fa:	eba6 0648 	sub.w	r6, r6, r8, lsl #1
	a20 = (m11 << 1) - (m12 << 1);
 800f3fe:	ebc1 0147 	rsb	r1, r1, r7, lsl #1
	a18 = a16 + a17;
 800f402:	eb03 000c 	add.w	r0, r3, ip
	x4 = a1 - a11;			x[4] = x4;
 800f406:	eba9 0704 	sub.w	r7, r9, r4
	a22 = a13 + a16;
 800f40a:	eb02 0803 	add.w	r8, r2, r3
	a23 = a14 + a16;
 800f40e:	4433      	add	r3, r6
	x4 = a1 - a11;			x[4] = x4;
 800f410:	972d      	str	r7, [sp, #180]	; 0xb4
	x8 = a23 - a19;			x[8] = x8;
 800f412:	eba3 070a 	sub.w	r7, r3, sl
	a24 = a14 + a17;
 800f416:	eb06 030c 	add.w	r3, r6, ip
	a15 = a1   +  ( a11 >> 1);
 800f41a:	eb09 0b64 	add.w	fp, r9, r4, asr #1
	x2 = a24 + a20;			x[2] = x2;
 800f41e:	440b      	add	r3, r1
	a21 = a20 - a19;
 800f420:	eba1 090a 	sub.w	r9, r1, sl
	a26 = a14 - a18;
 800f424:	1a36      	subs	r6, r6, r0
	a25 = a13 + a17;
 800f426:	4494      	add	ip, r2
	a27 = a13 - a18;
 800f428:	1a10      	subs	r0, r2, r0
	x0 = a22 + a19;			x[0] = x0;
 800f42a:	44d0      	add	r8, sl
	x6 = a25 - a20;			x[6] = x6;
 800f42c:	ebac 0101 	sub.w	r1, ip, r1
	x2 = a24 + a20;			x[2] = x2;
 800f430:	932b      	str	r3, [sp, #172]	; 0xac
	x3 = a26 - a21;			x[3] = x3;
 800f432:	eba6 0609 	sub.w	r6, r6, r9
	x5 = a27 + a21;			x[5] = x5;
 800f436:	4448      	add	r0, r9
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800f438:	eb0b 034e 	add.w	r3, fp, lr, lsl #1
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800f43c:	ebab 024e 	sub.w	r2, fp, lr, lsl #1
	x0 = a22 + a19;			x[0] = x0;
 800f440:	f8cd 80a4 	str.w	r8, [sp, #164]	; 0xa4
	x8 = a23 - a19;			x[8] = x8;
 800f444:	9731      	str	r7, [sp, #196]	; 0xc4
	x6 = a25 - a20;			x[6] = x6;
 800f446:	912f      	str	r1, [sp, #188]	; 0xbc
	x3 = a26 - a21;			x[3] = x3;
 800f448:	962c      	str	r6, [sp, #176]	; 0xb0
	x5 = a27 + a21;			x[5] = x5;
 800f44a:	902e      	str	r0, [sp, #184]	; 0xb8
	x1 = a15 + (m3 << 1);	x[1] = x1;
 800f44c:	932a      	str	r3, [sp, #168]	; 0xa8
	x7 = a15 - (m3 << 1);	x[7] = x7;
 800f44e:	9230      	str	r2, [sp, #192]	; 0xc0
	if (btPrev == 0 && btCurr == 0) {
 800f450:	2d00      	cmp	r5, #0
 800f452:	f040 8093 	bne.w	800f57c <xmp3_IMDCT+0x6f8>
 800f456:	9c00      	ldr	r4, [sp, #0]
 800f458:	4945      	ldr	r1, [pc, #276]	; (800f570 <xmp3_IMDCT+0x6ec>)
 800f45a:	f8df 811c 	ldr.w	r8, [pc, #284]	; 800f578 <xmp3_IMDCT+0x6f4>
 800f45e:	4b45      	ldr	r3, [pc, #276]	; (800f574 <xmp3_IMDCT+0x6f0>)
 800f460:	9e05      	ldr	r6, [sp, #20]
 800f462:	f5a4 6990 	sub.w	r9, r4, #1152	; 0x480
 800f466:	46a2      	mov	sl, r4
 800f468:	f10d 0ca0 	add.w	ip, sp, #160	; 0xa0
 800f46c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f46e:	4628      	mov	r0, r5
	__asm__ volatile (
 800f470:	46ae      	mov	lr, r5
 800f472:	e005      	b.n	800f480 <xmp3_IMDCT+0x5fc>
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800f474:	f8dc 7020 	ldr.w	r7, [ip, #32]
 800f478:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f47c:	f85c 4d04 	ldr.w	r4, [ip, #-4]!
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f480:	fb83 2707 	smull	r2, r7, r3, r7
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800f484:	eb07 03a4 	add.w	r3, r7, r4, asr #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800f488:	6832      	ldr	r2, [r6, #0]
			(*xPrev++) = xe + xo;			/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800f48a:	f846 3b04 	str.w	r3, [r6], #4
			d = -(xe - xo);		/* gain 2 int bits, don't shift xo (effective << 1 to eat sign bit, << 1 for mul by 2) */
 800f48e:	eba7 07a4 	sub.w	r7, r7, r4, asr #2
			s = -(*xPrev);		/* sum from last block (always at least 2 guard bits) */
 800f492:	4254      	negs	r4, r2
 800f494:	f851 3c08 	ldr.w	r3, [r1, #-8]
			t = s - d;
 800f498:	1be4      	subs	r4, r4, r7
 800f49a:	fb84 b303 	smull	fp, r3, r4, r3
			yLo = (d + (MULSHIFT32(t, *wp++) << 2));
 800f49e:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800f4a2:	f851 7c04 	ldr.w	r7, [r1, #-4]
 800f4a6:	fb84 b707 	smull	fp, r7, r4, r7
			y[(i)*NBANDS]    = 	yLo;
 800f4aa:	9c00      	ldr	r4, [sp, #0]
 800f4ac:	ebc2 0287 	rsb	r2, r2, r7, lsl #2
 800f4b0:	f844 3020 	str.w	r3, [r4, r0, lsl #2]
	__asm__ volatile (
 800f4b4:	4674      	mov	r4, lr
			y[(17-i)*NBANDS] =  yHi;
 800f4b6:	f8ca 2880 	str.w	r2, [sl, #2176]	; 0x880
 800f4ba:	ea83 74e3 	eor.w	r4, r3, r3, asr #31
 800f4be:	eba4 74e3 	sub.w	r4, r4, r3, asr #31
 800f4c2:	4673      	mov	r3, lr
 800f4c4:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 800f4c8:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
		for (i = 0; i < 9; i++) {
 800f4cc:	f1aa 0a80 	sub.w	sl, sl, #128	; 0x80
			mOut |= FASTABS(yHi);
 800f4d0:	431c      	orrs	r4, r3
		for (i = 0; i < 9; i++) {
 800f4d2:	45d1      	cmp	r9, sl
			mOut |= FASTABS(yHi);
 800f4d4:	ea45 0504 	orr.w	r5, r5, r4
		for (i = 0; i < 9; i++) {
 800f4d8:	f101 0108 	add.w	r1, r1, #8
 800f4dc:	f100 0020 	add.w	r0, r0, #32
 800f4e0:	d1c8      	bne.n	800f474 <xmp3_IMDCT+0x5f0>
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f4e2:	9b03      	ldr	r3, [sp, #12]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f4e4:	9e00      	ldr	r6, [sp, #0]
 800f4e6:	9905      	ldr	r1, [sp, #20]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f4e8:	3324      	adds	r3, #36	; 0x24
 800f4ea:	9303      	str	r3, [sp, #12]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f4ec:	9b01      	ldr	r3, [sp, #4]
 800f4ee:	461a      	mov	r2, r3
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f4f0:	3301      	adds	r3, #1
 800f4f2:	9301      	str	r3, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f4f4:	4630      	mov	r0, r6
 800f4f6:	ee17 3a90 	vmov	r3, s15
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f4fa:	3604      	adds	r6, #4
 800f4fc:	9600      	str	r6, [sp, #0]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f4fe:	f7ff fb61 	bl	800ebc4 <FreqInvertRescale>
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 800f502:	9b02      	ldr	r3, [sp, #8]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f504:	9c10      	ldr	r4, [sp, #64]	; 0x40
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800f506:	4328      	orrs	r0, r5
		mOut |= IMDCT36(xCurr, xPrev, &(y[0][i]), currWinIdx, prevWinIdx, i, bc->gbIn);
 800f508:	4303      	orrs	r3, r0
 800f50a:	9302      	str	r3, [sp, #8]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800f50c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f50e:	42b3      	cmp	r3, r6
 800f510:	f000 80a0 	beq.w	800f654 <xmp3_IMDCT+0x7d0>
		if (sis->mixedBlock && i < bc->currWinSwitch) 
 800f514:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f518:	e64f      	b.n	800f1ba <xmp3_IMDCT+0x336>
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f51a:	3307      	adds	r3, #7
 800f51c:	fb80 2003 	smull	r2, r0, r0, r3
 800f520:	17db      	asrs	r3, r3, #31
 800f522:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800f526:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
 800f52a:	0052      	lsls	r2, r2, #1
 800f52c:	3208      	adds	r2, #8
 800f52e:	920e      	str	r2, [sp, #56]	; 0x38
		bc.nBlocksLong = MIN((hi->nonZeroBound[ch] + 7) / 18 + 1, 32);	
 800f530:	1c5a      	adds	r2, r3, #1
 800f532:	9204      	str	r2, [sp, #16]
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800f534:	e9dd 121a 	ldrd	r1, r2, [sp, #104]	; 0x68
 800f538:	440a      	add	r2, r1
 800f53a:	0211      	lsls	r1, r2, #8
 800f53c:	910f      	str	r1, [sp, #60]	; 0x3c
 800f53e:	990c      	ldr	r1, [sp, #48]	; 0x30
	for (k = nBfly; k > 0; k--) {
 800f540:	2b00      	cmp	r3, #0
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800f542:	eb01 2102 	add.w	r1, r1, r2, lsl #8
 800f546:	9118      	str	r1, [sp, #96]	; 0x60
	for (k = nBfly; k > 0; k--) {
 800f548:	f73f acee 	bgt.w	800ef28 <xmp3_IMDCT+0xa4>
	bc.currWinSwitch = (si->sis[gr][ch].mixedBlock ? blockCutoff : 0);	/* where WINDOW switches (not nec. transform) */
 800f54c:	e9dd 131d 	ldrd	r1, r3, [sp, #116]	; 0x74
 800f550:	440b      	add	r3, r1
 800f552:	011b      	lsls	r3, r3, #4
 800f554:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f558:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800f55a:	4413      	add	r3, r2
 800f55c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f55e:	e5d0      	b.n	800f102 <xmp3_IMDCT+0x27e>
 800f560:	6ed9eba1 	.word	0x6ed9eba1
 800f564:	620dbe8b 	.word	0x620dbe8b
 800f568:	163a1a7e 	.word	0x163a1a7e
 800f56c:	7e0e2e32 	.word	0x7e0e2e32
 800f570:	08027ec4 	.word	0x08027ec4
 800f574:	0b27eb5c 	.word	0x0b27eb5c
 800f578:	08027eb8 	.word	0x08027eb8
		WinPrevious(xPrev, xPrevWin, btPrev);
 800f57c:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f580:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f582:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 800f650 <xmp3_IMDCT+0x7cc>
 800f586:	f10d 08c8 	add.w	r8, sp, #200	; 0xc8
 800f58a:	4641      	mov	r1, r8
 800f58c:	4648      	mov	r0, r9
 800f58e:	f7ff fbe7 	bl	800ed60 <WinPrevious>
		wp = imdctWin[btCurr];
 800f592:	9b06      	ldr	r3, [sp, #24]
 800f594:	492c      	ldr	r1, [pc, #176]	; (800f648 <xmp3_IMDCT+0x7c4>)
 800f596:	9800      	ldr	r0, [sp, #0]
 800f598:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f59a:	eb03 0cc3 	add.w	ip, r3, r3, lsl #3
 800f59e:	4b2b      	ldr	r3, [pc, #172]	; (800f64c <xmp3_IMDCT+0x7c8>)
	mOut = 0;
 800f5a0:	2500      	movs	r5, #0
		wp = imdctWin[btCurr];
 800f5a2:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
		for (i = 0; i < 9; i++) {
 800f5a6:	ae28      	add	r6, sp, #160	; 0xa0
		wp = imdctWin[btCurr];
 800f5a8:	2244      	movs	r2, #68	; 0x44
		for (i = 0; i < 9; i++) {
 800f5aa:	462b      	mov	r3, r5
 800f5ac:	46ae      	mov	lr, r5
 800f5ae:	e004      	b.n	800f5ba <xmp3_IMDCT+0x736>
			c = *cp--;	xo = *(xp + 9);		xe = *xp--;
 800f5b0:	6a37      	ldr	r7, [r6, #32]
 800f5b2:	f85b 1d04 	ldr.w	r1, [fp, #-4]!
 800f5b6:	f856 4d04 	ldr.w	r4, [r6, #-4]!
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f5ba:	fb81 a707 	smull	sl, r7, r1, r7
			(*xPrev++) = xe + xo;	/* symmetry - xPrev[i] = xPrev[17-i] for long blocks */
 800f5be:	eb07 01a4 	add.w	r1, r7, r4, asr #2
 800f5c2:	f849 1b04 	str.w	r1, [r9], #4
			d = xe - xo;
 800f5c6:	ebc7 07a4 	rsb	r7, r7, r4, asr #2
 800f5ca:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 800f5ce:	fb87 1404 	smull	r1, r4, r7, r4
			yLo = (xPrevWin[i]    + MULSHIFT32(d, wp[i])) << 2;
 800f5d2:	f858 1023 	ldr.w	r1, [r8, r3, lsl #2]
 800f5d6:	440c      	add	r4, r1
 800f5d8:	00a4      	lsls	r4, r4, #2
 800f5da:	f85c 1002 	ldr.w	r1, [ip, r2]
 800f5de:	fb87 a101 	smull	sl, r1, r7, r1
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800f5e2:	f858 7002 	ldr.w	r7, [r8, r2]
			y[(i)*NBANDS]    = yLo;
 800f5e6:	ea4f 1ac3 	mov.w	sl, r3, lsl #7
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800f5ea:	4439      	add	r1, r7
			y[(i)*NBANDS]    = yLo;
 800f5ec:	9f00      	ldr	r7, [sp, #0]
			yHi = (xPrevWin[17-i] + MULSHIFT32(d, wp[17-i])) << 2;
 800f5ee:	0089      	lsls	r1, r1, #2
			y[(i)*NBANDS]    = yLo;
 800f5f0:	f847 400a 	str.w	r4, [r7, sl]
	__asm__ volatile (
 800f5f4:	4677      	mov	r7, lr
			y[(17-i)*NBANDS] = yHi;
 800f5f6:	f8c0 1880 	str.w	r1, [r0, #2176]	; 0x880
 800f5fa:	ea84 77e4 	eor.w	r7, r4, r4, asr #31
 800f5fe:	eba7 77e4 	sub.w	r7, r7, r4, asr #31
 800f602:	4674      	mov	r4, lr
 800f604:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
 800f608:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
		for (i = 0; i < 9; i++) {
 800f60c:	3a04      	subs	r2, #4
			mOut |= FASTABS(yHi);
 800f60e:	4327      	orrs	r7, r4
		for (i = 0; i < 9; i++) {
 800f610:	2a20      	cmp	r2, #32
			mOut |= FASTABS(yHi);
 800f612:	ea45 0507 	orr.w	r5, r5, r7
		for (i = 0; i < 9; i++) {
 800f616:	f103 0301 	add.w	r3, r3, #1
 800f61a:	f1a0 0080 	sub.w	r0, r0, #128	; 0x80
 800f61e:	d1c7      	bne.n	800f5b0 <xmp3_IMDCT+0x72c>
 800f620:	e75f      	b.n	800f4e2 <xmp3_IMDCT+0x65e>
 800f622:	ae29      	add	r6, sp, #164	; 0xa4
	acc1 = acc2 = 0;
 800f624:	4602      	mov	r2, r0
			acc1 = (*xCurr--) - acc1;
 800f626:	688b      	ldr	r3, [r1, #8]
 800f628:	1a9a      	subs	r2, r3, r2
			acc1 = (*xCurr--) - acc1;
 800f62a:	684b      	ldr	r3, [r1, #4]
		for (i = 8; i >= 0; i--) {	
 800f62c:	3908      	subs	r1, #8
			acc2 = acc1 - acc2;
 800f62e:	1a10      	subs	r0, r2, r0
		for (i = 8; i >= 0; i--) {	
 800f630:	428c      	cmp	r4, r1
			acc1 = (*xCurr--) - acc1;
 800f632:	eba3 0202 	sub.w	r2, r3, r2
			xBuf[i+9] = acc2;	/* odd */
 800f636:	6230      	str	r0, [r6, #32]
			xBuf[i+0] = acc1;	/* even */
 800f638:	f846 2d04 	str.w	r2, [r6, #-4]!
		for (i = 8; i >= 0; i--) {	
 800f63c:	d1f3      	bne.n	800f626 <xmp3_IMDCT+0x7a2>
 800f63e:	e5fc      	b.n	800f23a <xmp3_IMDCT+0x3b6>
			 prevWinIdx = 0;
 800f640:	2300      	movs	r3, #0
 800f642:	9d06      	ldr	r5, [sp, #24]
 800f644:	9312      	str	r3, [sp, #72]	; 0x48
 800f646:	e5d5      	b.n	800f1f4 <xmp3_IMDCT+0x370>
 800f648:	0b27eb5c 	.word	0x0b27eb5c
 800f64c:	080285f4 	.word	0x080285f4
 800f650:	08027eb8 	.word	0x08027eb8
		xCurr += 18;
 800f654:	9b04      	ldr	r3, [sp, #16]
 800f656:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f658:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800f65c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800f660:	9218      	str	r2, [sp, #96]	; 0x60
		xPrev += 9;
 800f662:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f668:	9317      	str	r3, [sp, #92]	; 0x5c
	for (   ; i < bc->nBlocksTotal; i++) {
 800f66a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f66c:	9a04      	ldr	r2, [sp, #16]
 800f66e:	4291      	cmp	r1, r2
 800f670:	f340 82a4 	ble.w	800fbbc <xmp3_IMDCT+0xd38>
 800f674:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800f676:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800f678:	980c      	ldr	r0, [sp, #48]	; 0x30
 800f67a:	9211      	str	r2, [sp, #68]	; 0x44
 800f67c:	f103 0a04 	add.w	sl, r3, #4
 800f680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f684:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800f688:	9301      	str	r3, [sp, #4]
 800f68a:	f504 73c0 	add.w	r3, r4, #384	; 0x180
 800f68e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f692:	2806      	cmp	r0, #6
 800f694:	9917      	ldr	r1, [sp, #92]	; 0x5c
 800f696:	930f      	str	r3, [sp, #60]	; 0x3c
		es = 7 - gb;
 800f698:	f1c0 0307 	rsb	r3, r0, #7
 800f69c:	9310      	str	r3, [sp, #64]	; 0x40
 800f69e:	bfc8      	it	gt
 800f6a0:	2300      	movgt	r3, #0
 800f6a2:	ee06 3a10 	vmov	s12, r3
 800f6a6:	3124      	adds	r1, #36	; 0x24
 800f6a8:	ab32      	add	r3, sp, #200	; 0xc8
 800f6aa:	9103      	str	r1, [sp, #12]
 800f6ac:	9305      	str	r3, [sp, #20]
 800f6ae:	9b01      	ldr	r3, [sp, #4]
			 prevWinIdx = 0;
 800f6b0:	9a07      	ldr	r2, [sp, #28]
 800f6b2:	9c04      	ldr	r4, [sp, #16]
 800f6b4:	f5a3 7bc0 	sub.w	fp, r3, #384	; 0x180
 800f6b8:	9b03      	ldr	r3, [sp, #12]
 800f6ba:	f1a3 0124 	sub.w	r1, r3, #36	; 0x24
 800f6be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6c0:	42a2      	cmp	r2, r4
 800f6c2:	bfc8      	it	gt
 800f6c4:	2300      	movgt	r3, #0
 800f6c6:	ee07 3a10 	vmov	s14, r3
	if (gb < 7) {
 800f6ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f6cc:	2b06      	cmp	r3, #6
 800f6ce:	ee07 1a90 	vmov	s15, r1
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800f6d2:	ee06 ba90 	vmov	s13, fp
	if (gb < 7) {
 800f6d6:	f1aa 0004 	sub.w	r0, sl, #4
 800f6da:	dc13      	bgt.n	800f704 <xmp3_IMDCT+0x880>
		for (i = 0; i < 18; i+=2) {
 800f6dc:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800f6de:	2200      	movs	r2, #0
			xCurr[i+0] >>= es;
 800f6e0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 800f6e4:	4123      	asrs	r3, r4
 800f6e6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			xCurr[i+1] >>= es;
 800f6ea:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 800f6ee:	4123      	asrs	r3, r4
 800f6f0:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
			*xPrev++ >>= es;
 800f6f4:	f851 3b04 	ldr.w	r3, [r1], #4
		for (i = 0; i < 18; i+=2) {
 800f6f8:	3202      	adds	r2, #2
			*xPrev++ >>= es;
 800f6fa:	4123      	asrs	r3, r4
		for (i = 0; i < 18; i+=2) {
 800f6fc:	2a12      	cmp	r2, #18
			*xPrev++ >>= es;
 800f6fe:	f841 3c04 	str.w	r3, [r1, #-4]
		for (i = 0; i < 18; i+=2) {
 800f702:	d1ed      	bne.n	800f6e0 <xmp3_IMDCT+0x85c>
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800f704:	f8da 2038 	ldr.w	r2, [sl, #56]	; 0x38
 800f708:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800f70c:	f8da 3020 	ldr.w	r3, [sl, #32]
 800f710:	f8da 4014 	ldr.w	r4, [sl, #20]
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f714:	f8da 5008 	ldr.w	r5, [sl, #8]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f718:	4eb9      	ldr	r6, [pc, #740]	; (800fa00 <xmp3_IMDCT+0xb7c>)
	x4 -= x5;
 800f71a:	1a87      	subs	r7, r0, r2
	x3 -= x4;
 800f71c:	1bd9      	subs	r1, r3, r7
	x2 -= x3;
 800f71e:	1a64      	subs	r4, r4, r1
	x1 -= x2;
 800f720:	1b2b      	subs	r3, r5, r4
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f722:	f85a 5c04 	ldr.w	r5, [sl, #-4]
	x3 -= x5;
 800f726:	1a89      	subs	r1, r1, r2
	x0 -= x1;
 800f728:	1ae8      	subs	r0, r5, r3
	x1 -= x3;
 800f72a:	1a5b      	subs	r3, r3, r1
	x0 >>= 1;
 800f72c:	1040      	asrs	r0, r0, #1
	x1 >>= 1;
 800f72e:	105b      	asrs	r3, r3, #1
 800f730:	fb86 5404 	smull	r5, r4, r6, r4
	a1 = x0 + (x4 >> 1);
 800f734:	eb00 0667 	add.w	r6, r0, r7, asr #1
 800f738:	4db1      	ldr	r5, [pc, #708]	; (800fa00 <xmp3_IMDCT+0xb7c>)
	a2 = x0 - x4;
 800f73a:	1bc0      	subs	r0, r0, r7
	x0 = a1 + a0;
 800f73c:	eb06 0744 	add.w	r7, r6, r4, lsl #1
	x4 = a1 - a0;
 800f740:	eba6 0644 	sub.w	r6, r6, r4, lsl #1
 800f744:	fb85 4101 	smull	r4, r1, r5, r1
	a1 = x1 + (x5 >> 1);
 800f748:	eb03 0462 	add.w	r4, r3, r2, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f74c:	eb04 0541 	add.w	r5, r4, r1, lsl #1
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800f750:	ea4f 0e41 	mov.w	lr, r1, lsl #1
 800f754:	49ab      	ldr	r1, [pc, #684]	; (800fa04 <xmp3_IMDCT+0xb80>)
 800f756:	fb81 c505 	smull	ip, r5, r1, r5
 800f75a:	49ab      	ldr	r1, [pc, #684]	; (800fa08 <xmp3_IMDCT+0xb84>)
	a2 = x1 - x5;
 800f75c:	1a9a      	subs	r2, r3, r2
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f75e:	00ad      	lsls	r5, r5, #2
 800f760:	fb81 3202 	smull	r3, r2, r1, r2
 800f764:	49a9      	ldr	r1, [pc, #676]	; (800fa0c <xmp3_IMDCT+0xb88>)
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800f766:	eba4 040e 	sub.w	r4, r4, lr
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800f76a:	0092      	lsls	r2, r2, #2
 800f76c:	fb81 3404 	smull	r3, r4, r1, r4
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800f770:	f8da 3030 	ldr.w	r3, [sl, #48]	; 0x30
	x4 -= x5;
 800f774:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
 800f778:	eba3 0c01 	sub.w	ip, r3, r1
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800f77c:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 800f780:	f8da 1018 	ldr.w	r1, [sl, #24]
	x3 -= x4;
 800f784:	eba3 030c 	sub.w	r3, r3, ip
	x2 -= x3;
 800f788:	eba1 0803 	sub.w	r8, r1, r3
	x3 -= x5;
 800f78c:	f8da 103c 	ldr.w	r1, [sl, #60]	; 0x3c
 800f790:	eba3 0e01 	sub.w	lr, r3, r1
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f794:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f798:	f8da 1000 	ldr.w	r1, [sl]
	*out = x0 + x1;	out++;
 800f79c:	eb07 0905 	add.w	r9, r7, r5
	*out = x0 - x1;
 800f7a0:	1b7d      	subs	r5, r7, r5
	x1 -= x2;
 800f7a2:	eba3 0308 	sub.w	r3, r3, r8
	*out = x0 - x1;
 800f7a6:	9525      	str	r5, [sp, #148]	; 0x94
	*out = x2 + x3;	out++;
 800f7a8:	1885      	adds	r5, r0, r2
	*out = x2 - x3;	out++;
 800f7aa:	1a82      	subs	r2, r0, r2
	x0 -= x1;
 800f7ac:	1ac9      	subs	r1, r1, r3
	*out = x2 - x3;	out++;
 800f7ae:	9224      	str	r2, [sp, #144]	; 0x90
	x1 -= x3;
 800f7b0:	eba3 030e 	sub.w	r3, r3, lr
	*out = x4 + x5;	out++;
 800f7b4:	eb06 0284 	add.w	r2, r6, r4, lsl #2
	*out = x4 - x5;	out++;
 800f7b8:	eba6 0484 	sub.w	r4, r6, r4, lsl #2
	x0 >>= 1;
 800f7bc:	1049      	asrs	r1, r1, #1
	x1 >>= 1;
 800f7be:	105b      	asrs	r3, r3, #1
	*out = x0 + x1;	out++;
 800f7c0:	f8cd 9080 	str.w	r9, [sp, #128]	; 0x80
	*out = x2 + x3;	out++;
 800f7c4:	9521      	str	r5, [sp, #132]	; 0x84
	*out = x4 - x5;	out++;
 800f7c6:	e9cd 2422 	strd	r2, r4, [sp, #136]	; 0x88
 800f7ca:	488d      	ldr	r0, [pc, #564]	; (800fa00 <xmp3_IMDCT+0xb7c>)
 800f7cc:	fb80 2808 	smull	r2, r8, r0, r8
	a1 = x0 + (x4 >> 1);
 800f7d0:	eb01 026c 	add.w	r2, r1, ip, asr #1
	a2 = x0 - x4;
 800f7d4:	eba1 010c 	sub.w	r1, r1, ip
	x0 = a1 + a0;
 800f7d8:	eb02 0648 	add.w	r6, r2, r8, lsl #1
	a2 = x0 - x4;
 800f7dc:	9100      	str	r1, [sp, #0]
	x4 = a1 - a0;
 800f7de:	eba2 0848 	sub.w	r8, r2, r8, lsl #1
 800f7e2:	fb80 2e0e 	smull	r2, lr, r0, lr
	a1 = x1 + (x5 >> 1);
 800f7e6:	f8da 503c 	ldr.w	r5, [sl, #60]	; 0x3c
 800f7ea:	4c86      	ldr	r4, [pc, #536]	; (800fa04 <xmp3_IMDCT+0xb80>)
 800f7ec:	eb03 0565 	add.w	r5, r3, r5, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f7f0:	eb05 074e 	add.w	r7, r5, lr, lsl #1
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800f7f4:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 800f7f8:	fb84 2707 	smull	r2, r7, r4, r7
	a2 = x1 - x5;
 800f7fc:	f8da 203c 	ldr.w	r2, [sl, #60]	; 0x3c
 800f800:	4c81      	ldr	r4, [pc, #516]	; (800fa08 <xmp3_IMDCT+0xb84>)
 800f802:	1a9b      	subs	r3, r3, r2
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f804:	00bf      	lsls	r7, r7, #2
 800f806:	fb84 2303 	smull	r2, r3, r4, r3
 800f80a:	4a80      	ldr	r2, [pc, #512]	; (800fa0c <xmp3_IMDCT+0xb88>)
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800f80c:	eba5 050e 	sub.w	r5, r5, lr
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800f810:	0098      	lsls	r0, r3, #2
 800f812:	fb82 3505 	smull	r3, r5, r2, r5
	x4 = *x;	x+=3;	x5 = *x;	x+=3;
 800f816:	f8da e040 	ldr.w	lr, [sl, #64]	; 0x40
 800f81a:	f8da 3034 	ldr.w	r3, [sl, #52]	; 0x34
	x2 = *x;	x+=3;	x3 = *x;	x+=3;
 800f81e:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
 800f822:	f8da 401c 	ldr.w	r4, [sl, #28]
	x4 -= x5;
 800f826:	eba3 030e 	sub.w	r3, r3, lr
	x3 -= x4;
 800f82a:	1ad2      	subs	r2, r2, r3
	*out = x0 + x1;	out++;
 800f82c:	19f1      	adds	r1, r6, r7
	x2 -= x3;
 800f82e:	1aa4      	subs	r4, r4, r2
	x3 -= x5;
 800f830:	eba2 090e 	sub.w	r9, r2, lr
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f834:	f8da 2010 	ldr.w	r2, [sl, #16]
	*out = x0 + x1;	out++;
 800f838:	9106      	str	r1, [sp, #24]
 800f83a:	9126      	str	r1, [sp, #152]	; 0x98
	*out = x2 + x3;	out++;
 800f83c:	9900      	ldr	r1, [sp, #0]
	x1 -= x2;
 800f83e:	1b12      	subs	r2, r2, r4
	*out = x0 - x1;
 800f840:	1bf6      	subs	r6, r6, r7
 800f842:	46a4      	mov	ip, r4
	x0 = *x;	x+=3;	x1 = *x;	x+=3;
 800f844:	f8da 4004 	ldr.w	r4, [sl, #4]
	*out = x0 - x1;
 800f848:	962b      	str	r6, [sp, #172]	; 0xac
	*out = x2 + x3;	out++;
 800f84a:	180e      	adds	r6, r1, r0
	x0 -= x1;
 800f84c:	1aa4      	subs	r4, r4, r2
	*out = x2 - x3;	out++;
 800f84e:	1a09      	subs	r1, r1, r0
	x1 -= x3;
 800f850:	eba2 0209 	sub.w	r2, r2, r9
	*out = x2 + x3;	out++;
 800f854:	9608      	str	r6, [sp, #32]
 800f856:	9627      	str	r6, [sp, #156]	; 0x9c
	*out = x4 + x5;	out++;
 800f858:	eb08 0685 	add.w	r6, r8, r5, lsl #2
	*out = x4 - x5;	out++;
 800f85c:	eba8 0585 	sub.w	r5, r8, r5, lsl #2
	x0 >>= 1;
 800f860:	1064      	asrs	r4, r4, #1
	x1 >>= 1;
 800f862:	1052      	asrs	r2, r2, #1
	*out = x2 - x3;	out++;
 800f864:	912a      	str	r1, [sp, #168]	; 0xa8
	*out = x4 + x5;	out++;
 800f866:	9609      	str	r6, [sp, #36]	; 0x24
 800f868:	e9cd 6528 	strd	r6, r5, [sp, #160]	; 0xa0
 800f86c:	4864      	ldr	r0, [pc, #400]	; (800fa00 <xmp3_IMDCT+0xb7c>)
 800f86e:	fb80 1c0c 	smull	r1, ip, r0, ip
	a1 = x0 + (x4 >> 1);
 800f872:	eb04 0163 	add.w	r1, r4, r3, asr #1
	x0 = a1 + a0;
 800f876:	eb01 054c 	add.w	r5, r1, ip, lsl #1
	a2 = x0 - x4;
 800f87a:	1ae4      	subs	r4, r4, r3
	x4 = a1 - a0;
 800f87c:	eba1 064c 	sub.w	r6, r1, ip, lsl #1
 800f880:	fb80 3909 	smull	r3, r9, r0, r9
	a1 = x1 + (x5 >> 1);
 800f884:	eb02 016e 	add.w	r1, r2, lr, asr #1
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f888:	eb01 0049 	add.w	r0, r1, r9, lsl #1
 800f88c:	4f5d      	ldr	r7, [pc, #372]	; (800fa04 <xmp3_IMDCT+0xb80>)
	a0 = MULSHIFT32(c3_0, x3) << 1;
 800f88e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800f892:	fb87 3000 	smull	r3, r0, r7, r0
 800f896:	4f5c      	ldr	r7, [pc, #368]	; (800fa08 <xmp3_IMDCT+0xb84>)
	a2 = x1 - x5;
 800f898:	eba2 020e 	sub.w	r2, r2, lr
	x1 = MULSHIFT32(c6[0], a1 + a0) << 2;			
 800f89c:	0080      	lsls	r0, r0, #2
 800f89e:	fb87 3202 	smull	r3, r2, r7, r2
	x3 = MULSHIFT32(c6[1], a2) << 2;
 800f8a2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
	x5 = MULSHIFT32(c6[2], a1 - a0) << 2;
 800f8a6:	eba1 0909 	sub.w	r9, r1, r9
 800f8aa:	4a58      	ldr	r2, [pc, #352]	; (800fa0c <xmp3_IMDCT+0xb88>)
 800f8ac:	fb82 3909 	smull	r3, r9, r2, r9
	*out = x2 + x3;	out++;
 800f8b0:	eb04 010e 	add.w	r1, r4, lr
	*out = x2 - x3;	out++;
 800f8b4:	eba4 040e 	sub.w	r4, r4, lr
	*out = x2 + x3;	out++;
 800f8b8:	912d      	str	r1, [sp, #180]	; 0xb4
	*out = x2 - x3;	out++;
 800f8ba:	9430      	str	r4, [sp, #192]	; 0xc0
	*out = x4 + x5;	out++;
 800f8bc:	eb06 0389 	add.w	r3, r6, r9, lsl #2
	WinPrevious(xPrev, xPrevWin, btPrev);
 800f8c0:	9c05      	ldr	r4, [sp, #20]
	*out = x4 - x5;	out++;
 800f8c2:	eba6 0189 	sub.w	r1, r6, r9, lsl #2
 800f8c6:	e9cd 312e 	strd	r3, r1, [sp, #184]	; 0xb8
	*out = x0 + x1;	out++;
 800f8ca:	1829      	adds	r1, r5, r0
	*out = x0 - x1;
 800f8cc:	1a2b      	subs	r3, r5, r0
	WinPrevious(xPrev, xPrevWin, btPrev);
 800f8ce:	ee17 2a10 	vmov	r2, s14
 800f8d2:	ee17 0a90 	vmov	r0, s15
	*out = x0 + x1;	out++;
 800f8d6:	910d      	str	r1, [sp, #52]	; 0x34
	WinPrevious(xPrev, xPrevWin, btPrev);
 800f8d8:	4621      	mov	r1, r4
	*out = x0 - x1;
 800f8da:	9331      	str	r3, [sp, #196]	; 0xc4
	WinPrevious(xPrev, xPrevWin, btPrev);
 800f8dc:	f7ff fa40 	bl	800ed60 <WinPrevious>
	mOut = 0;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	494b      	ldr	r1, [pc, #300]	; (800fa10 <xmp3_IMDCT+0xb8c>)
 800f8e4:	9300      	str	r3, [sp, #0]
 800f8e6:	4622      	mov	r2, r4
 800f8e8:	a822      	add	r0, sp, #136	; 0x88
 800f8ea:	ac20      	add	r4, sp, #128	; 0x80
 800f8ec:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
		yLo = (xPrevWin[ 0+i] << 2);
 800f8f0:	f852 3b04 	ldr.w	r3, [r2], #4
	__asm__ volatile (
 800f8f4:	f04f 0a00 	mov.w	sl, #0
 800f8f8:	009b      	lsls	r3, r3, #2
 800f8fa:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 800f8fe:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 0+i)*NBANDS] = yLo;
 800f902:	f8cb 3000 	str.w	r3, [fp]
		yLo = (xPrevWin[ 3+i] << 2);
 800f906:	6893      	ldr	r3, [r2, #8]
 800f908:	2700      	movs	r7, #0
 800f90a:	009b      	lsls	r3, r3, #2
 800f90c:	ea83 77e3 	eor.w	r7, r3, r3, asr #31
 800f910:	eba7 77e3 	sub.w	r7, r7, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 3+i)*NBANDS] = yLo;
 800f914:	f8cb 3180 	str.w	r3, [fp, #384]	; 0x180
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f918:	68e3      	ldr	r3, [r4, #12]
 800f91a:	461d      	mov	r5, r3
		yLo = (xPrevWin[ 6+i] << 2) + (MULSHIFT32(wp[0+i], xBuf[3+i]));	
 800f91c:	f851 3b04 	ldr.w	r3, [r1], #4
 800f920:	fb83 6505 	smull	r6, r5, r3, r5
 800f924:	6953      	ldr	r3, [r2, #20]
 800f926:	eb05 0383 	add.w	r3, r5, r3, lsl #2
	__asm__ volatile (
 800f92a:	2500      	movs	r5, #0
 800f92c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
 800f930:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
		mOut |= FASTABS(yLo);	y[( 6+i)*NBANDS] = yLo;
 800f934:	f8cb 3300 	str.w	r3, [fp, #768]	; 0x300
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f938:	68c3      	ldr	r3, [r0, #12]
 800f93a:	469e      	mov	lr, r3
 800f93c:	688b      	ldr	r3, [r1, #8]
 800f93e:	fb83 8e0e 	smull	r8, lr, r3, lr
		yLo = (xPrevWin[ 9+i] << 2) + (MULSHIFT32(wp[3+i], xBuf[5-i]));	
 800f942:	6a13      	ldr	r3, [r2, #32]
 800f944:	eb0e 0e83 	add.w	lr, lr, r3, lsl #2
	__asm__ volatile (
 800f948:	2300      	movs	r3, #0
 800f94a:	ea8e 73ee 	eor.w	r3, lr, lr, asr #31
 800f94e:	eba3 73ee 	sub.w	r3, r3, lr, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f952:	6806      	ldr	r6, [r0, #0]
		mOut |= FASTABS(yLo);	y[( 9+i)*NBANDS] = yLo;
 800f954:	f8cb e480 	str.w	lr, [fp, #1152]	; 0x480
		yLo = (xPrevWin[12+i] << 2) + (MULSHIFT32(wp[6+i], xBuf[2-i]) + MULSHIFT32(wp[0+i], xBuf[(6+3)+i]));	
 800f958:	3804      	subs	r0, #4
 800f95a:	46b6      	mov	lr, r6
 800f95c:	694e      	ldr	r6, [r1, #20]
 800f95e:	fb86 8e0e 	smull	r8, lr, r6, lr
 800f962:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f964:	46b0      	mov	r8, r6
 800f966:	f851 6c04 	ldr.w	r6, [r1, #-4]
 800f96a:	fb86 9808 	smull	r9, r8, r6, r8
 800f96e:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800f970:	44c6      	add	lr, r8
 800f972:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
	__asm__ volatile (
 800f976:	f04f 0e00 	mov.w	lr, #0
 800f97a:	ea86 7ee6 	eor.w	lr, r6, r6, asr #31
 800f97e:	ebae 7ee6 	sub.w	lr, lr, r6, asr #31
		mOut |= FASTABS(yLo);	y[(12+i)*NBANDS] = yLo;
 800f982:	f8cb 6600 	str.w	r6, [fp, #1536]	; 0x600
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 800f986:	6826      	ldr	r6, [r4, #0]
 800f988:	3404      	adds	r4, #4
 800f98a:	46b4      	mov	ip, r6
 800f98c:	6a0e      	ldr	r6, [r1, #32]
 800f98e:	fb86 8c0c 	smull	r8, ip, r6, ip
 800f992:	6a86      	ldr	r6, [r0, #40]	; 0x28
 800f994:	46b0      	mov	r8, r6
 800f996:	688e      	ldr	r6, [r1, #8]
 800f998:	fb86 9808 	smull	r9, r8, r6, r8
		yLo = (xPrevWin[15+i] << 2) + (MULSHIFT32(wp[9+i], xBuf[0+i]) + MULSHIFT32(wp[3+i], xBuf[(6+5)-i]));	
 800f99c:	6b96      	ldr	r6, [r2, #56]	; 0x38
 800f99e:	44c4      	add	ip, r8
 800f9a0:	eb0c 0686 	add.w	r6, ip, r6, lsl #2
	__asm__ volatile (
 800f9a4:	f04f 0c00 	mov.w	ip, #0
 800f9a8:	ea86 7ce6 	eor.w	ip, r6, r6, asr #31
 800f9ac:	ebac 7ce6 	sub.w	ip, ip, r6, asr #31
		mOut |= FASTABS(yLo);	y[(15+i)*NBANDS] = yLo;
 800f9b0:	ea4a 0707 	orr.w	r7, sl, r7
 800f9b4:	433d      	orrs	r5, r7
 800f9b6:	432b      	orrs	r3, r5
 800f9b8:	ea43 0e0e 	orr.w	lr, r3, lr
 800f9bc:	9b00      	ldr	r3, [sp, #0]
 800f9be:	f8cb 6780 	str.w	r6, [fp, #1920]	; 0x780
 800f9c2:	ea4e 0c0c 	orr.w	ip, lr, ip
 800f9c6:	ea43 030c 	orr.w	r3, r3, ip
 800f9ca:	9300      	str	r3, [sp, #0]
	for (i = 0; i < 3; i++) {
 800f9cc:	9b01      	ldr	r3, [sp, #4]
 800f9ce:	f10b 0b80 	add.w	fp, fp, #128	; 0x80
 800f9d2:	455b      	cmp	r3, fp
 800f9d4:	d18c      	bne.n	800f8f0 <xmp3_IMDCT+0xa6c>
		*xPrev++ = xBuf[i] >> 2;
 800f9d6:	9b06      	ldr	r3, [sp, #24]
 800f9d8:	9803      	ldr	r0, [sp, #12]
 800f9da:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 800f9de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f9e0:	109b      	asrs	r3, r3, #2
 800f9e2:	f840 3c24 	str.w	r3, [r0, #-36]
 800f9e6:	9b08      	ldr	r3, [sp, #32]
 800f9e8:	109b      	asrs	r3, r3, #2
 800f9ea:	f840 3c20 	str.w	r3, [r0, #-32]
 800f9ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f9f0:	109b      	asrs	r3, r3, #2
 800f9f2:	f840 3c1c 	str.w	r3, [r0, #-28]
	for (i = 6; i < 9; i++)
 800f9f6:	a92c      	add	r1, sp, #176	; 0xb0
 800f9f8:	f1a0 0318 	sub.w	r3, r0, #24
 800f9fc:	e00c      	b.n	800fa18 <xmp3_IMDCT+0xb94>
 800f9fe:	bf00      	nop
 800fa00:	6ed9eba1 	.word	0x6ed9eba1
 800fa04:	7ba3751d 	.word	0x7ba3751d
 800fa08:	5a82799a 	.word	0x5a82799a
 800fa0c:	2120fb83 	.word	0x2120fb83
 800fa10:	08028714 	.word	0x08028714
		*xPrev++ = xBuf[i] >> 2;
 800fa14:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800fa18:	1092      	asrs	r2, r2, #2
 800fa1a:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 12; i < 18; i++)
 800fa1e:	4283      	cmp	r3, r0
 800fa20:	d1f8      	bne.n	800fa14 <xmp3_IMDCT+0xb90>
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa22:	3324      	adds	r3, #36	; 0x24
 800fa24:	9303      	str	r3, [sp, #12]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fa26:	9b04      	ldr	r3, [sp, #16]
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa28:	9c01      	ldr	r4, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fa2a:	461a      	mov	r2, r3
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa2c:	3301      	adds	r3, #1
 800fa2e:	3404      	adds	r4, #4
 800fa30:	9304      	str	r3, [sp, #16]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fa32:	ee17 1a90 	vmov	r1, s15
 800fa36:	ee16 3a10 	vmov	r3, s12
 800fa3a:	ee16 0a90 	vmov	r0, s13
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa3e:	9401      	str	r4, [sp, #4]
	mOut |= FreqInvertRescale(y, xPrev, blockIdx, es);
 800fa40:	f7ff f8c0 	bl	800ebc4 <FreqInvertRescale>
 800fa44:	9b00      	ldr	r3, [sp, #0]
 800fa46:	4303      	orrs	r3, r0
 800fa48:	4618      	mov	r0, r3
		mOut |= IMDCT12x3(xCurr, xPrev, &(y[0][i]), prevWinIdx, i, bc->gbIn);
 800fa4a:	9b02      	ldr	r3, [sp, #8]
 800fa4c:	4303      	orrs	r3, r0
 800fa4e:	9302      	str	r3, [sp, #8]
	for (   ; i < bc->nBlocksTotal; i++) {
 800fa50:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa52:	42a3      	cmp	r3, r4
 800fa54:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
 800fa58:	f47f ae29 	bne.w	800f6ae <xmp3_IMDCT+0x82a>
		xPrev += 9;
 800fa5c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800fa5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	for (   ; i < bc->nBlocksPrev; i++) {
 800fa60:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
		xPrev += 9;
 800fa62:	1a9b      	subs	r3, r3, r2
 800fa64:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800fa66:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 800fa6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fa6e:	9317      	str	r3, [sp, #92]	; 0x5c
	for (   ; i < bc->nBlocksPrev; i++) {
 800fa70:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fa72:	42b3      	cmp	r3, r6
 800fa74:	f340 80a9 	ble.w	800fbca <xmp3_IMDCT+0xd46>
 800fa78:	ab32      	add	r3, sp, #200	; 0xc8
 800fa7a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800fa7e:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 800fa82:	9305      	str	r3, [sp, #20]
 800fa84:	ad44      	add	r5, sp, #272	; 0x110
 800fa86:	2400      	movs	r4, #0
		WinPrevious(xPrev, xPrevWin, prevWinIdx);
 800fa88:	9f05      	ldr	r7, [sp, #20]
 800fa8a:	9b07      	ldr	r3, [sp, #28]
 800fa8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fa8e:	4639      	mov	r1, r7
 800fa90:	42b3      	cmp	r3, r6
 800fa92:	bfc8      	it	gt
 800fa94:	2200      	movgt	r2, #0
 800fa96:	4648      	mov	r0, r9
 800fa98:	f7ff f962 	bl	800ed60 <WinPrevious>
		for (j = 0; j < 9; j++) {
 800fa9c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fa9e:	4639      	mov	r1, r7
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800faa0:	f346 0a00 	sbfx	sl, r6, #0, #1
 800faa4:	f006 0e01 	and.w	lr, r6, #1
 800faa8:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 800faac:	f1a9 0c04 	sub.w	ip, r9, #4
		nonZero = 0;
 800fab0:	2000      	movs	r0, #0
			xp = xPrevWin[2*j+0] << 2;	/* << 2 temp for scaling */
 800fab2:	680b      	ldr	r3, [r1, #0]
 800fab4:	ea4f 0b83 	mov.w	fp, r3, lsl #2
			y[2*j+0][i] = xp;
 800fab8:	f8c7 b000 	str.w	fp, [r7]
 800fabc:	4622      	mov	r2, r4
 800fabe:	ea8b 72eb 	eor.w	r2, fp, fp, asr #31
 800fac2:	eba2 72eb 	sub.w	r2, r2, fp, asr #31
			xp = xPrevWin[2*j+1] << 2;
 800fac6:	684b      	ldr	r3, [r1, #4]
			xp = (xp ^ (fiBit >> 31)) + (i & 0x01);	
 800fac8:	ea8a 0383 	eor.w	r3, sl, r3, lsl #2
 800facc:	4473      	add	r3, lr
			nonZero |= xp;
 800face:	ea4b 0b03 	orr.w	fp, fp, r3
 800fad2:	ea40 000b 	orr.w	r0, r0, fp
			y[2*j+1][i] = xp;
 800fad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800fada:	46a3      	mov	fp, r4
 800fadc:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 800fae0:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
		for (j = 0; j < 9; j++) {
 800fae4:	3108      	adds	r1, #8
			mOut |= FASTABS(xp);
 800fae6:	ea42 020b 	orr.w	r2, r2, fp
		for (j = 0; j < 9; j++) {
 800faea:	428d      	cmp	r5, r1
			xPrev[j] = 0;
 800faec:	f84c 4f04 	str.w	r4, [ip, #4]!
			mOut |= FASTABS(xp);
 800faf0:	ea48 0802 	orr.w	r8, r8, r2
		for (j = 0; j < 9; j++) {
 800faf4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800faf8:	d1db      	bne.n	800fab2 <xmp3_IMDCT+0xc2e>
		if (nonZero)
 800fafa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fafc:	2800      	cmp	r0, #0
 800fafe:	bf18      	it	ne
 800fb00:	4633      	movne	r3, r6
 800fb02:	930b      	str	r3, [sp, #44]	; 0x2c
	for (   ; i < bc->nBlocksPrev; i++) {
 800fb04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb06:	3601      	adds	r6, #1
 800fb08:	42b3      	cmp	r3, r6
		xPrev += 9;
 800fb0a:	f109 0924 	add.w	r9, r9, #36	; 0x24
	for (   ; i < bc->nBlocksPrev; i++) {
 800fb0e:	d1bb      	bne.n	800fa88 <xmp3_IMDCT+0xc04>
 800fb10:	f8cd 8008 	str.w	r8, [sp, #8]
	for (   ; i < 32; i++) {
 800fb14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fb16:	2b1f      	cmp	r3, #31
 800fb18:	dc10      	bgt.n	800fb3c <xmp3_IMDCT+0xcb8>
 800fb1a:	e9dd 0313 	ldrd	r0, r3, [sp, #76]	; 0x4c
			y[j][i] = 0;
 800fb1e:	2100      	movs	r1, #0
 800fb20:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	for (   ; i < bc->nBlocksPrev; i++) {
 800fb24:	2300      	movs	r3, #0
			y[j][i] = 0;
 800fb26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (j = 0; j < 18; j++) 
 800fb2a:	3320      	adds	r3, #32
 800fb2c:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800fb30:	d1f9      	bne.n	800fb26 <xmp3_IMDCT+0xca2>
	for (   ; i < 32; i++) {
 800fb32:	3001      	adds	r0, #1
 800fb34:	2820      	cmp	r0, #32
 800fb36:	f102 0204 	add.w	r2, r2, #4
 800fb3a:	d1f3      	bne.n	800fb24 <xmp3_IMDCT+0xca0>
	if (!x)
 800fb3c:	9b02      	ldr	r3, [sp, #8]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	d02f      	beq.n	800fba2 <xmp3_IMDCT+0xd1e>
	while (!(x & 0x80000000)) {
 800fb42:	db49      	blt.n	800fbd8 <xmp3_IMDCT+0xd54>
	numZeros = 0;
 800fb44:	9902      	ldr	r1, [sp, #8]
 800fb46:	2300      	movs	r3, #0
	while (!(x & 0x80000000)) {
 800fb48:	0049      	lsls	r1, r1, #1
 800fb4a:	461a      	mov	r2, r3
		numZeros++;
 800fb4c:	f103 0301 	add.w	r3, r3, #1
	while (!(x & 0x80000000)) {
 800fb50:	d5fa      	bpl.n	800fb48 <xmp3_IMDCT+0xcc4>
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800fb52:	e9dd 131d 	ldrd	r1, r3, [sp, #116]	; 0x74
 800fb56:	440b      	add	r3, r1
 800fb58:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 800fb5c:	011b      	lsls	r3, r3, #4
 800fb5e:	4401      	add	r1, r0
 800fb60:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800fb64:	991c      	ldr	r1, [sp, #112]	; 0x70
	mi->numPrevIMDCT[ch] = HybridTransform(hi->huffDecBuf[ch], mi->overBuf[ch], mi->outBuf[ch], &si->sis[gr][ch], &bc);
 800fb66:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 800fb68:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800fb6a:	f8c4 0b00 	str.w	r0, [r4, #2816]	; 0xb00
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800fb6e:	4419      	add	r1, r3
	mi->gb[ch] = bc.gbOut;

	ASSERT(mi->numPrevIMDCT[ch] <= NBANDS);

	/* output has gained 2 int bits */
	return 0;
 800fb70:	2000      	movs	r0, #0
	mi->prevType[ch] = si->sis[gr][ch].blockType;
 800fb72:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800fb74:	f8c4 3b08 	str.w	r3, [r4, #2824]	; 0xb08
	mi->prevWinSwitch[ch] = bc.currWinSwitch;		/* 0 means not a mixed block (either all short or all long) */
 800fb78:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800fb7a:	f8c4 3b10 	str.w	r3, [r4, #2832]	; 0xb10
	mi->gb[ch] = bc.gbOut;
 800fb7e:	f8c4 2b18 	str.w	r2, [r4, #2840]	; 0xb18
}
 800fb82:	b045      	add	sp, #276	; 0x114
 800fb84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (si->sis[gr][ch].blockType == 2 && si->sis[gr][ch].mixedBlock) {
 800fb88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fb8a:	9304      	str	r3, [sp, #16]
 800fb8c:	b15b      	cbz	r3, 800fba6 <xmp3_IMDCT+0xd22>
		nBfly = bc.nBlocksLong - 1;
 800fb8e:	9816      	ldr	r0, [sp, #88]	; 0x58
		bc.nBlocksLong = blockCutoff;	
 800fb90:	9004      	str	r0, [sp, #16]
 800fb92:	1e43      	subs	r3, r0, #1
 800fb94:	b21b      	sxth	r3, r3
	hi->nonZeroBound[ch] = MAX(hi->nonZeroBound[ch], (nBfly * 18) + 8);
 800fb96:	2112      	movs	r1, #18
 800fb98:	2208      	movs	r2, #8
 800fb9a:	fb13 2201 	smlabb	r2, r3, r1, r2
 800fb9e:	920e      	str	r2, [sp, #56]	; 0x38
		nBfly = bc.nBlocksLong - 1;
 800fba0:	e4c8      	b.n	800f534 <xmp3_IMDCT+0x6b0>
 800fba2:	221f      	movs	r2, #31
 800fba4:	e7d5      	b.n	800fb52 <xmp3_IMDCT+0xcce>
	AntiAlias(hi->huffDecBuf[ch], nBfly);
 800fba6:	0213      	lsls	r3, r2, #8
 800fba8:	930f      	str	r3, [sp, #60]	; 0x3c
 800fbaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbac:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fbb0:	2208      	movs	r2, #8
 800fbb2:	9318      	str	r3, [sp, #96]	; 0x60
 800fbb4:	920e      	str	r2, [sp, #56]	; 0x38
 800fbb6:	9b04      	ldr	r3, [sp, #16]
 800fbb8:	f7ff baa3 	b.w	800f102 <xmp3_IMDCT+0x27e>
	for (   ; i < bc->nBlocksTotal; i++) {
 800fbbc:	9b04      	ldr	r3, [sp, #16]
 800fbbe:	930b      	str	r3, [sp, #44]	; 0x2c
	for (   ; i < bc->nBlocksPrev; i++) {
 800fbc0:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800fbc2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800fbc4:	42b3      	cmp	r3, r6
 800fbc6:	f73f af57 	bgt.w	800fa78 <xmp3_IMDCT+0xbf4>
 800fbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fbcc:	9313      	str	r3, [sp, #76]	; 0x4c
 800fbce:	e7a1      	b.n	800fb14 <xmp3_IMDCT+0xc90>
	mOut = 0;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	9304      	str	r3, [sp, #16]
	for(i = 0; i < bc->nBlocksLong; i++) {
 800fbd4:	9302      	str	r3, [sp, #8]
 800fbd6:	e548      	b.n	800f66a <xmp3_IMDCT+0x7e6>
 800fbd8:	f04f 32ff 	mov.w	r2, #4294967295
 800fbdc:	e7b9      	b.n	800fb52 <xmp3_IMDCT+0xcce>
		return -1;
 800fbde:	f04f 30ff 	mov.w	r0, #4294967295
 800fbe2:	e7ce      	b.n	800fb82 <xmp3_IMDCT+0xcfe>

0800fbe4 <MP3InitDecoder>:
 **************************************************************************************/
HMP3Decoder MP3InitDecoder(void)
{
	MP3DecInfo *mp3DecInfo;

	mp3DecInfo = AllocateBuffers();
 800fbe4:	f7fd bd4a 	b.w	800d67c <xmp3_AllocateBuffers>

0800fbe8 <MP3FindSyncWord>:
int MP3FindSyncWord(unsigned char *buf, int nBytes)
{
	int i;

	/* find byte-aligned syncword - need 12 (MPEG 1,2) or 11 (MPEG 2.5) matching bits */
	for (i = 0; i < nBytes - 1; i++) {
 800fbe8:	2901      	cmp	r1, #1
 800fbea:	dd13      	ble.n	800fc14 <MP3FindSyncWord+0x2c>
 800fbec:	1e82      	subs	r2, r0, #2
 800fbee:	eb02 0c01 	add.w	ip, r2, r1
 800fbf2:	1e43      	subs	r3, r0, #1
 800fbf4:	f1c0 0101 	rsb	r1, r0, #1
 800fbf8:	e001      	b.n	800fbfe <MP3FindSyncWord+0x16>
 800fbfa:	4563      	cmp	r3, ip
 800fbfc:	d00a      	beq.n	800fc14 <MP3FindSyncWord+0x2c>
 800fbfe:	18c8      	adds	r0, r1, r3
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 800fc00:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800fc04:	2aff      	cmp	r2, #255	; 0xff
 800fc06:	d1f8      	bne.n	800fbfa <MP3FindSyncWord+0x12>
 800fc08:	785a      	ldrb	r2, [r3, #1]
 800fc0a:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800fc0e:	2ae0      	cmp	r2, #224	; 0xe0
 800fc10:	d1f3      	bne.n	800fbfa <MP3FindSyncWord+0x12>
			return i;
	}
	
	return -1;
}
 800fc12:	4770      	bx	lr
	return -1;
 800fc14:	f04f 30ff 	mov.w	r0, #4294967295
}
 800fc18:	4770      	bx	lr
 800fc1a:	bf00      	nop

0800fc1c <MP3GetNextFrameInfo>:
 **************************************************************************************/
int MP3GetNextFrameInfo(HMP3Decoder hMP3Decoder, MP3FrameInfo *mp3FrameInfo, unsigned char *buf)
{
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;

	if (!mp3DecInfo)
 800fc1c:	b348      	cbz	r0, 800fc72 <MP3GetNextFrameInfo+0x56>
{
 800fc1e:	b570      	push	{r4, r5, r6, lr}
 800fc20:	460c      	mov	r4, r1
 800fc22:	4611      	mov	r1, r2
 800fc24:	4605      	mov	r5, r0
		return ERR_MP3_NULL_POINTER;

	if (UnpackFrameHeader(mp3DecInfo, buf) == -1 || mp3DecInfo->layer != 3)
 800fc26:	f7fd fb27 	bl	800d278 <xmp3_UnpackFrameHeader>
 800fc2a:	3001      	adds	r0, #1
 800fc2c:	d01e      	beq.n	800fc6c <MP3GetNextFrameInfo+0x50>
 800fc2e:	f8d5 27d0 	ldr.w	r2, [r5, #2000]	; 0x7d0
 800fc32:	2a03      	cmp	r2, #3
 800fc34:	d11a      	bne.n	800fc6c <MP3GetNextFrameInfo+0x50>
		mp3FrameInfo->bitrate = mp3DecInfo->bitrate;
 800fc36:	f8d5 37b8 	ldr.w	r3, [r5, #1976]	; 0x7b8
		mp3FrameInfo->nChans = mp3DecInfo->nChans;
 800fc3a:	f8d5 67bc 	ldr.w	r6, [r5, #1980]	; 0x7bc
 800fc3e:	e9c4 3600 	strd	r3, r6, [r4]
		mp3FrameInfo->samprate = mp3DecInfo->samprate;
 800fc42:	f8d5 37c0 	ldr.w	r3, [r5, #1984]	; 0x7c0
 800fc46:	60a3      	str	r3, [r4, #8]
		mp3FrameInfo->bitsPerSample = 16;
 800fc48:	2310      	movs	r3, #16
 800fc4a:	60e3      	str	r3, [r4, #12]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800fc4c:	f895 17d4 	ldrb.w	r1, [r5, #2004]	; 0x7d4
		mp3FrameInfo->layer = mp3DecInfo->layer;
 800fc50:	6162      	str	r2, [r4, #20]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800fc52:	4a09      	ldr	r2, [pc, #36]	; (800fc78 <MP3GetNextFrameInfo+0x5c>)
		mp3FrameInfo->version = mp3DecInfo->version;
 800fc54:	61a1      	str	r1, [r4, #24]
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800fc56:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800fc5a:	eb02 0243 	add.w	r2, r2, r3, lsl #1
		return ERR_MP3_INVALID_FRAMEHEADER;

	MP3GetLastFrameInfo(mp3DecInfo, mp3FrameInfo);

	return ERR_MP3_NONE;
 800fc5e:	2000      	movs	r0, #0
		mp3FrameInfo->outputSamps = mp3DecInfo->nChans * (int)samplesPerFrameTab[mp3DecInfo->version][mp3DecInfo->layer - 1];
 800fc60:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800fc64:	fb06 f303 	mul.w	r3, r6, r3
 800fc68:	6123      	str	r3, [r4, #16]
}
 800fc6a:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MP3_INVALID_FRAMEHEADER;
 800fc6c:	f06f 0005 	mvn.w	r0, #5
}
 800fc70:	bd70      	pop	{r4, r5, r6, pc}
		return ERR_MP3_NULL_POINTER;
 800fc72:	f06f 0004 	mvn.w	r0, #4
}
 800fc76:	4770      	bx	lr
 800fc78:	08028038 	.word	0x08028038

0800fc7c <MP3Decode>:
	int prevBitOffset, sfBlockBits, huffBlockBits;
	unsigned char *mainPtr;
	MP3DecInfo *mp3DecInfo = (MP3DecInfo *)hMP3Decoder;
//	ULONG32 ulTime;
//	StartYield(&ulTime);
	if (!mp3DecInfo)
 800fc7c:	2800      	cmp	r0, #0
 800fc7e:	f000 81d9 	beq.w	8010034 <MP3Decode+0x3b8>
{
 800fc82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc86:	ed2d 8b02 	vpush	{d8}
 800fc8a:	460f      	mov	r7, r1
 800fc8c:	b087      	sub	sp, #28
		return ERR_MP3_NULL_POINTER;

	/* unpack frame header */
	fhBytes = UnpackFrameHeader(mp3DecInfo, *inbuf);
 800fc8e:	6809      	ldr	r1, [r1, #0]
 800fc90:	ee08 3a10 	vmov	s16, r3
 800fc94:	4692      	mov	sl, r2
 800fc96:	4681      	mov	r9, r0
 800fc98:	f7fd faee 	bl	800d278 <xmp3_UnpackFrameHeader>
	if (fhBytes < 0)	
 800fc9c:	f1b0 0800 	subs.w	r8, r0, #0
 800fca0:	f2c0 81c5 	blt.w	801002e <MP3Decode+0x3b2>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
	*inbuf += fhBytes;
 800fca4:	6839      	ldr	r1, [r7, #0]
 800fca6:	4441      	add	r1, r8
 800fca8:	6039      	str	r1, [r7, #0]
	
	/* unpack side info */
	siBytes = UnpackSideInfo(mp3DecInfo, *inbuf);
 800fcaa:	4648      	mov	r0, r9
 800fcac:	f7fd fbc0 	bl	800d430 <xmp3_UnpackSideInfo>
	if (siBytes < 0) {
 800fcb0:	2800      	cmp	r0, #0
 800fcb2:	f2c0 8202 	blt.w	80100ba <MP3Decode+0x43e>
		MP3ClearBadFrame(mp3DecInfo, outbuf);
		return ERR_MP3_INVALID_SIDEINFO;
	}
	*inbuf += siBytes;
	*bytesLeft -= (fhBytes + siBytes);
 800fcb6:	f8da 3000 	ldr.w	r3, [sl]
	*inbuf += siBytes;
 800fcba:	683a      	ldr	r2, [r7, #0]
	*bytesLeft -= (fhBytes + siBytes);
 800fcbc:	eb08 0100 	add.w	r1, r8, r0
 800fcc0:	1a59      	subs	r1, r3, r1
	*inbuf += siBytes;
 800fcc2:	eb02 0e00 	add.w	lr, r2, r0
 800fcc6:	f8c7 e000 	str.w	lr, [r7]
	*bytesLeft -= (fhBytes + siBytes);
 800fcca:	f8ca 1000 	str.w	r1, [sl]
	
	/* if free mode, need to calculate bitrate and nSlots manually, based on frame size */
	if (mp3DecInfo->bitrate == 0 || mp3DecInfo->freeBitrateFlag) {
 800fcce:	f8d9 37b8 	ldr.w	r3, [r9, #1976]	; 0x7b8
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	f000 808d 	beq.w	800fdf2 <MP3Decode+0x176>
 800fcd8:	f8d9 37b0 	ldr.w	r3, [r9, #1968]	; 0x7b0
 800fcdc:	b14b      	cbz	r3, 800fcf2 <MP3Decode+0x76>
				return ERR_MP3_FREE_BITRATE_SYNC;
			}
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
		}
		mp3DecInfo->nSlots = mp3DecInfo->freeBitrateSlots + CheckPadBit(mp3DecInfo);	/* add pad byte, if required */
 800fcde:	f8d9 47b4 	ldr.w	r4, [r9, #1972]	; 0x7b4
 800fce2:	4648      	mov	r0, r9
 800fce4:	f7fd fabc 	bl	800d260 <xmp3_CheckPadBit>
 800fce8:	4404      	add	r4, r0
 800fcea:	f8c9 47cc 	str.w	r4, [r9, #1996]	; 0x7cc
	 *      from the bit reservoir (in previous frames) to AFTER the sync word and side info
	 *  - calling function should set mainDataBegin to 0, and tell us exactly how large this
	 *      frame is (in bytesLeft)
	 */
	if (useSize) {
		mp3DecInfo->nSlots = *bytesLeft;
 800fcee:	f8da 1000 	ldr.w	r1, [sl]
	if (useSize) {
 800fcf2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	f000 80ed 	beq.w	800fed4 <MP3Decode+0x258>
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 800fcfa:	f8d9 37d8 	ldr.w	r3, [r9, #2008]	; 0x7d8
		mp3DecInfo->nSlots = *bytesLeft;
 800fcfe:	f8c9 17cc 	str.w	r1, [r9, #1996]	; 0x7cc
		if (mp3DecInfo->mainDataBegin != 0 || mp3DecInfo->nSlots <= 0) {
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f040 8181 	bne.w	801000a <MP3Decode+0x38e>
 800fd08:	2900      	cmp	r1, #0
 800fd0a:	f340 817e 	ble.w	801000a <MP3Decode+0x38e>
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_FRAMEHEADER;
		}

		/* can operate in-place on reformatted frames */
		mp3DecInfo->mainDataBytes = mp3DecInfo->nSlots;
 800fd0e:	f8c9 17dc 	str.w	r1, [r9, #2012]	; 0x7dc
		mainPtr = *inbuf;
 800fd12:	f8d7 8000 	ldr.w	r8, [r7]
		*inbuf += mp3DecInfo->nSlots;
		*bytesLeft -= (mp3DecInfo->nSlots);
 800fd16:	f8da 3000 	ldr.w	r3, [sl]
 800fd1a:	1a5b      	subs	r3, r3, r1
		*inbuf += mp3DecInfo->nSlots;
 800fd1c:	4441      	add	r1, r8
 800fd1e:	6039      	str	r1, [r7, #0]
		*bytesLeft -= (mp3DecInfo->nSlots);
 800fd20:	f8ca 3000 	str.w	r3, [sl]
	}
	bitOffset = 0;
	mainBits = mp3DecInfo->mainDataBytes * 8;

	/* decode one complete frame */
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800fd24:	f8d9 37c4 	ldr.w	r3, [r9, #1988]	; 0x7c4
	mainBits = mp3DecInfo->mainDataBytes * 8;
 800fd28:	f8d9 47dc 	ldr.w	r4, [r9, #2012]	; 0x7dc
	bitOffset = 0;
 800fd2c:	2000      	movs	r0, #0
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800fd2e:	4283      	cmp	r3, r0
	bitOffset = 0;
 800fd30:	9005      	str	r0, [sp, #20]
	mainBits = mp3DecInfo->mainDataBytes * 8;
 800fd32:	ea4f 04c4 	mov.w	r4, r4, lsl #3
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800fd36:	dd57      	ble.n	800fde8 <MP3Decode+0x16c>
 800fd38:	f509 63fc 	add.w	r3, r9, #2016	; 0x7e0
 800fd3c:	4683      	mov	fp, r0
 800fd3e:	9303      	str	r3, [sp, #12]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd40:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	f340 80f4 	ble.w	800ff32 <MP3Decode+0x2b6>
			/* unpack scale factors and compute size of scale factor block */
			prevBitOffset = bitOffset;
 800fd4a:	9b03      	ldr	r3, [sp, #12]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd4c:	f8cd b008 	str.w	fp, [sp, #8]
 800fd50:	f04f 0a00 	mov.w	sl, #0
 800fd54:	4657      	mov	r7, sl
			prevBitOffset = bitOffset;
 800fd56:	9e05      	ldr	r6, [sp, #20]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd58:	46c3      	mov	fp, r8
 800fd5a:	469a      	mov	sl, r3
 800fd5c:	e018      	b.n	800fd90 <MP3Decode+0x114>
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
			mainPtr += offset;
			mainBits -= sfBlockBits;

			if (offset < 0 || mainBits < huffBlockBits) {
 800fd5e:	45a4      	cmp	ip, r4
 800fd60:	dc2e      	bgt.n	800fdc0 <MP3Decode+0x144>
				return ERR_MP3_INVALID_SCALEFACT;
			}

			/* decode Huffman code words */
			prevBitOffset = bitOffset;
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800fd62:	9802      	ldr	r0, [sp, #8]
 800fd64:	9701      	str	r7, [sp, #4]
 800fd66:	9000      	str	r0, [sp, #0]
 800fd68:	4648      	mov	r0, r9
 800fd6a:	f7fe fb8f 	bl	800e48c <xmp3_DecodeHuffman>
			if (offset < 0) {
 800fd6e:	2800      	cmp	r0, #0
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd70:	f107 0701 	add.w	r7, r7, #1
				MP3ClearBadFrame(mp3DecInfo, outbuf);
				return ERR_MP3_INVALID_HUFFCODES;
			}

			mainPtr += offset;
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800fd74:	ebc5 05c0 	rsb	r5, r5, r0, lsl #3
			mainPtr += offset;
 800fd78:	4483      	add	fp, r0
			if (offset < 0) {
 800fd7a:	f2c0 810e 	blt.w	800ff9a <MP3Decode+0x31e>
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800fd7e:	9e05      	ldr	r6, [sp, #20]
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd80:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800fd84:	4435      	add	r5, r6
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd86:	42bb      	cmp	r3, r7
			mainBits -= (8*offset - prevBitOffset + bitOffset);
 800fd88:	eba8 0405 	sub.w	r4, r8, r5
		for (ch = 0; ch < mp3DecInfo->nChans; ch++) {
 800fd8c:	f340 80ce 	ble.w	800ff2c <MP3Decode+0x2b0>
			offset = UnpackScaleFactors(mp3DecInfo, mainPtr, &bitOffset, mainBits, gr, ch);
 800fd90:	9802      	ldr	r0, [sp, #8]
 800fd92:	9000      	str	r0, [sp, #0]
 800fd94:	4659      	mov	r1, fp
 800fd96:	4623      	mov	r3, r4
 800fd98:	aa05      	add	r2, sp, #20
 800fd9a:	9701      	str	r7, [sp, #4]
 800fd9c:	4648      	mov	r0, r9
 800fd9e:	f000 fdff 	bl	80109a0 <xmp3_UnpackScaleFactors>
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800fda2:	9d05      	ldr	r5, [sp, #20]
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800fda4:	f85a cb04 	ldr.w	ip, [sl], #4
			sfBlockBits = 8*offset - prevBitOffset + bitOffset;
 800fda8:	ebc6 08c0 	rsb	r8, r6, r0, lsl #3
 800fdac:	44a8      	add	r8, r5
			mainPtr += offset;
 800fdae:	4483      	add	fp, r0
			if (offset < 0 || mainBits < huffBlockBits) {
 800fdb0:	2800      	cmp	r0, #0
			huffBlockBits = mp3DecInfo->part23Length[gr][ch] - sfBlockBits;
 800fdb2:	ebac 0308 	sub.w	r3, ip, r8
			offset = DecodeHuffman(mp3DecInfo, mainPtr, &bitOffset, huffBlockBits, gr, ch);
 800fdb6:	aa05      	add	r2, sp, #20
 800fdb8:	4659      	mov	r1, fp
			mainBits -= sfBlockBits;
 800fdba:	eba4 0808 	sub.w	r8, r4, r8
			if (offset < 0 || mainBits < huffBlockBits) {
 800fdbe:	dace      	bge.n	800fd5e <MP3Decode+0xe2>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800fdc0:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 800fdc4:	f8d9 17c4 	ldr.w	r1, [r9, #1988]	; 0x7c4
 800fdc8:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800fdcc:	fb01 f202 	mul.w	r2, r1, r2
 800fdd0:	fb03 f202 	mul.w	r2, r3, r2
 800fdd4:	2a00      	cmp	r2, #0
 800fdd6:	dd05      	ble.n	800fde4 <MP3Decode+0x168>
		outbuf[i] = 0;
 800fdd8:	ee18 0a10 	vmov	r0, s16
 800fddc:	0052      	lsls	r2, r2, #1
 800fdde:	2100      	movs	r1, #0
 800fde0:	f00e fac8 	bl	801e374 <memset>
				return ERR_MP3_INVALID_SCALEFACT;
 800fde4:	f06f 0007 	mvn.w	r0, #7
			MP3ClearBadFrame(mp3DecInfo, outbuf);
			return ERR_MP3_INVALID_SUBBAND;			
		}
	}
	return ERR_MP3_NONE;
}
 800fde8:	b007      	add	sp, #28
 800fdea:	ecbd 8b02 	vpop	{d8}
 800fdee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!mp3DecInfo->freeBitrateFlag) {
 800fdf2:	f8d9 37b0 	ldr.w	r3, [r9, #1968]	; 0x7b0
 800fdf6:	2b00      	cmp	r3, #0
 800fdf8:	f47f af71 	bne.w	800fcde <MP3Decode+0x62>
			mp3DecInfo->freeBitrateFlag = 1;
 800fdfc:	2301      	movs	r3, #1
 800fdfe:	f8c9 37b0 	str.w	r3, [r9, #1968]	; 0x7b0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800fe02:	f8da 1000 	ldr.w	r1, [sl]
	for (i = 0; i < nBytes - 1; i++) {
 800fe06:	1e4e      	subs	r6, r1, #1
 800fe08:	2e00      	cmp	r6, #0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800fe0a:	eba2 0c08 	sub.w	ip, r2, r8
	unsigned char *bufPtr = buf;
 800fe0e:	4673      	mov	r3, lr
	for (i = 0; i < nBytes - 1; i++) {
 800fe10:	dd19      	ble.n	800fe46 <MP3Decode+0x1ca>
 800fe12:	2500      	movs	r5, #0
 800fe14:	e002      	b.n	800fe1c <MP3Decode+0x1a0>
 800fe16:	3501      	adds	r5, #1
 800fe18:	42b5      	cmp	r5, r6
 800fe1a:	d014      	beq.n	800fe46 <MP3Decode+0x1ca>
		if ( (buf[i+0] & SYNCWORDH) == SYNCWORDH && (buf[i+1] & SYNCWORDL) == SYNCWORDL )
 800fe1c:	461c      	mov	r4, r3
 800fe1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe22:	2aff      	cmp	r2, #255	; 0xff
 800fe24:	d1f7      	bne.n	800fe16 <MP3Decode+0x19a>
 800fe26:	7862      	ldrb	r2, [r4, #1]
 800fe28:	f002 02e0 	and.w	r2, r2, #224	; 0xe0
 800fe2c:	2ae0      	cmp	r2, #224	; 0xe0
 800fe2e:	d1f2      	bne.n	800fe16 <MP3Decode+0x19a>
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 800fe30:	f89c 3000 	ldrb.w	r3, [ip]
 800fe34:	2bff      	cmp	r3, #255	; 0xff
 800fe36:	d024      	beq.n	800fe82 <MP3Decode+0x206>
		nBytes -= (offset + 3);
 800fe38:	3503      	adds	r5, #3
 800fe3a:	1b49      	subs	r1, r1, r5
	for (i = 0; i < nBytes - 1; i++) {
 800fe3c:	1e4e      	subs	r6, r1, #1
 800fe3e:	2e00      	cmp	r6, #0
		bufPtr += 3;
 800fe40:	f104 0303 	add.w	r3, r4, #3
	for (i = 0; i < nBytes - 1; i++) {
 800fe44:	dce5      	bgt.n	800fe12 <MP3Decode+0x196>
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800fe46:	f04f 33ff 	mov.w	r3, #4294967295
 800fe4a:	f8c9 37b4 	str.w	r3, [r9, #1972]	; 0x7b4
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800fe4e:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 800fe52:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 800fe56:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800fe5a:	fb01 f202 	mul.w	r2, r1, r2
 800fe5e:	fb03 f202 	mul.w	r2, r3, r2
 800fe62:	2a00      	cmp	r2, #0
 800fe64:	f340 80ce 	ble.w	8010004 <MP3Decode+0x388>
		outbuf[i] = 0;
 800fe68:	ee18 0a10 	vmov	r0, s16
 800fe6c:	0052      	lsls	r2, r2, #1
 800fe6e:	2100      	movs	r1, #0
 800fe70:	f00e fa80 	bl	801e374 <memset>
				return ERR_MP3_FREE_BITRATE_SYNC;
 800fe74:	f06f 0002 	mvn.w	r0, #2
}
 800fe78:	b007      	add	sp, #28
 800fe7a:	ecbd 8b02 	vpop	{d8}
 800fe7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ( (bufPtr[0] == firstFH[0]) && (bufPtr[1] == firstFH[1]) && ((bufPtr[2] & 0xfc) == (firstFH[2] & 0xfc)) ) {
 800fe82:	7862      	ldrb	r2, [r4, #1]
 800fe84:	f89c 3001 	ldrb.w	r3, [ip, #1]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d1d5      	bne.n	800fe38 <MP3Decode+0x1bc>
 800fe8c:	f89c 2002 	ldrb.w	r2, [ip, #2]
 800fe90:	78a3      	ldrb	r3, [r4, #2]
 800fe92:	4053      	eors	r3, r2
 800fe94:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 800fe98:	d1ce      	bne.n	800fe38 <MP3Decode+0x1bc>
			if ((firstFH[2] >> 1) & 0x01)
 800fe9a:	0793      	lsls	r3, r2, #30
				bufPtr--;
 800fe9c:	bf48      	it	mi
 800fe9e:	f104 34ff 	addmi.w	r4, r4, #4294967295
			return bufPtr - buf;
 800fea2:	eba4 040e 	sub.w	r4, r4, lr
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800fea6:	2c00      	cmp	r4, #0
			mp3DecInfo->freeBitrateSlots = MP3FindFreeSync(*inbuf, *inbuf - fhBytes - siBytes, *bytesLeft);
 800fea8:	f8c9 47b4 	str.w	r4, [r9, #1972]	; 0x7b4
			if (mp3DecInfo->freeBitrateSlots < 0) {
 800feac:	dbcf      	blt.n	800fe4e <MP3Decode+0x1d2>
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800feae:	f8d9 27c0 	ldr.w	r2, [r9, #1984]	; 0x7c0
 800feb2:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
			freeFrameBytes = mp3DecInfo->freeBitrateSlots + fhBytes + siBytes;
 800feb6:	eb08 0304 	add.w	r3, r8, r4
 800feba:	4403      	add	r3, r0
			mp3DecInfo->bitrate = (freeFrameBytes * mp3DecInfo->samprate * 8) / (mp3DecInfo->nGrans * mp3DecInfo->nGranSamps);
 800febc:	fb02 f303 	mul.w	r3, r2, r3
 800fec0:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 800fec4:	00db      	lsls	r3, r3, #3
 800fec6:	fb01 f202 	mul.w	r2, r1, r2
 800feca:	fb93 f3f2 	sdiv	r3, r3, r2
 800fece:	f8c9 37b8 	str.w	r3, [r9, #1976]	; 0x7b8
 800fed2:	e706      	b.n	800fce2 <MP3Decode+0x66>
		if (mp3DecInfo->nSlots > *bytesLeft) {
 800fed4:	f8d9 07cc 	ldr.w	r0, [r9, #1996]	; 0x7cc
 800fed8:	4288      	cmp	r0, r1
 800feda:	f300 8103 	bgt.w	80100e4 <MP3Decode+0x468>
		if (mp3DecInfo->mainDataBytes >= mp3DecInfo->mainDataBegin) {
 800fede:	f8d9 37dc 	ldr.w	r3, [r9, #2012]	; 0x7dc
 800fee2:	f8d9 27d8 	ldr.w	r2, [r9, #2008]	; 0x7d8
 800fee6:	4293      	cmp	r3, r2
 800fee8:	f2c0 80a7 	blt.w	801003a <MP3Decode+0x3be>
			memmove(mp3DecInfo->mainBuf, mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes - mp3DecInfo->mainDataBegin, mp3DecInfo->mainDataBegin);
 800feec:	1a9b      	subs	r3, r3, r2
 800feee:	f109 081c 	add.w	r8, r9, #28
 800fef2:	eb08 0103 	add.w	r1, r8, r3
 800fef6:	4640      	mov	r0, r8
 800fef8:	f00e fa22 	bl	801e340 <memmove>
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBegin, *inbuf, mp3DecInfo->nSlots);
 800fefc:	f8d9 07d8 	ldr.w	r0, [r9, #2008]	; 0x7d8
 800ff00:	f8d9 27cc 	ldr.w	r2, [r9, #1996]	; 0x7cc
 800ff04:	6839      	ldr	r1, [r7, #0]
 800ff06:	4440      	add	r0, r8
 800ff08:	f00e fa0c 	bl	801e324 <memcpy>
			mp3DecInfo->mainDataBytes = mp3DecInfo->mainDataBegin + mp3DecInfo->nSlots;
 800ff0c:	f8d9 27cc 	ldr.w	r2, [r9, #1996]	; 0x7cc
 800ff10:	f8d9 37d8 	ldr.w	r3, [r9, #2008]	; 0x7d8
 800ff14:	4413      	add	r3, r2
 800ff16:	f8c9 37dc 	str.w	r3, [r9, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	4413      	add	r3, r2
 800ff1e:	603b      	str	r3, [r7, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 800ff20:	f8da 3000 	ldr.w	r3, [sl]
 800ff24:	1a9b      	subs	r3, r3, r2
 800ff26:	f8ca 3000 	str.w	r3, [sl]
			mainPtr = mp3DecInfo->mainBuf;
 800ff2a:	e6fb      	b.n	800fd24 <MP3Decode+0xa8>
 800ff2c:	46d8      	mov	r8, fp
 800ff2e:	f8dd b008 	ldr.w	fp, [sp, #8]
		if (Dequantize(mp3DecInfo, gr) < 0) {
 800ff32:	4659      	mov	r1, fp
 800ff34:	4648      	mov	r0, r9
 800ff36:	f7fd ff37 	bl	800dda8 <xmp3_Dequantize>
 800ff3a:	2800      	cmp	r0, #0
 800ff3c:	f2c0 80a8 	blt.w	8010090 <MP3Decode+0x414>
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800ff40:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	bfc8      	it	gt
 800ff48:	2500      	movgt	r5, #0
 800ff4a:	dc04      	bgt.n	800ff56 <MP3Decode+0x2da>
 800ff4c:	e03e      	b.n	800ffcc <MP3Decode+0x350>
 800ff4e:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800ff52:	42ab      	cmp	r3, r5
 800ff54:	dd3a      	ble.n	800ffcc <MP3Decode+0x350>
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 800ff56:	462a      	mov	r2, r5
 800ff58:	4659      	mov	r1, fp
 800ff5a:	4648      	mov	r0, r9
 800ff5c:	f7fe ff92 	bl	800ee84 <xmp3_IMDCT>
 800ff60:	2800      	cmp	r0, #0
		for (ch = 0; ch < mp3DecInfo->nChans; ch++)
 800ff62:	f105 0501 	add.w	r5, r5, #1
			if (IMDCT(mp3DecInfo, gr, ch) < 0) {
 800ff66:	daf2      	bge.n	800ff4e <MP3Decode+0x2d2>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800ff68:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 800ff6c:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 800ff70:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800ff74:	fb01 f202 	mul.w	r2, r1, r2
 800ff78:	fb03 f202 	mul.w	r2, r3, r2
 800ff7c:	2a00      	cmp	r2, #0
 800ff7e:	dd05      	ble.n	800ff8c <MP3Decode+0x310>
		outbuf[i] = 0;
 800ff80:	ee18 0a10 	vmov	r0, s16
 800ff84:	0052      	lsls	r2, r2, #1
 800ff86:	2100      	movs	r1, #0
 800ff88:	f00e f9f4 	bl	801e374 <memset>
				return ERR_MP3_INVALID_IMDCT;			
 800ff8c:	f06f 000a 	mvn.w	r0, #10
}
 800ff90:	b007      	add	sp, #28
 800ff92:	ecbd 8b02 	vpop	{d8}
 800ff96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 800ff9a:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 800ff9e:	f8d9 17c4 	ldr.w	r1, [r9, #1988]	; 0x7c4
 800ffa2:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 800ffa6:	fb01 f202 	mul.w	r2, r1, r2
 800ffaa:	fb03 f202 	mul.w	r2, r3, r2
 800ffae:	2a00      	cmp	r2, #0
 800ffb0:	dd05      	ble.n	800ffbe <MP3Decode+0x342>
		outbuf[i] = 0;
 800ffb2:	ee18 0a10 	vmov	r0, s16
 800ffb6:	0052      	lsls	r2, r2, #1
 800ffb8:	2100      	movs	r1, #0
 800ffba:	f00e f9db 	bl	801e374 <memset>
				return ERR_MP3_INVALID_HUFFCODES;
 800ffbe:	f06f 0008 	mvn.w	r0, #8
}
 800ffc2:	b007      	add	sp, #28
 800ffc4:	ecbd 8b02 	vpop	{d8}
 800ffc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (Subband(mp3DecInfo, outbuf + gr*mp3DecInfo->nGranSamps*mp3DecInfo->nChans) < 0) {
 800ffcc:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 800ffd0:	fb02 f20b 	mul.w	r2, r2, fp
 800ffd4:	fb02 f303 	mul.w	r3, r2, r3
 800ffd8:	ee18 2a10 	vmov	r2, s16
 800ffdc:	4648      	mov	r0, r9
 800ffde:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 800ffe2:	f001 fba3 	bl	801172c <xmp3_Subband>
 800ffe6:	2800      	cmp	r0, #0
 800ffe8:	f2c0 8091 	blt.w	801010e <MP3Decode+0x492>
	for (gr = 0; gr < mp3DecInfo->nGrans; gr++) {
 800ffec:	9b03      	ldr	r3, [sp, #12]
 800ffee:	3308      	adds	r3, #8
 800fff0:	9303      	str	r3, [sp, #12]
 800fff2:	f8d9 37c4 	ldr.w	r3, [r9, #1988]	; 0x7c4
 800fff6:	f10b 0b01 	add.w	fp, fp, #1
 800fffa:	455b      	cmp	r3, fp
 800fffc:	f73f aea0 	bgt.w	800fd40 <MP3Decode+0xc4>
	return ERR_MP3_NONE;
 8010000:	2000      	movs	r0, #0
 8010002:	e6f1      	b.n	800fde8 <MP3Decode+0x16c>
				return ERR_MP3_FREE_BITRATE_SYNC;
 8010004:	f06f 0002 	mvn.w	r0, #2
 8010008:	e6ee      	b.n	800fde8 <MP3Decode+0x16c>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 801000a:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 801000e:	f8d9 17c4 	ldr.w	r1, [r9, #1988]	; 0x7c4
 8010012:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 8010016:	fb01 f202 	mul.w	r2, r1, r2
 801001a:	fb03 f202 	mul.w	r2, r3, r2
 801001e:	2a00      	cmp	r2, #0
 8010020:	dd05      	ble.n	801002e <MP3Decode+0x3b2>
		outbuf[i] = 0;
 8010022:	ee18 0a10 	vmov	r0, s16
 8010026:	0052      	lsls	r2, r2, #1
 8010028:	2100      	movs	r1, #0
 801002a:	f00e f9a3 	bl	801e374 <memset>
		return ERR_MP3_INVALID_FRAMEHEADER;		/* don't clear outbuf since we don't know size (failed to parse header) */
 801002e:	f06f 0005 	mvn.w	r0, #5
 8010032:	e6d9      	b.n	800fde8 <MP3Decode+0x16c>
		return ERR_MP3_NULL_POINTER;
 8010034:	f06f 0004 	mvn.w	r0, #4
}
 8010038:	4770      	bx	lr
			memcpy(mp3DecInfo->mainBuf + mp3DecInfo->mainDataBytes, *inbuf, mp3DecInfo->nSlots);
 801003a:	4602      	mov	r2, r0
 801003c:	f109 001c 	add.w	r0, r9, #28
 8010040:	6839      	ldr	r1, [r7, #0]
 8010042:	4418      	add	r0, r3
 8010044:	f00e f96e 	bl	801e324 <memcpy>
			mp3DecInfo->mainDataBytes += mp3DecInfo->nSlots;
 8010048:	f8d9 27cc 	ldr.w	r2, [r9, #1996]	; 0x7cc
 801004c:	f8d9 37dc 	ldr.w	r3, [r9, #2012]	; 0x7dc
 8010050:	4413      	add	r3, r2
 8010052:	f8c9 37dc 	str.w	r3, [r9, #2012]	; 0x7dc
			*inbuf += mp3DecInfo->nSlots;
 8010056:	683b      	ldr	r3, [r7, #0]
 8010058:	4413      	add	r3, r2
 801005a:	603b      	str	r3, [r7, #0]
			*bytesLeft -= (mp3DecInfo->nSlots);
 801005c:	f8da 3000 	ldr.w	r3, [sl]
 8010060:	1a9b      	subs	r3, r3, r2
 8010062:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8010066:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 801006a:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 801006e:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 8010072:	fb01 f202 	mul.w	r2, r1, r2
 8010076:	fb03 f202 	mul.w	r2, r3, r2
 801007a:	2a00      	cmp	r2, #0
 801007c:	dd05      	ble.n	801008a <MP3Decode+0x40e>
		outbuf[i] = 0;
 801007e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8010080:	ee18 0a10 	vmov	r0, s16
 8010084:	0052      	lsls	r2, r2, #1
 8010086:	f00e f975 	bl	801e374 <memset>
			return ERR_MP3_MAINDATA_UNDERFLOW;
 801008a:	f06f 0001 	mvn.w	r0, #1
 801008e:	e6ab      	b.n	800fde8 <MP3Decode+0x16c>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 8010090:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 8010094:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 8010098:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 801009c:	fb01 f202 	mul.w	r2, r1, r2
 80100a0:	fb03 f202 	mul.w	r2, r3, r2
 80100a4:	2a00      	cmp	r2, #0
 80100a6:	dd05      	ble.n	80100b4 <MP3Decode+0x438>
		outbuf[i] = 0;
 80100a8:	ee18 0a10 	vmov	r0, s16
 80100ac:	0052      	lsls	r2, r2, #1
 80100ae:	2100      	movs	r1, #0
 80100b0:	f00e f960 	bl	801e374 <memset>
			return ERR_MP3_INVALID_DEQUANTIZE;			
 80100b4:	f06f 0009 	mvn.w	r0, #9
 80100b8:	e696      	b.n	800fde8 <MP3Decode+0x16c>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80100ba:	f8d9 27c8 	ldr.w	r2, [r9, #1992]	; 0x7c8
 80100be:	f8d9 17c4 	ldr.w	r1, [r9, #1988]	; 0x7c4
 80100c2:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 80100c6:	fb01 f202 	mul.w	r2, r1, r2
 80100ca:	fb03 f202 	mul.w	r2, r3, r2
 80100ce:	2a00      	cmp	r2, #0
 80100d0:	dd05      	ble.n	80100de <MP3Decode+0x462>
		outbuf[i] = 0;
 80100d2:	ee18 0a10 	vmov	r0, s16
 80100d6:	0052      	lsls	r2, r2, #1
 80100d8:	2100      	movs	r1, #0
 80100da:	f00e f94b 	bl	801e374 <memset>
		return ERR_MP3_INVALID_SIDEINFO;
 80100de:	f06f 0006 	mvn.w	r0, #6
 80100e2:	e681      	b.n	800fde8 <MP3Decode+0x16c>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 80100e4:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 80100e8:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 80100ec:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 80100f0:	fb01 f202 	mul.w	r2, r1, r2
 80100f4:	fb03 f202 	mul.w	r2, r3, r2
 80100f8:	2a00      	cmp	r2, #0
 80100fa:	dd05      	ble.n	8010108 <MP3Decode+0x48c>
		outbuf[i] = 0;
 80100fc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80100fe:	ee18 0a10 	vmov	r0, s16
 8010102:	0052      	lsls	r2, r2, #1
 8010104:	f00e f936 	bl	801e374 <memset>
			return ERR_MP3_INDATA_UNDERFLOW;	
 8010108:	f04f 30ff 	mov.w	r0, #4294967295
 801010c:	e66c      	b.n	800fde8 <MP3Decode+0x16c>
	for (i = 0; i < mp3DecInfo->nGrans * mp3DecInfo->nGranSamps * mp3DecInfo->nChans; i++)
 801010e:	f8d9 27c4 	ldr.w	r2, [r9, #1988]	; 0x7c4
 8010112:	f8d9 17c8 	ldr.w	r1, [r9, #1992]	; 0x7c8
 8010116:	f8d9 37bc 	ldr.w	r3, [r9, #1980]	; 0x7bc
 801011a:	fb01 f202 	mul.w	r2, r1, r2
 801011e:	fb03 f202 	mul.w	r2, r3, r2
 8010122:	2a00      	cmp	r2, #0
 8010124:	dd05      	ble.n	8010132 <MP3Decode+0x4b6>
		outbuf[i] = 0;
 8010126:	ee18 0a10 	vmov	r0, s16
 801012a:	0052      	lsls	r2, r2, #1
 801012c:	2100      	movs	r1, #0
 801012e:	f00e f921 	bl	801e374 <memset>
			return ERR_MP3_INVALID_SUBBAND;			
 8010132:	f06f 000b 	mvn.w	r0, #11
 8010136:	e657      	b.n	800fde8 <MP3Decode+0x16c>

08010138 <xmp3_PolyphaseMono>:
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 *                (note max filter gain - see polyCoef[] comments)
 **************************************************************************************/
void PolyphaseMono(short *pcm, int *vbuf, const int *coefBase)
{	
 8010138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
static __inline Word64 MADD64(Word64 sum64, int x, int y)
{
        U64 u;
        u.w64 = sum64;

        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 801013c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010140:	4680      	mov	r8, r0
 8010142:	b083      	sub	sp, #12
	vb1 = vbuf;
	sum1L = rndVal;
	
	c1 = *coef;
	coef++;
	c2 = *coef;
 8010144:	6855      	ldr	r5, [r2, #4]
	coef++;
	vLo = *(vb1+(0));
 8010146:	680f      	ldr	r7, [r1, #0]
	vHi = *(vb1+(23-(0)));
 8010148:	6dce      	ldr	r6, [r1, #92]	; 0x5c
 801014a:	6810      	ldr	r0, [r2, #0]
 801014c:	2400      	movs	r4, #0
 801014e:	fbc7 3400 	smlal	r3, r4, r7, r0
	sum1L = MADD64(sum1L, vLo,  c1);
	sum1L = MADD64(sum1L, vHi, -c2);
 8010152:	426d      	negs	r5, r5
 8010154:	fbc6 3405 	smlal	r3, r4, r6, r5
	
	//MC0M(0) // a
	MC0M(1)
 8010158:	68d5      	ldr	r5, [r2, #12]
 801015a:	684f      	ldr	r7, [r1, #4]
 801015c:	6d8e      	ldr	r6, [r1, #88]	; 0x58
 801015e:	6890      	ldr	r0, [r2, #8]
 8010160:	fbc7 3400 	smlal	r3, r4, r7, r0
 8010164:	426d      	negs	r5, r5
 8010166:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(2)
 801016a:	6955      	ldr	r5, [r2, #20]
 801016c:	688f      	ldr	r7, [r1, #8]
 801016e:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8010170:	6910      	ldr	r0, [r2, #16]
 8010172:	fbc7 3400 	smlal	r3, r4, r7, r0
 8010176:	426d      	negs	r5, r5
 8010178:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(3)
 801017c:	69d5      	ldr	r5, [r2, #28]
 801017e:	68cf      	ldr	r7, [r1, #12]
 8010180:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 8010182:	6990      	ldr	r0, [r2, #24]
 8010184:	fbc7 3400 	smlal	r3, r4, r7, r0
 8010188:	426d      	negs	r5, r5
 801018a:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(4)
 801018e:	6a55      	ldr	r5, [r2, #36]	; 0x24
 8010190:	690f      	ldr	r7, [r1, #16]
 8010192:	6cce      	ldr	r6, [r1, #76]	; 0x4c
 8010194:	6a10      	ldr	r0, [r2, #32]
 8010196:	fbc7 3400 	smlal	r3, r4, r7, r0
 801019a:	426d      	negs	r5, r5
 801019c:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(5)
 80101a0:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 80101a2:	694f      	ldr	r7, [r1, #20]
 80101a4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80101a6:	6a90      	ldr	r0, [r2, #40]	; 0x28
 80101a8:	fbc7 3400 	smlal	r3, r4, r7, r0
 80101ac:	426d      	negs	r5, r5
 80101ae:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(6)
 80101b2:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80101b4:	698f      	ldr	r7, [r1, #24]
 80101b6:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 80101b8:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80101ba:	fbc7 3400 	smlal	r3, r4, r7, r0
 80101be:	426d      	negs	r5, r5
 80101c0:	fbc6 3405 	smlal	r3, r4, r6, r5
	MC0M(7)
 80101c4:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 80101c6:	69cf      	ldr	r7, [r1, #28]
 80101c8:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 80101ca:	6b90      	ldr	r0, [r2, #56]	; 0x38
 80101cc:	fbc7 3400 	smlal	r3, r4, r7, r0
 80101d0:	426d      	negs	r5, r5
 80101d2:	fbc6 3405 	smlal	r3, r4, r6, r5
  unsigned int xLo = (unsigned int) x;
  int xHi = (int) (x >> 32);
  int nComp = 32-n;
  int tmp;
  // Shortcut: n is always < 32.
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 80101d6:	250c      	movs	r5, #12
 80101d8:	2614      	movs	r6, #20
 80101da:	fa04 f705 	lsl.w	r7, r4, r5
 80101de:	fa44 f406 	asr.w	r4, r4, r6
 80101e2:	fa23 f306 	lsr.w	r3, r3, r6
 80101e6:	ea43 0307 	orr.w	r3, r3, r7
	if (sign != (x >> 15))
 80101ea:	155d      	asrs	r5, r3, #21
 80101ec:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
 80101f0:	bf1c      	itt	ne
 80101f2:	17dc      	asrne	r4, r3, #31
		x = sign ^ ((1 << 15) - 1);
 80101f4:	f484 43ff 	eorne.w	r3, r4, #32640	; 0x7f80
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = rndVal;

	MC1M(0)
 80101f8:	f501 5580 	add.w	r5, r1, #4096	; 0x1000
	x >>= fracBits;
 80101fc:	bf0c      	ite	eq
 80101fe:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 8010200:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	MC1M(0)
 8010204:	f8d2 7400 	ldr.w	r7, [r2, #1024]	; 0x400
 8010208:	682e      	ldr	r6, [r5, #0]
	return (short)x;
 801020a:	f8a8 3000 	strh.w	r3, [r8]
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 801020e:	2400      	movs	r4, #0
 8010210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010214:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(1)
 8010218:	f8d2 7404 	ldr.w	r7, [r2, #1028]	; 0x404
 801021c:	686e      	ldr	r6, [r5, #4]
 801021e:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(2)
 8010222:	f8d2 7408 	ldr.w	r7, [r2, #1032]	; 0x408
 8010226:	68ae      	ldr	r6, [r5, #8]
 8010228:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(3)
 801022c:	f8d2 740c 	ldr.w	r7, [r2, #1036]	; 0x40c
 8010230:	68ee      	ldr	r6, [r5, #12]
 8010232:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(4)
 8010236:	f8d2 7410 	ldr.w	r7, [r2, #1040]	; 0x410
 801023a:	692e      	ldr	r6, [r5, #16]
 801023c:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(5)
 8010240:	f8d2 7414 	ldr.w	r7, [r2, #1044]	; 0x414
 8010244:	696e      	ldr	r6, [r5, #20]
 8010246:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(6)
 801024a:	f8d2 7418 	ldr.w	r7, [r2, #1048]	; 0x418
 801024e:	69ae      	ldr	r6, [r5, #24]
 8010250:	fbc6 3407 	smlal	r3, r4, r6, r7
	MC1M(7)
 8010254:	69ed      	ldr	r5, [r5, #28]
 8010256:	f8d2 641c 	ldr.w	r6, [r2, #1052]	; 0x41c
 801025a:	fbc5 3406 	smlal	r3, r4, r5, r6
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 801025e:	250c      	movs	r5, #12
 8010260:	2614      	movs	r6, #20
 8010262:	fa04 f705 	lsl.w	r7, r4, r5
 8010266:	fa44 f406 	asr.w	r4, r4, r6
 801026a:	fa23 f306 	lsr.w	r3, r3, r6
 801026e:	ea43 0307 	orr.w	r3, r3, r7
	if (sign != (x >> 15))
 8010272:	155d      	asrs	r5, r3, #21
	sign = x >> 31;
 8010274:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 8010276:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 801027a:	bf16      	itet	ne
 801027c:	f484 43ff 	eorne.w	r3, r4, #32640	; 0x7f80
	x >>= fracBits;
 8010280:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 8010282:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 8010286:	f8a8 3020 	strh.w	r3, [r8, #32]
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm++;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 801028a:	f502 6388 	add.w	r3, r2, #1088	; 0x440
 801028e:	f108 0a40 	add.w	sl, r8, #64	; 0x40
 8010292:	4647      	mov	r7, r8
 8010294:	f102 0e80 	add.w	lr, r2, #128	; 0x80
 8010298:	468c      	mov	ip, r1
 801029a:	9301      	str	r3, [sp, #4]
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 801029c:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
 80102a0:	f04f 0800 	mov.w	r8, #0
		sum1L = sum2L = rndVal;

		MC2M(0)
 80102a4:	e95e 6b10 	ldrd	r6, fp, [lr, #-64]	; 0x40
 80102a8:	f8dc 4100 	ldr.w	r4, [ip, #256]	; 0x100
 80102ac:	f8dc 515c 	ldr.w	r5, [ip, #348]	; 0x15c
 80102b0:	464a      	mov	r2, r9
 80102b2:	4640      	mov	r0, r8
 80102b4:	fbc4 2006 	smlal	r2, r0, r4, r6
 80102b8:	464b      	mov	r3, r9
 80102ba:	4641      	mov	r1, r8
 80102bc:	fbc4 310b 	smlal	r3, r1, r4, fp
 80102c0:	f1cb 0400 	rsb	r4, fp, #0
 80102c4:	fbc5 2004 	smlal	r2, r0, r5, r4
 80102c8:	fbc5 3106 	smlal	r3, r1, r5, r6
		MC2M(1)
 80102cc:	e95e 5b0e 	ldrd	r5, fp, [lr, #-56]	; 0x38
 80102d0:	f8dc 6104 	ldr.w	r6, [ip, #260]	; 0x104
 80102d4:	f8dc 4158 	ldr.w	r4, [ip, #344]	; 0x158
 80102d8:	fbc6 2005 	smlal	r2, r0, r6, r5
 80102dc:	fbc6 310b 	smlal	r3, r1, r6, fp
 80102e0:	f1cb 0600 	rsb	r6, fp, #0
 80102e4:	fbc4 2006 	smlal	r2, r0, r4, r6
 80102e8:	fbc4 3105 	smlal	r3, r1, r4, r5
		MC2M(2)
 80102ec:	e95e 5b0c 	ldrd	r5, fp, [lr, #-48]	; 0x30
 80102f0:	f8dc 6108 	ldr.w	r6, [ip, #264]	; 0x108
 80102f4:	f8dc 4154 	ldr.w	r4, [ip, #340]	; 0x154
 80102f8:	fbc6 2005 	smlal	r2, r0, r6, r5
 80102fc:	fbc6 310b 	smlal	r3, r1, r6, fp
 8010300:	f1cb 0600 	rsb	r6, fp, #0
 8010304:	fbc4 2006 	smlal	r2, r0, r4, r6
 8010308:	fbc4 3105 	smlal	r3, r1, r4, r5
		MC2M(3)
 801030c:	e95e 5b0a 	ldrd	r5, fp, [lr, #-40]	; 0x28
 8010310:	f8dc 610c 	ldr.w	r6, [ip, #268]	; 0x10c
 8010314:	f8dc 4150 	ldr.w	r4, [ip, #336]	; 0x150
 8010318:	fbc6 2005 	smlal	r2, r0, r6, r5
 801031c:	fbc6 310b 	smlal	r3, r1, r6, fp
 8010320:	f1cb 0600 	rsb	r6, fp, #0
 8010324:	fbc4 2006 	smlal	r2, r0, r4, r6
 8010328:	fbc4 3105 	smlal	r3, r1, r4, r5
		MC2M(4)
 801032c:	e95e 6b08 	ldrd	r6, fp, [lr, #-32]
 8010330:	f8dc 4110 	ldr.w	r4, [ip, #272]	; 0x110
 8010334:	f8dc 514c 	ldr.w	r5, [ip, #332]	; 0x14c
 8010338:	fbc4 2006 	smlal	r2, r0, r4, r6
 801033c:	fbc4 310b 	smlal	r3, r1, r4, fp
 8010340:	f1cb 0400 	rsb	r4, fp, #0
 8010344:	fbc5 2004 	smlal	r2, r0, r5, r4
 8010348:	fbc5 3106 	smlal	r3, r1, r5, r6
		MC2M(5)
 801034c:	e95e 6406 	ldrd	r6, r4, [lr, #-24]
 8010350:	f8dc b114 	ldr.w	fp, [ip, #276]	; 0x114
 8010354:	f8dc 5148 	ldr.w	r5, [ip, #328]	; 0x148
 8010358:	fbcb 2006 	smlal	r2, r0, fp, r6
 801035c:	fbcb 3104 	smlal	r3, r1, fp, r4
 8010360:	4264      	negs	r4, r4
 8010362:	fbc5 2004 	smlal	r2, r0, r5, r4
 8010366:	fbc5 3106 	smlal	r3, r1, r5, r6
		MC2M(6)
 801036a:	e95e 6404 	ldrd	r6, r4, [lr, #-16]
 801036e:	f8dc b118 	ldr.w	fp, [ip, #280]	; 0x118
 8010372:	f8dc 5144 	ldr.w	r5, [ip, #324]	; 0x144
 8010376:	fbcb 2006 	smlal	r2, r0, fp, r6
 801037a:	fbcb 3104 	smlal	r3, r1, fp, r4
 801037e:	4264      	negs	r4, r4
 8010380:	fbc5 2004 	smlal	r2, r0, r5, r4
 8010384:	fbc5 3106 	smlal	r3, r1, r5, r6
		MC2M(7)
 8010388:	e95e 6402 	ldrd	r6, r4, [lr, #-8]
 801038c:	f8dc b11c 	ldr.w	fp, [ip, #284]	; 0x11c
 8010390:	f8dc 5140 	ldr.w	r5, [ip, #320]	; 0x140
 8010394:	fbcb 2006 	smlal	r2, r0, fp, r6
 8010398:	fbcb 3104 	smlal	r3, r1, fp, r4
 801039c:	4264      	negs	r4, r4
 801039e:	fbc5 2004 	smlal	r2, r0, r5, r4
 80103a2:	fbc5 3106 	smlal	r3, r1, r5, r6
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 80103a6:	250c      	movs	r5, #12
 80103a8:	2614      	movs	r6, #20
 80103aa:	fa00 f405 	lsl.w	r4, r0, r5
 80103ae:	fa40 f006 	asr.w	r0, r0, r6
 80103b2:	fa22 f206 	lsr.w	r2, r2, r6
 80103b6:	ea42 0204 	orr.w	r2, r2, r4
	if (sign != (x >> 15))
 80103ba:	1554      	asrs	r4, r2, #21
	sign = x >> 31;
 80103bc:	17d0      	asrs	r0, r2, #31
	if (sign != (x >> 15))
 80103be:	ebb4 7fe2 	cmp.w	r4, r2, asr #31
		x = sign ^ ((1 << 15) - 1);
 80103c2:	bf16      	itet	ne
 80103c4:	f480 42ff 	eorne.w	r2, r0, #32640	; 0x7f80
	x >>= fracBits;
 80103c8:	1192      	asreq	r2, r2, #6
		x = sign ^ ((1 << 15) - 1);
 80103ca:	f082 027f 	eorne.w	r2, r2, #127	; 0x7f
	return (short)x;
 80103ce:	f827 2f02 	strh.w	r2, [r7, #2]!
 80103d2:	200c      	movs	r0, #12
 80103d4:	2414      	movs	r4, #20
 80103d6:	fa01 f200 	lsl.w	r2, r1, r0
 80103da:	fa41 f104 	asr.w	r1, r1, r4
 80103de:	fa23 f304 	lsr.w	r3, r3, r4
 80103e2:	ea43 0302 	orr.w	r3, r3, r2
	if (sign != (x >> 15))
 80103e6:	1559      	asrs	r1, r3, #21
 80103e8:	ebb1 7fe3 	cmp.w	r1, r3, asr #31
	sign = x >> 31;
 80103ec:	ea4f 72e3 	mov.w	r2, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 80103f0:	bf16      	itet	ne
 80103f2:	f482 43ff 	eorne.w	r3, r2, #32640	; 0x7f80
	x >>= fracBits;
 80103f6:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 80103f8:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 80103fc:	f82a 3d02 	strh.w	r3, [sl, #-2]!
	for (i = 15; i > 0; i--) {
 8010400:	9b01      	ldr	r3, [sp, #4]
 8010402:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
 8010406:	459e      	cmp	lr, r3
 8010408:	f50c 7c80 	add.w	ip, ip, #256	; 0x100
 801040c:	f47f af4a 	bne.w	80102a4 <xmp3_PolyphaseMono+0x16c>
		vb1 += 64;
		*(pcm)       = ClipToShort((int)SAR64(sum1L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*i) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		pcm++;
	}
}
 8010410:	b003      	add	sp, #12
 8010412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010416:	bf00      	nop

08010418 <xmp3_PolyphaseStereo>:
 * Notes:       interleaves PCM samples LRLRLR...
 *
 * TODO:        add 32-bit version for platforms where 64-bit mul-acc is not supported
 **************************************************************************************/
void PolyphaseStereo(short *pcm, int *vbuf, const int *coefBase)
{
 8010418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 801041c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010420:	2500      	movs	r5, #0
 8010422:	4680      	mov	r8, r0
 8010424:	b085      	sub	sp, #20
	/* special case, output sample 0 */
	coef = coefBase;
	vb1 = vbuf;
	sum1L = sum1R = rndVal;

	MC0S(0)
 8010426:	6817      	ldr	r7, [r2, #0]
 8010428:	6808      	ldr	r0, [r1, #0]
 801042a:	461c      	mov	r4, r3
 801042c:	462e      	mov	r6, r5
 801042e:	fbc0 4607 	smlal	r4, r6, r0, r7
 8010432:	6850      	ldr	r0, [r2, #4]
 8010434:	f1c0 0c00 	rsb	ip, r0, #0
 8010438:	6dc8      	ldr	r0, [r1, #92]	; 0x5c
 801043a:	fbc0 460c 	smlal	r4, r6, r0, ip
 801043e:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 8010442:	fbc0 3507 	smlal	r3, r5, r0, r7
 8010446:	f8d1 00dc 	ldr.w	r0, [r1, #220]	; 0xdc
 801044a:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(1)
 801044e:	6897      	ldr	r7, [r2, #8]
 8010450:	6848      	ldr	r0, [r1, #4]
 8010452:	fbc0 4607 	smlal	r4, r6, r0, r7
 8010456:	68d0      	ldr	r0, [r2, #12]
 8010458:	f1c0 0c00 	rsb	ip, r0, #0
 801045c:	6d88      	ldr	r0, [r1, #88]	; 0x58
 801045e:	fbc0 460c 	smlal	r4, r6, r0, ip
 8010462:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
 8010466:	fbc0 3507 	smlal	r3, r5, r0, r7
 801046a:	f8d1 00d8 	ldr.w	r0, [r1, #216]	; 0xd8
 801046e:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(2)
 8010472:	6917      	ldr	r7, [r2, #16]
 8010474:	6888      	ldr	r0, [r1, #8]
 8010476:	fbc0 4607 	smlal	r4, r6, r0, r7
 801047a:	6950      	ldr	r0, [r2, #20]
 801047c:	f1c0 0c00 	rsb	ip, r0, #0
 8010480:	6d48      	ldr	r0, [r1, #84]	; 0x54
 8010482:	fbc0 460c 	smlal	r4, r6, r0, ip
 8010486:	f8d1 0088 	ldr.w	r0, [r1, #136]	; 0x88
 801048a:	fbc0 3507 	smlal	r3, r5, r0, r7
 801048e:	f8d1 00d4 	ldr.w	r0, [r1, #212]	; 0xd4
 8010492:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(3)
 8010496:	6997      	ldr	r7, [r2, #24]
 8010498:	68c8      	ldr	r0, [r1, #12]
 801049a:	fbc0 4607 	smlal	r4, r6, r0, r7
 801049e:	69d0      	ldr	r0, [r2, #28]
 80104a0:	f1c0 0c00 	rsb	ip, r0, #0
 80104a4:	6d08      	ldr	r0, [r1, #80]	; 0x50
 80104a6:	fbc0 460c 	smlal	r4, r6, r0, ip
 80104aa:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80104ae:	fbc0 3507 	smlal	r3, r5, r0, r7
 80104b2:	f8d1 00d0 	ldr.w	r0, [r1, #208]	; 0xd0
 80104b6:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(4)
 80104ba:	6a17      	ldr	r7, [r2, #32]
 80104bc:	6908      	ldr	r0, [r1, #16]
 80104be:	fbc0 4607 	smlal	r4, r6, r0, r7
 80104c2:	6a50      	ldr	r0, [r2, #36]	; 0x24
 80104c4:	f1c0 0c00 	rsb	ip, r0, #0
 80104c8:	6cc8      	ldr	r0, [r1, #76]	; 0x4c
 80104ca:	fbc0 460c 	smlal	r4, r6, r0, ip
 80104ce:	f8d1 0090 	ldr.w	r0, [r1, #144]	; 0x90
 80104d2:	fbc0 3507 	smlal	r3, r5, r0, r7
 80104d6:	f8d1 00cc 	ldr.w	r0, [r1, #204]	; 0xcc
 80104da:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(5)
 80104de:	6a97      	ldr	r7, [r2, #40]	; 0x28
 80104e0:	6948      	ldr	r0, [r1, #20]
 80104e2:	fbc0 4607 	smlal	r4, r6, r0, r7
 80104e6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80104e8:	f1c0 0c00 	rsb	ip, r0, #0
 80104ec:	6c88      	ldr	r0, [r1, #72]	; 0x48
 80104ee:	fbc0 460c 	smlal	r4, r6, r0, ip
 80104f2:	f8d1 0094 	ldr.w	r0, [r1, #148]	; 0x94
 80104f6:	fbc0 3507 	smlal	r3, r5, r0, r7
 80104fa:	f8d1 00c8 	ldr.w	r0, [r1, #200]	; 0xc8
 80104fe:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(6)
 8010502:	6b17      	ldr	r7, [r2, #48]	; 0x30
 8010504:	6988      	ldr	r0, [r1, #24]
 8010506:	fbc0 4607 	smlal	r4, r6, r0, r7
 801050a:	6b50      	ldr	r0, [r2, #52]	; 0x34
 801050c:	f1c0 0c00 	rsb	ip, r0, #0
 8010510:	6c48      	ldr	r0, [r1, #68]	; 0x44
 8010512:	fbc0 460c 	smlal	r4, r6, r0, ip
 8010516:	f8d1 0098 	ldr.w	r0, [r1, #152]	; 0x98
 801051a:	fbc0 3507 	smlal	r3, r5, r0, r7
 801051e:	f8d1 00c4 	ldr.w	r0, [r1, #196]	; 0xc4
 8010522:	fbc0 350c 	smlal	r3, r5, r0, ip
	MC0S(7)
 8010526:	6b97      	ldr	r7, [r2, #56]	; 0x38
 8010528:	69c8      	ldr	r0, [r1, #28]
 801052a:	fbc0 4607 	smlal	r4, r6, r0, r7
 801052e:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
 8010530:	f1c0 0c00 	rsb	ip, r0, #0
 8010534:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8010536:	fbc0 460c 	smlal	r4, r6, r0, ip
 801053a:	f8d1 009c 	ldr.w	r0, [r1, #156]	; 0x9c
 801053e:	fbc0 3507 	smlal	r3, r5, r0, r7
 8010542:	f8d1 00c0 	ldr.w	r0, [r1, #192]	; 0xc0
 8010546:	fbc0 350c 	smlal	r3, r5, r0, ip
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 801054a:	270c      	movs	r7, #12
 801054c:	f04f 0c14 	mov.w	ip, #20
 8010550:	fa06 fe07 	lsl.w	lr, r6, r7
 8010554:	fa46 f60c 	asr.w	r6, r6, ip
 8010558:	fa24 f40c 	lsr.w	r4, r4, ip
 801055c:	ea44 040e 	orr.w	r4, r4, lr
	if (sign != (x >> 15))
 8010560:	1567      	asrs	r7, r4, #21
 8010562:	ebb7 7fe4 	cmp.w	r7, r4, asr #31
 8010566:	bf1b      	ittet	ne
 8010568:	17e6      	asrne	r6, r4, #31
		x = sign ^ ((1 << 15) - 1);
 801056a:	f486 44ff 	eorne.w	r4, r6, #32640	; 0x7f80
	x >>= fracBits;
 801056e:	11a4      	asreq	r4, r4, #6
		x = sign ^ ((1 << 15) - 1);
 8010570:	f084 047f 	eorne.w	r4, r4, #127	; 0x7f
	return (short)x;
 8010574:	f8a8 4000 	strh.w	r4, [r8]
 8010578:	2614      	movs	r6, #20
 801057a:	462c      	mov	r4, r5
 801057c:	250c      	movs	r5, #12
 801057e:	fa04 f705 	lsl.w	r7, r4, r5
 8010582:	fa44 f406 	asr.w	r4, r4, r6
 8010586:	fa23 f306 	lsr.w	r3, r3, r6
 801058a:	ea43 0307 	orr.w	r3, r3, r7
	if (sign != (x >> 15))
 801058e:	155d      	asrs	r5, r3, #21
 8010590:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
	sign = x >> 31;
 8010594:	ea4f 74e3 	mov.w	r4, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 8010598:	bf18      	it	ne
 801059a:	f484 43ff 	eorne.w	r3, r4, #32640	; 0x7f80
	/* special case, output sample 16 */
	coef = coefBase + 256;
	vb1 = vbuf + 64*16;
	sum1L = sum1R = rndVal;

	MC1S(0)
 801059e:	f501 5580 	add.w	r5, r1, #4096	; 0x1000
	x >>= fracBits;
 80105a2:	bf0c      	ite	eq
 80105a4:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 80105a6:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 80105aa:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
 80105ae:	2600      	movs	r6, #0
	MC1S(0)
 80105b0:	f8d2 7400 	ldr.w	r7, [r2, #1024]	; 0x400
 80105b4:	6828      	ldr	r0, [r5, #0]
	return (short)x;
 80105b6:	f8a8 3002 	strh.w	r3, [r8, #2]
 80105ba:	4664      	mov	r4, ip
 80105bc:	4633      	mov	r3, r6
 80105be:	fbc0 4307 	smlal	r4, r3, r0, r7
 80105c2:	f8d5 0080 	ldr.w	r0, [r5, #128]	; 0x80
 80105c6:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(1)
 80105ca:	f8d2 7404 	ldr.w	r7, [r2, #1028]	; 0x404
 80105ce:	6868      	ldr	r0, [r5, #4]
 80105d0:	fbc0 4307 	smlal	r4, r3, r0, r7
 80105d4:	f8d5 0084 	ldr.w	r0, [r5, #132]	; 0x84
 80105d8:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(2)
 80105dc:	f8d2 7408 	ldr.w	r7, [r2, #1032]	; 0x408
 80105e0:	68a8      	ldr	r0, [r5, #8]
 80105e2:	fbc0 4307 	smlal	r4, r3, r0, r7
 80105e6:	f8d5 0088 	ldr.w	r0, [r5, #136]	; 0x88
 80105ea:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(3)
 80105ee:	f8d2 740c 	ldr.w	r7, [r2, #1036]	; 0x40c
 80105f2:	68e8      	ldr	r0, [r5, #12]
 80105f4:	fbc0 4307 	smlal	r4, r3, r0, r7
 80105f8:	f8d5 008c 	ldr.w	r0, [r5, #140]	; 0x8c
 80105fc:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(4)
 8010600:	f8d2 7410 	ldr.w	r7, [r2, #1040]	; 0x410
 8010604:	6928      	ldr	r0, [r5, #16]
 8010606:	fbc0 4307 	smlal	r4, r3, r0, r7
 801060a:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 801060e:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(5)
 8010612:	f8d2 7414 	ldr.w	r7, [r2, #1044]	; 0x414
 8010616:	6968      	ldr	r0, [r5, #20]
 8010618:	fbc0 4307 	smlal	r4, r3, r0, r7
 801061c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
 8010620:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(6)
 8010624:	f8d2 7418 	ldr.w	r7, [r2, #1048]	; 0x418
 8010628:	69a8      	ldr	r0, [r5, #24]
 801062a:	fbc0 4307 	smlal	r4, r3, r0, r7
 801062e:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
 8010632:	fbc0 c607 	smlal	ip, r6, r0, r7
	MC1S(7)
 8010636:	f8d2 e41c 	ldr.w	lr, [r2, #1052]	; 0x41c
 801063a:	69ef      	ldr	r7, [r5, #28]
 801063c:	fbc7 430e 	smlal	r4, r3, r7, lr
 8010640:	f8d5 709c 	ldr.w	r7, [r5, #156]	; 0x9c
 8010644:	4665      	mov	r5, ip
 8010646:	fbc7 560e 	smlal	r5, r6, r7, lr
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 801064a:	270c      	movs	r7, #12
 801064c:	f04f 0c14 	mov.w	ip, #20
 8010650:	fa03 fe07 	lsl.w	lr, r3, r7
 8010654:	fa43 f30c 	asr.w	r3, r3, ip
 8010658:	fa24 f40c 	lsr.w	r4, r4, ip
 801065c:	ea44 040e 	orr.w	r4, r4, lr
	if (sign != (x >> 15))
 8010660:	1567      	asrs	r7, r4, #21
	sign = x >> 31;
 8010662:	17e3      	asrs	r3, r4, #31
	if (sign != (x >> 15))
 8010664:	ebb7 7fe4 	cmp.w	r7, r4, asr #31
		x = sign ^ ((1 << 15) - 1);
 8010668:	bf16      	itet	ne
 801066a:	f483 44ff 	eorne.w	r4, r3, #32640	; 0x7f80
	x >>= fracBits;
 801066e:	11a4      	asreq	r4, r4, #6
		x = sign ^ ((1 << 15) - 1);
 8010670:	f084 047f 	eorne.w	r4, r4, #127	; 0x7f
	return (short)x;
 8010674:	f8a8 4040 	strh.w	r4, [r8, #64]	; 0x40
 8010678:	462b      	mov	r3, r5
 801067a:	240c      	movs	r4, #12
 801067c:	2514      	movs	r5, #20
 801067e:	fa06 f704 	lsl.w	r7, r6, r4
 8010682:	fa46 f605 	asr.w	r6, r6, r5
 8010686:	fa23 f305 	lsr.w	r3, r3, r5
 801068a:	ea43 0307 	orr.w	r3, r3, r7
	if (sign != (x >> 15))
 801068e:	155d      	asrs	r5, r3, #21
	sign = x >> 31;
 8010690:	17dc      	asrs	r4, r3, #31
	if (sign != (x >> 15))
 8010692:	ebb5 7fe3 	cmp.w	r5, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 8010696:	bf16      	itet	ne
 8010698:	f484 43ff 	eorne.w	r3, r4, #32640	; 0x7f80
	x >>= fracBits;
 801069c:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 801069e:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 80106a2:	f8a8 3042 	strh.w	r3, [r8, #66]	; 0x42
	coef = coefBase + 16;
	vb1 = vbuf + 64;
	pcm += 2;

	/* right now, the compiler creates bad asm from this... */
	for (i = 15; i > 0; i--) {
 80106a6:	f108 0308 	add.w	r3, r8, #8
 80106aa:	9300      	str	r3, [sp, #0]
 80106ac:	f502 6388 	add.w	r3, r2, #1088	; 0x440
 80106b0:	f102 0b80 	add.w	fp, r2, #128	; 0x80
 80106b4:	460e      	mov	r6, r1
 80106b6:	f8cd 8004 	str.w	r8, [sp, #4]
 80106ba:	9303      	str	r3, [sp, #12]
		sum1L = sum2L = rndVal;
		sum1R = sum2R = rndVal;

		MC2S(0)
 80106bc:	e95b e810 	ldrd	lr, r8, [fp, #-64]	; 0x40
 80106c0:	f8d6 1100 	ldr.w	r1, [r6, #256]	; 0x100
 80106c4:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
        __asm__ volatile ("smlal %0,%1,%2,%3" : "+&r" (u.r.lo32), "+&r" (u.r.hi32) : "r" (x), "r" (y) : "cc");
 80106c8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 80106cc:	f04f 0c00 	mov.w	ip, #0
 80106d0:	fbc1 0c0e 	smlal	r0, ip, r1, lr
 80106d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80106d8:	2500      	movs	r5, #0
 80106da:	fbc1 2508 	smlal	r2, r5, r1, r8
 80106de:	f1c8 0900 	rsb	r9, r8, #0
 80106e2:	fbc3 0c09 	smlal	r0, ip, r3, r9
 80106e6:	fbc3 250e 	smlal	r2, r5, r3, lr
 80106ea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80106ee:	f8d6 a180 	ldr.w	sl, [r6, #384]	; 0x180
 80106f2:	9202      	str	r2, [sp, #8]
 80106f4:	2700      	movs	r7, #0
 80106f6:	fbca 170e 	smlal	r1, r7, sl, lr
 80106fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80106fe:	2400      	movs	r4, #0
 8010700:	fbca 3408 	smlal	r3, r4, sl, r8
 8010704:	f8d6 21dc 	ldr.w	r2, [r6, #476]	; 0x1dc
 8010708:	fbc2 1709 	smlal	r1, r7, r2, r9
 801070c:	fbc2 340e 	smlal	r3, r4, r2, lr
		MC2S(1)
 8010710:	e95b ae0e 	ldrd	sl, lr, [fp, #-56]	; 0x38
 8010714:	f8d6 9104 	ldr.w	r9, [r6, #260]	; 0x104
 8010718:	f8d6 8158 	ldr.w	r8, [r6, #344]	; 0x158
 801071c:	fbc9 0c0a 	smlal	r0, ip, r9, sl
 8010720:	9a02      	ldr	r2, [sp, #8]
 8010722:	fbc9 250e 	smlal	r2, r5, r9, lr
 8010726:	f1ce 0900 	rsb	r9, lr, #0
 801072a:	fbc8 0c09 	smlal	r0, ip, r8, r9
 801072e:	fbc8 250a 	smlal	r2, r5, r8, sl
 8010732:	9202      	str	r2, [sp, #8]
 8010734:	f8d6 81d8 	ldr.w	r8, [r6, #472]	; 0x1d8
 8010738:	f8d6 2184 	ldr.w	r2, [r6, #388]	; 0x184
 801073c:	fbc2 170a 	smlal	r1, r7, r2, sl
 8010740:	fbc2 340e 	smlal	r3, r4, r2, lr
 8010744:	fbc8 1709 	smlal	r1, r7, r8, r9
 8010748:	fbc8 340a 	smlal	r3, r4, r8, sl
		MC2S(2)
 801074c:	e95b ae0c 	ldrd	sl, lr, [fp, #-48]	; 0x30
 8010750:	f8d6 9108 	ldr.w	r9, [r6, #264]	; 0x108
 8010754:	f8d6 8154 	ldr.w	r8, [r6, #340]	; 0x154
 8010758:	fbc9 0c0a 	smlal	r0, ip, r9, sl
 801075c:	9a02      	ldr	r2, [sp, #8]
 801075e:	fbc9 250e 	smlal	r2, r5, r9, lr
 8010762:	f1ce 0900 	rsb	r9, lr, #0
 8010766:	fbc8 0c09 	smlal	r0, ip, r8, r9
 801076a:	fbc8 250a 	smlal	r2, r5, r8, sl
 801076e:	9202      	str	r2, [sp, #8]
 8010770:	f8d6 81d4 	ldr.w	r8, [r6, #468]	; 0x1d4
 8010774:	f8d6 2188 	ldr.w	r2, [r6, #392]	; 0x188
 8010778:	fbc2 170a 	smlal	r1, r7, r2, sl
 801077c:	fbc2 340e 	smlal	r3, r4, r2, lr
 8010780:	fbc8 1709 	smlal	r1, r7, r8, r9
 8010784:	fbc8 340a 	smlal	r3, r4, r8, sl
		MC2S(3)
 8010788:	e95b ae0a 	ldrd	sl, lr, [fp, #-40]	; 0x28
 801078c:	f8d6 910c 	ldr.w	r9, [r6, #268]	; 0x10c
 8010790:	f8d6 8150 	ldr.w	r8, [r6, #336]	; 0x150
 8010794:	fbc9 0c0a 	smlal	r0, ip, r9, sl
 8010798:	9a02      	ldr	r2, [sp, #8]
 801079a:	fbc9 250e 	smlal	r2, r5, r9, lr
 801079e:	f1ce 0900 	rsb	r9, lr, #0
 80107a2:	fbc8 0c09 	smlal	r0, ip, r8, r9
 80107a6:	fbc8 250a 	smlal	r2, r5, r8, sl
 80107aa:	9202      	str	r2, [sp, #8]
 80107ac:	f8d6 81d0 	ldr.w	r8, [r6, #464]	; 0x1d0
 80107b0:	f8d6 218c 	ldr.w	r2, [r6, #396]	; 0x18c
 80107b4:	fbc2 170a 	smlal	r1, r7, r2, sl
 80107b8:	fbc2 340e 	smlal	r3, r4, r2, lr
 80107bc:	fbc8 1709 	smlal	r1, r7, r8, r9
 80107c0:	fbc8 340a 	smlal	r3, r4, r8, sl
		MC2S(4)
 80107c4:	e95b ae08 	ldrd	sl, lr, [fp, #-32]
 80107c8:	f8d6 9110 	ldr.w	r9, [r6, #272]	; 0x110
 80107cc:	f8d6 814c 	ldr.w	r8, [r6, #332]	; 0x14c
 80107d0:	fbc9 0c0a 	smlal	r0, ip, r9, sl
 80107d4:	9a02      	ldr	r2, [sp, #8]
 80107d6:	fbc9 250e 	smlal	r2, r5, r9, lr
 80107da:	f1ce 0900 	rsb	r9, lr, #0
 80107de:	fbc8 0c09 	smlal	r0, ip, r8, r9
 80107e2:	fbc8 250a 	smlal	r2, r5, r8, sl
 80107e6:	9202      	str	r2, [sp, #8]
 80107e8:	f8d6 81cc 	ldr.w	r8, [r6, #460]	; 0x1cc
 80107ec:	f8d6 2190 	ldr.w	r2, [r6, #400]	; 0x190
 80107f0:	fbc2 170a 	smlal	r1, r7, r2, sl
 80107f4:	fbc2 340e 	smlal	r3, r4, r2, lr
 80107f8:	fbc8 1709 	smlal	r1, r7, r8, r9
 80107fc:	fbc8 340a 	smlal	r3, r4, r8, sl
		MC2S(5)
 8010800:	e95b ae06 	ldrd	sl, lr, [fp, #-24]
 8010804:	f8d6 9114 	ldr.w	r9, [r6, #276]	; 0x114
 8010808:	f8d6 8148 	ldr.w	r8, [r6, #328]	; 0x148
 801080c:	fbc9 0c0a 	smlal	r0, ip, r9, sl
 8010810:	9a02      	ldr	r2, [sp, #8]
 8010812:	fbc9 250e 	smlal	r2, r5, r9, lr
 8010816:	f1ce 0900 	rsb	r9, lr, #0
 801081a:	fbc8 0c09 	smlal	r0, ip, r8, r9
 801081e:	fbc8 250a 	smlal	r2, r5, r8, sl
 8010822:	9202      	str	r2, [sp, #8]
 8010824:	f8d6 81c8 	ldr.w	r8, [r6, #456]	; 0x1c8
 8010828:	f8d6 2194 	ldr.w	r2, [r6, #404]	; 0x194
 801082c:	fbc2 170a 	smlal	r1, r7, r2, sl
 8010830:	fbc2 340e 	smlal	r3, r4, r2, lr
 8010834:	fbc8 1709 	smlal	r1, r7, r8, r9
 8010838:	fbc8 340a 	smlal	r3, r4, r8, sl
		MC2S(6)
 801083c:	e95b ae04 	ldrd	sl, lr, [fp, #-16]
 8010840:	f8d6 9118 	ldr.w	r9, [r6, #280]	; 0x118
 8010844:	f8d6 8144 	ldr.w	r8, [r6, #324]	; 0x144
 8010848:	fbc9 0c0a 	smlal	r0, ip, r9, sl
 801084c:	9a02      	ldr	r2, [sp, #8]
 801084e:	fbc9 250e 	smlal	r2, r5, r9, lr
 8010852:	f1ce 0900 	rsb	r9, lr, #0
 8010856:	fbc8 0c09 	smlal	r0, ip, r8, r9
 801085a:	fbc8 250a 	smlal	r2, r5, r8, sl
 801085e:	9202      	str	r2, [sp, #8]
 8010860:	f8d6 81c4 	ldr.w	r8, [r6, #452]	; 0x1c4
 8010864:	f8d6 2198 	ldr.w	r2, [r6, #408]	; 0x198
 8010868:	fbc2 170a 	smlal	r1, r7, r2, sl
 801086c:	fbc2 340e 	smlal	r3, r4, r2, lr
 8010870:	fbc8 1709 	smlal	r1, r7, r8, r9
 8010874:	fbc8 340a 	smlal	r3, r4, r8, sl
		MC2S(7)
 8010878:	e95b ae02 	ldrd	sl, lr, [fp, #-8]
 801087c:	f8d6 911c 	ldr.w	r9, [r6, #284]	; 0x11c
 8010880:	f8d6 8140 	ldr.w	r8, [r6, #320]	; 0x140
 8010884:	fbc9 0c0a 	smlal	r0, ip, r9, sl
 8010888:	9a02      	ldr	r2, [sp, #8]
 801088a:	fbc9 250e 	smlal	r2, r5, r9, lr
 801088e:	f1ce 0900 	rsb	r9, lr, #0
 8010892:	fbc8 0c09 	smlal	r0, ip, r8, r9
 8010896:	fbc8 250a 	smlal	r2, r5, r8, sl
 801089a:	9202      	str	r2, [sp, #8]
 801089c:	f8d6 81c0 	ldr.w	r8, [r6, #448]	; 0x1c0
 80108a0:	f8d6 219c 	ldr.w	r2, [r6, #412]	; 0x19c
 80108a4:	fbc2 170a 	smlal	r1, r7, r2, sl
 80108a8:	fbc2 340e 	smlal	r3, r4, r2, lr
 80108ac:	fbc8 1709 	smlal	r1, r7, r8, r9
 80108b0:	fbc8 340a 	smlal	r3, r4, r8, sl
  __asm__ __volatile__( "lsl %2, %0, %3\n\t"  // tmp <- xHi<<(32-n)
 80108b4:	220c      	movs	r2, #12
 80108b6:	f04f 0814 	mov.w	r8, #20
 80108ba:	fa0c fe02 	lsl.w	lr, ip, r2
 80108be:	fa4c fc08 	asr.w	ip, ip, r8
 80108c2:	fa20 f008 	lsr.w	r0, r0, r8
 80108c6:	ea40 000e 	orr.w	r0, r0, lr
	if (sign != (x >> 15))
 80108ca:	ea4f 5e60 	mov.w	lr, r0, asr #21
	sign = x >> 31;
 80108ce:	ea4f 7ce0 	mov.w	ip, r0, asr #31
	if (sign != (x >> 15))
 80108d2:	ebbe 7fe0 	cmp.w	lr, r0, asr #31
		x = sign ^ ((1 << 15) - 1);
 80108d6:	bf18      	it	ne
 80108d8:	f48c 40ff 	eorne.w	r0, ip, #32640	; 0x7f80
	return (short)x;
 80108dc:	9a00      	ldr	r2, [sp, #0]
	x >>= fracBits;
 80108de:	bf0c      	ite	eq
 80108e0:	1180      	asreq	r0, r0, #6
		x = sign ^ ((1 << 15) - 1);
 80108e2:	f080 007f 	eorne.w	r0, r0, #127	; 0x7f
	return (short)x;
 80108e6:	f822 0c04 	strh.w	r0, [r2, #-4]
 80108ea:	f04f 0c14 	mov.w	ip, #20
 80108ee:	220c      	movs	r2, #12
 80108f0:	fa07 f002 	lsl.w	r0, r7, r2
 80108f4:	fa47 f70c 	asr.w	r7, r7, ip
 80108f8:	fa21 f10c 	lsr.w	r1, r1, ip
 80108fc:	ea41 0100 	orr.w	r1, r1, r0
	if (sign != (x >> 15))
 8010900:	154f      	asrs	r7, r1, #21
	sign = x >> 31;
 8010902:	17c8      	asrs	r0, r1, #31
	if (sign != (x >> 15))
 8010904:	ebb7 7fe1 	cmp.w	r7, r1, asr #31
		x = sign ^ ((1 << 15) - 1);
 8010908:	bf18      	it	ne
 801090a:	f480 41ff 	eorne.w	r1, r0, #32640	; 0x7f80
	return (short)x;
 801090e:	9a00      	ldr	r2, [sp, #0]
	x >>= fracBits;
 8010910:	bf0c      	ite	eq
 8010912:	1189      	asreq	r1, r1, #6
		x = sign ^ ((1 << 15) - 1);
 8010914:	f081 017f 	eorne.w	r1, r1, #127	; 0x7f
	return (short)x;
 8010918:	f822 1c02 	strh.w	r1, [r2, #-2]
 801091c:	200c      	movs	r0, #12
 801091e:	9a02      	ldr	r2, [sp, #8]
 8010920:	2714      	movs	r7, #20
 8010922:	fa05 f100 	lsl.w	r1, r5, r0
 8010926:	fa45 f507 	asr.w	r5, r5, r7
 801092a:	fa22 f207 	lsr.w	r2, r2, r7
 801092e:	ea42 0201 	orr.w	r2, r2, r1
	if (sign != (x >> 15))
 8010932:	1550      	asrs	r0, r2, #21
	sign = x >> 31;
 8010934:	17d1      	asrs	r1, r2, #31
	if (sign != (x >> 15))
 8010936:	ebb0 7fe2 	cmp.w	r0, r2, asr #31
		x = sign ^ ((1 << 15) - 1);
 801093a:	bf18      	it	ne
 801093c:	f481 42ff 	eorne.w	r2, r1, #32640	; 0x7f80
	return (short)x;
 8010940:	9901      	ldr	r1, [sp, #4]
	x >>= fracBits;
 8010942:	bf0c      	ite	eq
 8010944:	1192      	asreq	r2, r2, #6
		x = sign ^ ((1 << 15) - 1);
 8010946:	f082 027f 	eorne.w	r2, r2, #127	; 0x7f
	return (short)x;
 801094a:	f8a1 207c 	strh.w	r2, [r1, #124]	; 0x7c
 801094e:	2014      	movs	r0, #20
 8010950:	210c      	movs	r1, #12
 8010952:	fa04 f201 	lsl.w	r2, r4, r1
 8010956:	fa44 f400 	asr.w	r4, r4, r0
 801095a:	fa23 f300 	lsr.w	r3, r3, r0
 801095e:	ea43 0302 	orr.w	r3, r3, r2
	if (sign != (x >> 15))
 8010962:	1559      	asrs	r1, r3, #21
	sign = x >> 31;
 8010964:	17da      	asrs	r2, r3, #31
	if (sign != (x >> 15))
 8010966:	ebb1 7fe3 	cmp.w	r1, r3, asr #31
		x = sign ^ ((1 << 15) - 1);
 801096a:	bf18      	it	ne
 801096c:	f482 43ff 	eorne.w	r3, r2, #32640	; 0x7f80
	return (short)x;
 8010970:	9a01      	ldr	r2, [sp, #4]
	x >>= fracBits;
 8010972:	bf0c      	ite	eq
 8010974:	119b      	asreq	r3, r3, #6
		x = sign ^ ((1 << 15) - 1);
 8010976:	f083 037f 	eorne.w	r3, r3, #127	; 0x7f
	return (short)x;
 801097a:	f8a2 307e 	strh.w	r3, [r2, #126]	; 0x7e
	for (i = 15; i > 0; i--) {
 801097e:	9b00      	ldr	r3, [sp, #0]
 8010980:	3304      	adds	r3, #4
 8010982:	9300      	str	r3, [sp, #0]
 8010984:	1f13      	subs	r3, r2, #4
 8010986:	9301      	str	r3, [sp, #4]
 8010988:	9b03      	ldr	r3, [sp, #12]
 801098a:	f10b 0b40 	add.w	fp, fp, #64	; 0x40
 801098e:	459b      	cmp	fp, r3
 8010990:	f506 7680 	add.w	r6, r6, #256	; 0x100
 8010994:	f47f ae92 	bne.w	80106bc <xmp3_PolyphaseStereo+0x2a4>
		*(pcm + 1)         = ClipToShort((int)SAR64(sum1R, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 0) = ClipToShort((int)SAR64(sum2L, (32-CSHIFT)), DEF_NFRACBITS);
		*(pcm + 2*2*i + 1) = ClipToShort((int)SAR64(sum2R, (32-CSHIFT)), DEF_NFRACBITS);
		pcm += 2;
	}
}
 8010998:	b005      	add	sp, #20
 801099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801099e:	bf00      	nop

080109a0 <xmp3_UnpackScaleFactors>:
 *              updated bitOffset
 *
 * Return:      length (in bytes) of scale factor data, -1 if null input pointers
 **************************************************************************************/
int UnpackScaleFactors(MP3DecInfo *mp3DecInfo, unsigned char *buf, int *bitOffset, int bitsAvail, int gr, int ch)
{
 80109a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109a4:	ed2d 8b02 	vpush	{d8}
 80109a8:	b097      	sub	sp, #92	; 0x5c
 80109aa:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 80109ae:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 80109b0:	9203      	str	r2, [sp, #12]
	FrameHeader *fh;
	SideInfo *si;
	ScaleFactorInfo *sfi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->FrameHeaderPS || !mp3DecInfo->SideInfoPS || !mp3DecInfo->ScaleFactorInfoPS)
 80109b2:	9007      	str	r0, [sp, #28]
 80109b4:	2800      	cmp	r0, #0
 80109b6:	f000 83ac 	beq.w	8011112 <xmp3_UnpackScaleFactors+0x772>
 80109ba:	6805      	ldr	r5, [r0, #0]
 80109bc:	ee08 1a10 	vmov	s16, r1
 80109c0:	4601      	mov	r1, r0
 80109c2:	2d00      	cmp	r5, #0
 80109c4:	f000 83a5 	beq.w	8011112 <xmp3_UnpackScaleFactors+0x772>
 80109c8:	6840      	ldr	r0, [r0, #4]
 80109ca:	9002      	str	r0, [sp, #8]
 80109cc:	2800      	cmp	r0, #0
 80109ce:	f000 83a0 	beq.w	8011112 <xmp3_UnpackScaleFactors+0x772>
 80109d2:	6889      	ldr	r1, [r1, #8]
 80109d4:	9101      	str	r1, [sp, #4]
 80109d6:	2900      	cmp	r1, #0
 80109d8:	f000 839b 	beq.w	8011112 <xmp3_UnpackScaleFactors+0x772>
	sfi = ((ScaleFactorInfo *)(mp3DecInfo->ScaleFactorInfoPS));

	/* init GetBits reader */
	startBuf = buf;
	bsi = &bitStreamInfo;
	SetBitstreamPointer(bsi, (bitsAvail + *bitOffset + 7) / 8, buf);
 80109dc:	6812      	ldr	r2, [r2, #0]
 80109de:	4413      	add	r3, r2
 80109e0:	1dd9      	adds	r1, r3, #7
 80109e2:	bf48      	it	mi
 80109e4:	f103 010e 	addmi.w	r1, r3, #14
 80109e8:	10c9      	asrs	r1, r1, #3
 80109ea:	ee18 2a10 	vmov	r2, s16
 80109ee:	a80a      	add	r0, sp, #40	; 0x28
 80109f0:	f7fc fbc8 	bl	800d184 <xmp3_SetBitstreamPointer>
	if (*bitOffset)
 80109f4:	9b03      	ldr	r3, [sp, #12]
 80109f6:	6819      	ldr	r1, [r3, #0]
 80109f8:	2900      	cmp	r1, #0
 80109fa:	f040 812f 	bne.w	8010c5c <xmp3_UnpackScaleFactors+0x2bc>
		GetBits(bsi, *bitOffset);

	if (fh->ver == MPEG1) 
 80109fe:	782b      	ldrb	r3, [r5, #0]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f040 8099 	bne.w	8010b38 <xmp3_UnpackScaleFactors+0x198>
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a06:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
 8010a0a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
 8010a0e:	011b      	lsls	r3, r3, #4
 8010a10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010a14:	9a02      	ldr	r2, [sp, #8]
 8010a16:	4413      	add	r3, r2
 8010a18:	4ac1      	ldr	r2, [pc, #772]	; (8010d20 <xmp3_UnpackScaleFactors+0x380>)
 8010a1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
	if (sis->blockType == 2) {
 8010a1c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a1e:	f812 9010 	ldrb.w	r9, [r2, r0, lsl #1]
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 8010a22:	eb02 0540 	add.w	r5, r2, r0, lsl #1
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a26:	00e2      	lsls	r2, r4, #3
 8010a28:	9208      	str	r2, [sp, #32]
	if (sis->blockType == 2) {
 8010a2a:	2902      	cmp	r1, #2
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
	slen1 = (int)SFLenTab[sis->sfCompress][1];
 8010a30:	786d      	ldrb	r5, [r5, #1]
	slen0 = (int)SFLenTab[sis->sfCompress][0];
 8010a32:	9204      	str	r2, [sp, #16]
	if (sis->blockType == 2) {
 8010a34:	f000 82a6 	beq.w	8010f84 <xmp3_UnpackScaleFactors+0x5e4>
		if(gr == 0) {
 8010a38:	f1ba 0f00 	cmp.w	sl, #0
 8010a3c:	f000 82e9 	beq.w	8011012 <xmp3_UnpackScaleFactors+0x672>
		UnpackSFMPEG1(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], si->scfsi[ch], gr, &sfi->sfis[0][ch]);
 8010a40:	0123      	lsls	r3, r4, #4
 8010a42:	9a02      	ldr	r2, [sp, #8]
 8010a44:	3308      	adds	r3, #8
 8010a46:	18d7      	adds	r7, r2, r3
			if(scfsi[0])  for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010a48:	58d3      	ldr	r3, [r2, r3]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f000 8170 	beq.w	8010d30 <xmp3_UnpackScaleFactors+0x390>
 8010a50:	ebc4 1144 	rsb	r1, r4, r4, lsl #5
 8010a54:	0049      	lsls	r1, r1, #1
 8010a56:	ebca 124a 	rsb	r2, sl, sl, lsl #5
 8010a5a:	9801      	ldr	r0, [sp, #4]
 8010a5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010a60:	1e4b      	subs	r3, r1, #1
 8010a62:	3a01      	subs	r2, #1
 8010a64:	3105      	adds	r1, #5
 8010a66:	4402      	add	r2, r0
 8010a68:	4403      	add	r3, r0
 8010a6a:	4401      	add	r1, r0
 8010a6c:	0160      	lsls	r0, r4, #5
 8010a6e:	9006      	str	r0, [sp, #24]
 8010a70:	ea4f 104a 	mov.w	r0, sl, lsl #5
 8010a74:	9005      	str	r0, [sp, #20]
 8010a76:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8010a7a:	f802 0f01 	strb.w	r0, [r2, #1]!
 8010a7e:	428b      	cmp	r3, r1
 8010a80:	d1f9      	bne.n	8010a76 <xmp3_UnpackScaleFactors+0xd6>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	f000 8172 	beq.w	8010d6e <xmp3_UnpackScaleFactors+0x3ce>
 8010a8a:	9b05      	ldr	r3, [sp, #20]
 8010a8c:	9a06      	ldr	r2, [sp, #24]
 8010a8e:	9901      	ldr	r1, [sp, #4]
 8010a90:	eba3 030a 	sub.w	r3, r3, sl
 8010a94:	1b12      	subs	r2, r2, r4
 8010a96:	009b      	lsls	r3, r3, #2
 8010a98:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010a9c:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8010aa0:	440b      	add	r3, r1
 8010aa2:	7991      	ldrb	r1, [r2, #6]
 8010aa4:	7199      	strb	r1, [r3, #6]
 8010aa6:	79d1      	ldrb	r1, [r2, #7]
 8010aa8:	71d9      	strb	r1, [r3, #7]
 8010aaa:	7a11      	ldrb	r1, [r2, #8]
 8010aac:	7219      	strb	r1, [r3, #8]
 8010aae:	7a51      	ldrb	r1, [r2, #9]
 8010ab0:	7259      	strb	r1, [r3, #9]
 8010ab2:	7a92      	ldrb	r2, [r2, #10]
 8010ab4:	729a      	strb	r2, [r3, #10]
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010ab6:	68bb      	ldr	r3, [r7, #8]
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	f000 8174 	beq.w	8010da6 <xmp3_UnpackScaleFactors+0x406>
 8010abe:	9b06      	ldr	r3, [sp, #24]
 8010ac0:	9801      	ldr	r0, [sp, #4]
 8010ac2:	1b1a      	subs	r2, r3, r4
 8010ac4:	0052      	lsls	r2, r2, #1
 8010ac6:	f102 030b 	add.w	r3, r2, #11
 8010aca:	3210      	adds	r2, #16
 8010acc:	1881      	adds	r1, r0, r2
 8010ace:	9a05      	ldr	r2, [sp, #20]
 8010ad0:	eba2 020a 	sub.w	r2, r2, sl
 8010ad4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010ad8:	4402      	add	r2, r0
 8010ada:	4403      	add	r3, r0
 8010adc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010ae0:	f802 0b01 	strb.w	r0, [r2], #1
 8010ae4:	428b      	cmp	r3, r1
 8010ae6:	d1f9      	bne.n	8010adc <xmp3_UnpackScaleFactors+0x13c>
			if(scfsi[3])  for(  ; sfb <21 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	f000 82b2 	beq.w	8011054 <xmp3_UnpackScaleFactors+0x6b4>
 8010af0:	9b06      	ldr	r3, [sp, #24]
 8010af2:	9801      	ldr	r0, [sp, #4]
 8010af4:	1b1a      	subs	r2, r3, r4
 8010af6:	0052      	lsls	r2, r2, #1
 8010af8:	f102 0310 	add.w	r3, r2, #16
 8010afc:	3215      	adds	r2, #21
 8010afe:	1881      	adds	r1, r0, r2
 8010b00:	9a05      	ldr	r2, [sp, #20]
 8010b02:	eba2 020a 	sub.w	r2, r2, sl
 8010b06:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8010b0a:	4402      	add	r2, r0
 8010b0c:	4403      	add	r3, r0
 8010b0e:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010b12:	f802 0b01 	strb.w	r0, [r2], #1
 8010b16:	428b      	cmp	r3, r1
 8010b18:	d1f9      	bne.n	8010b0e <xmp3_UnpackScaleFactors+0x16e>
		sfis->l[21] = 0;
 8010b1a:	9b05      	ldr	r3, [sp, #20]
 8010b1c:	9a06      	ldr	r2, [sp, #24]
 8010b1e:	eba3 030a 	sub.w	r3, r3, sl
 8010b22:	1b12      	subs	r2, r2, r4
 8010b24:	009b      	lsls	r3, r3, #2
 8010b26:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010b2a:	9a01      	ldr	r2, [sp, #4]
 8010b2c:	441a      	add	r2, r3
 8010b2e:	4613      	mov	r3, r2
 8010b30:	2200      	movs	r2, #0
 8010b32:	755a      	strb	r2, [r3, #21]
		sfis->l[22] = 0;
 8010b34:	759a      	strb	r2, [r3, #22]
 8010b36:	e0a5      	b.n	8010c84 <xmp3_UnpackScaleFactors+0x2e4>
	sfCompress = sis->sfCompress;
 8010b38:	eb0a 03ca 	add.w	r3, sl, sl, lsl #3
 8010b3c:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
 8010b40:	011b      	lsls	r3, r3, #4
 8010b42:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010b46:	9902      	ldr	r1, [sp, #8]
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8010b48:	6a2a      	ldr	r2, [r5, #32]
	sfCompress = sis->sfCompress;
 8010b4a:	440b      	add	r3, r1
 8010b4c:	00e1      	lsls	r1, r4, #3
 8010b4e:	9108      	str	r1, [sp, #32]
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8010b50:	f012 0201 	ands.w	r2, r2, #1
	sfCompress = sis->sfCompress;
 8010b54:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 8010b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b5a:	9104      	str	r1, [sp, #16]
	if (! ((modeExt & 0x01) && (ch == 1)) ) {
 8010b5c:	d002      	beq.n	8010b64 <xmp3_UnpackScaleFactors+0x1c4>
 8010b5e:	2c01      	cmp	r4, #1
 8010b60:	f000 81e5 	beq.w	8010f2e <xmp3_UnpackScaleFactors+0x58e>
		if (sfCompress < 400) {
 8010b64:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8010b68:	f280 80af 	bge.w	8010cca <xmp3_UnpackScaleFactors+0x32a>
			slen[0] = (sfCompress >> 4) / 5;
 8010b6c:	4d6d      	ldr	r5, [pc, #436]	; (8010d24 <xmp3_UnpackScaleFactors+0x384>)
 8010b6e:	1118      	asrs	r0, r3, #4
 8010b70:	fb85 1500 	smull	r1, r5, r5, r0
 8010b74:	17d9      	asrs	r1, r3, #31
 8010b76:	ebc1 0165 	rsb	r1, r1, r5, asr #1
 8010b7a:	910e      	str	r1, [sp, #56]	; 0x38
			slen[1]= (sfCompress >> 4) % 5;
 8010b7c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010b80:	1a41      	subs	r1, r0, r1
 8010b82:	910f      	str	r1, [sp, #60]	; 0x3c
	intensityScale = 0;
 8010b84:	2000      	movs	r0, #0
			slen[2]= (sfCompress & 0x0f) >> 2;
 8010b86:	f3c3 0181 	ubfx	r1, r3, #2, #2
			slen[3]= (sfCompress & 0x03);
 8010b8a:	f003 0303 	and.w	r3, r3, #3
			slen[2]= (sfCompress & 0x0f) >> 2;
 8010b8e:	9110      	str	r1, [sp, #64]	; 0x40
			slen[3]= (sfCompress & 0x03);
 8010b90:	9311      	str	r3, [sp, #68]	; 0x44
	preFlag = 0;
 8010b92:	4686      	mov	lr, r0
			sfcIdx = 0;
 8010b94:	4605      	mov	r5, r0
	if (sis->blockType == 2) 
 8010b96:	9b04      	ldr	r3, [sp, #16]
 8010b98:	00e1      	lsls	r1, r4, #3
 8010b9a:	4453      	add	r3, sl
 8010b9c:	4421      	add	r1, r4
 8010b9e:	011b      	lsls	r3, r3, #4
 8010ba0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8010ba4:	9902      	ldr	r1, [sp, #8]
 8010ba6:	440b      	add	r3, r1
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010ba8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
	if (sis->blockType == 2) 
 8010bac:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8010bae:	2f02      	cmp	r7, #2
 8010bb0:	f000 8126 	beq.w	8010e00 <xmp3_UnpackScaleFactors+0x460>
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010bb4:	4e5c      	ldr	r6, [pc, #368]	; (8010d28 <xmp3_UnpackScaleFactors+0x388>)
 8010bb6:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8010bba:	f816 5025 	ldrb.w	r5, [r6, r5, lsl #2]
 8010bbe:	f891 c002 	ldrb.w	ip, [r1, #2]
 8010bc2:	9509      	str	r5, [sp, #36]	; 0x24
 8010bc4:	784d      	ldrb	r5, [r1, #1]
 8010bc6:	78c9      	ldrb	r1, [r1, #3]
 8010bc8:	9513      	str	r5, [sp, #76]	; 0x4c
 8010bca:	e9cd c114 	strd	ip, r1, [sp, #80]	; 0x50
	if( (modeExt & 0x01) && (ch == 1) ) {
 8010bce:	2a00      	cmp	r2, #0
 8010bd0:	f000 80a2 	beq.w	8010d18 <xmp3_UnpackScaleFactors+0x378>
 8010bd4:	2c01      	cmp	r4, #1
 8010bd6:	f000 8195 	beq.w	8010f04 <xmp3_UnpackScaleFactors+0x564>
	sis->preFlag = preFlag;
 8010bda:	9b04      	ldr	r3, [sp, #16]
 8010bdc:	00e2      	lsls	r2, r4, #3
 8010bde:	4453      	add	r3, sl
 8010be0:	4422      	add	r2, r4
 8010be2:	011b      	lsls	r3, r3, #4
 8010be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010be8:	9a02      	ldr	r2, [sp, #8]
 8010bea:	4413      	add	r3, r2
	if(sis->blockType == 2) {
 8010bec:	2f02      	cmp	r7, #2
	sis->preFlag = preFlag;
 8010bee:	f8c3 e064 	str.w	lr, [r3, #100]	; 0x64
	if(sis->blockType == 2) {
 8010bf2:	f000 811d 	beq.w	8010e30 <xmp3_UnpackScaleFactors+0x490>
 8010bf6:	ebca 194a 	rsb	r9, sl, sl, lsl #5
 8010bfa:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8010bfe:	ebc4 1344 	rsb	r3, r4, r4, lsl #5
 8010c02:	eb09 0243 	add.w	r2, r9, r3, lsl #1
 8010c06:	0163      	lsls	r3, r4, #5
 8010c08:	9306      	str	r3, [sp, #24]
 8010c0a:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8010c0e:	9305      	str	r3, [sp, #20]
 8010c10:	9b01      	ldr	r3, [sp, #4]
 8010c12:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010c14:	e9cd a422 	strd	sl, r4, [sp, #136]	; 0x88
 8010c18:	1899      	adds	r1, r3, r2
 8010c1a:	f10d 084c 	add.w	r8, sp, #76	; 0x4c
 8010c1e:	af0e      	add	r7, sp, #56	; 0x38
		sfb = 0;
 8010c20:	2300      	movs	r3, #0
 8010c22:	4691      	mov	r9, r2
 8010c24:	468b      	mov	fp, r1
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010c26:	2e00      	cmp	r6, #0
 8010c28:	dd10      	ble.n	8010c4c <xmp3_UnpackScaleFactors+0x2ac>
 8010c2a:	9a01      	ldr	r2, [sp, #4]
				sfis->l[sfb] = (char)GetBits(bsi, slen[nrIdx]);
 8010c2c:	683c      	ldr	r4, [r7, #0]
 8010c2e:	441e      	add	r6, r3
 8010c30:	444b      	add	r3, r9
 8010c32:	eb02 0a03 	add.w	sl, r2, r3
 8010c36:	eb06 050b 	add.w	r5, r6, fp
 8010c3a:	4621      	mov	r1, r4
 8010c3c:	a80a      	add	r0, sp, #40	; 0x28
 8010c3e:	f7fc faa7 	bl	800d190 <xmp3_GetBits>
 8010c42:	f80a 0b01 	strb.w	r0, [sl], #1
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010c46:	45aa      	cmp	sl, r5
 8010c48:	d1f7      	bne.n	8010c3a <xmp3_UnpackScaleFactors+0x29a>
 8010c4a:	4633      	mov	r3, r6
		for (nrIdx = 0; nrIdx <= 3; nrIdx++) {
 8010c4c:	aa16      	add	r2, sp, #88	; 0x58
 8010c4e:	4590      	cmp	r8, r2
 8010c50:	f107 0704 	add.w	r7, r7, #4
 8010c54:	d006      	beq.n	8010c64 <xmp3_UnpackScaleFactors+0x2c4>
			for(i=0; i < nr[nrIdx]; i++, sfb++) {
 8010c56:	f858 6b04 	ldr.w	r6, [r8], #4
 8010c5a:	e7e4      	b.n	8010c26 <xmp3_UnpackScaleFactors+0x286>
		GetBits(bsi, *bitOffset);
 8010c5c:	a80a      	add	r0, sp, #40	; 0x28
 8010c5e:	f7fc fa97 	bl	800d190 <xmp3_GetBits>
 8010c62:	e6cc      	b.n	80109fe <xmp3_UnpackScaleFactors+0x5e>
		sfis->l[21] = sfis->l[22] = 0;
 8010c64:	e9dd a422 	ldrd	sl, r4, [sp, #136]	; 0x88
 8010c68:	9b05      	ldr	r3, [sp, #20]
 8010c6a:	9a06      	ldr	r2, [sp, #24]
 8010c6c:	eba3 030a 	sub.w	r3, r3, sl
 8010c70:	1b12      	subs	r2, r2, r4
 8010c72:	009b      	lsls	r3, r3, #2
 8010c74:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010c78:	9a01      	ldr	r2, [sp, #4]
 8010c7a:	441a      	add	r2, r3
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	2200      	movs	r2, #0
 8010c80:	759a      	strb	r2, [r3, #22]
 8010c82:	755a      	strb	r2, [r3, #21]
	else 
		UnpackSFMPEG2(bsi, &si->sis[gr][ch], &sfi->sfis[gr][ch], gr, ch, fh->modeExt, &sfi->sfjs);

	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 8010c84:	9b04      	ldr	r3, [sp, #16]
 8010c86:	9a08      	ldr	r2, [sp, #32]
 8010c88:	4453      	add	r3, sl
 8010c8a:	4422      	add	r2, r4
 8010c8c:	011b      	lsls	r3, r3, #4
 8010c8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010c92:	9a02      	ldr	r2, [sp, #8]
 8010c94:	441a      	add	r2, r3
 8010c96:	eb04 044a 	add.w	r4, r4, sl, lsl #1
 8010c9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8010c9c:	9a07      	ldr	r2, [sp, #28]
 8010c9e:	f504 74fc 	add.w	r4, r4, #504	; 0x1f8

	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 8010ca2:	ee18 1a10 	vmov	r1, s16
	mp3DecInfo->part23Length[gr][ch] = si->sis[gr][ch].part23Length;
 8010ca6:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	bitsUsed = CalcBitsUsed(bsi, buf, *bitOffset);
 8010caa:	9c03      	ldr	r4, [sp, #12]
 8010cac:	a80a      	add	r0, sp, #40	; 0x28
 8010cae:	6822      	ldr	r2, [r4, #0]
 8010cb0:	f7fc facc 	bl	800d24c <xmp3_CalcBitsUsed>
	buf += (bitsUsed + *bitOffset) >> 3;
 8010cb4:	6823      	ldr	r3, [r4, #0]
 8010cb6:	4418      	add	r0, r3
	*bitOffset = (bitsUsed + *bitOffset) & 0x07;
 8010cb8:	f000 0307 	and.w	r3, r0, #7
 8010cbc:	6023      	str	r3, [r4, #0]
	buf += (bitsUsed + *bitOffset) >> 3;
 8010cbe:	10c0      	asrs	r0, r0, #3

	return (buf - startBuf);
}
 8010cc0:	b017      	add	sp, #92	; 0x5c
 8010cc2:	ecbd 8b02 	vpop	{d8}
 8010cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (sfCompress < 500) {
 8010cca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8010cce:	f2c0 8083 	blt.w	8010dd8 <xmp3_UnpackScaleFactors+0x438>
			if (sis->mixedBlock) {
 8010cd2:	9904      	ldr	r1, [sp, #16]
 8010cd4:	eb01 000a 	add.w	r0, r1, sl
			slen[0] = sfCompress / 3;
 8010cd8:	4914      	ldr	r1, [pc, #80]	; (8010d2c <xmp3_UnpackScaleFactors+0x38c>)
			sfCompress -= 500;
 8010cda:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
			slen[0] = sfCompress / 3;
 8010cde:	fba1 5103 	umull	r5, r1, r1, r3
			if (sis->mixedBlock) {
 8010ce2:	00e5      	lsls	r5, r4, #3
 8010ce4:	4425      	add	r5, r4
 8010ce6:	0100      	lsls	r0, r0, #4
 8010ce8:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
 8010cec:	9d02      	ldr	r5, [sp, #8]
 8010cee:	4428      	add	r0, r5
			slen[0] = sfCompress / 3;
 8010cf0:	0849      	lsrs	r1, r1, #1
			slen[1] = sfCompress % 3;
 8010cf2:	eb01 0541 	add.w	r5, r1, r1, lsl #1
			if (sis->mixedBlock) {
 8010cf6:	6c00      	ldr	r0, [r0, #64]	; 0x40
			slen[0] = sfCompress / 3;
 8010cf8:	910e      	str	r1, [sp, #56]	; 0x38
			slen[1] = sfCompress % 3;
 8010cfa:	1b5b      	subs	r3, r3, r5
			slen[2] = slen[3] = 0;
 8010cfc:	2500      	movs	r5, #0
 8010cfe:	e9cd 5510 	strd	r5, r5, [sp, #64]	; 0x40
			slen[1] = sfCompress % 3;
 8010d02:	930f      	str	r3, [sp, #60]	; 0x3c
			if (sis->mixedBlock) {
 8010d04:	2800      	cmp	r0, #0
 8010d06:	f000 81e1 	beq.w	80110cc <xmp3_UnpackScaleFactors+0x72c>
	intensityScale = 0;
 8010d0a:	4628      	mov	r0, r5
				slen[1] = slen[0];
 8010d0c:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
			preFlag = 1;
 8010d10:	f04f 0e01 	mov.w	lr, #1
			sfcIdx = 2;
 8010d14:	2502      	movs	r5, #2
 8010d16:	e73e      	b.n	8010b96 <xmp3_UnpackScaleFactors+0x1f6>
	sis->preFlag = preFlag;
 8010d18:	f8c3 e064 	str.w	lr, [r3, #100]	; 0x64
	if(sis->blockType == 2) {
 8010d1c:	e76b      	b.n	8010bf6 <xmp3_UnpackScaleFactors+0x256>
 8010d1e:	bf00      	nop
 8010d20:	0802844c 	.word	0x0802844c
 8010d24:	66666667 	.word	0x66666667
 8010d28:	08028404 	.word	0x08028404
 8010d2c:	aaaaaaab 	.word	0xaaaaaaab
 8010d30:	ebca 134a 	rsb	r3, sl, sl, lsl #5
 8010d34:	009b      	lsls	r3, r3, #2
 8010d36:	ebc4 1644 	rsb	r6, r4, r4, lsl #5
 8010d3a:	eb03 0846 	add.w	r8, r3, r6, lsl #1
 8010d3e:	4646      	mov	r6, r8
 8010d40:	9b01      	ldr	r3, [sp, #4]
 8010d42:	f108 38ff 	add.w	r8, r8, #4294967295
 8010d46:	3605      	adds	r6, #5
 8010d48:	4498      	add	r8, r3
 8010d4a:	441e      	add	r6, r3
 8010d4c:	0163      	lsls	r3, r4, #5
 8010d4e:	9306      	str	r3, [sp, #24]
 8010d50:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8010d54:	9305      	str	r3, [sp, #20]
			else          for(  ; sfb < 6 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8010d56:	4649      	mov	r1, r9
 8010d58:	a80a      	add	r0, sp, #40	; 0x28
 8010d5a:	f7fc fa19 	bl	800d190 <xmp3_GetBits>
 8010d5e:	f808 0f01 	strb.w	r0, [r8, #1]!
 8010d62:	45b0      	cmp	r8, r6
 8010d64:	d1f7      	bne.n	8010d56 <xmp3_UnpackScaleFactors+0x3b6>
			if(scfsi[1])  for(  ; sfb <11 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	f47f ae8e 	bne.w	8010a8a <xmp3_UnpackScaleFactors+0xea>
 8010d6e:	9b06      	ldr	r3, [sp, #24]
 8010d70:	9a05      	ldr	r2, [sp, #20]
 8010d72:	1b1b      	subs	r3, r3, r4
 8010d74:	005b      	lsls	r3, r3, #1
 8010d76:	eba2 060a 	sub.w	r6, r2, sl
 8010d7a:	f103 0806 	add.w	r8, r3, #6
 8010d7e:	330b      	adds	r3, #11
 8010d80:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 8010d84:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8010d88:	9b01      	ldr	r3, [sp, #4]
 8010d8a:	4498      	add	r8, r3
 8010d8c:	441e      	add	r6, r3
			else          for(  ; sfb <11 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8010d8e:	4649      	mov	r1, r9
 8010d90:	a80a      	add	r0, sp, #40	; 0x28
 8010d92:	f7fc f9fd 	bl	800d190 <xmp3_GetBits>
 8010d96:	f808 0b01 	strb.w	r0, [r8], #1
 8010d9a:	45b0      	cmp	r8, r6
 8010d9c:	d1f7      	bne.n	8010d8e <xmp3_UnpackScaleFactors+0x3ee>
			if(scfsi[2])  for(  ; sfb <16 ; sfb++) sfis->l[sfb] = sfisGr0->l[sfb];
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	2b00      	cmp	r3, #0
 8010da2:	f47f ae8c 	bne.w	8010abe <xmp3_UnpackScaleFactors+0x11e>
 8010da6:	9b06      	ldr	r3, [sp, #24]
 8010da8:	9a05      	ldr	r2, [sp, #20]
 8010daa:	1b1b      	subs	r3, r3, r4
 8010dac:	005b      	lsls	r3, r3, #1
 8010dae:	eba2 060a 	sub.w	r6, r2, sl
 8010db2:	f103 080b 	add.w	r8, r3, #11
 8010db6:	3310      	adds	r3, #16
 8010db8:	eb08 0886 	add.w	r8, r8, r6, lsl #2
 8010dbc:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8010dc0:	9b01      	ldr	r3, [sp, #4]
 8010dc2:	4498      	add	r8, r3
 8010dc4:	441e      	add	r6, r3
			else          for(  ; sfb <16 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8010dc6:	4629      	mov	r1, r5
 8010dc8:	a80a      	add	r0, sp, #40	; 0x28
 8010dca:	f7fc f9e1 	bl	800d190 <xmp3_GetBits>
 8010dce:	f808 0b01 	strb.w	r0, [r8], #1
 8010dd2:	45b0      	cmp	r8, r6
 8010dd4:	d1f7      	bne.n	8010dc6 <xmp3_UnpackScaleFactors+0x426>
 8010dd6:	e687      	b.n	8010ae8 <xmp3_UnpackScaleFactors+0x148>
			sfCompress -= 400;
 8010dd8:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
			slen[0] = (sfCompress >> 2) / 5;
 8010ddc:	49bd      	ldr	r1, [pc, #756]	; (80110d4 <xmp3_UnpackScaleFactors+0x734>)
 8010dde:	1098      	asrs	r0, r3, #2
 8010de0:	fba1 5100 	umull	r5, r1, r1, r0
 8010de4:	0889      	lsrs	r1, r1, #2
 8010de6:	910e      	str	r1, [sp, #56]	; 0x38
			slen[1]= (sfCompress >> 2) % 5;
 8010de8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8010dec:	1a41      	subs	r1, r0, r1
			slen[2]= (sfCompress & 0x03);
 8010dee:	f003 0303 	and.w	r3, r3, #3
			slen[3]= 0;
 8010df2:	2000      	movs	r0, #0
			slen[2]= (sfCompress & 0x03);
 8010df4:	9310      	str	r3, [sp, #64]	; 0x40
			slen[1]= (sfCompress >> 2) % 5;
 8010df6:	910f      	str	r1, [sp, #60]	; 0x3c
			slen[3]= 0;
 8010df8:	9011      	str	r0, [sp, #68]	; 0x44
	preFlag = 0;
 8010dfa:	4686      	mov	lr, r0
			sfcIdx = 1;
 8010dfc:	2501      	movs	r5, #1
 8010dfe:	e6ca      	b.n	8010b96 <xmp3_UnpackScaleFactors+0x1f6>
		btIdx = (sis->mixedBlock ? 2 : 1);
 8010e00:	6c19      	ldr	r1, [r3, #64]	; 0x40
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010e02:	4eb5      	ldr	r6, [pc, #724]	; (80110d8 <xmp3_UnpackScaleFactors+0x738>)
		btIdx = (sis->mixedBlock ? 2 : 1);
 8010e04:	2900      	cmp	r1, #0
 8010e06:	bf14      	ite	ne
 8010e08:	2102      	movne	r1, #2
 8010e0a:	2101      	moveq	r1, #1
		nr[i] = (int)NRTab[sfcIdx][btIdx][i];
 8010e0c:	440d      	add	r5, r1
 8010e0e:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 8010e12:	f816 5025 	ldrb.w	r5, [r6, r5, lsl #2]
 8010e16:	f891 c002 	ldrb.w	ip, [r1, #2]
 8010e1a:	9509      	str	r5, [sp, #36]	; 0x24
 8010e1c:	784d      	ldrb	r5, [r1, #1]
 8010e1e:	78c9      	ldrb	r1, [r1, #3]
 8010e20:	9513      	str	r5, [sp, #76]	; 0x4c
 8010e22:	e9cd c114 	strd	ip, r1, [sp, #80]	; 0x50
	if( (modeExt & 0x01) && (ch == 1) ) {
 8010e26:	2a00      	cmp	r2, #0
 8010e28:	f47f aed4 	bne.w	8010bd4 <xmp3_UnpackScaleFactors+0x234>
	sis->preFlag = preFlag;
 8010e2c:	f8c3 e064 	str.w	lr, [r3, #100]	; 0x64
		if(sis->mixedBlock) {
 8010e30:	9b04      	ldr	r3, [sp, #16]
 8010e32:	00e2      	lsls	r2, r4, #3
 8010e34:	4453      	add	r3, sl
 8010e36:	4422      	add	r2, r4
 8010e38:	011b      	lsls	r3, r3, #4
 8010e3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010e3e:	9a02      	ldr	r2, [sp, #8]
 8010e40:	4413      	add	r3, r2
 8010e42:	6c1f      	ldr	r7, [r3, #64]	; 0x40
 8010e44:	2f00      	cmp	r7, #0
 8010e46:	f000 811e 	beq.w	8011086 <xmp3_UnpackScaleFactors+0x6e6>
 8010e4a:	ebca 134a 	rsb	r3, sl, sl, lsl #5
 8010e4e:	009b      	lsls	r3, r3, #2
 8010e50:	ebc4 1644 	rsb	r6, r4, r4, lsl #5
 8010e54:	eb03 0746 	add.w	r7, r3, r6, lsl #1
 8010e58:	463e      	mov	r6, r7
 8010e5a:	9b01      	ldr	r3, [sp, #4]
				sfis->l[sfb] = (char)GetBits(bsi, slen[0]);
 8010e5c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
 8010e60:	3f01      	subs	r7, #1
 8010e62:	3605      	adds	r6, #5
 8010e64:	441f      	add	r7, r3
 8010e66:	441e      	add	r6, r3
 8010e68:	0163      	lsls	r3, r4, #5
 8010e6a:	9306      	str	r3, [sp, #24]
 8010e6c:	ea4f 134a 	mov.w	r3, sl, lsl #5
 8010e70:	9305      	str	r3, [sp, #20]
 8010e72:	4641      	mov	r1, r8
 8010e74:	a80a      	add	r0, sp, #40	; 0x28
 8010e76:	f7fc f98b 	bl	800d190 <xmp3_GetBits>
 8010e7a:	f807 0f01 	strb.w	r0, [r7, #1]!
			for (sfb=0; sfb < 6; sfb++) {
 8010e7e:	42b7      	cmp	r7, r6
 8010e80:	d1f7      	bne.n	8010e72 <xmp3_UnpackScaleFactors+0x4d2>
 8010e82:	9509      	str	r5, [sp, #36]	; 0x24
			sfb = 3;  /* start sfb for short */
 8010e84:	f04f 0b03 	mov.w	fp, #3
			nrIdx = 1;
 8010e88:	2701      	movs	r7, #1
 8010e8a:	9b05      	ldr	r3, [sp, #20]
 8010e8c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8010e8e:	9423      	str	r4, [sp, #140]	; 0x8c
 8010e90:	eba3 080a 	sub.w	r8, r3, sl
 8010e94:	9b06      	ldr	r3, [sp, #24]
 8010e96:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8010e9a:	1b1b      	subs	r3, r3, r4
 8010e9c:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8010ea0:	9b01      	ldr	r3, [sp, #4]
 8010ea2:	eb03 0208 	add.w	r2, r3, r8
 8010ea6:	465b      	mov	r3, fp
 8010ea8:	4693      	mov	fp, r2
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010eaa:	2e00      	cmp	r6, #0
 8010eac:	dd23      	ble.n	8010ef6 <xmp3_UnpackScaleFactors+0x556>
 8010eae:	441e      	add	r6, r3
 8010eb0:	9a01      	ldr	r2, [sp, #4]
 8010eb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010eb6:	4443      	add	r3, r8
 8010eb8:	eb02 0903 	add.w	r9, r2, r3
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 8010ebc:	ab0e      	add	r3, sp, #56	; 0x38
 8010ebe:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8010ec2:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8010ec6:	445d      	add	r5, fp
 8010ec8:	4621      	mov	r1, r4
 8010eca:	a80a      	add	r0, sp, #40	; 0x28
 8010ecc:	f7fc f960 	bl	800d190 <xmp3_GetBits>
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8010ed0:	4621      	mov	r1, r4
				sfis->s[sfb][0] = (char)GetBits(bsi, slen[nrIdx]);
 8010ed2:	f889 0017 	strb.w	r0, [r9, #23]
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8010ed6:	a80a      	add	r0, sp, #40	; 0x28
 8010ed8:	f7fc f95a 	bl	800d190 <xmp3_GetBits>
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8010edc:	4621      	mov	r1, r4
				sfis->s[sfb][1] = (char)GetBits(bsi, slen[nrIdx]);
 8010ede:	f889 0018 	strb.w	r0, [r9, #24]
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8010ee2:	a80a      	add	r0, sp, #40	; 0x28
 8010ee4:	f7fc f954 	bl	800d190 <xmp3_GetBits>
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010ee8:	f109 0903 	add.w	r9, r9, #3
				sfis->s[sfb][2] = (char)GetBits(bsi, slen[nrIdx]);
 8010eec:	f889 0016 	strb.w	r0, [r9, #22]
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010ef0:	45a9      	cmp	r9, r5
 8010ef2:	d1e9      	bne.n	8010ec8 <xmp3_UnpackScaleFactors+0x528>
 8010ef4:	4633      	mov	r3, r6
		for (    ; nrIdx <= 3; nrIdx++) {
 8010ef6:	3701      	adds	r7, #1
 8010ef8:	2f04      	cmp	r7, #4
 8010efa:	d032      	beq.n	8010f62 <xmp3_UnpackScaleFactors+0x5c2>
			for (i=0; i < nr[nrIdx]; i++, sfb++) {
 8010efc:	aa12      	add	r2, sp, #72	; 0x48
 8010efe:	f852 6027 	ldr.w	r6, [r2, r7, lsl #2]
 8010f02:	e7d2      	b.n	8010eaa <xmp3_UnpackScaleFactors+0x50a>
			sfjs->nr[i] = nr[i];
 8010f04:	9e01      	ldr	r6, [sp, #4]
 8010f06:	9a09      	ldr	r2, [sp, #36]	; 0x24
		sfjs->intensityScale = intensityScale;
 8010f08:	f8c6 00f8 	str.w	r0, [r6, #248]	; 0xf8
			sfjs->nr[i] = nr[i];
 8010f0c:	e9c6 c145 	strd	ip, r1, [r6, #276]	; 0x114
			sfjs->slen[i] = slen[i];
 8010f10:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
			sfjs->nr[i] = nr[i];
 8010f14:	e9c6 2543 	strd	r2, r5, [r6, #268]	; 0x10c
			sfjs->slen[i] = slen[i];
 8010f18:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8010f1c:	f8c6 00fc 	str.w	r0, [r6, #252]	; 0xfc
 8010f20:	f8c6 1100 	str.w	r1, [r6, #256]	; 0x100
 8010f24:	f8c6 2104 	str.w	r2, [r6, #260]	; 0x104
 8010f28:	f8c6 3108 	str.w	r3, [r6, #264]	; 0x108
		sfjs->intensityScale = intensityScale;
 8010f2c:	e655      	b.n	8010bda <xmp3_UnpackScaleFactors+0x23a>
		if (sfCompress < 180) {
 8010f2e:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
		intensityScale = sfCompress & 0x01;
 8010f32:	f003 0001 	and.w	r0, r3, #1
		sfCompress >>= 1;
 8010f36:	ea4f 0163 	mov.w	r1, r3, asr #1
		if (sfCompress < 180) {
 8010f3a:	f2c0 80cf 	blt.w	80110dc <xmp3_UnpackScaleFactors+0x73c>
		} else if (sfCompress < 244) {
 8010f3e:	29f3      	cmp	r1, #243	; 0xf3
 8010f40:	f300 80ea 	bgt.w	8011118 <xmp3_UnpackScaleFactors+0x778>
			sfCompress -= 180;
 8010f44:	f1a1 03b4 	sub.w	r3, r1, #180	; 0xb4
			slen[3] = 0;
 8010f48:	2100      	movs	r1, #0
 8010f4a:	9111      	str	r1, [sp, #68]	; 0x44
	preFlag = 0;
 8010f4c:	468e      	mov	lr, r1
			slen[0] = (sfCompress & 0x3f) >> 4;
 8010f4e:	1119      	asrs	r1, r3, #4
 8010f50:	910e      	str	r1, [sp, #56]	; 0x38
			slen[1] = (sfCompress & 0x0f) >> 2;
 8010f52:	f3c3 0181 	ubfx	r1, r3, #2, #2
			slen[2] = (sfCompress & 0x03);
 8010f56:	f003 0303 	and.w	r3, r3, #3
			slen[1] = (sfCompress & 0x0f) >> 2;
 8010f5a:	910f      	str	r1, [sp, #60]	; 0x3c
			slen[2] = (sfCompress & 0x03);
 8010f5c:	9310      	str	r3, [sp, #64]	; 0x40
			sfcIdx = 4;
 8010f5e:	2504      	movs	r5, #4
 8010f60:	e619      	b.n	8010b96 <xmp3_UnpackScaleFactors+0x1f6>
		sfis->s[12][0] = sfis->s[12][1] = sfis->s[12][2] = 0;
 8010f62:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8010f64:	9b05      	ldr	r3, [sp, #20]
 8010f66:	9a06      	ldr	r2, [sp, #24]
 8010f68:	eba3 030a 	sub.w	r3, r3, sl
 8010f6c:	1b12      	subs	r2, r2, r4
 8010f6e:	009b      	lsls	r3, r3, #2
 8010f70:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8010f74:	9a01      	ldr	r2, [sp, #4]
 8010f76:	441a      	add	r2, r3
 8010f78:	4613      	mov	r3, r2
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8010f80:	879a      	strh	r2, [r3, #60]	; 0x3c
 8010f82:	e67f      	b.n	8010c84 <xmp3_UnpackScaleFactors+0x2e4>
		if (sis->mixedBlock) {          
 8010f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	f040 8084 	bne.w	8011094 <xmp3_UnpackScaleFactors+0x6f4>
 8010f8c:	0162      	lsls	r2, r4, #5
 8010f8e:	9206      	str	r2, [sp, #24]
 8010f90:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8010f94:	9205      	str	r2, [sp, #20]
 8010f96:	eb03 0843 	add.w	r8, r3, r3, lsl #1
 8010f9a:	9b05      	ldr	r3, [sp, #20]
 8010f9c:	9a06      	ldr	r2, [sp, #24]
 8010f9e:	eba3 030a 	sub.w	r3, r3, sl
 8010fa2:	009b      	lsls	r3, r3, #2
 8010fa4:	1b16      	subs	r6, r2, r4
 8010fa6:	eb03 0746 	add.w	r7, r3, r6, lsl #1
 8010faa:	463e      	mov	r6, r7
 8010fac:	9b01      	ldr	r3, [sp, #4]
 8010fae:	44b8      	add	r8, r7
 8010fb0:	3612      	adds	r6, #18
 8010fb2:	4498      	add	r8, r3
 8010fb4:	441e      	add	r6, r3
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 8010fb6:	4649      	mov	r1, r9
 8010fb8:	a80a      	add	r0, sp, #40	; 0x28
 8010fba:	f7fc f8e9 	bl	800d190 <xmp3_GetBits>
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8010fbe:	4649      	mov	r1, r9
			sfis->s[sfb][0] = (char)GetBits(bsi, slen0);
 8010fc0:	f888 0017 	strb.w	r0, [r8, #23]
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8010fc4:	a80a      	add	r0, sp, #40	; 0x28
 8010fc6:	f7fc f8e3 	bl	800d190 <xmp3_GetBits>
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8010fca:	4649      	mov	r1, r9
			sfis->s[sfb][1] = (char)GetBits(bsi, slen0);
 8010fcc:	f888 0018 	strb.w	r0, [r8, #24]
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8010fd0:	a80a      	add	r0, sp, #40	; 0x28
 8010fd2:	f7fc f8dd 	bl	800d190 <xmp3_GetBits>
		for (      ; sfb < 6; sfb++) {
 8010fd6:	f108 0803 	add.w	r8, r8, #3
			sfis->s[sfb][2] = (char)GetBits(bsi, slen0);
 8010fda:	f888 0016 	strb.w	r0, [r8, #22]
		for (      ; sfb < 6; sfb++) {
 8010fde:	45b0      	cmp	r8, r6
 8010fe0:	d1e9      	bne.n	8010fb6 <xmp3_UnpackScaleFactors+0x616>
 8010fe2:	9b01      	ldr	r3, [sp, #4]
 8010fe4:	441f      	add	r7, r3
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 8010fe6:	4629      	mov	r1, r5
 8010fe8:	a80a      	add	r0, sp, #40	; 0x28
 8010fea:	f7fc f8d1 	bl	800d190 <xmp3_GetBits>
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8010fee:	4629      	mov	r1, r5
			sfis->s[sfb][0] = (char)GetBits(bsi, slen1);
 8010ff0:	f887 0029 	strb.w	r0, [r7, #41]	; 0x29
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8010ff4:	a80a      	add	r0, sp, #40	; 0x28
 8010ff6:	f7fc f8cb 	bl	800d190 <xmp3_GetBits>
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 8010ffa:	4629      	mov	r1, r5
			sfis->s[sfb][1] = (char)GetBits(bsi, slen1);
 8010ffc:	f887 002a 	strb.w	r0, [r7, #42]	; 0x2a
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 8011000:	a80a      	add	r0, sp, #40	; 0x28
 8011002:	f7fc f8c5 	bl	800d190 <xmp3_GetBits>
		for (      ; sfb < 12; sfb++) {
 8011006:	3703      	adds	r7, #3
			sfis->s[sfb][2] = (char)GetBits(bsi, slen1);
 8011008:	f887 0028 	strb.w	r0, [r7, #40]	; 0x28
		for (      ; sfb < 12; sfb++) {
 801100c:	42be      	cmp	r6, r7
 801100e:	d1ea      	bne.n	8010fe6 <xmp3_UnpackScaleFactors+0x646>
 8011010:	e7a8      	b.n	8010f64 <xmp3_UnpackScaleFactors+0x5c4>
 8011012:	ebc4 1644 	rsb	r6, r4, r4, lsl #5
 8011016:	9b01      	ldr	r3, [sp, #4]
 8011018:	0076      	lsls	r6, r6, #1
 801101a:	f106 38ff 	add.w	r8, r6, #4294967295
 801101e:	f106 070a 	add.w	r7, r6, #10
 8011022:	4498      	add	r8, r3
 8011024:	441f      	add	r7, r3
				sfis->l[sfb] = (char)GetBits(bsi, slen0);
 8011026:	4649      	mov	r1, r9
 8011028:	a80a      	add	r0, sp, #40	; 0x28
 801102a:	f7fc f8b1 	bl	800d190 <xmp3_GetBits>
 801102e:	f808 0f01 	strb.w	r0, [r8, #1]!
			for (sfb = 0;  sfb < 11; sfb++) 
 8011032:	45b8      	cmp	r8, r7
 8011034:	d1f7      	bne.n	8011026 <xmp3_UnpackScaleFactors+0x686>
 8011036:	9b01      	ldr	r3, [sp, #4]
 8011038:	f106 070b 	add.w	r7, r6, #11
 801103c:	3615      	adds	r6, #21
 801103e:	441f      	add	r7, r3
 8011040:	441e      	add	r6, r3
				sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8011042:	4629      	mov	r1, r5
 8011044:	a80a      	add	r0, sp, #40	; 0x28
 8011046:	f7fc f8a3 	bl	800d190 <xmp3_GetBits>
 801104a:	f807 0b01 	strb.w	r0, [r7], #1
			for (sfb = 11; sfb < 21; sfb++) 
 801104e:	42be      	cmp	r6, r7
 8011050:	d1f7      	bne.n	8011042 <xmp3_UnpackScaleFactors+0x6a2>
 8011052:	e617      	b.n	8010c84 <xmp3_UnpackScaleFactors+0x2e4>
 8011054:	9b06      	ldr	r3, [sp, #24]
 8011056:	9a05      	ldr	r2, [sp, #20]
 8011058:	1b1b      	subs	r3, r3, r4
 801105a:	005b      	lsls	r3, r3, #1
 801105c:	eba2 060a 	sub.w	r6, r2, sl
 8011060:	f103 0710 	add.w	r7, r3, #16
 8011064:	3315      	adds	r3, #21
 8011066:	eb07 0786 	add.w	r7, r7, r6, lsl #2
 801106a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 801106e:	9b01      	ldr	r3, [sp, #4]
 8011070:	441f      	add	r7, r3
 8011072:	441e      	add	r6, r3
			else          for(  ; sfb <21 ; sfb++) sfis->l[sfb] = (char)GetBits(bsi, slen1);
 8011074:	4629      	mov	r1, r5
 8011076:	a80a      	add	r0, sp, #40	; 0x28
 8011078:	f7fc f88a 	bl	800d190 <xmp3_GetBits>
 801107c:	f807 0b01 	strb.w	r0, [r7], #1
 8011080:	42b7      	cmp	r7, r6
 8011082:	d1f7      	bne.n	8011074 <xmp3_UnpackScaleFactors+0x6d4>
 8011084:	e549      	b.n	8010b1a <xmp3_UnpackScaleFactors+0x17a>
 8011086:	0163      	lsls	r3, r4, #5
 8011088:	9306      	str	r3, [sp, #24]
 801108a:	ea4f 134a 	mov.w	r3, sl, lsl #5
			sfb = 0;
 801108e:	46bb      	mov	fp, r7
 8011090:	9305      	str	r3, [sp, #20]
 8011092:	e6fa      	b.n	8010e8a <xmp3_UnpackScaleFactors+0x4ea>
 8011094:	ebca 134a 	rsb	r3, sl, sl, lsl #5
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	ebc4 1644 	rsb	r6, r4, r4, lsl #5
 801109e:	eb03 0746 	add.w	r7, r3, r6, lsl #1
 80110a2:	463e      	mov	r6, r7
 80110a4:	9b01      	ldr	r3, [sp, #4]
 80110a6:	3f01      	subs	r7, #1
 80110a8:	3607      	adds	r6, #7
 80110aa:	441f      	add	r7, r3
 80110ac:	441e      	add	r6, r3
 80110ae:	0163      	lsls	r3, r4, #5
 80110b0:	9306      	str	r3, [sp, #24]
 80110b2:	ea4f 134a 	mov.w	r3, sl, lsl #5
 80110b6:	9305      	str	r3, [sp, #20]
				sfis->l[sfb] =    (char)GetBits(bsi, slen0);
 80110b8:	4649      	mov	r1, r9
 80110ba:	a80a      	add	r0, sp, #40	; 0x28
 80110bc:	f7fc f868 	bl	800d190 <xmp3_GetBits>
 80110c0:	f807 0f01 	strb.w	r0, [r7, #1]!
			for (sfb = 0; sfb < 8; sfb++)
 80110c4:	42be      	cmp	r6, r7
 80110c6:	d1f7      	bne.n	80110b8 <xmp3_UnpackScaleFactors+0x718>
			sfb = 3;
 80110c8:	2303      	movs	r3, #3
 80110ca:	e764      	b.n	8010f96 <xmp3_UnpackScaleFactors+0x5f6>
			preFlag = 1;
 80110cc:	f04f 0e01 	mov.w	lr, #1
			sfcIdx = 2;
 80110d0:	2502      	movs	r5, #2
 80110d2:	e560      	b.n	8010b96 <xmp3_UnpackScaleFactors+0x1f6>
 80110d4:	cccccccd 	.word	0xcccccccd
 80110d8:	08028404 	.word	0x08028404
			slen[0] = (sfCompress / 36);
 80110dc:	4d17      	ldr	r5, [pc, #92]	; (801113c <xmp3_UnpackScaleFactors+0x79c>)
 80110de:	17db      	asrs	r3, r3, #31
 80110e0:	fb85 6501 	smull	r6, r5, r5, r1
 80110e4:	ebc3 03e5 	rsb	r3, r3, r5, asr #3
 80110e8:	930e      	str	r3, [sp, #56]	; 0x38
			slen[1] = (sfCompress % 36) / 6;
 80110ea:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80110ee:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
 80110f2:	4913      	ldr	r1, [pc, #76]	; (8011140 <xmp3_UnpackScaleFactors+0x7a0>)
 80110f4:	fb81 5103 	smull	r5, r1, r1, r3
 80110f8:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80110fc:	910f      	str	r1, [sp, #60]	; 0x3c
			slen[2] = (sfCompress % 36) % 6;
 80110fe:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011102:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
			slen[3] = 0;
 8011106:	2300      	movs	r3, #0
			slen[2] = (sfCompress % 36) % 6;
 8011108:	9110      	str	r1, [sp, #64]	; 0x40
			slen[3] = 0;
 801110a:	9311      	str	r3, [sp, #68]	; 0x44
	preFlag = 0;
 801110c:	469e      	mov	lr, r3
			sfcIdx = 3;
 801110e:	2503      	movs	r5, #3
 8011110:	e541      	b.n	8010b96 <xmp3_UnpackScaleFactors+0x1f6>
		return -1;
 8011112:	f04f 30ff 	mov.w	r0, #4294967295
 8011116:	e5d3      	b.n	8010cc0 <xmp3_UnpackScaleFactors+0x320>
			slen[0] = (sfCompress / 3);
 8011118:	4d0a      	ldr	r5, [pc, #40]	; (8011144 <xmp3_UnpackScaleFactors+0x7a4>)
			sfCompress -= 244;
 801111a:	f1a1 03f4 	sub.w	r3, r1, #244	; 0xf4
			slen[0] = (sfCompress / 3);
 801111e:	fba5 1503 	umull	r1, r5, r5, r3
 8011122:	086d      	lsrs	r5, r5, #1
 8011124:	950e      	str	r5, [sp, #56]	; 0x38
			slen[1] = (sfCompress % 3);
 8011126:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801112a:	1b5d      	subs	r5, r3, r5
			slen[2] = slen[3] = 0;
 801112c:	2300      	movs	r3, #0
			slen[1] = (sfCompress % 3);
 801112e:	950f      	str	r5, [sp, #60]	; 0x3c
			slen[2] = slen[3] = 0;
 8011130:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
	preFlag = 0;
 8011134:	469e      	mov	lr, r3
			sfcIdx = 5;
 8011136:	2505      	movs	r5, #5
 8011138:	e52d      	b.n	8010b96 <xmp3_UnpackScaleFactors+0x1f6>
 801113a:	bf00      	nop
 801113c:	38e38e39 	.word	0x38e38e39
 8011140:	2aaaaaab 	.word	0x2aaaaaab
 8011144:	aaaaaaab 	.word	0xaaaaaaab

08011148 <xmp3_MidSideProc>:
	
	/* L = (M+S)/sqrt(2), R = (M-S)/sqrt(2) 
	 * NOTE: 1/sqrt(2) done in DequantChannel() - see comments there
	 */
	mOutL = mOutR = 0;
	for(i = 0; i < nSamps; i++) {
 8011148:	2900      	cmp	r1, #0
{
 801114a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for(i = 0; i < nSamps; i++) {
 801114e:	dd2c      	ble.n	80111aa <xmp3_MidSideProc+0x62>
	mOutL = mOutR = 0;
 8011150:	2600      	movs	r6, #0
 8011152:	f1a0 0c04 	sub.w	ip, r0, #4
 8011156:	f600 0efc 	addw	lr, r0, #2300	; 0x8fc
 801115a:	4637      	mov	r7, r6
	for(i = 0; i < nSamps; i++) {
 801115c:	4634      	mov	r4, r6
	__asm__ volatile (
 801115e:	46b0      	mov	r8, r6
		xl = x[0][i];
 8011160:	f85c 3f04 	ldr.w	r3, [ip, #4]!
		xr = x[1][i];
 8011164:	f85e 5f04 	ldr.w	r5, [lr, #4]!
		x[0][i] = xl + xr;
 8011168:	eb03 0905 	add.w	r9, r3, r5
		x[1][i] = xl - xr;
 801116c:	1b5b      	subs	r3, r3, r5
		x[0][i] = xl + xr;
 801116e:	f8cc 9000 	str.w	r9, [ip]
		x[1][i] = xl - xr;
 8011172:	f8ce 3000 	str.w	r3, [lr]
 8011176:	f8dc 5000 	ldr.w	r5, [ip]
 801117a:	4640      	mov	r0, r8
 801117c:	ea85 70e5 	eor.w	r0, r5, r5, asr #31
 8011180:	eba0 70e5 	sub.w	r0, r0, r5, asr #31
		mOutL |= FASTABS(x[0][i]);
 8011184:	4307      	orrs	r7, r0
 8011186:	4640      	mov	r0, r8
 8011188:	ea83 70e3 	eor.w	r0, r3, r3, asr #31
 801118c:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
	for(i = 0; i < nSamps; i++) {
 8011190:	3401      	adds	r4, #1
 8011192:	42a1      	cmp	r1, r4
		mOutR |= FASTABS(x[1][i]);
 8011194:	ea46 0600 	orr.w	r6, r6, r0
	for(i = 0; i < nSamps; i++) {
 8011198:	d1e2      	bne.n	8011160 <xmp3_MidSideProc+0x18>
	}
	mOut[0] |= mOutL;
	mOut[1] |= mOutR;
 801119a:	e9d2 1300 	ldrd	r1, r3, [r2]
	mOut[0] |= mOutL;
 801119e:	4339      	orrs	r1, r7
	mOut[1] |= mOutR;
 80111a0:	4333      	orrs	r3, r6
 80111a2:	e9c2 1300 	strd	r1, r3, [r2]
}
 80111a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	mOutL = mOutR = 0;
 80111aa:	2600      	movs	r6, #0
 80111ac:	4637      	mov	r7, r6
 80111ae:	e7f4      	b.n	801119a <xmp3_MidSideProc+0x52>

080111b0 <xmp3_IntensityProcMPEG1>:
 * TODO:        combine MPEG1/2 into one function (maybe)
 *              make sure all the mixed-block and IIP logic is right
 **************************************************************************************/
void IntensityProcMPEG1(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, int midSideFlag, int mixFlag, int mOut[2])
{
 80111b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111b4:	b095      	sub	sp, #84	; 0x54
 80111b6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80111b8:	900a      	str	r0, [sp, #40]	; 0x28
	 *  short block section (i.e. on or after sample 36 = sfBand->l[8] = 3*sfBand->s[3]
	 * is this a safe assumption?
	 * TODO - intensity + mixed not quite right (diff = 11 on he_mode)
	 *  figure out correct implementation (spec ambiguous about when to do short block reorder)
	 */
	if (cbi[1].cbType == 0) {
 80111ba:	f8d4 a018 	ldr.w	sl, [r4, #24]
 80111be:	f1ba 0f00 	cmp.w	sl, #0
 80111c2:	d173      	bne.n	80112ac <xmp3_IntensityProcMPEG1+0xfc>
		/* long block */
		cbStartL = cbi[1].cbEndL + 1;
 80111c4:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
		cbEndL =   cbi[0].cbEndL + 1;
 80111c6:	6966      	ldr	r6, [r4, #20]
		cbStartL = cbEndL = 0;
		i = 3 * fh->sfBand->s[cbStartS];
	}

	sampsLeft = nSamps - i;		/* process to length of left */
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111c8:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
		i = fh->sfBand->l[cbStartL];
 80111ca:	6b57      	ldr	r7, [r2, #52]	; 0x34
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111cc:	4ab5      	ldr	r2, [pc, #724]	; (80114a4 <xmp3_IntensityProcMPEG1+0x2f4>)
		i = fh->sfBand->l[cbStartL];
 80111ce:	f105 0801 	add.w	r8, r5, #1
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111d2:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80111d6:	eb02 0284 	add.w	r2, r2, r4, lsl #2
		i = fh->sfBand->l[cbStartL];
 80111da:	f937 0018 	ldrsh.w	r0, [r7, r8, lsl #1]
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111de:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80111e0:	9201      	str	r2, [sp, #4]
	mOutL = mOutR = 0;

	/* long blocks */
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 80111e2:	42b5      	cmp	r5, r6
	sampsLeft = nSamps - i;		/* process to length of left */
 80111e4:	eba1 0100 	sub.w	r1, r1, r0
		i = fh->sfBand->l[cbStartL];
 80111e8:	4602      	mov	r2, r0
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80111ea:	ea4f 04c4 	mov.w	r4, r4, lsl #3
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 80111ee:	f280 8157 	bge.w	80114a0 <xmp3_IntensityProcMPEG1+0x2f0>
 80111f2:	2900      	cmp	r1, #0
 80111f4:	f340 8154 	ble.w	80114a0 <xmp3_IntensityProcMPEG1+0x2f0>
 80111f8:	eb03 0b08 	add.w	fp, r3, r8
 80111fc:	3301      	adds	r3, #1
 80111fe:	4433      	add	r3, r6
 8011200:	9302      	str	r3, [sp, #8]
		isf = sfis->l[cb];
		if (isf == 7) {
			fl = ISFIIP[midSideFlag][0];
			fr = ISFIIP[midSideFlag][1];
 8011202:	4ba9      	ldr	r3, [pc, #676]	; (80114a8 <xmp3_IntensityProcMPEG1+0x2f8>)
 8011204:	4423      	add	r3, r4
 8011206:	9303      	str	r3, [sp, #12]
		isf = sfis->l[cb];
 8011208:	f81b 3b01 	ldrb.w	r3, [fp], #1
 801120c:	3502      	adds	r5, #2
 801120e:	eb07 0545 	add.w	r5, r7, r5, lsl #1
		if (isf == 7) {
 8011212:	2b07      	cmp	r3, #7
 8011214:	9500      	str	r5, [sp, #0]
	mOutL = mOutR = 0;
 8011216:	46d0      	mov	r8, sl
 8011218:	4656      	mov	r6, sl
		if (isf == 7) {
 801121a:	d040      	beq.n	801129e <xmp3_IntensityProcMPEG1+0xee>
		} else {
			fl = isfTab[isf];	
 801121c:	9c01      	ldr	r4, [sp, #4]
 801121e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
			fr = isfTab[6] - isfTab[isf];
 8011222:	69a4      	ldr	r4, [r4, #24]
 8011224:	1b64      	subs	r4, r4, r5
		}

		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8011226:	9b00      	ldr	r3, [sp, #0]
 8011228:	f933 eb02 	ldrsh.w	lr, [r3], #2
 801122c:	9300      	str	r3, [sp, #0]
 801122e:	ebae 0000 	sub.w	r0, lr, r0
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8011232:	2800      	cmp	r0, #0
 8011234:	f340 8124 	ble.w	8011480 <xmp3_IntensityProcMPEG1+0x2d0>
 8011238:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801123a:	1a0f      	subs	r7, r1, r0
 801123c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8011240:	3804      	subs	r0, #4
 8011242:	eb02 0c01 	add.w	ip, r2, r1
 8011246:	e001      	b.n	801124c <xmp3_IntensityProcMPEG1+0x9c>
 8011248:	2900      	cmp	r1, #0
 801124a:	d036      	beq.n	80112ba <xmp3_IntensityProcMPEG1+0x10a>
			xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr; mOutR |= FASTABS(xr);
 801124c:	f850 3f04 	ldr.w	r3, [r0, #4]!
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011250:	461a      	mov	r2, r3
 8011252:	fb84 9202 	smull	r9, r2, r4, r2
 8011256:	0092      	lsls	r2, r2, #2
 8011258:	f8c0 2900 	str.w	r2, [r0, #2304]	; 0x900
	__asm__ volatile (
 801125c:	46b1      	mov	r9, r6
 801125e:	ea82 79e2 	eor.w	r9, r2, r2, asr #31
 8011262:	eba9 79e2 	sub.w	r9, r9, r2, asr #31
 8011266:	ea48 0809 	orr.w	r8, r8, r9
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 801126a:	fb85 2303 	smull	r2, r3, r5, r3
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 801126e:	009b      	lsls	r3, r3, #2
 8011270:	6003      	str	r3, [r0, #0]
	__asm__ volatile (
 8011272:	4632      	mov	r2, r6
 8011274:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8011278:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
			sampsLeft--;
 801127c:	3901      	subs	r1, #1
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 801127e:	42b9      	cmp	r1, r7
			xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl; mOutL |= FASTABS(xl);
 8011280:	ea4a 0a02 	orr.w	sl, sl, r2
		for (j = 0; j < n && sampsLeft > 0; j++, i++) {
 8011284:	ebac 0201 	sub.w	r2, ip, r1
 8011288:	d1de      	bne.n	8011248 <xmp3_IntensityProcMPEG1+0x98>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 801128a:	9b02      	ldr	r3, [sp, #8]
 801128c:	459b      	cmp	fp, r3
 801128e:	d014      	beq.n	80112ba <xmp3_IntensityProcMPEG1+0x10a>
 8011290:	b19f      	cbz	r7, 80112ba <xmp3_IntensityProcMPEG1+0x10a>
		isf = sfis->l[cb];
 8011292:	f81b 3b01 	ldrb.w	r3, [fp], #1
		if (isf == 7) {
 8011296:	2b07      	cmp	r3, #7
		n = fh->sfBand->l[cb + 1] - fh->sfBand->l[cb];
 8011298:	4670      	mov	r0, lr
 801129a:	4639      	mov	r1, r7
		if (isf == 7) {
 801129c:	d1be      	bne.n	801121c <xmp3_IntensityProcMPEG1+0x6c>
			fl = ISFIIP[midSideFlag][0];
 801129e:	4b82      	ldr	r3, [pc, #520]	; (80114a8 <xmp3_IntensityProcMPEG1+0x2f8>)
 80112a0:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80112a2:	f853 5034 	ldr.w	r5, [r3, r4, lsl #3]
			fr = ISFIIP[midSideFlag][1];
 80112a6:	9b03      	ldr	r3, [sp, #12]
 80112a8:	685c      	ldr	r4, [r3, #4]
 80112aa:	e7bc      	b.n	8011226 <xmp3_IntensityProcMPEG1+0x76>
	} else if (cbi[1].cbType == 1 || cbi[1].cbType == 2) {
 80112ac:	f10a 30ff 	add.w	r0, sl, #4294967295
 80112b0:	2801      	cmp	r0, #1
 80112b2:	d908      	bls.n	80112c6 <xmp3_IntensityProcMPEG1+0x116>
	mOutL = mOutR = 0;
 80112b4:	f04f 0800 	mov.w	r8, #0
 80112b8:	46c2      	mov	sl, r8
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
			sampsLeft -= 3;
		}
	}
	mOut[0] = mOutL;
 80112ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
	mOut[1] = mOutR;
 80112bc:	e9c3 a800 	strd	sl, r8, [r3]
	
	return;
}
 80112c0:	b015      	add	sp, #84	; 0x54
 80112c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cbStartS = cbi[1].cbEndSMax + 1;
 80112c6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		i = 3 * fh->sfBand->s[cbStartS];
 80112c8:	6b56      	ldr	r6, [r2, #52]	; 0x34
		cbEndS =   cbi[0].cbEndSMax + 1;
 80112ca:	f8d4 c010 	ldr.w	ip, [r4, #16]
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80112ce:	4c75      	ldr	r4, [pc, #468]	; (80114a4 <xmp3_IntensityProcMPEG1+0x2f4>)
		i = 3 * fh->sfBand->s[cbStartS];
 80112d0:	eb06 0240 	add.w	r2, r6, r0, lsl #1
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 80112d4:	4560      	cmp	r0, ip
		i = 3 * fh->sfBand->s[cbStartS];
 80112d6:	f9b2 5030 	ldrsh.w	r5, [r2, #48]	; 0x30
 80112da:	eb05 0245 	add.w	r2, r5, r5, lsl #1
	sampsLeft = nSamps - i;		/* process to length of left */
 80112de:	eba1 0702 	sub.w	r7, r1, r2
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80112e2:	991f      	ldr	r1, [sp, #124]	; 0x7c
 80112e4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80112e8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80112ec:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80112ee:	910c      	str	r1, [sp, #48]	; 0x30
		cbEndS =   cbi[0].cbEndSMax + 1;
 80112f0:	f10c 0e01 	add.w	lr, ip, #1
		cbStartS = cbi[1].cbEndSMax + 1;
 80112f4:	f100 0101 	add.w	r1, r0, #1
	isfTab = (int *)ISFMpeg1[midSideFlag];
 80112f8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 80112fc:	dada      	bge.n	80112b4 <xmp3_IntensityProcMPEG1+0x104>
 80112fe:	2f02      	cmp	r7, #2
 8011300:	ddd8      	ble.n	80112b4 <xmp3_IntensityProcMPEG1+0x104>
 8011302:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8011306:	3019      	adds	r0, #25
 8011308:	eb06 0040 	add.w	r0, r6, r0, lsl #1
 801130c:	3117      	adds	r1, #23
 801130e:	1859      	adds	r1, r3, r1
 8011310:	9008      	str	r0, [sp, #32]
 8011312:	3314      	adds	r3, #20
 8011314:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
 8011318:	4403      	add	r3, r0
 801131a:	930d      	str	r3, [sp, #52]	; 0x34
				frs[w] = ISFIIP[midSideFlag][1];
 801131c:	4b62      	ldr	r3, [pc, #392]	; (80114a8 <xmp3_IntensityProcMPEG1+0x2f8>)
 801131e:	9107      	str	r1, [sp, #28]
	mOutL = mOutR = 0;
 8011320:	f04f 0800 	mov.w	r8, #0
				frs[w] = ISFIIP[midSideFlag][1];
 8011324:	4423      	add	r3, r4
 8011326:	930b      	str	r3, [sp, #44]	; 0x2c
	mOutL = mOutR = 0;
 8011328:	46c2      	mov	sl, r8
 801132a:	46c1      	mov	r9, r8
 801132c:	9c07      	ldr	r4, [sp, #28]
 801132e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8011330:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 8011334:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8011338:	a90e      	add	r1, sp, #56	; 0x38
 801133a:	a811      	add	r0, sp, #68	; 0x44
 801133c:	4693      	mov	fp, r2
			isf = sfis->s[cb][w];
 801133e:	f814 3b01 	ldrb.w	r3, [r4], #1
			if (isf == 7) {
 8011342:	2b07      	cmp	r3, #7
 8011344:	f000 8093 	beq.w	801146e <xmp3_IntensityProcMPEG1+0x2be>
				fls[w] = isfTab[isf];
 8011348:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
				frs[w] = isfTab[6] - isfTab[isf];
 801134c:	69b2      	ldr	r2, [r6, #24]
				fls[w] = isfTab[isf];
 801134e:	600b      	str	r3, [r1, #0]
				frs[w] = isfTab[6] - isfTab[isf];
 8011350:	1ad3      	subs	r3, r2, r3
 8011352:	6003      	str	r3, [r0, #0]
		for (w = 0; w < 3; w++) {
 8011354:	3104      	adds	r1, #4
 8011356:	ab11      	add	r3, sp, #68	; 0x44
 8011358:	4299      	cmp	r1, r3
 801135a:	f100 0004 	add.w	r0, r0, #4
 801135e:	d1ee      	bne.n	801133e <xmp3_IntensityProcMPEG1+0x18e>
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 8011360:	9b08      	ldr	r3, [sp, #32]
 8011362:	f933 1b02 	ldrsh.w	r1, [r3], #2
 8011366:	1b4d      	subs	r5, r1, r5
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8011368:	2d00      	cmp	r5, #0
		n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 801136a:	e9cd 3108 	strd	r3, r1, [sp, #32]
 801136e:	465a      	mov	r2, fp
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8011370:	f340 808c 	ble.w	801148c <xmp3_IntensityProcMPEG1+0x2dc>
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 8011374:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8011376:	9301      	str	r3, [sp, #4]
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 8011378:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801137a:	9302      	str	r3, [sp, #8]
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 801137c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801137e:	9303      	str	r3, [sp, #12]
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 8011380:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8011382:	9304      	str	r3, [sp, #16]
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 8011384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011386:	9305      	str	r3, [sp, #20]
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8011388:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801138a:	9306      	str	r3, [sp, #24]
 801138c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801138e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011392:	eba7 0c05 	sub.w	ip, r7, r5
 8011396:	eb03 038b 	add.w	r3, r3, fp, lsl #2
 801139a:	eb0b 0e07 	add.w	lr, fp, r7
 801139e:	e001      	b.n	80113a4 <xmp3_IntensityProcMPEG1+0x1f4>
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 80113a0:	2f02      	cmp	r7, #2
 80113a2:	dd8a      	ble.n	80112ba <xmp3_IntensityProcMPEG1+0x10a>
			xr = MULSHIFT32(frs[0], x[0][i+0]) << 2;	x[1][i+0] = xr;	mOutR |= FASTABS(xr);
 80113a4:	681a      	ldr	r2, [r3, #0]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80113a6:	9c01      	ldr	r4, [sp, #4]
 80113a8:	4611      	mov	r1, r2
 80113aa:	fb84 0101 	smull	r0, r1, r4, r1
 80113ae:	0089      	lsls	r1, r1, #2
 80113b0:	f8c3 1900 	str.w	r1, [r3, #2304]	; 0x900
	__asm__ volatile (
 80113b4:	464e      	mov	r6, r9
 80113b6:	ea81 76e1 	eor.w	r6, r1, r1, asr #31
 80113ba:	eba6 76e1 	sub.w	r6, r6, r1, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80113be:	9802      	ldr	r0, [sp, #8]
 80113c0:	fb80 1202 	smull	r1, r2, r0, r2
			xl = MULSHIFT32(fls[0], x[0][i+0]) << 2;	x[0][i+0] = xl;	mOutL |= FASTABS(xl);
 80113c4:	0092      	lsls	r2, r2, #2
 80113c6:	601a      	str	r2, [r3, #0]
	__asm__ volatile (
 80113c8:	464d      	mov	r5, r9
 80113ca:	ea82 75e2 	eor.w	r5, r2, r2, asr #31
 80113ce:	eba5 75e2 	sub.w	r5, r5, r2, asr #31
			xr = MULSHIFT32(frs[1], x[0][i+1]) << 2;	x[1][i+1] = xr;	mOutR |= FASTABS(xr);
 80113d2:	685a      	ldr	r2, [r3, #4]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80113d4:	9c03      	ldr	r4, [sp, #12]
 80113d6:	4611      	mov	r1, r2
 80113d8:	fb84 0101 	smull	r0, r1, r4, r1
 80113dc:	0089      	lsls	r1, r1, #2
 80113de:	f8c3 1904 	str.w	r1, [r3, #2308]	; 0x904
	__asm__ volatile (
 80113e2:	4648      	mov	r0, r9
 80113e4:	ea81 70e1 	eor.w	r0, r1, r1, asr #31
 80113e8:	eba0 70e1 	sub.w	r0, r0, r1, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80113ec:	9c04      	ldr	r4, [sp, #16]
 80113ee:	fb84 1202 	smull	r1, r2, r4, r2
			xl = MULSHIFT32(fls[1], x[0][i+1]) << 2;	x[0][i+1] = xl;	mOutL |= FASTABS(xl);
 80113f2:	0092      	lsls	r2, r2, #2
 80113f4:	605a      	str	r2, [r3, #4]
	__asm__ volatile (
 80113f6:	4649      	mov	r1, r9
 80113f8:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 80113fc:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
			xr = MULSHIFT32(frs[2], x[0][i+2]) << 2;	x[1][i+2] = xr;	mOutR |= FASTABS(xr);
 8011400:	689a      	ldr	r2, [r3, #8]
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011402:	9200      	str	r2, [sp, #0]
 8011404:	4614      	mov	r4, r2
 8011406:	9a05      	ldr	r2, [sp, #20]
 8011408:	fb82 b404 	smull	fp, r4, r2, r4
 801140c:	00a4      	lsls	r4, r4, #2
 801140e:	f8c3 4908 	str.w	r4, [r3, #2312]	; 0x908
	__asm__ volatile (
 8011412:	46cb      	mov	fp, r9
 8011414:	ea84 7be4 	eor.w	fp, r4, r4, asr #31
 8011418:	ebab 7be4 	sub.w	fp, fp, r4, asr #31
 801141c:	4330      	orrs	r0, r6
 801141e:	ea40 000b 	orr.w	r0, r0, fp
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 8011422:	9a00      	ldr	r2, [sp, #0]
 8011424:	9c06      	ldr	r4, [sp, #24]
 8011426:	ea48 0800 	orr.w	r8, r8, r0
 801142a:	fb84 0202 	smull	r0, r2, r4, r2
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 801142e:	0092      	lsls	r2, r2, #2
 8011430:	609a      	str	r2, [r3, #8]
	__asm__ volatile (
 8011432:	4648      	mov	r0, r9
 8011434:	ea82 70e2 	eor.w	r0, r2, r2, asr #31
 8011438:	eba0 70e2 	sub.w	r0, r0, r2, asr #31
			sampsLeft -= 3;
 801143c:	3f03      	subs	r7, #3
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 801143e:	4329      	orrs	r1, r5
 8011440:	4301      	orrs	r1, r0
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8011442:	4567      	cmp	r7, ip
			xl = MULSHIFT32(fls[2], x[0][i+2]) << 2;	x[0][i+2] = xl;	mOutL |= FASTABS(xl);
 8011444:	ea4a 0a01 	orr.w	sl, sl, r1
		for (j = 0; j < n && sampsLeft >= 3; j++, i+=3) {
 8011448:	ebae 0207 	sub.w	r2, lr, r7
 801144c:	f103 030c 	add.w	r3, r3, #12
 8011450:	d1a6      	bne.n	80113a0 <xmp3_IntensityProcMPEG1+0x1f0>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 8011452:	9b07      	ldr	r3, [sp, #28]
 8011454:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011456:	428b      	cmp	r3, r1
 8011458:	f43f af2f 	beq.w	80112ba <xmp3_IntensityProcMPEG1+0x10a>
 801145c:	3303      	adds	r3, #3
 801145e:	f1bc 0f02 	cmp.w	ip, #2
 8011462:	9307      	str	r3, [sp, #28]
 8011464:	f77f af29 	ble.w	80112ba <xmp3_IntensityProcMPEG1+0x10a>
	mOutL = mOutR = 0;
 8011468:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801146a:	4667      	mov	r7, ip
 801146c:	e75e      	b.n	801132c <xmp3_IntensityProcMPEG1+0x17c>
				fls[w] = ISFIIP[midSideFlag][0];
 801146e:	4b0e      	ldr	r3, [pc, #56]	; (80114a8 <xmp3_IntensityProcMPEG1+0x2f8>)
 8011470:	f853 303e 	ldr.w	r3, [r3, lr, lsl #3]
 8011474:	461a      	mov	r2, r3
				frs[w] = ISFIIP[midSideFlag][1];
 8011476:	f8dc 3004 	ldr.w	r3, [ip, #4]
				fls[w] = ISFIIP[midSideFlag][0];
 801147a:	600a      	str	r2, [r1, #0]
				frs[w] = ISFIIP[midSideFlag][1];
 801147c:	6003      	str	r3, [r0, #0]
 801147e:	e769      	b.n	8011354 <xmp3_IntensityProcMPEG1+0x1a4>
	for (cb = cbStartL; cb < cbEndL && sampsLeft > 0; cb++) {
 8011480:	9b02      	ldr	r3, [sp, #8]
 8011482:	459b      	cmp	fp, r3
 8011484:	f43f af19 	beq.w	80112ba <xmp3_IntensityProcMPEG1+0x10a>
 8011488:	460f      	mov	r7, r1
 801148a:	e702      	b.n	8011292 <xmp3_IntensityProcMPEG1+0xe2>
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 801148c:	9b07      	ldr	r3, [sp, #28]
 801148e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8011490:	428b      	cmp	r3, r1
 8011492:	f43f af12 	beq.w	80112ba <xmp3_IntensityProcMPEG1+0x10a>
 8011496:	9b07      	ldr	r3, [sp, #28]
 8011498:	3303      	adds	r3, #3
 801149a:	9307      	str	r3, [sp, #28]
 801149c:	46bc      	mov	ip, r7
 801149e:	e7e3      	b.n	8011468 <xmp3_IntensityProcMPEG1+0x2b8>
	mOutL = mOutR = 0;
 80114a0:	46d0      	mov	r8, sl
	for (cb = cbStartS; cb < cbEndS && sampsLeft >= 3; cb++) {
 80114a2:	e70a      	b.n	80112ba <xmp3_IntensityProcMPEG1+0x10a>
 80114a4:	0802847c 	.word	0x0802847c
 80114a8:	0802846c 	.word	0x0802846c

080114ac <xmp3_IntensityProcMPEG2>:
 *              make sure all the mixed-block and IIP logic is right
 *                probably redo IIP logic to be simpler
 **************************************************************************************/
void IntensityProcMPEG2(int x[MAX_NCHAN][MAX_NSAMP], int nSamps, FrameHeader *fh, ScaleFactorInfoSub *sfis, 
						CriticalBandInfo *cbi, ScaleFactorJS *sfjs, int midSideFlag, int mixFlag, int mOut[2])
{
 80114ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b0:	b0a1      	sub	sp, #132	; 0x84
 80114b2:	e9dd 942a 	ldrd	r9, r4, [sp, #168]	; 0xa8
	int sampsLeft;
	int isf, sfIdx, tmp, il[23];
	int *isfTab;
	int cbStartL, cbStartS, cbEndL, cbEndS;
	
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 80114b6:	46a4      	mov	ip, r4
 80114b8:	9d2c      	ldr	r5, [sp, #176]	; 0xb0
 80114ba:	f104 0814 	add.w	r8, r4, #20
 80114be:	f85c 4b04 	ldr.w	r4, [ip], #4
 80114c2:	eb05 0444 	add.w	r4, r5, r4, lsl #1
 80114c6:	4d97      	ldr	r5, [pc, #604]	; (8011724 <xmp3_IntensityProcMPEG2+0x278>)
 80114c8:	eb05 1484 	add.w	r4, r5, r4, lsl #6
 80114cc:	9403      	str	r4, [sp, #12]
	mOutL = mOutR = 0;

	/* fill buffer with illegal intensity positions (depending on slen) */
	for (k = r = 0; r < 4; r++) {
		tmp = (1 << sfjs->slen[r]) - 1;
 80114ce:	f04f 0e01 	mov.w	lr, #1
	for (k = r = 0; r < 4; r++) {
 80114d2:	2400      	movs	r4, #0
		tmp = (1 << sfjs->slen[r]) - 1;
 80114d4:	f85c 5b04 	ldr.w	r5, [ip], #4
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80114d8:	f8dc 700c 	ldr.w	r7, [ip, #12]
		tmp = (1 << sfjs->slen[r]) - 1;
 80114dc:	fa0e f505 	lsl.w	r5, lr, r5
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80114e0:	2f00      	cmp	r7, #0
		tmp = (1 << sfjs->slen[r]) - 1;
 80114e2:	f105 35ff 	add.w	r5, r5, #4294967295
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80114e6:	dd0a      	ble.n	80114fe <xmp3_IntensityProcMPEG2+0x52>
 80114e8:	4427      	add	r7, r4
 80114ea:	ae09      	add	r6, sp, #36	; 0x24
 80114ec:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 80114f0:	eb06 0687 	add.w	r6, r6, r7, lsl #2
			il[k] = tmp;
 80114f4:	f844 5b04 	str.w	r5, [r4], #4
		for (j = 0; j < sfjs->nr[r]; j++, k++) 
 80114f8:	42b4      	cmp	r4, r6
 80114fa:	d1fb      	bne.n	80114f4 <xmp3_IntensityProcMPEG2+0x48>
 80114fc:	463c      	mov	r4, r7
	for (k = r = 0; r < 4; r++) {
 80114fe:	45c4      	cmp	ip, r8
 8011500:	d1e8      	bne.n	80114d4 <xmp3_IntensityProcMPEG2+0x28>
	}

	if (cbi[1].cbType == 0) {
 8011502:	f8d9 4018 	ldr.w	r4, [r9, #24]
 8011506:	2c00      	cmp	r4, #0
 8011508:	d17f      	bne.n	801160a <xmp3_IntensityProcMPEG2+0x15e>
		/* long blocks */
		il[21] = il[22] = 1;
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
		i = fh->sfBand->l[cbStartL];
 801150a:	6b56      	ldr	r6, [r2, #52]	; 0x34
		cbStartL = cbi[1].cbEndL + 1;	/* start at end of right */
 801150c:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
		cbEndL =   cbi[0].cbEndL + 1;	/* process to end of left */
 8011510:	f8d9 5014 	ldr.w	r5, [r9, #20]
 8011514:	9501      	str	r5, [sp, #4]
 8011516:	eb03 0902 	add.w	r9, r3, r2
		i = fh->sfBand->l[cbStartL];
 801151a:	1c55      	adds	r5, r2, #1
 801151c:	f1c3 0301 	rsb	r3, r3, #1
 8011520:	9302      	str	r3, [sp, #8]
		il[21] = il[22] = 1;
 8011522:	2301      	movs	r3, #1
		i = fh->sfBand->l[cbStartL];
 8011524:	f936 2015 	ldrsh.w	r2, [r6, r5, lsl #1]
 8011528:	9004      	str	r0, [sp, #16]
		il[21] = il[22] = 1;
 801152a:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
		sampsLeft = nSamps - i;
 801152e:	ab09      	add	r3, sp, #36	; 0x24
 8011530:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8011534:	eba1 0e02 	sub.w	lr, r1, r2

		for(cb = cbStartL; cb < cbEndL; cb++) {
 8011538:	9300      	str	r3, [sp, #0]
			sfIdx = sfis->l[cb];
			if (sfIdx == il[cb]) {
				fl = ISFIIP[midSideFlag][0];
				fr = ISFIIP[midSideFlag][1];
 801153a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801153c:	4b7a      	ldr	r3, [pc, #488]	; (8011728 <xmp3_IntensityProcMPEG2+0x27c>)
 801153e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8011542:	eb06 0b45 	add.w	fp, r6, r5, lsl #1
	mOutL = mOutR = 0;
 8011546:	46a0      	mov	r8, r4
				fr = ISFIIP[midSideFlag][1];
 8011548:	9305      	str	r3, [sp, #20]
 801154a:	4626      	mov	r6, r4
		for(cb = cbStartL; cb < cbEndL; cb++) {
 801154c:	9b02      	ldr	r3, [sp, #8]
 801154e:	9901      	ldr	r1, [sp, #4]
 8011550:	444b      	add	r3, r9
 8011552:	4299      	cmp	r1, r3
 8011554:	db47      	blt.n	80115e6 <xmp3_IntensityProcMPEG2+0x13a>
			if (sfIdx == il[cb]) {
 8011556:	9800      	ldr	r0, [sp, #0]
			sfIdx = sfis->l[cb];
 8011558:	f819 1f01 	ldrb.w	r1, [r9, #1]!
			if (sfIdx == il[cb]) {
 801155c:	f850 3b04 	ldr.w	r3, [r0], #4
 8011560:	9000      	str	r0, [sp, #0]
 8011562:	428b      	cmp	r3, r1
 8011564:	d045      	beq.n	80115f2 <xmp3_IntensityProcMPEG2+0x146>
			} else {
				isf = (sfis->l[cb] + 1) >> 1;
 8011566:	1c4b      	adds	r3, r1, #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011568:	07c8      	lsls	r0, r1, #31
				isf = (sfis->l[cb] + 1) >> 1;
 801156a:	ea4f 0363 	mov.w	r3, r3, asr #1
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 801156e:	d547      	bpl.n	8011600 <xmp3_IntensityProcMPEG2+0x154>
 8011570:	9803      	ldr	r0, [sp, #12]
 8011572:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 8011576:	4603      	mov	r3, r0
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8011578:	6818      	ldr	r0, [r3, #0]
			}
			n = MIN(fh->sfBand->l[cb + 1] - fh->sfBand->l[cb], sampsLeft);
 801157a:	f9bb 7002 	ldrsh.w	r7, [fp, #2]
 801157e:	465b      	mov	r3, fp
 8011580:	f10b 0b02 	add.w	fp, fp, #2
 8011584:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011588:	1aff      	subs	r7, r7, r3
 801158a:	4577      	cmp	r7, lr
 801158c:	bfa8      	it	ge
 801158e:	4677      	movge	r7, lr

			for(j = 0; j < n; j++, i++) {
 8011590:	2f00      	cmp	r7, #0
 8011592:	dd25      	ble.n	80115e0 <xmp3_IntensityProcMPEG2+0x134>
 8011594:	9b04      	ldr	r3, [sp, #16]
 8011596:	eb07 0c02 	add.w	ip, r7, r2
 801159a:	eb03 058c 	add.w	r5, r3, ip, lsl #2
 801159e:	eb03 0282 	add.w	r2, r3, r2, lsl #2
				xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 80115a2:	f852 3b04 	ldr.w	r3, [r2], #4
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80115a6:	fb80 a303 	smull	sl, r3, r0, r3
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	f8c2 38fc 	str.w	r3, [r2, #2300]	; 0x8fc
	__asm__ volatile (
 80115b0:	46b2      	mov	sl, r6
 80115b2:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 80115b6:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80115ba:	f852 3c04 	ldr.w	r3, [r2, #-4]
 80115be:	ea48 080a 	orr.w	r8, r8, sl
 80115c2:	fb81 a303 	smull	sl, r3, r1, r3
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80115c6:	009b      	lsls	r3, r3, #2
 80115c8:	f842 3c04 	str.w	r3, [r2, #-4]
	__asm__ volatile (
 80115cc:	46b2      	mov	sl, r6
 80115ce:	ea83 7ae3 	eor.w	sl, r3, r3, asr #31
 80115d2:	ebaa 7ae3 	sub.w	sl, sl, r3, asr #31
			for(j = 0; j < n; j++, i++) {
 80115d6:	4295      	cmp	r5, r2
				xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80115d8:	ea44 040a 	orr.w	r4, r4, sl
			for(j = 0; j < n; j++, i++) {
 80115dc:	d1e1      	bne.n	80115a2 <xmp3_IntensityProcMPEG2+0xf6>
 80115de:	4662      	mov	r2, ip
			}

			/* early exit once we've used all the non-zero samples */
			sampsLeft -= n;
			if (sampsLeft == 0)		
 80115e0:	ebbe 0e07 	subs.w	lr, lr, r7
 80115e4:	d1b2      	bne.n	801154c <xmp3_IntensityProcMPEG2+0xa0>
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
				}
			}
		}
	}
	mOut[0] = mOutL;
 80115e6:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
	mOut[1] = mOutR;
 80115e8:	e9c3 4800 	strd	r4, r8, [r3]

	return;
}
 80115ec:	b021      	add	sp, #132	; 0x84
 80115ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				fl = ISFIIP[midSideFlag][0];
 80115f2:	4b4d      	ldr	r3, [pc, #308]	; (8011728 <xmp3_IntensityProcMPEG2+0x27c>)
 80115f4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80115f6:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
				fr = ISFIIP[midSideFlag][1];
 80115fa:	9b05      	ldr	r3, [sp, #20]
 80115fc:	6858      	ldr	r0, [r3, #4]
 80115fe:	e7bc      	b.n	801157a <xmp3_IntensityProcMPEG2+0xce>
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8011600:	9903      	ldr	r1, [sp, #12]
 8011602:	eb01 0383 	add.w	r3, r1, r3, lsl #2
				fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011606:	6809      	ldr	r1, [r1, #0]
				fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8011608:	e7b6      	b.n	8011578 <xmp3_IntensityProcMPEG2+0xcc>
			i = 3 * fh->sfBand->s[cbStartS] + w;
 801160a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 801160c:	9207      	str	r2, [sp, #28]
 801160e:	3317      	adds	r3, #23
 8011610:	f109 0204 	add.w	r2, r9, #4
 8011614:	9301      	str	r3, [sp, #4]
		il[12] = 1;
 8011616:	2301      	movs	r3, #1
 8011618:	9206      	str	r2, [sp, #24]
 801161a:	9315      	str	r3, [sp, #84]	; 0x54
					fr = ISFIIP[midSideFlag][1];
 801161c:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 801161e:	4b42      	ldr	r3, [pc, #264]	; (8011728 <xmp3_IntensityProcMPEG2+0x27c>)
	mOutL = mOutR = 0;
 8011620:	f04f 0800 	mov.w	r8, #0
					fr = ISFIIP[midSideFlag][1];
 8011624:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	mOutL = mOutR = 0;
 8011628:	4644      	mov	r4, r8
		for(w = 0; w < 3; w++) {
 801162a:	f8cd 8010 	str.w	r8, [sp, #16]
					fr = ISFIIP[midSideFlag][1];
 801162e:	9305      	str	r3, [sp, #20]
 8011630:	f500 6710 	add.w	r7, r0, #2304	; 0x900
 8011634:	46c6      	mov	lr, r8
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8011636:	9a06      	ldr	r2, [sp, #24]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8011638:	9d07      	ldr	r5, [sp, #28]
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 801163a:	6993      	ldr	r3, [r2, #24]
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 801163c:	f852 1b04 	ldr.w	r1, [r2], #4
 8011640:	9206      	str	r2, [sp, #24]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8011642:	eb05 0243 	add.w	r2, r5, r3, lsl #1
			cbStartS = cbi[1].cbEndS[w] + 1;		/* start at end of right */
 8011646:	f103 0c01 	add.w	ip, r3, #1
			i = 3 * fh->sfBand->s[cbStartS] + w;
 801164a:	f9b2 6030 	ldrsh.w	r6, [r2, #48]	; 0x30
			cbEndS =   cbi[0].cbEndS[w] + 1;		/* process to end of left */
 801164e:	9102      	str	r1, [sp, #8]
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8011650:	2203      	movs	r2, #3
 8011652:	4691      	mov	r9, r2
 8011654:	9a04      	ldr	r2, [sp, #16]
			for(cb = cbStartS; cb < cbEndS; cb++) {
 8011656:	4561      	cmp	r1, ip
			i = 3 * fh->sfBand->s[cbStartS] + w;
 8011658:	fb16 2209 	smlabb	r2, r6, r9, r2
			for(cb = cbStartS; cb < cbEndS; cb++) {
 801165c:	db54      	blt.n	8011708 <xmp3_IntensityProcMPEG2+0x25c>
 801165e:	3319      	adds	r3, #25
 8011660:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8011664:	9300      	str	r3, [sp, #0]
 8011666:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
				sfIdx = sfis->s[cb][w];
 801166a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 801166e:	9901      	ldr	r1, [sp, #4]
 8011670:	5cc9      	ldrb	r1, [r1, r3]
				if (sfIdx == il[cb]) {
 8011672:	f85a 302c 	ldr.w	r3, [sl, ip, lsl #2]
 8011676:	428b      	cmp	r3, r1
 8011678:	d03a      	beq.n	80116f0 <xmp3_IntensityProcMPEG2+0x244>
					isf = (sfis->s[cb][w] + 1) >> 1;
 801167a:	1c4b      	adds	r3, r1, #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 801167c:	07c9      	lsls	r1, r1, #31
					isf = (sfis->s[cb][w] + 1) >> 1;
 801167e:	ea4f 0363 	mov.w	r3, r3, asr #1
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011682:	d53c      	bpl.n	80116fe <xmp3_IntensityProcMPEG2+0x252>
 8011684:	9d03      	ldr	r5, [sp, #12]
 8011686:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
	isfTab = (int *)ISFMpeg2[sfjs->intensityScale][midSideFlag];
 801168a:	462b      	mov	r3, r5
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 801168c:	681d      	ldr	r5, [r3, #0]
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 801168e:	9b00      	ldr	r3, [sp, #0]
 8011690:	f933 9b02 	ldrsh.w	r9, [r3], #2
 8011694:	9300      	str	r3, [sp, #0]
 8011696:	eba9 0606 	sub.w	r6, r9, r6
				for(j = 0; j < n; j++, i+=3) {
 801169a:	2e00      	cmp	r6, #0
				n = fh->sfBand->s[cb + 1] - fh->sfBand->s[cb];
 801169c:	f10c 0c01 	add.w	ip, ip, #1
				for(j = 0; j < n; j++, i+=3) {
 80116a0:	dd21      	ble.n	80116e6 <xmp3_IntensityProcMPEG2+0x23a>
 80116a2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80116a6:	4416      	add	r6, r2
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80116a8:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80116ac:	fb85 b303 	smull	fp, r3, r5, r3
					xr = MULSHIFT32(fr, x[0][i]) << 2;	x[1][i] = xr;	mOutR |= FASTABS(xr);
 80116b0:	009b      	lsls	r3, r3, #2
 80116b2:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	__asm__ volatile (
 80116b6:	46f3      	mov	fp, lr
 80116b8:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 80116bc:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
    __asm__ volatile ("smull %0,%1,%2,%3" : "=&r" (zlow), "=r" (y) : "r" (x), "1" (y)) ;
 80116c0:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 80116c4:	ea48 080b 	orr.w	r8, r8, fp
 80116c8:	fb81 b303 	smull	fp, r3, r1, r3
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80116cc:	009b      	lsls	r3, r3, #2
 80116ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	__asm__ volatile (
 80116d2:	46f3      	mov	fp, lr
 80116d4:	ea83 7be3 	eor.w	fp, r3, r3, asr #31
 80116d8:	ebab 7be3 	sub.w	fp, fp, r3, asr #31
				for(j = 0; j < n; j++, i+=3) {
 80116dc:	3203      	adds	r2, #3
 80116de:	42b2      	cmp	r2, r6
					xl = MULSHIFT32(fl, x[0][i]) << 2;	x[0][i] = xl;	mOutL |= FASTABS(xl);
 80116e0:	ea44 040b 	orr.w	r4, r4, fp
				for(j = 0; j < n; j++, i+=3) {
 80116e4:	d1e0      	bne.n	80116a8 <xmp3_IntensityProcMPEG2+0x1fc>
			for(cb = cbStartS; cb < cbEndS; cb++) {
 80116e6:	9b02      	ldr	r3, [sp, #8]
 80116e8:	4563      	cmp	r3, ip
 80116ea:	db0d      	blt.n	8011708 <xmp3_IntensityProcMPEG2+0x25c>
 80116ec:	464e      	mov	r6, r9
 80116ee:	e7bc      	b.n	801166a <xmp3_IntensityProcMPEG2+0x1be>
					fl = ISFIIP[midSideFlag][0];
 80116f0:	4b0d      	ldr	r3, [pc, #52]	; (8011728 <xmp3_IntensityProcMPEG2+0x27c>)
 80116f2:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80116f4:	f853 1031 	ldr.w	r1, [r3, r1, lsl #3]
					fr = ISFIIP[midSideFlag][1];
 80116f8:	9b05      	ldr	r3, [sp, #20]
 80116fa:	685d      	ldr	r5, [r3, #4]
 80116fc:	e7c7      	b.n	801168e <xmp3_IntensityProcMPEG2+0x1e2>
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 80116fe:	9903      	ldr	r1, [sp, #12]
 8011700:	eb01 0383 	add.w	r3, r1, r3, lsl #2
					fl = isfTab[(sfIdx & 0x01 ? isf : 0)];
 8011704:	6809      	ldr	r1, [r1, #0]
					fr = isfTab[(sfIdx & 0x01 ? 0 : isf)];
 8011706:	e7c1      	b.n	801168c <xmp3_IntensityProcMPEG2+0x1e0>
		for(w = 0; w < 3; w++) {
 8011708:	9b04      	ldr	r3, [sp, #16]
 801170a:	9a01      	ldr	r2, [sp, #4]
 801170c:	3301      	adds	r3, #1
 801170e:	3201      	adds	r2, #1
 8011710:	2b03      	cmp	r3, #3
 8011712:	9304      	str	r3, [sp, #16]
 8011714:	9201      	str	r2, [sp, #4]
 8011716:	d18e      	bne.n	8011636 <xmp3_IntensityProcMPEG2+0x18a>
	mOut[0] = mOutL;
 8011718:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
	mOut[1] = mOutR;
 801171a:	e9c3 4800 	strd	r4, r8, [r3]
}
 801171e:	b021      	add	sp, #132	; 0x84
 8011720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011724:	080284b4 	.word	0x080284b4
 8011728:	0802846c 	.word	0x0802846c

0801172c <xmp3_Subband>:
	int b;
	IMDCTInfo *mi;
	SubbandInfo *sbi;

	/* validate pointers */
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 801172c:	2800      	cmp	r0, #0
 801172e:	f000 8086 	beq.w	801183e <xmp3_Subband+0x112>
 8011732:	68c3      	ldr	r3, [r0, #12]
 8011734:	2b00      	cmp	r3, #0
 8011736:	f000 8082 	beq.w	801183e <xmp3_Subband+0x112>
{
 801173a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 801173e:	6946      	ldr	r6, [r0, #20]
{
 8011740:	b085      	sub	sp, #20
	if (!mp3DecInfo || !mp3DecInfo->HuffmanInfoPS || !mp3DecInfo->IMDCTInfoPS || !mp3DecInfo->SubbandInfoPS)
 8011742:	2e00      	cmp	r6, #0
 8011744:	d078      	beq.n	8011838 <xmp3_Subband+0x10c>
 8011746:	6987      	ldr	r7, [r0, #24]
 8011748:	2f00      	cmp	r7, #0
 801174a:	d075      	beq.n	8011838 <xmp3_Subband+0x10c>
	return -1;

	mi = (IMDCTInfo *)(mp3DecInfo->IMDCTInfoPS);
	sbi = (SubbandInfo*)(mp3DecInfo->SubbandInfoPS);

	if (mp3DecInfo->nChans == 2) {
 801174c:	f8d0 37bc 	ldr.w	r3, [r0, #1980]	; 0x7bc
		/* stereo */
		for (b = 0; b < BLOCK_SIZE; b++) {
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8011750:	f507 5400 	add.w	r4, r7, #8192	; 0x2000
	if (mp3DecInfo->nChans == 2) {
 8011754:	2b02      	cmp	r3, #2
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 8011756:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 801175a:	460d      	mov	r5, r1
	if (mp3DecInfo->nChans == 2) {
 801175c:	d031      	beq.n	80117c2 <xmp3_Subband+0x96>
		}
		} else {
		/* mono */
		for (b = 0; b < BLOCK_SIZE; b++) {
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 801175e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011844 <xmp3_Subband+0x118>
 8011762:	9603      	str	r6, [sp, #12]
		for (b = 0; b < BLOCK_SIZE; b++) {
 8011764:	f04f 0900 	mov.w	r9, #0
 8011768:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 801176c:	9b03      	ldr	r3, [sp, #12]
 801176e:	f8d8 6b18 	ldr.w	r6, [r8, #2840]	; 0xb18
 8011772:	9600      	str	r6, [sp, #0]
 8011774:	f009 0b01 	and.w	fp, r9, #1
 8011778:	eb03 10c9 	add.w	r0, r3, r9, lsl #7
 801177c:	4639      	mov	r1, r7
 801177e:	465b      	mov	r3, fp
 8011780:	f7fb ffd4 	bl	800d72c <xmp3_FDCT32>
			PolyphaseMono(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 8011784:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 8011788:	eb0b 130b 	add.w	r3, fp, fp, lsl #4
 801178c:	eb01 1183 	add.w	r1, r1, r3, lsl #6
 8011790:	4628      	mov	r0, r5
 8011792:	4652      	mov	r2, sl
 8011794:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8011798:	f7fe fcce 	bl	8010138 <xmp3_PolyphaseMono>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 801179c:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 80117a0:	f109 0901 	add.w	r9, r9, #1
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80117a4:	eba2 020b 	sub.w	r2, r2, fp
 80117a8:	f002 0207 	and.w	r2, r2, #7
		for (b = 0; b < BLOCK_SIZE; b++) {
 80117ac:	f1b9 0f12 	cmp.w	r9, #18
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 80117b0:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
			pcmBuf += NBANDS;
 80117b4:	f105 0540 	add.w	r5, r5, #64	; 0x40
		for (b = 0; b < BLOCK_SIZE; b++) {
 80117b8:	d1d8      	bne.n	801176c <xmp3_Subband+0x40>
		}
	}

	return 0;
 80117ba:	2000      	movs	r0, #0
}
 80117bc:	b005      	add	sp, #20
 80117be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117c2:	f506 6310 	add.w	r3, r6, #2304	; 0x900
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 80117c6:	f107 0a80 	add.w	sl, r7, #128	; 0x80
 80117ca:	9303      	str	r3, [sp, #12]
		for (b = 0; b < BLOCK_SIZE; b++) {
 80117cc:	f04f 0900 	mov.w	r9, #0
 80117d0:	f506 5880 	add.w	r8, r6, #4096	; 0x1000
			FDCT32(mi->outBuf[0][b], sbi->vbuf + 0*32, sbi->vindex, (b & 0x01), mi->gb[0]);
 80117d4:	f009 0b01 	and.w	fp, r9, #1
 80117d8:	f8d8 1b18 	ldr.w	r1, [r8, #2840]	; 0xb18
 80117dc:	9100      	str	r1, [sp, #0]
 80117de:	4630      	mov	r0, r6
 80117e0:	465b      	mov	r3, fp
 80117e2:	4639      	mov	r1, r7
 80117e4:	f7fb ffa2 	bl	800d72c <xmp3_FDCT32>
			FDCT32(mi->outBuf[1][b], sbi->vbuf + 1*32, sbi->vindex, (b & 0x01), mi->gb[1]);
 80117e8:	f8d8 1b1c 	ldr.w	r1, [r8, #2844]	; 0xb1c
 80117ec:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
 80117f0:	9100      	str	r1, [sp, #0]
 80117f2:	465b      	mov	r3, fp
 80117f4:	f506 6010 	add.w	r0, r6, #2304	; 0x900
 80117f8:	4651      	mov	r1, sl
 80117fa:	f7fb ff97 	bl	800d72c <xmp3_FDCT32>
			PolyphaseStereo(pcmBuf, sbi->vbuf + sbi->vindex + VBUF_LENGTH * (b & 0x01), polyCoef);
 80117fe:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
 8011802:	eb0b 120b 	add.w	r2, fp, fp, lsl #4
 8011806:	eb01 1182 	add.w	r1, r1, r2, lsl #6
 801180a:	4628      	mov	r0, r5
 801180c:	4a0d      	ldr	r2, [pc, #52]	; (8011844 <xmp3_Subband+0x118>)
 801180e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8011812:	f7fe fe01 	bl	8010418 <xmp3_PolyphaseStereo>
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8011816:	f8d4 2200 	ldr.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 801181a:	9b03      	ldr	r3, [sp, #12]
 801181c:	3680      	adds	r6, #128	; 0x80
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 801181e:	eba2 020b 	sub.w	r2, r2, fp
 8011822:	f002 0207 	and.w	r2, r2, #7
		for (b = 0; b < BLOCK_SIZE; b++) {
 8011826:	429e      	cmp	r6, r3
 8011828:	f109 0901 	add.w	r9, r9, #1
			pcmBuf += (2 * NBANDS);
 801182c:	f105 0580 	add.w	r5, r5, #128	; 0x80
			sbi->vindex = (sbi->vindex - (b & 0x01)) & 7;
 8011830:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
		for (b = 0; b < BLOCK_SIZE; b++) {
 8011834:	d1ce      	bne.n	80117d4 <xmp3_Subband+0xa8>
 8011836:	e7c0      	b.n	80117ba <xmp3_Subband+0x8e>
	return -1;
 8011838:	f04f 30ff 	mov.w	r0, #4294967295
 801183c:	e7be      	b.n	80117bc <xmp3_Subband+0x90>
 801183e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8011842:	4770      	bx	lr
 8011844:	08028834 	.word	0x08028834

08011848 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	4603      	mov	r3, r0
 8011850:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011852:	79fb      	ldrb	r3, [r7, #7]
 8011854:	4a08      	ldr	r2, [pc, #32]	; (8011878 <disk_status+0x30>)
 8011856:	009b      	lsls	r3, r3, #2
 8011858:	4413      	add	r3, r2
 801185a:	685b      	ldr	r3, [r3, #4]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	79fa      	ldrb	r2, [r7, #7]
 8011860:	4905      	ldr	r1, [pc, #20]	; (8011878 <disk_status+0x30>)
 8011862:	440a      	add	r2, r1
 8011864:	7a12      	ldrb	r2, [r2, #8]
 8011866:	4610      	mov	r0, r2
 8011868:	4798      	blx	r3
 801186a:	4603      	mov	r3, r0
 801186c:	73fb      	strb	r3, [r7, #15]
  return stat;
 801186e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011870:	4618      	mov	r0, r3
 8011872:	3710      	adds	r7, #16
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}
 8011878:	20019188 	.word	0x20019188

0801187c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b084      	sub	sp, #16
 8011880:	af00      	add	r7, sp, #0
 8011882:	4603      	mov	r3, r0
 8011884:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011886:	2300      	movs	r3, #0
 8011888:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 801188a:	79fb      	ldrb	r3, [r7, #7]
 801188c:	4a0d      	ldr	r2, [pc, #52]	; (80118c4 <disk_initialize+0x48>)
 801188e:	5cd3      	ldrb	r3, [r2, r3]
 8011890:	2b00      	cmp	r3, #0
 8011892:	d111      	bne.n	80118b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011894:	79fb      	ldrb	r3, [r7, #7]
 8011896:	4a0b      	ldr	r2, [pc, #44]	; (80118c4 <disk_initialize+0x48>)
 8011898:	2101      	movs	r1, #1
 801189a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801189c:	79fb      	ldrb	r3, [r7, #7]
 801189e:	4a09      	ldr	r2, [pc, #36]	; (80118c4 <disk_initialize+0x48>)
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	4413      	add	r3, r2
 80118a4:	685b      	ldr	r3, [r3, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	79fa      	ldrb	r2, [r7, #7]
 80118aa:	4906      	ldr	r1, [pc, #24]	; (80118c4 <disk_initialize+0x48>)
 80118ac:	440a      	add	r2, r1
 80118ae:	7a12      	ldrb	r2, [r2, #8]
 80118b0:	4610      	mov	r0, r2
 80118b2:	4798      	blx	r3
 80118b4:	4603      	mov	r3, r0
 80118b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80118b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	3710      	adds	r7, #16
 80118be:	46bd      	mov	sp, r7
 80118c0:	bd80      	pop	{r7, pc}
 80118c2:	bf00      	nop
 80118c4:	20019188 	.word	0x20019188

080118c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80118c8:	b590      	push	{r4, r7, lr}
 80118ca:	b087      	sub	sp, #28
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	60b9      	str	r1, [r7, #8]
 80118d0:	607a      	str	r2, [r7, #4]
 80118d2:	603b      	str	r3, [r7, #0]
 80118d4:	4603      	mov	r3, r0
 80118d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80118d8:	7bfb      	ldrb	r3, [r7, #15]
 80118da:	4a0a      	ldr	r2, [pc, #40]	; (8011904 <disk_read+0x3c>)
 80118dc:	009b      	lsls	r3, r3, #2
 80118de:	4413      	add	r3, r2
 80118e0:	685b      	ldr	r3, [r3, #4]
 80118e2:	689c      	ldr	r4, [r3, #8]
 80118e4:	7bfb      	ldrb	r3, [r7, #15]
 80118e6:	4a07      	ldr	r2, [pc, #28]	; (8011904 <disk_read+0x3c>)
 80118e8:	4413      	add	r3, r2
 80118ea:	7a18      	ldrb	r0, [r3, #8]
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	687a      	ldr	r2, [r7, #4]
 80118f0:	68b9      	ldr	r1, [r7, #8]
 80118f2:	47a0      	blx	r4
 80118f4:	4603      	mov	r3, r0
 80118f6:	75fb      	strb	r3, [r7, #23]
  return res;
 80118f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	371c      	adds	r7, #28
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd90      	pop	{r4, r7, pc}
 8011902:	bf00      	nop
 8011904:	20019188 	.word	0x20019188

08011908 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011908:	b590      	push	{r4, r7, lr}
 801190a:	b087      	sub	sp, #28
 801190c:	af00      	add	r7, sp, #0
 801190e:	60b9      	str	r1, [r7, #8]
 8011910:	607a      	str	r2, [r7, #4]
 8011912:	603b      	str	r3, [r7, #0]
 8011914:	4603      	mov	r3, r0
 8011916:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011918:	7bfb      	ldrb	r3, [r7, #15]
 801191a:	4a0a      	ldr	r2, [pc, #40]	; (8011944 <disk_write+0x3c>)
 801191c:	009b      	lsls	r3, r3, #2
 801191e:	4413      	add	r3, r2
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	68dc      	ldr	r4, [r3, #12]
 8011924:	7bfb      	ldrb	r3, [r7, #15]
 8011926:	4a07      	ldr	r2, [pc, #28]	; (8011944 <disk_write+0x3c>)
 8011928:	4413      	add	r3, r2
 801192a:	7a18      	ldrb	r0, [r3, #8]
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	687a      	ldr	r2, [r7, #4]
 8011930:	68b9      	ldr	r1, [r7, #8]
 8011932:	47a0      	blx	r4
 8011934:	4603      	mov	r3, r0
 8011936:	75fb      	strb	r3, [r7, #23]
  return res;
 8011938:	7dfb      	ldrb	r3, [r7, #23]
}
 801193a:	4618      	mov	r0, r3
 801193c:	371c      	adds	r7, #28
 801193e:	46bd      	mov	sp, r7
 8011940:	bd90      	pop	{r4, r7, pc}
 8011942:	bf00      	nop
 8011944:	20019188 	.word	0x20019188

08011948 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b084      	sub	sp, #16
 801194c:	af00      	add	r7, sp, #0
 801194e:	4603      	mov	r3, r0
 8011950:	603a      	str	r2, [r7, #0]
 8011952:	71fb      	strb	r3, [r7, #7]
 8011954:	460b      	mov	r3, r1
 8011956:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011958:	79fb      	ldrb	r3, [r7, #7]
 801195a:	4a09      	ldr	r2, [pc, #36]	; (8011980 <disk_ioctl+0x38>)
 801195c:	009b      	lsls	r3, r3, #2
 801195e:	4413      	add	r3, r2
 8011960:	685b      	ldr	r3, [r3, #4]
 8011962:	691b      	ldr	r3, [r3, #16]
 8011964:	79fa      	ldrb	r2, [r7, #7]
 8011966:	4906      	ldr	r1, [pc, #24]	; (8011980 <disk_ioctl+0x38>)
 8011968:	440a      	add	r2, r1
 801196a:	7a10      	ldrb	r0, [r2, #8]
 801196c:	79b9      	ldrb	r1, [r7, #6]
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	4798      	blx	r3
 8011972:	4603      	mov	r3, r0
 8011974:	73fb      	strb	r3, [r7, #15]
  return res;
 8011976:	7bfb      	ldrb	r3, [r7, #15]
}
 8011978:	4618      	mov	r0, r3
 801197a:	3710      	adds	r7, #16
 801197c:	46bd      	mov	sp, r7
 801197e:	bd80      	pop	{r7, pc}
 8011980:	20019188 	.word	0x20019188

08011984 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011984:	b480      	push	{r7}
 8011986:	b085      	sub	sp, #20
 8011988:	af00      	add	r7, sp, #0
 801198a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	3301      	adds	r3, #1
 8011990:	781b      	ldrb	r3, [r3, #0]
 8011992:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011994:	89fb      	ldrh	r3, [r7, #14]
 8011996:	021b      	lsls	r3, r3, #8
 8011998:	b21a      	sxth	r2, r3
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	781b      	ldrb	r3, [r3, #0]
 801199e:	b21b      	sxth	r3, r3
 80119a0:	4313      	orrs	r3, r2
 80119a2:	b21b      	sxth	r3, r3
 80119a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80119a6:	89fb      	ldrh	r3, [r7, #14]
}
 80119a8:	4618      	mov	r0, r3
 80119aa:	3714      	adds	r7, #20
 80119ac:	46bd      	mov	sp, r7
 80119ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119b2:	4770      	bx	lr

080119b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80119b4:	b480      	push	{r7}
 80119b6:	b085      	sub	sp, #20
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	3303      	adds	r3, #3
 80119c0:	781b      	ldrb	r3, [r3, #0]
 80119c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	021b      	lsls	r3, r3, #8
 80119c8:	687a      	ldr	r2, [r7, #4]
 80119ca:	3202      	adds	r2, #2
 80119cc:	7812      	ldrb	r2, [r2, #0]
 80119ce:	4313      	orrs	r3, r2
 80119d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80119d2:	68fb      	ldr	r3, [r7, #12]
 80119d4:	021b      	lsls	r3, r3, #8
 80119d6:	687a      	ldr	r2, [r7, #4]
 80119d8:	3201      	adds	r2, #1
 80119da:	7812      	ldrb	r2, [r2, #0]
 80119dc:	4313      	orrs	r3, r2
 80119de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	021b      	lsls	r3, r3, #8
 80119e4:	687a      	ldr	r2, [r7, #4]
 80119e6:	7812      	ldrb	r2, [r2, #0]
 80119e8:	4313      	orrs	r3, r2
 80119ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80119ec:	68fb      	ldr	r3, [r7, #12]
}
 80119ee:	4618      	mov	r0, r3
 80119f0:	3714      	adds	r7, #20
 80119f2:	46bd      	mov	sp, r7
 80119f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119f8:	4770      	bx	lr

080119fa <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80119fa:	b480      	push	{r7}
 80119fc:	b083      	sub	sp, #12
 80119fe:	af00      	add	r7, sp, #0
 8011a00:	6078      	str	r0, [r7, #4]
 8011a02:	460b      	mov	r3, r1
 8011a04:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	1c5a      	adds	r2, r3, #1
 8011a0a:	607a      	str	r2, [r7, #4]
 8011a0c:	887a      	ldrh	r2, [r7, #2]
 8011a0e:	b2d2      	uxtb	r2, r2
 8011a10:	701a      	strb	r2, [r3, #0]
 8011a12:	887b      	ldrh	r3, [r7, #2]
 8011a14:	0a1b      	lsrs	r3, r3, #8
 8011a16:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	607a      	str	r2, [r7, #4]
 8011a1e:	887a      	ldrh	r2, [r7, #2]
 8011a20:	b2d2      	uxtb	r2, r2
 8011a22:	701a      	strb	r2, [r3, #0]
}
 8011a24:	bf00      	nop
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr

08011a30 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011a30:	b480      	push	{r7}
 8011a32:	b083      	sub	sp, #12
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
 8011a38:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	1c5a      	adds	r2, r3, #1
 8011a3e:	607a      	str	r2, [r7, #4]
 8011a40:	683a      	ldr	r2, [r7, #0]
 8011a42:	b2d2      	uxtb	r2, r2
 8011a44:	701a      	strb	r2, [r3, #0]
 8011a46:	683b      	ldr	r3, [r7, #0]
 8011a48:	0a1b      	lsrs	r3, r3, #8
 8011a4a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a4c:	687b      	ldr	r3, [r7, #4]
 8011a4e:	1c5a      	adds	r2, r3, #1
 8011a50:	607a      	str	r2, [r7, #4]
 8011a52:	683a      	ldr	r2, [r7, #0]
 8011a54:	b2d2      	uxtb	r2, r2
 8011a56:	701a      	strb	r2, [r3, #0]
 8011a58:	683b      	ldr	r3, [r7, #0]
 8011a5a:	0a1b      	lsrs	r3, r3, #8
 8011a5c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	1c5a      	adds	r2, r3, #1
 8011a62:	607a      	str	r2, [r7, #4]
 8011a64:	683a      	ldr	r2, [r7, #0]
 8011a66:	b2d2      	uxtb	r2, r2
 8011a68:	701a      	strb	r2, [r3, #0]
 8011a6a:	683b      	ldr	r3, [r7, #0]
 8011a6c:	0a1b      	lsrs	r3, r3, #8
 8011a6e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	1c5a      	adds	r2, r3, #1
 8011a74:	607a      	str	r2, [r7, #4]
 8011a76:	683a      	ldr	r2, [r7, #0]
 8011a78:	b2d2      	uxtb	r2, r2
 8011a7a:	701a      	strb	r2, [r3, #0]
}
 8011a7c:	bf00      	nop
 8011a7e:	370c      	adds	r7, #12
 8011a80:	46bd      	mov	sp, r7
 8011a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a86:	4770      	bx	lr

08011a88 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011a88:	b480      	push	{r7}
 8011a8a:	b087      	sub	sp, #28
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011a98:	68bb      	ldr	r3, [r7, #8]
 8011a9a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	2b00      	cmp	r3, #0
 8011aa0:	d00d      	beq.n	8011abe <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011aa2:	693a      	ldr	r2, [r7, #16]
 8011aa4:	1c53      	adds	r3, r2, #1
 8011aa6:	613b      	str	r3, [r7, #16]
 8011aa8:	697b      	ldr	r3, [r7, #20]
 8011aaa:	1c59      	adds	r1, r3, #1
 8011aac:	6179      	str	r1, [r7, #20]
 8011aae:	7812      	ldrb	r2, [r2, #0]
 8011ab0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	3b01      	subs	r3, #1
 8011ab6:	607b      	str	r3, [r7, #4]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d1f1      	bne.n	8011aa2 <mem_cpy+0x1a>
	}
}
 8011abe:	bf00      	nop
 8011ac0:	371c      	adds	r7, #28
 8011ac2:	46bd      	mov	sp, r7
 8011ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ac8:	4770      	bx	lr

08011aca <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011aca:	b480      	push	{r7}
 8011acc:	b087      	sub	sp, #28
 8011ace:	af00      	add	r7, sp, #0
 8011ad0:	60f8      	str	r0, [r7, #12]
 8011ad2:	60b9      	str	r1, [r7, #8]
 8011ad4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011ada:	697b      	ldr	r3, [r7, #20]
 8011adc:	1c5a      	adds	r2, r3, #1
 8011ade:	617a      	str	r2, [r7, #20]
 8011ae0:	68ba      	ldr	r2, [r7, #8]
 8011ae2:	b2d2      	uxtb	r2, r2
 8011ae4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011ae6:	687b      	ldr	r3, [r7, #4]
 8011ae8:	3b01      	subs	r3, #1
 8011aea:	607b      	str	r3, [r7, #4]
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d1f3      	bne.n	8011ada <mem_set+0x10>
}
 8011af2:	bf00      	nop
 8011af4:	bf00      	nop
 8011af6:	371c      	adds	r7, #28
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr

08011b00 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011b00:	b480      	push	{r7}
 8011b02:	b089      	sub	sp, #36	; 0x24
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	60f8      	str	r0, [r7, #12]
 8011b08:	60b9      	str	r1, [r7, #8]
 8011b0a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011b0c:	68fb      	ldr	r3, [r7, #12]
 8011b0e:	61fb      	str	r3, [r7, #28]
 8011b10:	68bb      	ldr	r3, [r7, #8]
 8011b12:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011b14:	2300      	movs	r3, #0
 8011b16:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	1c5a      	adds	r2, r3, #1
 8011b1c:	61fa      	str	r2, [r7, #28]
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	4619      	mov	r1, r3
 8011b22:	69bb      	ldr	r3, [r7, #24]
 8011b24:	1c5a      	adds	r2, r3, #1
 8011b26:	61ba      	str	r2, [r7, #24]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	1acb      	subs	r3, r1, r3
 8011b2c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	3b01      	subs	r3, #1
 8011b32:	607b      	str	r3, [r7, #4]
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	2b00      	cmp	r3, #0
 8011b38:	d002      	beq.n	8011b40 <mem_cmp+0x40>
 8011b3a:	697b      	ldr	r3, [r7, #20]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d0eb      	beq.n	8011b18 <mem_cmp+0x18>

	return r;
 8011b40:	697b      	ldr	r3, [r7, #20]
}
 8011b42:	4618      	mov	r0, r3
 8011b44:	3724      	adds	r7, #36	; 0x24
 8011b46:	46bd      	mov	sp, r7
 8011b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b4c:	4770      	bx	lr

08011b4e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8011b4e:	b480      	push	{r7}
 8011b50:	b083      	sub	sp, #12
 8011b52:	af00      	add	r7, sp, #0
 8011b54:	6078      	str	r0, [r7, #4]
 8011b56:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8011b58:	e002      	b.n	8011b60 <chk_chr+0x12>
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	3301      	adds	r3, #1
 8011b5e:	607b      	str	r3, [r7, #4]
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	781b      	ldrb	r3, [r3, #0]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d005      	beq.n	8011b74 <chk_chr+0x26>
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	781b      	ldrb	r3, [r3, #0]
 8011b6c:	461a      	mov	r2, r3
 8011b6e:	683b      	ldr	r3, [r7, #0]
 8011b70:	4293      	cmp	r3, r2
 8011b72:	d1f2      	bne.n	8011b5a <chk_chr+0xc>
	return *str;
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	781b      	ldrb	r3, [r3, #0]
}
 8011b78:	4618      	mov	r0, r3
 8011b7a:	370c      	adds	r7, #12
 8011b7c:	46bd      	mov	sp, r7
 8011b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b82:	4770      	bx	lr

08011b84 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	d009      	beq.n	8011ba6 <lock_fs+0x22>
 8011b92:	687b      	ldr	r3, [r7, #4]
 8011b94:	695b      	ldr	r3, [r3, #20]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f003 fcff 	bl	801559a <ff_req_grant>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d001      	beq.n	8011ba6 <lock_fs+0x22>
 8011ba2:	2301      	movs	r3, #1
 8011ba4:	e000      	b.n	8011ba8 <lock_fs+0x24>
 8011ba6:	2300      	movs	r3, #0
}
 8011ba8:	4618      	mov	r0, r3
 8011baa:	3708      	adds	r7, #8
 8011bac:	46bd      	mov	sp, r7
 8011bae:	bd80      	pop	{r7, pc}

08011bb0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b082      	sub	sp, #8
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	460b      	mov	r3, r1
 8011bba:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d00d      	beq.n	8011bde <unlock_fs+0x2e>
 8011bc2:	78fb      	ldrb	r3, [r7, #3]
 8011bc4:	2b0c      	cmp	r3, #12
 8011bc6:	d00a      	beq.n	8011bde <unlock_fs+0x2e>
 8011bc8:	78fb      	ldrb	r3, [r7, #3]
 8011bca:	2b0b      	cmp	r3, #11
 8011bcc:	d007      	beq.n	8011bde <unlock_fs+0x2e>
 8011bce:	78fb      	ldrb	r3, [r7, #3]
 8011bd0:	2b0f      	cmp	r3, #15
 8011bd2:	d004      	beq.n	8011bde <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	695b      	ldr	r3, [r3, #20]
 8011bd8:	4618      	mov	r0, r3
 8011bda:	f003 fcf3 	bl	80155c4 <ff_rel_grant>
	}
}
 8011bde:	bf00      	nop
 8011be0:	3708      	adds	r7, #8
 8011be2:	46bd      	mov	sp, r7
 8011be4:	bd80      	pop	{r7, pc}
	...

08011be8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	60bb      	str	r3, [r7, #8]
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	60fb      	str	r3, [r7, #12]
 8011bfa:	e029      	b.n	8011c50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8011bfc:	4a27      	ldr	r2, [pc, #156]	; (8011c9c <chk_lock+0xb4>)
 8011bfe:	68fb      	ldr	r3, [r7, #12]
 8011c00:	011b      	lsls	r3, r3, #4
 8011c02:	4413      	add	r3, r2
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d01d      	beq.n	8011c46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011c0a:	4a24      	ldr	r2, [pc, #144]	; (8011c9c <chk_lock+0xb4>)
 8011c0c:	68fb      	ldr	r3, [r7, #12]
 8011c0e:	011b      	lsls	r3, r3, #4
 8011c10:	4413      	add	r3, r2
 8011c12:	681a      	ldr	r2, [r3, #0]
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d116      	bne.n	8011c4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8011c1c:	4a1f      	ldr	r2, [pc, #124]	; (8011c9c <chk_lock+0xb4>)
 8011c1e:	68fb      	ldr	r3, [r7, #12]
 8011c20:	011b      	lsls	r3, r3, #4
 8011c22:	4413      	add	r3, r2
 8011c24:	3304      	adds	r3, #4
 8011c26:	681a      	ldr	r2, [r3, #0]
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8011c2c:	429a      	cmp	r2, r3
 8011c2e:	d10c      	bne.n	8011c4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011c30:	4a1a      	ldr	r2, [pc, #104]	; (8011c9c <chk_lock+0xb4>)
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	011b      	lsls	r3, r3, #4
 8011c36:	4413      	add	r3, r2
 8011c38:	3308      	adds	r3, #8
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8011c40:	429a      	cmp	r2, r3
 8011c42:	d102      	bne.n	8011c4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8011c44:	e007      	b.n	8011c56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8011c46:	2301      	movs	r3, #1
 8011c48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	3301      	adds	r3, #1
 8011c4e:	60fb      	str	r3, [r7, #12]
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	2b01      	cmp	r3, #1
 8011c54:	d9d2      	bls.n	8011bfc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	2b02      	cmp	r3, #2
 8011c5a:	d109      	bne.n	8011c70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8011c5c:	68bb      	ldr	r3, [r7, #8]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d102      	bne.n	8011c68 <chk_lock+0x80>
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	2b02      	cmp	r3, #2
 8011c66:	d101      	bne.n	8011c6c <chk_lock+0x84>
 8011c68:	2300      	movs	r3, #0
 8011c6a:	e010      	b.n	8011c8e <chk_lock+0xa6>
 8011c6c:	2312      	movs	r3, #18
 8011c6e:	e00e      	b.n	8011c8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8011c70:	683b      	ldr	r3, [r7, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d108      	bne.n	8011c88 <chk_lock+0xa0>
 8011c76:	4a09      	ldr	r2, [pc, #36]	; (8011c9c <chk_lock+0xb4>)
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	011b      	lsls	r3, r3, #4
 8011c7c:	4413      	add	r3, r2
 8011c7e:	330c      	adds	r3, #12
 8011c80:	881b      	ldrh	r3, [r3, #0]
 8011c82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011c86:	d101      	bne.n	8011c8c <chk_lock+0xa4>
 8011c88:	2310      	movs	r3, #16
 8011c8a:	e000      	b.n	8011c8e <chk_lock+0xa6>
 8011c8c:	2300      	movs	r3, #0
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3714      	adds	r7, #20
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr
 8011c9a:	bf00      	nop
 8011c9c:	20019168 	.word	0x20019168

08011ca0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8011ca0:	b480      	push	{r7}
 8011ca2:	b083      	sub	sp, #12
 8011ca4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	607b      	str	r3, [r7, #4]
 8011caa:	e002      	b.n	8011cb2 <enq_lock+0x12>
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	3301      	adds	r3, #1
 8011cb0:	607b      	str	r3, [r7, #4]
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2b01      	cmp	r3, #1
 8011cb6:	d806      	bhi.n	8011cc6 <enq_lock+0x26>
 8011cb8:	4a09      	ldr	r2, [pc, #36]	; (8011ce0 <enq_lock+0x40>)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	011b      	lsls	r3, r3, #4
 8011cbe:	4413      	add	r3, r2
 8011cc0:	681b      	ldr	r3, [r3, #0]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d1f2      	bne.n	8011cac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	2b02      	cmp	r3, #2
 8011cca:	bf14      	ite	ne
 8011ccc:	2301      	movne	r3, #1
 8011cce:	2300      	moveq	r3, #0
 8011cd0:	b2db      	uxtb	r3, r3
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	370c      	adds	r7, #12
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr
 8011cde:	bf00      	nop
 8011ce0:	20019168 	.word	0x20019168

08011ce4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8011ce4:	b480      	push	{r7}
 8011ce6:	b085      	sub	sp, #20
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
 8011cec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011cee:	2300      	movs	r3, #0
 8011cf0:	60fb      	str	r3, [r7, #12]
 8011cf2:	e01f      	b.n	8011d34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8011cf4:	4a41      	ldr	r2, [pc, #260]	; (8011dfc <inc_lock+0x118>)
 8011cf6:	68fb      	ldr	r3, [r7, #12]
 8011cf8:	011b      	lsls	r3, r3, #4
 8011cfa:	4413      	add	r3, r2
 8011cfc:	681a      	ldr	r2, [r3, #0]
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	429a      	cmp	r2, r3
 8011d04:	d113      	bne.n	8011d2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8011d06:	4a3d      	ldr	r2, [pc, #244]	; (8011dfc <inc_lock+0x118>)
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	011b      	lsls	r3, r3, #4
 8011d0c:	4413      	add	r3, r2
 8011d0e:	3304      	adds	r3, #4
 8011d10:	681a      	ldr	r2, [r3, #0]
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d109      	bne.n	8011d2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8011d1a:	4a38      	ldr	r2, [pc, #224]	; (8011dfc <inc_lock+0x118>)
 8011d1c:	68fb      	ldr	r3, [r7, #12]
 8011d1e:	011b      	lsls	r3, r3, #4
 8011d20:	4413      	add	r3, r2
 8011d22:	3308      	adds	r3, #8
 8011d24:	681a      	ldr	r2, [r3, #0]
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8011d2a:	429a      	cmp	r2, r3
 8011d2c:	d006      	beq.n	8011d3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8011d2e:	68fb      	ldr	r3, [r7, #12]
 8011d30:	3301      	adds	r3, #1
 8011d32:	60fb      	str	r3, [r7, #12]
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d9dc      	bls.n	8011cf4 <inc_lock+0x10>
 8011d3a:	e000      	b.n	8011d3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8011d3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2b02      	cmp	r3, #2
 8011d42:	d132      	bne.n	8011daa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011d44:	2300      	movs	r3, #0
 8011d46:	60fb      	str	r3, [r7, #12]
 8011d48:	e002      	b.n	8011d50 <inc_lock+0x6c>
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	3301      	adds	r3, #1
 8011d4e:	60fb      	str	r3, [r7, #12]
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	2b01      	cmp	r3, #1
 8011d54:	d806      	bhi.n	8011d64 <inc_lock+0x80>
 8011d56:	4a29      	ldr	r2, [pc, #164]	; (8011dfc <inc_lock+0x118>)
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	011b      	lsls	r3, r3, #4
 8011d5c:	4413      	add	r3, r2
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d1f2      	bne.n	8011d4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8011d64:	68fb      	ldr	r3, [r7, #12]
 8011d66:	2b02      	cmp	r3, #2
 8011d68:	d101      	bne.n	8011d6e <inc_lock+0x8a>
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	e040      	b.n	8011df0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8011d6e:	687b      	ldr	r3, [r7, #4]
 8011d70:	681a      	ldr	r2, [r3, #0]
 8011d72:	4922      	ldr	r1, [pc, #136]	; (8011dfc <inc_lock+0x118>)
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	011b      	lsls	r3, r3, #4
 8011d78:	440b      	add	r3, r1
 8011d7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	689a      	ldr	r2, [r3, #8]
 8011d80:	491e      	ldr	r1, [pc, #120]	; (8011dfc <inc_lock+0x118>)
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	011b      	lsls	r3, r3, #4
 8011d86:	440b      	add	r3, r1
 8011d88:	3304      	adds	r3, #4
 8011d8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	695a      	ldr	r2, [r3, #20]
 8011d90:	491a      	ldr	r1, [pc, #104]	; (8011dfc <inc_lock+0x118>)
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	011b      	lsls	r3, r3, #4
 8011d96:	440b      	add	r3, r1
 8011d98:	3308      	adds	r3, #8
 8011d9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8011d9c:	4a17      	ldr	r2, [pc, #92]	; (8011dfc <inc_lock+0x118>)
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	011b      	lsls	r3, r3, #4
 8011da2:	4413      	add	r3, r2
 8011da4:	330c      	adds	r3, #12
 8011da6:	2200      	movs	r2, #0
 8011da8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	2b00      	cmp	r3, #0
 8011dae:	d009      	beq.n	8011dc4 <inc_lock+0xe0>
 8011db0:	4a12      	ldr	r2, [pc, #72]	; (8011dfc <inc_lock+0x118>)
 8011db2:	68fb      	ldr	r3, [r7, #12]
 8011db4:	011b      	lsls	r3, r3, #4
 8011db6:	4413      	add	r3, r2
 8011db8:	330c      	adds	r3, #12
 8011dba:	881b      	ldrh	r3, [r3, #0]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d001      	beq.n	8011dc4 <inc_lock+0xe0>
 8011dc0:	2300      	movs	r3, #0
 8011dc2:	e015      	b.n	8011df0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011dc4:	683b      	ldr	r3, [r7, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d108      	bne.n	8011ddc <inc_lock+0xf8>
 8011dca:	4a0c      	ldr	r2, [pc, #48]	; (8011dfc <inc_lock+0x118>)
 8011dcc:	68fb      	ldr	r3, [r7, #12]
 8011dce:	011b      	lsls	r3, r3, #4
 8011dd0:	4413      	add	r3, r2
 8011dd2:	330c      	adds	r3, #12
 8011dd4:	881b      	ldrh	r3, [r3, #0]
 8011dd6:	3301      	adds	r3, #1
 8011dd8:	b29a      	uxth	r2, r3
 8011dda:	e001      	b.n	8011de0 <inc_lock+0xfc>
 8011ddc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011de0:	4906      	ldr	r1, [pc, #24]	; (8011dfc <inc_lock+0x118>)
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	011b      	lsls	r3, r3, #4
 8011de6:	440b      	add	r3, r1
 8011de8:	330c      	adds	r3, #12
 8011dea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	3301      	adds	r3, #1
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	3714      	adds	r7, #20
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr
 8011dfc:	20019168 	.word	0x20019168

08011e00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8011e00:	b480      	push	{r7}
 8011e02:	b085      	sub	sp, #20
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	3b01      	subs	r3, #1
 8011e0c:	607b      	str	r3, [r7, #4]
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	2b01      	cmp	r3, #1
 8011e12:	d825      	bhi.n	8011e60 <dec_lock+0x60>
		n = Files[i].ctr;
 8011e14:	4a17      	ldr	r2, [pc, #92]	; (8011e74 <dec_lock+0x74>)
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	011b      	lsls	r3, r3, #4
 8011e1a:	4413      	add	r3, r2
 8011e1c:	330c      	adds	r3, #12
 8011e1e:	881b      	ldrh	r3, [r3, #0]
 8011e20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8011e22:	89fb      	ldrh	r3, [r7, #14]
 8011e24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e28:	d101      	bne.n	8011e2e <dec_lock+0x2e>
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8011e2e:	89fb      	ldrh	r3, [r7, #14]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d002      	beq.n	8011e3a <dec_lock+0x3a>
 8011e34:	89fb      	ldrh	r3, [r7, #14]
 8011e36:	3b01      	subs	r3, #1
 8011e38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8011e3a:	4a0e      	ldr	r2, [pc, #56]	; (8011e74 <dec_lock+0x74>)
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	011b      	lsls	r3, r3, #4
 8011e40:	4413      	add	r3, r2
 8011e42:	330c      	adds	r3, #12
 8011e44:	89fa      	ldrh	r2, [r7, #14]
 8011e46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8011e48:	89fb      	ldrh	r3, [r7, #14]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	d105      	bne.n	8011e5a <dec_lock+0x5a>
 8011e4e:	4a09      	ldr	r2, [pc, #36]	; (8011e74 <dec_lock+0x74>)
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	011b      	lsls	r3, r3, #4
 8011e54:	4413      	add	r3, r2
 8011e56:	2200      	movs	r2, #0
 8011e58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8011e5a:	2300      	movs	r3, #0
 8011e5c:	737b      	strb	r3, [r7, #13]
 8011e5e:	e001      	b.n	8011e64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8011e60:	2302      	movs	r3, #2
 8011e62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8011e64:	7b7b      	ldrb	r3, [r7, #13]
}
 8011e66:	4618      	mov	r0, r3
 8011e68:	3714      	adds	r7, #20
 8011e6a:	46bd      	mov	sp, r7
 8011e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e70:	4770      	bx	lr
 8011e72:	bf00      	nop
 8011e74:	20019168 	.word	0x20019168

08011e78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8011e78:	b480      	push	{r7}
 8011e7a:	b085      	sub	sp, #20
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8011e80:	2300      	movs	r3, #0
 8011e82:	60fb      	str	r3, [r7, #12]
 8011e84:	e010      	b.n	8011ea8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011e86:	4a0d      	ldr	r2, [pc, #52]	; (8011ebc <clear_lock+0x44>)
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	011b      	lsls	r3, r3, #4
 8011e8c:	4413      	add	r3, r2
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	687a      	ldr	r2, [r7, #4]
 8011e92:	429a      	cmp	r2, r3
 8011e94:	d105      	bne.n	8011ea2 <clear_lock+0x2a>
 8011e96:	4a09      	ldr	r2, [pc, #36]	; (8011ebc <clear_lock+0x44>)
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	011b      	lsls	r3, r3, #4
 8011e9c:	4413      	add	r3, r2
 8011e9e:	2200      	movs	r2, #0
 8011ea0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	3301      	adds	r3, #1
 8011ea6:	60fb      	str	r3, [r7, #12]
 8011ea8:	68fb      	ldr	r3, [r7, #12]
 8011eaa:	2b01      	cmp	r3, #1
 8011eac:	d9eb      	bls.n	8011e86 <clear_lock+0xe>
	}
}
 8011eae:	bf00      	nop
 8011eb0:	bf00      	nop
 8011eb2:	3714      	adds	r7, #20
 8011eb4:	46bd      	mov	sp, r7
 8011eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eba:	4770      	bx	lr
 8011ebc:	20019168 	.word	0x20019168

08011ec0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b086      	sub	sp, #24
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	78db      	ldrb	r3, [r3, #3]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d034      	beq.n	8011f3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ed8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	7858      	ldrb	r0, [r3, #1]
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011ee4:	2301      	movs	r3, #1
 8011ee6:	697a      	ldr	r2, [r7, #20]
 8011ee8:	f7ff fd0e 	bl	8011908 <disk_write>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d002      	beq.n	8011ef8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8011ef2:	2301      	movs	r3, #1
 8011ef4:	73fb      	strb	r3, [r7, #15]
 8011ef6:	e022      	b.n	8011f3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	2200      	movs	r2, #0
 8011efc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f02:	697a      	ldr	r2, [r7, #20]
 8011f04:	1ad2      	subs	r2, r2, r3
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f0a:	429a      	cmp	r2, r3
 8011f0c:	d217      	bcs.n	8011f3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	789b      	ldrb	r3, [r3, #2]
 8011f12:	613b      	str	r3, [r7, #16]
 8011f14:	e010      	b.n	8011f38 <sync_window+0x78>
					wsect += fs->fsize;
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011f1a:	697a      	ldr	r2, [r7, #20]
 8011f1c:	4413      	add	r3, r2
 8011f1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	7858      	ldrb	r0, [r3, #1]
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	697a      	ldr	r2, [r7, #20]
 8011f2e:	f7ff fceb 	bl	8011908 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	3b01      	subs	r3, #1
 8011f36:	613b      	str	r3, [r7, #16]
 8011f38:	693b      	ldr	r3, [r7, #16]
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d8eb      	bhi.n	8011f16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8011f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3718      	adds	r7, #24
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}

08011f48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8011f48:	b580      	push	{r7, lr}
 8011f4a:	b084      	sub	sp, #16
 8011f4c:	af00      	add	r7, sp, #0
 8011f4e:	6078      	str	r0, [r7, #4]
 8011f50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8011f52:	2300      	movs	r3, #0
 8011f54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f5a:	683a      	ldr	r2, [r7, #0]
 8011f5c:	429a      	cmp	r2, r3
 8011f5e:	d01b      	beq.n	8011f98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8011f60:	6878      	ldr	r0, [r7, #4]
 8011f62:	f7ff ffad 	bl	8011ec0 <sync_window>
 8011f66:	4603      	mov	r3, r0
 8011f68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8011f6a:	7bfb      	ldrb	r3, [r7, #15]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d113      	bne.n	8011f98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	7858      	ldrb	r0, [r3, #1]
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8011f7a:	2301      	movs	r3, #1
 8011f7c:	683a      	ldr	r2, [r7, #0]
 8011f7e:	f7ff fca3 	bl	80118c8 <disk_read>
 8011f82:	4603      	mov	r3, r0
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d004      	beq.n	8011f92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8011f88:	f04f 33ff 	mov.w	r3, #4294967295
 8011f8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8011f8e:	2301      	movs	r3, #1
 8011f90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	683a      	ldr	r2, [r7, #0]
 8011f96:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 8011f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8011f9a:	4618      	mov	r0, r3
 8011f9c:	3710      	adds	r7, #16
 8011f9e:	46bd      	mov	sp, r7
 8011fa0:	bd80      	pop	{r7, pc}
	...

08011fa4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b084      	sub	sp, #16
 8011fa8:	af00      	add	r7, sp, #0
 8011faa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8011fac:	6878      	ldr	r0, [r7, #4]
 8011fae:	f7ff ff87 	bl	8011ec0 <sync_window>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8011fb6:	7bfb      	ldrb	r3, [r7, #15]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d159      	bne.n	8012070 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	2b03      	cmp	r3, #3
 8011fc2:	d149      	bne.n	8012058 <sync_fs+0xb4>
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	791b      	ldrb	r3, [r3, #4]
 8011fc8:	2b01      	cmp	r3, #1
 8011fca:	d145      	bne.n	8012058 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8011fcc:	687b      	ldr	r3, [r7, #4]
 8011fce:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	899b      	ldrh	r3, [r3, #12]
 8011fd6:	461a      	mov	r2, r3
 8011fd8:	2100      	movs	r1, #0
 8011fda:	f7ff fd76 	bl	8011aca <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8011fde:	687b      	ldr	r3, [r7, #4]
 8011fe0:	333c      	adds	r3, #60	; 0x3c
 8011fe2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011fe6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8011fea:	4618      	mov	r0, r3
 8011fec:	f7ff fd05 	bl	80119fa <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	333c      	adds	r3, #60	; 0x3c
 8011ff4:	4921      	ldr	r1, [pc, #132]	; (801207c <sync_fs+0xd8>)
 8011ff6:	4618      	mov	r0, r3
 8011ff8:	f7ff fd1a 	bl	8011a30 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	333c      	adds	r3, #60	; 0x3c
 8012000:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012004:	491e      	ldr	r1, [pc, #120]	; (8012080 <sync_fs+0xdc>)
 8012006:	4618      	mov	r0, r3
 8012008:	f7ff fd12 	bl	8011a30 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	333c      	adds	r3, #60	; 0x3c
 8012010:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	69db      	ldr	r3, [r3, #28]
 8012018:	4619      	mov	r1, r3
 801201a:	4610      	mov	r0, r2
 801201c:	f7ff fd08 	bl	8011a30 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	333c      	adds	r3, #60	; 0x3c
 8012024:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	699b      	ldr	r3, [r3, #24]
 801202c:	4619      	mov	r1, r3
 801202e:	4610      	mov	r0, r2
 8012030:	f7ff fcfe 	bl	8011a30 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012038:	1c5a      	adds	r2, r3, #1
 801203a:	687b      	ldr	r3, [r7, #4]
 801203c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	7858      	ldrb	r0, [r3, #1]
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801204c:	2301      	movs	r3, #1
 801204e:	f7ff fc5b 	bl	8011908 <disk_write>
			fs->fsi_flag = 0;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2200      	movs	r2, #0
 8012056:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	785b      	ldrb	r3, [r3, #1]
 801205c:	2200      	movs	r2, #0
 801205e:	2100      	movs	r1, #0
 8012060:	4618      	mov	r0, r3
 8012062:	f7ff fc71 	bl	8011948 <disk_ioctl>
 8012066:	4603      	mov	r3, r0
 8012068:	2b00      	cmp	r3, #0
 801206a:	d001      	beq.n	8012070 <sync_fs+0xcc>
 801206c:	2301      	movs	r3, #1
 801206e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8012070:	7bfb      	ldrb	r3, [r7, #15]
}
 8012072:	4618      	mov	r0, r3
 8012074:	3710      	adds	r7, #16
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	41615252 	.word	0x41615252
 8012080:	61417272 	.word	0x61417272

08012084 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8012084:	b480      	push	{r7}
 8012086:	b083      	sub	sp, #12
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	3b02      	subs	r3, #2
 8012092:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6a1b      	ldr	r3, [r3, #32]
 8012098:	3b02      	subs	r3, #2
 801209a:	683a      	ldr	r2, [r7, #0]
 801209c:	429a      	cmp	r2, r3
 801209e:	d301      	bcc.n	80120a4 <clust2sect+0x20>
 80120a0:	2300      	movs	r3, #0
 80120a2:	e008      	b.n	80120b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	895b      	ldrh	r3, [r3, #10]
 80120a8:	461a      	mov	r2, r3
 80120aa:	683b      	ldr	r3, [r7, #0]
 80120ac:	fb03 f202 	mul.w	r2, r3, r2
 80120b0:	687b      	ldr	r3, [r7, #4]
 80120b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80120b4:	4413      	add	r3, r2
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	370c      	adds	r7, #12
 80120ba:	46bd      	mov	sp, r7
 80120bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120c0:	4770      	bx	lr

080120c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b086      	sub	sp, #24
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
 80120ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	681b      	ldr	r3, [r3, #0]
 80120d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80120d2:	683b      	ldr	r3, [r7, #0]
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d904      	bls.n	80120e2 <get_fat+0x20>
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	6a1b      	ldr	r3, [r3, #32]
 80120dc:	683a      	ldr	r2, [r7, #0]
 80120de:	429a      	cmp	r2, r3
 80120e0:	d302      	bcc.n	80120e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80120e2:	2301      	movs	r3, #1
 80120e4:	617b      	str	r3, [r7, #20]
 80120e6:	e0bb      	b.n	8012260 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80120e8:	f04f 33ff 	mov.w	r3, #4294967295
 80120ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	781b      	ldrb	r3, [r3, #0]
 80120f2:	2b03      	cmp	r3, #3
 80120f4:	f000 8083 	beq.w	80121fe <get_fat+0x13c>
 80120f8:	2b03      	cmp	r3, #3
 80120fa:	f300 80a7 	bgt.w	801224c <get_fat+0x18a>
 80120fe:	2b01      	cmp	r3, #1
 8012100:	d002      	beq.n	8012108 <get_fat+0x46>
 8012102:	2b02      	cmp	r3, #2
 8012104:	d056      	beq.n	80121b4 <get_fat+0xf2>
 8012106:	e0a1      	b.n	801224c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012108:	683b      	ldr	r3, [r7, #0]
 801210a:	60fb      	str	r3, [r7, #12]
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	085b      	lsrs	r3, r3, #1
 8012110:	68fa      	ldr	r2, [r7, #12]
 8012112:	4413      	add	r3, r2
 8012114:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	899b      	ldrh	r3, [r3, #12]
 801211e:	4619      	mov	r1, r3
 8012120:	68fb      	ldr	r3, [r7, #12]
 8012122:	fbb3 f3f1 	udiv	r3, r3, r1
 8012126:	4413      	add	r3, r2
 8012128:	4619      	mov	r1, r3
 801212a:	6938      	ldr	r0, [r7, #16]
 801212c:	f7ff ff0c 	bl	8011f48 <move_window>
 8012130:	4603      	mov	r3, r0
 8012132:	2b00      	cmp	r3, #0
 8012134:	f040 808d 	bne.w	8012252 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8012138:	68fb      	ldr	r3, [r7, #12]
 801213a:	1c5a      	adds	r2, r3, #1
 801213c:	60fa      	str	r2, [r7, #12]
 801213e:	693a      	ldr	r2, [r7, #16]
 8012140:	8992      	ldrh	r2, [r2, #12]
 8012142:	fbb3 f1f2 	udiv	r1, r3, r2
 8012146:	fb01 f202 	mul.w	r2, r1, r2
 801214a:	1a9b      	subs	r3, r3, r2
 801214c:	693a      	ldr	r2, [r7, #16]
 801214e:	4413      	add	r3, r2
 8012150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012154:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012156:	693b      	ldr	r3, [r7, #16]
 8012158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801215a:	693b      	ldr	r3, [r7, #16]
 801215c:	899b      	ldrh	r3, [r3, #12]
 801215e:	4619      	mov	r1, r3
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	fbb3 f3f1 	udiv	r3, r3, r1
 8012166:	4413      	add	r3, r2
 8012168:	4619      	mov	r1, r3
 801216a:	6938      	ldr	r0, [r7, #16]
 801216c:	f7ff feec 	bl	8011f48 <move_window>
 8012170:	4603      	mov	r3, r0
 8012172:	2b00      	cmp	r3, #0
 8012174:	d16f      	bne.n	8012256 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	899b      	ldrh	r3, [r3, #12]
 801217a:	461a      	mov	r2, r3
 801217c:	68fb      	ldr	r3, [r7, #12]
 801217e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012182:	fb01 f202 	mul.w	r2, r1, r2
 8012186:	1a9b      	subs	r3, r3, r2
 8012188:	693a      	ldr	r2, [r7, #16]
 801218a:	4413      	add	r3, r2
 801218c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012190:	021b      	lsls	r3, r3, #8
 8012192:	461a      	mov	r2, r3
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	4313      	orrs	r3, r2
 8012198:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801219a:	683b      	ldr	r3, [r7, #0]
 801219c:	f003 0301 	and.w	r3, r3, #1
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d002      	beq.n	80121aa <get_fat+0xe8>
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	091b      	lsrs	r3, r3, #4
 80121a8:	e002      	b.n	80121b0 <get_fat+0xee>
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80121b0:	617b      	str	r3, [r7, #20]
			break;
 80121b2:	e055      	b.n	8012260 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80121b4:	693b      	ldr	r3, [r7, #16]
 80121b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121b8:	693b      	ldr	r3, [r7, #16]
 80121ba:	899b      	ldrh	r3, [r3, #12]
 80121bc:	085b      	lsrs	r3, r3, #1
 80121be:	b29b      	uxth	r3, r3
 80121c0:	4619      	mov	r1, r3
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80121c8:	4413      	add	r3, r2
 80121ca:	4619      	mov	r1, r3
 80121cc:	6938      	ldr	r0, [r7, #16]
 80121ce:	f7ff febb 	bl	8011f48 <move_window>
 80121d2:	4603      	mov	r3, r0
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d140      	bne.n	801225a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	005b      	lsls	r3, r3, #1
 80121e2:	693a      	ldr	r2, [r7, #16]
 80121e4:	8992      	ldrh	r2, [r2, #12]
 80121e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80121ea:	fb00 f202 	mul.w	r2, r0, r2
 80121ee:	1a9b      	subs	r3, r3, r2
 80121f0:	440b      	add	r3, r1
 80121f2:	4618      	mov	r0, r3
 80121f4:	f7ff fbc6 	bl	8011984 <ld_word>
 80121f8:	4603      	mov	r3, r0
 80121fa:	617b      	str	r3, [r7, #20]
			break;
 80121fc:	e030      	b.n	8012260 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012202:	693b      	ldr	r3, [r7, #16]
 8012204:	899b      	ldrh	r3, [r3, #12]
 8012206:	089b      	lsrs	r3, r3, #2
 8012208:	b29b      	uxth	r3, r3
 801220a:	4619      	mov	r1, r3
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012212:	4413      	add	r3, r2
 8012214:	4619      	mov	r1, r3
 8012216:	6938      	ldr	r0, [r7, #16]
 8012218:	f7ff fe96 	bl	8011f48 <move_window>
 801221c:	4603      	mov	r3, r0
 801221e:	2b00      	cmp	r3, #0
 8012220:	d11d      	bne.n	801225e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012228:	683b      	ldr	r3, [r7, #0]
 801222a:	009b      	lsls	r3, r3, #2
 801222c:	693a      	ldr	r2, [r7, #16]
 801222e:	8992      	ldrh	r2, [r2, #12]
 8012230:	fbb3 f0f2 	udiv	r0, r3, r2
 8012234:	fb00 f202 	mul.w	r2, r0, r2
 8012238:	1a9b      	subs	r3, r3, r2
 801223a:	440b      	add	r3, r1
 801223c:	4618      	mov	r0, r3
 801223e:	f7ff fbb9 	bl	80119b4 <ld_dword>
 8012242:	4603      	mov	r3, r0
 8012244:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8012248:	617b      	str	r3, [r7, #20]
			break;
 801224a:	e009      	b.n	8012260 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801224c:	2301      	movs	r3, #1
 801224e:	617b      	str	r3, [r7, #20]
 8012250:	e006      	b.n	8012260 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012252:	bf00      	nop
 8012254:	e004      	b.n	8012260 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012256:	bf00      	nop
 8012258:	e002      	b.n	8012260 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801225a:	bf00      	nop
 801225c:	e000      	b.n	8012260 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801225e:	bf00      	nop
		}
	}

	return val;
 8012260:	697b      	ldr	r3, [r7, #20]
}
 8012262:	4618      	mov	r0, r3
 8012264:	3718      	adds	r7, #24
 8012266:	46bd      	mov	sp, r7
 8012268:	bd80      	pop	{r7, pc}

0801226a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 801226a:	b590      	push	{r4, r7, lr}
 801226c:	b089      	sub	sp, #36	; 0x24
 801226e:	af00      	add	r7, sp, #0
 8012270:	60f8      	str	r0, [r7, #12]
 8012272:	60b9      	str	r1, [r7, #8]
 8012274:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8012276:	2302      	movs	r3, #2
 8012278:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 801227a:	68bb      	ldr	r3, [r7, #8]
 801227c:	2b01      	cmp	r3, #1
 801227e:	f240 8102 	bls.w	8012486 <put_fat+0x21c>
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	6a1b      	ldr	r3, [r3, #32]
 8012286:	68ba      	ldr	r2, [r7, #8]
 8012288:	429a      	cmp	r2, r3
 801228a:	f080 80fc 	bcs.w	8012486 <put_fat+0x21c>
		switch (fs->fs_type) {
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	781b      	ldrb	r3, [r3, #0]
 8012292:	2b03      	cmp	r3, #3
 8012294:	f000 80b6 	beq.w	8012404 <put_fat+0x19a>
 8012298:	2b03      	cmp	r3, #3
 801229a:	f300 80fd 	bgt.w	8012498 <put_fat+0x22e>
 801229e:	2b01      	cmp	r3, #1
 80122a0:	d003      	beq.n	80122aa <put_fat+0x40>
 80122a2:	2b02      	cmp	r3, #2
 80122a4:	f000 8083 	beq.w	80123ae <put_fat+0x144>
 80122a8:	e0f6      	b.n	8012498 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80122aa:	68bb      	ldr	r3, [r7, #8]
 80122ac:	61bb      	str	r3, [r7, #24]
 80122ae:	69bb      	ldr	r3, [r7, #24]
 80122b0:	085b      	lsrs	r3, r3, #1
 80122b2:	69ba      	ldr	r2, [r7, #24]
 80122b4:	4413      	add	r3, r2
 80122b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	899b      	ldrh	r3, [r3, #12]
 80122c0:	4619      	mov	r1, r3
 80122c2:	69bb      	ldr	r3, [r7, #24]
 80122c4:	fbb3 f3f1 	udiv	r3, r3, r1
 80122c8:	4413      	add	r3, r2
 80122ca:	4619      	mov	r1, r3
 80122cc:	68f8      	ldr	r0, [r7, #12]
 80122ce:	f7ff fe3b 	bl	8011f48 <move_window>
 80122d2:	4603      	mov	r3, r0
 80122d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80122d6:	7ffb      	ldrb	r3, [r7, #31]
 80122d8:	2b00      	cmp	r3, #0
 80122da:	f040 80d6 	bne.w	801248a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80122e4:	69bb      	ldr	r3, [r7, #24]
 80122e6:	1c5a      	adds	r2, r3, #1
 80122e8:	61ba      	str	r2, [r7, #24]
 80122ea:	68fa      	ldr	r2, [r7, #12]
 80122ec:	8992      	ldrh	r2, [r2, #12]
 80122ee:	fbb3 f0f2 	udiv	r0, r3, r2
 80122f2:	fb00 f202 	mul.w	r2, r0, r2
 80122f6:	1a9b      	subs	r3, r3, r2
 80122f8:	440b      	add	r3, r1
 80122fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80122fc:	68bb      	ldr	r3, [r7, #8]
 80122fe:	f003 0301 	and.w	r3, r3, #1
 8012302:	2b00      	cmp	r3, #0
 8012304:	d00d      	beq.n	8012322 <put_fat+0xb8>
 8012306:	697b      	ldr	r3, [r7, #20]
 8012308:	781b      	ldrb	r3, [r3, #0]
 801230a:	b25b      	sxtb	r3, r3
 801230c:	f003 030f 	and.w	r3, r3, #15
 8012310:	b25a      	sxtb	r2, r3
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	b2db      	uxtb	r3, r3
 8012316:	011b      	lsls	r3, r3, #4
 8012318:	b25b      	sxtb	r3, r3
 801231a:	4313      	orrs	r3, r2
 801231c:	b25b      	sxtb	r3, r3
 801231e:	b2db      	uxtb	r3, r3
 8012320:	e001      	b.n	8012326 <put_fat+0xbc>
 8012322:	687b      	ldr	r3, [r7, #4]
 8012324:	b2db      	uxtb	r3, r3
 8012326:	697a      	ldr	r2, [r7, #20]
 8012328:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	2201      	movs	r2, #1
 801232e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	899b      	ldrh	r3, [r3, #12]
 8012338:	4619      	mov	r1, r3
 801233a:	69bb      	ldr	r3, [r7, #24]
 801233c:	fbb3 f3f1 	udiv	r3, r3, r1
 8012340:	4413      	add	r3, r2
 8012342:	4619      	mov	r1, r3
 8012344:	68f8      	ldr	r0, [r7, #12]
 8012346:	f7ff fdff 	bl	8011f48 <move_window>
 801234a:	4603      	mov	r3, r0
 801234c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801234e:	7ffb      	ldrb	r3, [r7, #31]
 8012350:	2b00      	cmp	r3, #0
 8012352:	f040 809c 	bne.w	801248e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	899b      	ldrh	r3, [r3, #12]
 8012360:	461a      	mov	r2, r3
 8012362:	69bb      	ldr	r3, [r7, #24]
 8012364:	fbb3 f0f2 	udiv	r0, r3, r2
 8012368:	fb00 f202 	mul.w	r2, r0, r2
 801236c:	1a9b      	subs	r3, r3, r2
 801236e:	440b      	add	r3, r1
 8012370:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8012372:	68bb      	ldr	r3, [r7, #8]
 8012374:	f003 0301 	and.w	r3, r3, #1
 8012378:	2b00      	cmp	r3, #0
 801237a:	d003      	beq.n	8012384 <put_fat+0x11a>
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	091b      	lsrs	r3, r3, #4
 8012380:	b2db      	uxtb	r3, r3
 8012382:	e00e      	b.n	80123a2 <put_fat+0x138>
 8012384:	697b      	ldr	r3, [r7, #20]
 8012386:	781b      	ldrb	r3, [r3, #0]
 8012388:	b25b      	sxtb	r3, r3
 801238a:	f023 030f 	bic.w	r3, r3, #15
 801238e:	b25a      	sxtb	r2, r3
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	0a1b      	lsrs	r3, r3, #8
 8012394:	b25b      	sxtb	r3, r3
 8012396:	f003 030f 	and.w	r3, r3, #15
 801239a:	b25b      	sxtb	r3, r3
 801239c:	4313      	orrs	r3, r2
 801239e:	b25b      	sxtb	r3, r3
 80123a0:	b2db      	uxtb	r3, r3
 80123a2:	697a      	ldr	r2, [r7, #20]
 80123a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	2201      	movs	r2, #1
 80123aa:	70da      	strb	r2, [r3, #3]
			break;
 80123ac:	e074      	b.n	8012498 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80123ae:	68fb      	ldr	r3, [r7, #12]
 80123b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	899b      	ldrh	r3, [r3, #12]
 80123b6:	085b      	lsrs	r3, r3, #1
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	4619      	mov	r1, r3
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	fbb3 f3f1 	udiv	r3, r3, r1
 80123c2:	4413      	add	r3, r2
 80123c4:	4619      	mov	r1, r3
 80123c6:	68f8      	ldr	r0, [r7, #12]
 80123c8:	f7ff fdbe 	bl	8011f48 <move_window>
 80123cc:	4603      	mov	r3, r0
 80123ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80123d0:	7ffb      	ldrb	r3, [r7, #31]
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d15d      	bne.n	8012492 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	005b      	lsls	r3, r3, #1
 80123e0:	68fa      	ldr	r2, [r7, #12]
 80123e2:	8992      	ldrh	r2, [r2, #12]
 80123e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80123e8:	fb00 f202 	mul.w	r2, r0, r2
 80123ec:	1a9b      	subs	r3, r3, r2
 80123ee:	440b      	add	r3, r1
 80123f0:	687a      	ldr	r2, [r7, #4]
 80123f2:	b292      	uxth	r2, r2
 80123f4:	4611      	mov	r1, r2
 80123f6:	4618      	mov	r0, r3
 80123f8:	f7ff faff 	bl	80119fa <st_word>
			fs->wflag = 1;
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	2201      	movs	r2, #1
 8012400:	70da      	strb	r2, [r3, #3]
			break;
 8012402:	e049      	b.n	8012498 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	899b      	ldrh	r3, [r3, #12]
 801240c:	089b      	lsrs	r3, r3, #2
 801240e:	b29b      	uxth	r3, r3
 8012410:	4619      	mov	r1, r3
 8012412:	68bb      	ldr	r3, [r7, #8]
 8012414:	fbb3 f3f1 	udiv	r3, r3, r1
 8012418:	4413      	add	r3, r2
 801241a:	4619      	mov	r1, r3
 801241c:	68f8      	ldr	r0, [r7, #12]
 801241e:	f7ff fd93 	bl	8011f48 <move_window>
 8012422:	4603      	mov	r3, r0
 8012424:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012426:	7ffb      	ldrb	r3, [r7, #31]
 8012428:	2b00      	cmp	r3, #0
 801242a:	d134      	bne.n	8012496 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	009b      	lsls	r3, r3, #2
 801243c:	68fa      	ldr	r2, [r7, #12]
 801243e:	8992      	ldrh	r2, [r2, #12]
 8012440:	fbb3 f0f2 	udiv	r0, r3, r2
 8012444:	fb00 f202 	mul.w	r2, r0, r2
 8012448:	1a9b      	subs	r3, r3, r2
 801244a:	440b      	add	r3, r1
 801244c:	4618      	mov	r0, r3
 801244e:	f7ff fab1 	bl	80119b4 <ld_dword>
 8012452:	4603      	mov	r3, r0
 8012454:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8012458:	4323      	orrs	r3, r4
 801245a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801245c:	68fb      	ldr	r3, [r7, #12]
 801245e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8012462:	68bb      	ldr	r3, [r7, #8]
 8012464:	009b      	lsls	r3, r3, #2
 8012466:	68fa      	ldr	r2, [r7, #12]
 8012468:	8992      	ldrh	r2, [r2, #12]
 801246a:	fbb3 f0f2 	udiv	r0, r3, r2
 801246e:	fb00 f202 	mul.w	r2, r0, r2
 8012472:	1a9b      	subs	r3, r3, r2
 8012474:	440b      	add	r3, r1
 8012476:	6879      	ldr	r1, [r7, #4]
 8012478:	4618      	mov	r0, r3
 801247a:	f7ff fad9 	bl	8011a30 <st_dword>
			fs->wflag = 1;
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	2201      	movs	r2, #1
 8012482:	70da      	strb	r2, [r3, #3]
			break;
 8012484:	e008      	b.n	8012498 <put_fat+0x22e>
		}
	}
 8012486:	bf00      	nop
 8012488:	e006      	b.n	8012498 <put_fat+0x22e>
			if (res != FR_OK) break;
 801248a:	bf00      	nop
 801248c:	e004      	b.n	8012498 <put_fat+0x22e>
			if (res != FR_OK) break;
 801248e:	bf00      	nop
 8012490:	e002      	b.n	8012498 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012492:	bf00      	nop
 8012494:	e000      	b.n	8012498 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012496:	bf00      	nop
	return res;
 8012498:	7ffb      	ldrb	r3, [r7, #31]
}
 801249a:	4618      	mov	r0, r3
 801249c:	3724      	adds	r7, #36	; 0x24
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd90      	pop	{r4, r7, pc}

080124a2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80124a2:	b580      	push	{r7, lr}
 80124a4:	b088      	sub	sp, #32
 80124a6:	af00      	add	r7, sp, #0
 80124a8:	60f8      	str	r0, [r7, #12]
 80124aa:	60b9      	str	r1, [r7, #8]
 80124ac:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80124ae:	2300      	movs	r3, #0
 80124b0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80124b8:	68bb      	ldr	r3, [r7, #8]
 80124ba:	2b01      	cmp	r3, #1
 80124bc:	d904      	bls.n	80124c8 <remove_chain+0x26>
 80124be:	69bb      	ldr	r3, [r7, #24]
 80124c0:	6a1b      	ldr	r3, [r3, #32]
 80124c2:	68ba      	ldr	r2, [r7, #8]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d301      	bcc.n	80124cc <remove_chain+0x2a>
 80124c8:	2302      	movs	r3, #2
 80124ca:	e04b      	b.n	8012564 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	2b00      	cmp	r3, #0
 80124d0:	d00c      	beq.n	80124ec <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80124d2:	f04f 32ff 	mov.w	r2, #4294967295
 80124d6:	6879      	ldr	r1, [r7, #4]
 80124d8:	69b8      	ldr	r0, [r7, #24]
 80124da:	f7ff fec6 	bl	801226a <put_fat>
 80124de:	4603      	mov	r3, r0
 80124e0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80124e2:	7ffb      	ldrb	r3, [r7, #31]
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d001      	beq.n	80124ec <remove_chain+0x4a>
 80124e8:	7ffb      	ldrb	r3, [r7, #31]
 80124ea:	e03b      	b.n	8012564 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80124ec:	68b9      	ldr	r1, [r7, #8]
 80124ee:	68f8      	ldr	r0, [r7, #12]
 80124f0:	f7ff fde7 	bl	80120c2 <get_fat>
 80124f4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80124f6:	697b      	ldr	r3, [r7, #20]
 80124f8:	2b00      	cmp	r3, #0
 80124fa:	d031      	beq.n	8012560 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d101      	bne.n	8012506 <remove_chain+0x64>
 8012502:	2302      	movs	r3, #2
 8012504:	e02e      	b.n	8012564 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012506:	697b      	ldr	r3, [r7, #20]
 8012508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801250c:	d101      	bne.n	8012512 <remove_chain+0x70>
 801250e:	2301      	movs	r3, #1
 8012510:	e028      	b.n	8012564 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8012512:	2200      	movs	r2, #0
 8012514:	68b9      	ldr	r1, [r7, #8]
 8012516:	69b8      	ldr	r0, [r7, #24]
 8012518:	f7ff fea7 	bl	801226a <put_fat>
 801251c:	4603      	mov	r3, r0
 801251e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8012520:	7ffb      	ldrb	r3, [r7, #31]
 8012522:	2b00      	cmp	r3, #0
 8012524:	d001      	beq.n	801252a <remove_chain+0x88>
 8012526:	7ffb      	ldrb	r3, [r7, #31]
 8012528:	e01c      	b.n	8012564 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801252a:	69bb      	ldr	r3, [r7, #24]
 801252c:	69da      	ldr	r2, [r3, #28]
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	6a1b      	ldr	r3, [r3, #32]
 8012532:	3b02      	subs	r3, #2
 8012534:	429a      	cmp	r2, r3
 8012536:	d20b      	bcs.n	8012550 <remove_chain+0xae>
			fs->free_clst++;
 8012538:	69bb      	ldr	r3, [r7, #24]
 801253a:	69db      	ldr	r3, [r3, #28]
 801253c:	1c5a      	adds	r2, r3, #1
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8012542:	69bb      	ldr	r3, [r7, #24]
 8012544:	791b      	ldrb	r3, [r3, #4]
 8012546:	f043 0301 	orr.w	r3, r3, #1
 801254a:	b2da      	uxtb	r2, r3
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8012550:	697b      	ldr	r3, [r7, #20]
 8012552:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	6a1b      	ldr	r3, [r3, #32]
 8012558:	68ba      	ldr	r2, [r7, #8]
 801255a:	429a      	cmp	r2, r3
 801255c:	d3c6      	bcc.n	80124ec <remove_chain+0x4a>
 801255e:	e000      	b.n	8012562 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8012560:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8012562:	2300      	movs	r3, #0
}
 8012564:	4618      	mov	r0, r3
 8012566:	3720      	adds	r7, #32
 8012568:	46bd      	mov	sp, r7
 801256a:	bd80      	pop	{r7, pc}

0801256c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b088      	sub	sp, #32
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d10d      	bne.n	801259e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	699b      	ldr	r3, [r3, #24]
 8012586:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8012588:	69bb      	ldr	r3, [r7, #24]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d004      	beq.n	8012598 <create_chain+0x2c>
 801258e:	693b      	ldr	r3, [r7, #16]
 8012590:	6a1b      	ldr	r3, [r3, #32]
 8012592:	69ba      	ldr	r2, [r7, #24]
 8012594:	429a      	cmp	r2, r3
 8012596:	d31b      	bcc.n	80125d0 <create_chain+0x64>
 8012598:	2301      	movs	r3, #1
 801259a:	61bb      	str	r3, [r7, #24]
 801259c:	e018      	b.n	80125d0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f7ff fd8e 	bl	80120c2 <get_fat>
 80125a6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	2b01      	cmp	r3, #1
 80125ac:	d801      	bhi.n	80125b2 <create_chain+0x46>
 80125ae:	2301      	movs	r3, #1
 80125b0:	e070      	b.n	8012694 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80125b8:	d101      	bne.n	80125be <create_chain+0x52>
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	e06a      	b.n	8012694 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	6a1b      	ldr	r3, [r3, #32]
 80125c2:	68fa      	ldr	r2, [r7, #12]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d201      	bcs.n	80125cc <create_chain+0x60>
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	e063      	b.n	8012694 <create_chain+0x128>
		scl = clst;
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80125d0:	69bb      	ldr	r3, [r7, #24]
 80125d2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80125d4:	69fb      	ldr	r3, [r7, #28]
 80125d6:	3301      	adds	r3, #1
 80125d8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80125da:	693b      	ldr	r3, [r7, #16]
 80125dc:	6a1b      	ldr	r3, [r3, #32]
 80125de:	69fa      	ldr	r2, [r7, #28]
 80125e0:	429a      	cmp	r2, r3
 80125e2:	d307      	bcc.n	80125f4 <create_chain+0x88>
				ncl = 2;
 80125e4:	2302      	movs	r3, #2
 80125e6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80125e8:	69fa      	ldr	r2, [r7, #28]
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	429a      	cmp	r2, r3
 80125ee:	d901      	bls.n	80125f4 <create_chain+0x88>
 80125f0:	2300      	movs	r3, #0
 80125f2:	e04f      	b.n	8012694 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80125f4:	69f9      	ldr	r1, [r7, #28]
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f7ff fd63 	bl	80120c2 <get_fat>
 80125fc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80125fe:	68fb      	ldr	r3, [r7, #12]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d00e      	beq.n	8012622 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012604:	68fb      	ldr	r3, [r7, #12]
 8012606:	2b01      	cmp	r3, #1
 8012608:	d003      	beq.n	8012612 <create_chain+0xa6>
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012610:	d101      	bne.n	8012616 <create_chain+0xaa>
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	e03e      	b.n	8012694 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012616:	69fa      	ldr	r2, [r7, #28]
 8012618:	69bb      	ldr	r3, [r7, #24]
 801261a:	429a      	cmp	r2, r3
 801261c:	d1da      	bne.n	80125d4 <create_chain+0x68>
 801261e:	2300      	movs	r3, #0
 8012620:	e038      	b.n	8012694 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012622:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012624:	f04f 32ff 	mov.w	r2, #4294967295
 8012628:	69f9      	ldr	r1, [r7, #28]
 801262a:	6938      	ldr	r0, [r7, #16]
 801262c:	f7ff fe1d 	bl	801226a <put_fat>
 8012630:	4603      	mov	r3, r0
 8012632:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012634:	7dfb      	ldrb	r3, [r7, #23]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d109      	bne.n	801264e <create_chain+0xe2>
 801263a:	683b      	ldr	r3, [r7, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d006      	beq.n	801264e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012640:	69fa      	ldr	r2, [r7, #28]
 8012642:	6839      	ldr	r1, [r7, #0]
 8012644:	6938      	ldr	r0, [r7, #16]
 8012646:	f7ff fe10 	bl	801226a <put_fat>
 801264a:	4603      	mov	r3, r0
 801264c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801264e:	7dfb      	ldrb	r3, [r7, #23]
 8012650:	2b00      	cmp	r3, #0
 8012652:	d116      	bne.n	8012682 <create_chain+0x116>
		fs->last_clst = ncl;
 8012654:	693b      	ldr	r3, [r7, #16]
 8012656:	69fa      	ldr	r2, [r7, #28]
 8012658:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801265a:	693b      	ldr	r3, [r7, #16]
 801265c:	69da      	ldr	r2, [r3, #28]
 801265e:	693b      	ldr	r3, [r7, #16]
 8012660:	6a1b      	ldr	r3, [r3, #32]
 8012662:	3b02      	subs	r3, #2
 8012664:	429a      	cmp	r2, r3
 8012666:	d804      	bhi.n	8012672 <create_chain+0x106>
 8012668:	693b      	ldr	r3, [r7, #16]
 801266a:	69db      	ldr	r3, [r3, #28]
 801266c:	1e5a      	subs	r2, r3, #1
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 8012672:	693b      	ldr	r3, [r7, #16]
 8012674:	791b      	ldrb	r3, [r3, #4]
 8012676:	f043 0301 	orr.w	r3, r3, #1
 801267a:	b2da      	uxtb	r2, r3
 801267c:	693b      	ldr	r3, [r7, #16]
 801267e:	711a      	strb	r2, [r3, #4]
 8012680:	e007      	b.n	8012692 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012682:	7dfb      	ldrb	r3, [r7, #23]
 8012684:	2b01      	cmp	r3, #1
 8012686:	d102      	bne.n	801268e <create_chain+0x122>
 8012688:	f04f 33ff 	mov.w	r3, #4294967295
 801268c:	e000      	b.n	8012690 <create_chain+0x124>
 801268e:	2301      	movs	r3, #1
 8012690:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012692:	69fb      	ldr	r3, [r7, #28]
}
 8012694:	4618      	mov	r0, r3
 8012696:	3720      	adds	r7, #32
 8012698:	46bd      	mov	sp, r7
 801269a:	bd80      	pop	{r7, pc}

0801269c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 801269c:	b480      	push	{r7}
 801269e:	b087      	sub	sp, #28
 80126a0:	af00      	add	r7, sp, #0
 80126a2:	6078      	str	r0, [r7, #4]
 80126a4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	681b      	ldr	r3, [r3, #0]
 80126aa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126b0:	3304      	adds	r3, #4
 80126b2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	899b      	ldrh	r3, [r3, #12]
 80126b8:	461a      	mov	r2, r3
 80126ba:	683b      	ldr	r3, [r7, #0]
 80126bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80126c0:	68fa      	ldr	r2, [r7, #12]
 80126c2:	8952      	ldrh	r2, [r2, #10]
 80126c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80126c8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80126ca:	693b      	ldr	r3, [r7, #16]
 80126cc:	1d1a      	adds	r2, r3, #4
 80126ce:	613a      	str	r2, [r7, #16]
 80126d0:	681b      	ldr	r3, [r3, #0]
 80126d2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d101      	bne.n	80126de <clmt_clust+0x42>
 80126da:	2300      	movs	r3, #0
 80126dc:	e010      	b.n	8012700 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80126de:	697a      	ldr	r2, [r7, #20]
 80126e0:	68bb      	ldr	r3, [r7, #8]
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d307      	bcc.n	80126f6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80126e6:	697a      	ldr	r2, [r7, #20]
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	1ad3      	subs	r3, r2, r3
 80126ec:	617b      	str	r3, [r7, #20]
 80126ee:	693b      	ldr	r3, [r7, #16]
 80126f0:	3304      	adds	r3, #4
 80126f2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80126f4:	e7e9      	b.n	80126ca <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80126f6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80126f8:	693b      	ldr	r3, [r7, #16]
 80126fa:	681a      	ldr	r2, [r3, #0]
 80126fc:	697b      	ldr	r3, [r7, #20]
 80126fe:	4413      	add	r3, r2
}
 8012700:	4618      	mov	r0, r3
 8012702:	371c      	adds	r7, #28
 8012704:	46bd      	mov	sp, r7
 8012706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801270a:	4770      	bx	lr

0801270c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 801270c:	b580      	push	{r7, lr}
 801270e:	b086      	sub	sp, #24
 8012710:	af00      	add	r7, sp, #0
 8012712:	6078      	str	r0, [r7, #4]
 8012714:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801271c:	683b      	ldr	r3, [r7, #0]
 801271e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012722:	d204      	bcs.n	801272e <dir_sdi+0x22>
 8012724:	683b      	ldr	r3, [r7, #0]
 8012726:	f003 031f 	and.w	r3, r3, #31
 801272a:	2b00      	cmp	r3, #0
 801272c:	d001      	beq.n	8012732 <dir_sdi+0x26>
		return FR_INT_ERR;
 801272e:	2302      	movs	r3, #2
 8012730:	e071      	b.n	8012816 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	683a      	ldr	r2, [r7, #0]
 8012736:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	689b      	ldr	r3, [r3, #8]
 801273c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801273e:	697b      	ldr	r3, [r7, #20]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d106      	bne.n	8012752 <dir_sdi+0x46>
 8012744:	693b      	ldr	r3, [r7, #16]
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	2b02      	cmp	r3, #2
 801274a:	d902      	bls.n	8012752 <dir_sdi+0x46>
		clst = fs->dirbase;
 801274c:	693b      	ldr	r3, [r7, #16]
 801274e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012750:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d10c      	bne.n	8012772 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012758:	683b      	ldr	r3, [r7, #0]
 801275a:	095b      	lsrs	r3, r3, #5
 801275c:	693a      	ldr	r2, [r7, #16]
 801275e:	8912      	ldrh	r2, [r2, #8]
 8012760:	4293      	cmp	r3, r2
 8012762:	d301      	bcc.n	8012768 <dir_sdi+0x5c>
 8012764:	2302      	movs	r3, #2
 8012766:	e056      	b.n	8012816 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012768:	693b      	ldr	r3, [r7, #16]
 801276a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	61da      	str	r2, [r3, #28]
 8012770:	e02d      	b.n	80127ce <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	895b      	ldrh	r3, [r3, #10]
 8012776:	461a      	mov	r2, r3
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	899b      	ldrh	r3, [r3, #12]
 801277c:	fb02 f303 	mul.w	r3, r2, r3
 8012780:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012782:	e019      	b.n	80127b8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	6979      	ldr	r1, [r7, #20]
 8012788:	4618      	mov	r0, r3
 801278a:	f7ff fc9a 	bl	80120c2 <get_fat>
 801278e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012790:	697b      	ldr	r3, [r7, #20]
 8012792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012796:	d101      	bne.n	801279c <dir_sdi+0x90>
 8012798:	2301      	movs	r3, #1
 801279a:	e03c      	b.n	8012816 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	2b01      	cmp	r3, #1
 80127a0:	d904      	bls.n	80127ac <dir_sdi+0xa0>
 80127a2:	693b      	ldr	r3, [r7, #16]
 80127a4:	6a1b      	ldr	r3, [r3, #32]
 80127a6:	697a      	ldr	r2, [r7, #20]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	d301      	bcc.n	80127b0 <dir_sdi+0xa4>
 80127ac:	2302      	movs	r3, #2
 80127ae:	e032      	b.n	8012816 <dir_sdi+0x10a>
			ofs -= csz;
 80127b0:	683a      	ldr	r2, [r7, #0]
 80127b2:	68fb      	ldr	r3, [r7, #12]
 80127b4:	1ad3      	subs	r3, r2, r3
 80127b6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80127b8:	683a      	ldr	r2, [r7, #0]
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	429a      	cmp	r2, r3
 80127be:	d2e1      	bcs.n	8012784 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80127c0:	6979      	ldr	r1, [r7, #20]
 80127c2:	6938      	ldr	r0, [r7, #16]
 80127c4:	f7ff fc5e 	bl	8012084 <clust2sect>
 80127c8:	4602      	mov	r2, r0
 80127ca:	687b      	ldr	r3, [r7, #4]
 80127cc:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	697a      	ldr	r2, [r7, #20]
 80127d2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	69db      	ldr	r3, [r3, #28]
 80127d8:	2b00      	cmp	r3, #0
 80127da:	d101      	bne.n	80127e0 <dir_sdi+0xd4>
 80127dc:	2302      	movs	r3, #2
 80127de:	e01a      	b.n	8012816 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	69da      	ldr	r2, [r3, #28]
 80127e4:	693b      	ldr	r3, [r7, #16]
 80127e6:	899b      	ldrh	r3, [r3, #12]
 80127e8:	4619      	mov	r1, r3
 80127ea:	683b      	ldr	r3, [r7, #0]
 80127ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80127f0:	441a      	add	r2, r3
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80127f6:	693b      	ldr	r3, [r7, #16]
 80127f8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80127fc:	693b      	ldr	r3, [r7, #16]
 80127fe:	899b      	ldrh	r3, [r3, #12]
 8012800:	461a      	mov	r2, r3
 8012802:	683b      	ldr	r3, [r7, #0]
 8012804:	fbb3 f0f2 	udiv	r0, r3, r2
 8012808:	fb00 f202 	mul.w	r2, r0, r2
 801280c:	1a9b      	subs	r3, r3, r2
 801280e:	18ca      	adds	r2, r1, r3
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012814:	2300      	movs	r3, #0
}
 8012816:	4618      	mov	r0, r3
 8012818:	3718      	adds	r7, #24
 801281a:	46bd      	mov	sp, r7
 801281c:	bd80      	pop	{r7, pc}

0801281e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801281e:	b580      	push	{r7, lr}
 8012820:	b086      	sub	sp, #24
 8012822:	af00      	add	r7, sp, #0
 8012824:	6078      	str	r0, [r7, #4]
 8012826:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	681b      	ldr	r3, [r3, #0]
 801282c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	695b      	ldr	r3, [r3, #20]
 8012832:	3320      	adds	r3, #32
 8012834:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	69db      	ldr	r3, [r3, #28]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d003      	beq.n	8012846 <dir_next+0x28>
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012844:	d301      	bcc.n	801284a <dir_next+0x2c>
 8012846:	2304      	movs	r3, #4
 8012848:	e0bb      	b.n	80129c2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	899b      	ldrh	r3, [r3, #12]
 801284e:	461a      	mov	r2, r3
 8012850:	68bb      	ldr	r3, [r7, #8]
 8012852:	fbb3 f1f2 	udiv	r1, r3, r2
 8012856:	fb01 f202 	mul.w	r2, r1, r2
 801285a:	1a9b      	subs	r3, r3, r2
 801285c:	2b00      	cmp	r3, #0
 801285e:	f040 809d 	bne.w	801299c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012862:	687b      	ldr	r3, [r7, #4]
 8012864:	69db      	ldr	r3, [r3, #28]
 8012866:	1c5a      	adds	r2, r3, #1
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	699b      	ldr	r3, [r3, #24]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d10b      	bne.n	801288c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	095b      	lsrs	r3, r3, #5
 8012878:	68fa      	ldr	r2, [r7, #12]
 801287a:	8912      	ldrh	r2, [r2, #8]
 801287c:	4293      	cmp	r3, r2
 801287e:	f0c0 808d 	bcc.w	801299c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	2200      	movs	r2, #0
 8012886:	61da      	str	r2, [r3, #28]
 8012888:	2304      	movs	r3, #4
 801288a:	e09a      	b.n	80129c2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	899b      	ldrh	r3, [r3, #12]
 8012890:	461a      	mov	r2, r3
 8012892:	68bb      	ldr	r3, [r7, #8]
 8012894:	fbb3 f3f2 	udiv	r3, r3, r2
 8012898:	68fa      	ldr	r2, [r7, #12]
 801289a:	8952      	ldrh	r2, [r2, #10]
 801289c:	3a01      	subs	r2, #1
 801289e:	4013      	ands	r3, r2
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d17b      	bne.n	801299c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80128a4:	687a      	ldr	r2, [r7, #4]
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	699b      	ldr	r3, [r3, #24]
 80128aa:	4619      	mov	r1, r3
 80128ac:	4610      	mov	r0, r2
 80128ae:	f7ff fc08 	bl	80120c2 <get_fat>
 80128b2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80128b4:	697b      	ldr	r3, [r7, #20]
 80128b6:	2b01      	cmp	r3, #1
 80128b8:	d801      	bhi.n	80128be <dir_next+0xa0>
 80128ba:	2302      	movs	r3, #2
 80128bc:	e081      	b.n	80129c2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80128be:	697b      	ldr	r3, [r7, #20]
 80128c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128c4:	d101      	bne.n	80128ca <dir_next+0xac>
 80128c6:	2301      	movs	r3, #1
 80128c8:	e07b      	b.n	80129c2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80128ca:	68fb      	ldr	r3, [r7, #12]
 80128cc:	6a1b      	ldr	r3, [r3, #32]
 80128ce:	697a      	ldr	r2, [r7, #20]
 80128d0:	429a      	cmp	r2, r3
 80128d2:	d359      	bcc.n	8012988 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80128d4:	683b      	ldr	r3, [r7, #0]
 80128d6:	2b00      	cmp	r3, #0
 80128d8:	d104      	bne.n	80128e4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	2200      	movs	r2, #0
 80128de:	61da      	str	r2, [r3, #28]
 80128e0:	2304      	movs	r3, #4
 80128e2:	e06e      	b.n	80129c2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80128e4:	687a      	ldr	r2, [r7, #4]
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	699b      	ldr	r3, [r3, #24]
 80128ea:	4619      	mov	r1, r3
 80128ec:	4610      	mov	r0, r2
 80128ee:	f7ff fe3d 	bl	801256c <create_chain>
 80128f2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d101      	bne.n	80128fe <dir_next+0xe0>
 80128fa:	2307      	movs	r3, #7
 80128fc:	e061      	b.n	80129c2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	2b01      	cmp	r3, #1
 8012902:	d101      	bne.n	8012908 <dir_next+0xea>
 8012904:	2302      	movs	r3, #2
 8012906:	e05c      	b.n	80129c2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012908:	697b      	ldr	r3, [r7, #20]
 801290a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801290e:	d101      	bne.n	8012914 <dir_next+0xf6>
 8012910:	2301      	movs	r3, #1
 8012912:	e056      	b.n	80129c2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012914:	68f8      	ldr	r0, [r7, #12]
 8012916:	f7ff fad3 	bl	8011ec0 <sync_window>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	d001      	beq.n	8012924 <dir_next+0x106>
 8012920:	2301      	movs	r3, #1
 8012922:	e04e      	b.n	80129c2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012924:	68fb      	ldr	r3, [r7, #12]
 8012926:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	899b      	ldrh	r3, [r3, #12]
 801292e:	461a      	mov	r2, r3
 8012930:	2100      	movs	r1, #0
 8012932:	f7ff f8ca 	bl	8011aca <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012936:	2300      	movs	r3, #0
 8012938:	613b      	str	r3, [r7, #16]
 801293a:	6979      	ldr	r1, [r7, #20]
 801293c:	68f8      	ldr	r0, [r7, #12]
 801293e:	f7ff fba1 	bl	8012084 <clust2sect>
 8012942:	4602      	mov	r2, r0
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	639a      	str	r2, [r3, #56]	; 0x38
 8012948:	e012      	b.n	8012970 <dir_next+0x152>
						fs->wflag = 1;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	2201      	movs	r2, #1
 801294e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012950:	68f8      	ldr	r0, [r7, #12]
 8012952:	f7ff fab5 	bl	8011ec0 <sync_window>
 8012956:	4603      	mov	r3, r0
 8012958:	2b00      	cmp	r3, #0
 801295a:	d001      	beq.n	8012960 <dir_next+0x142>
 801295c:	2301      	movs	r3, #1
 801295e:	e030      	b.n	80129c2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	3301      	adds	r3, #1
 8012964:	613b      	str	r3, [r7, #16]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801296a:	1c5a      	adds	r2, r3, #1
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	639a      	str	r2, [r3, #56]	; 0x38
 8012970:	68fb      	ldr	r3, [r7, #12]
 8012972:	895b      	ldrh	r3, [r3, #10]
 8012974:	461a      	mov	r2, r3
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	4293      	cmp	r3, r2
 801297a:	d3e6      	bcc.n	801294a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012980:	693b      	ldr	r3, [r7, #16]
 8012982:	1ad2      	subs	r2, r2, r3
 8012984:	68fb      	ldr	r3, [r7, #12]
 8012986:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	697a      	ldr	r2, [r7, #20]
 801298c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 801298e:	6979      	ldr	r1, [r7, #20]
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	f7ff fb77 	bl	8012084 <clust2sect>
 8012996:	4602      	mov	r2, r0
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	68ba      	ldr	r2, [r7, #8]
 80129a0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	899b      	ldrh	r3, [r3, #12]
 80129ac:	461a      	mov	r2, r3
 80129ae:	68bb      	ldr	r3, [r7, #8]
 80129b0:	fbb3 f0f2 	udiv	r0, r3, r2
 80129b4:	fb00 f202 	mul.w	r2, r0, r2
 80129b8:	1a9b      	subs	r3, r3, r2
 80129ba:	18ca      	adds	r2, r1, r3
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80129c0:	2300      	movs	r3, #0
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	3718      	adds	r7, #24
 80129c6:	46bd      	mov	sp, r7
 80129c8:	bd80      	pop	{r7, pc}

080129ca <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80129ca:	b580      	push	{r7, lr}
 80129cc:	b086      	sub	sp, #24
 80129ce:	af00      	add	r7, sp, #0
 80129d0:	6078      	str	r0, [r7, #4]
 80129d2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80129da:	2100      	movs	r1, #0
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f7ff fe95 	bl	801270c <dir_sdi>
 80129e2:	4603      	mov	r3, r0
 80129e4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80129e6:	7dfb      	ldrb	r3, [r7, #23]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d12b      	bne.n	8012a44 <dir_alloc+0x7a>
		n = 0;
 80129ec:	2300      	movs	r3, #0
 80129ee:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	69db      	ldr	r3, [r3, #28]
 80129f4:	4619      	mov	r1, r3
 80129f6:	68f8      	ldr	r0, [r7, #12]
 80129f8:	f7ff faa6 	bl	8011f48 <move_window>
 80129fc:	4603      	mov	r3, r0
 80129fe:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012a00:	7dfb      	ldrb	r3, [r7, #23]
 8012a02:	2b00      	cmp	r3, #0
 8012a04:	d11d      	bne.n	8012a42 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	6a1b      	ldr	r3, [r3, #32]
 8012a0a:	781b      	ldrb	r3, [r3, #0]
 8012a0c:	2be5      	cmp	r3, #229	; 0xe5
 8012a0e:	d004      	beq.n	8012a1a <dir_alloc+0x50>
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	6a1b      	ldr	r3, [r3, #32]
 8012a14:	781b      	ldrb	r3, [r3, #0]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d107      	bne.n	8012a2a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012a1a:	693b      	ldr	r3, [r7, #16]
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	613b      	str	r3, [r7, #16]
 8012a20:	693a      	ldr	r2, [r7, #16]
 8012a22:	683b      	ldr	r3, [r7, #0]
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d102      	bne.n	8012a2e <dir_alloc+0x64>
 8012a28:	e00c      	b.n	8012a44 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012a2a:	2300      	movs	r3, #0
 8012a2c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012a2e:	2101      	movs	r1, #1
 8012a30:	6878      	ldr	r0, [r7, #4]
 8012a32:	f7ff fef4 	bl	801281e <dir_next>
 8012a36:	4603      	mov	r3, r0
 8012a38:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012a3a:	7dfb      	ldrb	r3, [r7, #23]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d0d7      	beq.n	80129f0 <dir_alloc+0x26>
 8012a40:	e000      	b.n	8012a44 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012a42:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012a44:	7dfb      	ldrb	r3, [r7, #23]
 8012a46:	2b04      	cmp	r3, #4
 8012a48:	d101      	bne.n	8012a4e <dir_alloc+0x84>
 8012a4a:	2307      	movs	r3, #7
 8012a4c:	75fb      	strb	r3, [r7, #23]
	return res;
 8012a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a50:	4618      	mov	r0, r3
 8012a52:	3718      	adds	r7, #24
 8012a54:	46bd      	mov	sp, r7
 8012a56:	bd80      	pop	{r7, pc}

08012a58 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
 8012a60:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	331a      	adds	r3, #26
 8012a66:	4618      	mov	r0, r3
 8012a68:	f7fe ff8c 	bl	8011984 <ld_word>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	2b03      	cmp	r3, #3
 8012a76:	d109      	bne.n	8012a8c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012a78:	683b      	ldr	r3, [r7, #0]
 8012a7a:	3314      	adds	r3, #20
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7fe ff81 	bl	8011984 <ld_word>
 8012a82:	4603      	mov	r3, r0
 8012a84:	041b      	lsls	r3, r3, #16
 8012a86:	68fa      	ldr	r2, [r7, #12]
 8012a88:	4313      	orrs	r3, r2
 8012a8a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012a8c:	68fb      	ldr	r3, [r7, #12]
}
 8012a8e:	4618      	mov	r0, r3
 8012a90:	3710      	adds	r7, #16
 8012a92:	46bd      	mov	sp, r7
 8012a94:	bd80      	pop	{r7, pc}

08012a96 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012a96:	b580      	push	{r7, lr}
 8012a98:	b084      	sub	sp, #16
 8012a9a:	af00      	add	r7, sp, #0
 8012a9c:	60f8      	str	r0, [r7, #12]
 8012a9e:	60b9      	str	r1, [r7, #8]
 8012aa0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012aa2:	68bb      	ldr	r3, [r7, #8]
 8012aa4:	331a      	adds	r3, #26
 8012aa6:	687a      	ldr	r2, [r7, #4]
 8012aa8:	b292      	uxth	r2, r2
 8012aaa:	4611      	mov	r1, r2
 8012aac:	4618      	mov	r0, r3
 8012aae:	f7fe ffa4 	bl	80119fa <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	781b      	ldrb	r3, [r3, #0]
 8012ab6:	2b03      	cmp	r3, #3
 8012ab8:	d109      	bne.n	8012ace <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012aba:	68bb      	ldr	r3, [r7, #8]
 8012abc:	f103 0214 	add.w	r2, r3, #20
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	0c1b      	lsrs	r3, r3, #16
 8012ac4:	b29b      	uxth	r3, r3
 8012ac6:	4619      	mov	r1, r3
 8012ac8:	4610      	mov	r0, r2
 8012aca:	f7fe ff96 	bl	80119fa <st_word>
	}
}
 8012ace:	bf00      	nop
 8012ad0:	3710      	adds	r7, #16
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
	...

08012ad8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012ad8:	b590      	push	{r4, r7, lr}
 8012ada:	b087      	sub	sp, #28
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012ae2:	683b      	ldr	r3, [r7, #0]
 8012ae4:	331a      	adds	r3, #26
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7fe ff4c 	bl	8011984 <ld_word>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d001      	beq.n	8012af6 <cmp_lfn+0x1e>
 8012af2:	2300      	movs	r3, #0
 8012af4:	e059      	b.n	8012baa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012af6:	683b      	ldr	r3, [r7, #0]
 8012af8:	781b      	ldrb	r3, [r3, #0]
 8012afa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012afe:	1e5a      	subs	r2, r3, #1
 8012b00:	4613      	mov	r3, r2
 8012b02:	005b      	lsls	r3, r3, #1
 8012b04:	4413      	add	r3, r2
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	4413      	add	r3, r2
 8012b0a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012b0c:	2301      	movs	r3, #1
 8012b0e:	81fb      	strh	r3, [r7, #14]
 8012b10:	2300      	movs	r3, #0
 8012b12:	613b      	str	r3, [r7, #16]
 8012b14:	e033      	b.n	8012b7e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012b16:	4a27      	ldr	r2, [pc, #156]	; (8012bb4 <cmp_lfn+0xdc>)
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	781b      	ldrb	r3, [r3, #0]
 8012b1e:	461a      	mov	r2, r3
 8012b20:	683b      	ldr	r3, [r7, #0]
 8012b22:	4413      	add	r3, r2
 8012b24:	4618      	mov	r0, r3
 8012b26:	f7fe ff2d 	bl	8011984 <ld_word>
 8012b2a:	4603      	mov	r3, r0
 8012b2c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012b2e:	89fb      	ldrh	r3, [r7, #14]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d01a      	beq.n	8012b6a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012b34:	697b      	ldr	r3, [r7, #20]
 8012b36:	2bfe      	cmp	r3, #254	; 0xfe
 8012b38:	d812      	bhi.n	8012b60 <cmp_lfn+0x88>
 8012b3a:	89bb      	ldrh	r3, [r7, #12]
 8012b3c:	4618      	mov	r0, r3
 8012b3e:	f002 fc7b 	bl	8015438 <ff_wtoupper>
 8012b42:	4603      	mov	r3, r0
 8012b44:	461c      	mov	r4, r3
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	1c5a      	adds	r2, r3, #1
 8012b4a:	617a      	str	r2, [r7, #20]
 8012b4c:	005b      	lsls	r3, r3, #1
 8012b4e:	687a      	ldr	r2, [r7, #4]
 8012b50:	4413      	add	r3, r2
 8012b52:	881b      	ldrh	r3, [r3, #0]
 8012b54:	4618      	mov	r0, r3
 8012b56:	f002 fc6f 	bl	8015438 <ff_wtoupper>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	429c      	cmp	r4, r3
 8012b5e:	d001      	beq.n	8012b64 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012b60:	2300      	movs	r3, #0
 8012b62:	e022      	b.n	8012baa <cmp_lfn+0xd2>
			}
			wc = uc;
 8012b64:	89bb      	ldrh	r3, [r7, #12]
 8012b66:	81fb      	strh	r3, [r7, #14]
 8012b68:	e006      	b.n	8012b78 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012b6a:	89bb      	ldrh	r3, [r7, #12]
 8012b6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012b70:	4293      	cmp	r3, r2
 8012b72:	d001      	beq.n	8012b78 <cmp_lfn+0xa0>
 8012b74:	2300      	movs	r3, #0
 8012b76:	e018      	b.n	8012baa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012b78:	693b      	ldr	r3, [r7, #16]
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	613b      	str	r3, [r7, #16]
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	2b0c      	cmp	r3, #12
 8012b82:	d9c8      	bls.n	8012b16 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012b84:	683b      	ldr	r3, [r7, #0]
 8012b86:	781b      	ldrb	r3, [r3, #0]
 8012b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d00b      	beq.n	8012ba8 <cmp_lfn+0xd0>
 8012b90:	89fb      	ldrh	r3, [r7, #14]
 8012b92:	2b00      	cmp	r3, #0
 8012b94:	d008      	beq.n	8012ba8 <cmp_lfn+0xd0>
 8012b96:	697b      	ldr	r3, [r7, #20]
 8012b98:	005b      	lsls	r3, r3, #1
 8012b9a:	687a      	ldr	r2, [r7, #4]
 8012b9c:	4413      	add	r3, r2
 8012b9e:	881b      	ldrh	r3, [r3, #0]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d001      	beq.n	8012ba8 <cmp_lfn+0xd0>
 8012ba4:	2300      	movs	r3, #0
 8012ba6:	e000      	b.n	8012baa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8012ba8:	2301      	movs	r3, #1
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	371c      	adds	r7, #28
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	bd90      	pop	{r4, r7, pc}
 8012bb2:	bf00      	nop
 8012bb4:	08028cd4 	.word	0x08028cd4

08012bb8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b088      	sub	sp, #32
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	4611      	mov	r1, r2
 8012bc4:	461a      	mov	r2, r3
 8012bc6:	460b      	mov	r3, r1
 8012bc8:	71fb      	strb	r3, [r7, #7]
 8012bca:	4613      	mov	r3, r2
 8012bcc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8012bce:	68bb      	ldr	r3, [r7, #8]
 8012bd0:	330d      	adds	r3, #13
 8012bd2:	79ba      	ldrb	r2, [r7, #6]
 8012bd4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8012bd6:	68bb      	ldr	r3, [r7, #8]
 8012bd8:	330b      	adds	r3, #11
 8012bda:	220f      	movs	r2, #15
 8012bdc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8012bde:	68bb      	ldr	r3, [r7, #8]
 8012be0:	330c      	adds	r3, #12
 8012be2:	2200      	movs	r2, #0
 8012be4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8012be6:	68bb      	ldr	r3, [r7, #8]
 8012be8:	331a      	adds	r3, #26
 8012bea:	2100      	movs	r1, #0
 8012bec:	4618      	mov	r0, r3
 8012bee:	f7fe ff04 	bl	80119fa <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8012bf2:	79fb      	ldrb	r3, [r7, #7]
 8012bf4:	1e5a      	subs	r2, r3, #1
 8012bf6:	4613      	mov	r3, r2
 8012bf8:	005b      	lsls	r3, r3, #1
 8012bfa:	4413      	add	r3, r2
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	4413      	add	r3, r2
 8012c00:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8012c02:	2300      	movs	r3, #0
 8012c04:	82fb      	strh	r3, [r7, #22]
 8012c06:	2300      	movs	r3, #0
 8012c08:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8012c0a:	8afb      	ldrh	r3, [r7, #22]
 8012c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c10:	4293      	cmp	r3, r2
 8012c12:	d007      	beq.n	8012c24 <put_lfn+0x6c>
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	1c5a      	adds	r2, r3, #1
 8012c18:	61fa      	str	r2, [r7, #28]
 8012c1a:	005b      	lsls	r3, r3, #1
 8012c1c:	68fa      	ldr	r2, [r7, #12]
 8012c1e:	4413      	add	r3, r2
 8012c20:	881b      	ldrh	r3, [r3, #0]
 8012c22:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8012c24:	4a17      	ldr	r2, [pc, #92]	; (8012c84 <put_lfn+0xcc>)
 8012c26:	69bb      	ldr	r3, [r7, #24]
 8012c28:	4413      	add	r3, r2
 8012c2a:	781b      	ldrb	r3, [r3, #0]
 8012c2c:	461a      	mov	r2, r3
 8012c2e:	68bb      	ldr	r3, [r7, #8]
 8012c30:	4413      	add	r3, r2
 8012c32:	8afa      	ldrh	r2, [r7, #22]
 8012c34:	4611      	mov	r1, r2
 8012c36:	4618      	mov	r0, r3
 8012c38:	f7fe fedf 	bl	80119fa <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8012c3c:	8afb      	ldrh	r3, [r7, #22]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d102      	bne.n	8012c48 <put_lfn+0x90>
 8012c42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c46:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8012c48:	69bb      	ldr	r3, [r7, #24]
 8012c4a:	3301      	adds	r3, #1
 8012c4c:	61bb      	str	r3, [r7, #24]
 8012c4e:	69bb      	ldr	r3, [r7, #24]
 8012c50:	2b0c      	cmp	r3, #12
 8012c52:	d9da      	bls.n	8012c0a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8012c54:	8afb      	ldrh	r3, [r7, #22]
 8012c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012c5a:	4293      	cmp	r3, r2
 8012c5c:	d006      	beq.n	8012c6c <put_lfn+0xb4>
 8012c5e:	69fb      	ldr	r3, [r7, #28]
 8012c60:	005b      	lsls	r3, r3, #1
 8012c62:	68fa      	ldr	r2, [r7, #12]
 8012c64:	4413      	add	r3, r2
 8012c66:	881b      	ldrh	r3, [r3, #0]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d103      	bne.n	8012c74 <put_lfn+0xbc>
 8012c6c:	79fb      	ldrb	r3, [r7, #7]
 8012c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012c72:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	79fa      	ldrb	r2, [r7, #7]
 8012c78:	701a      	strb	r2, [r3, #0]
}
 8012c7a:	bf00      	nop
 8012c7c:	3720      	adds	r7, #32
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
 8012c82:	bf00      	nop
 8012c84:	08028cd4 	.word	0x08028cd4

08012c88 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b08c      	sub	sp, #48	; 0x30
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	60f8      	str	r0, [r7, #12]
 8012c90:	60b9      	str	r1, [r7, #8]
 8012c92:	607a      	str	r2, [r7, #4]
 8012c94:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8012c96:	220b      	movs	r2, #11
 8012c98:	68b9      	ldr	r1, [r7, #8]
 8012c9a:	68f8      	ldr	r0, [r7, #12]
 8012c9c:	f7fe fef4 	bl	8011a88 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	2b05      	cmp	r3, #5
 8012ca4:	d92b      	bls.n	8012cfe <gen_numname+0x76>
		sr = seq;
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8012caa:	e022      	b.n	8012cf2 <gen_numname+0x6a>
			wc = *lfn++;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	1c9a      	adds	r2, r3, #2
 8012cb0:	607a      	str	r2, [r7, #4]
 8012cb2:	881b      	ldrh	r3, [r3, #0]
 8012cb4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	62bb      	str	r3, [r7, #40]	; 0x28
 8012cba:	e017      	b.n	8012cec <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8012cbc:	69fb      	ldr	r3, [r7, #28]
 8012cbe:	005a      	lsls	r2, r3, #1
 8012cc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012cc2:	f003 0301 	and.w	r3, r3, #1
 8012cc6:	4413      	add	r3, r2
 8012cc8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8012cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ccc:	085b      	lsrs	r3, r3, #1
 8012cce:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8012cd0:	69fb      	ldr	r3, [r7, #28]
 8012cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8012cd6:	2b00      	cmp	r3, #0
 8012cd8:	d005      	beq.n	8012ce6 <gen_numname+0x5e>
 8012cda:	69fb      	ldr	r3, [r7, #28]
 8012cdc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8012ce0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8012ce4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8012ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ce8:	3301      	adds	r3, #1
 8012cea:	62bb      	str	r3, [r7, #40]	; 0x28
 8012cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cee:	2b0f      	cmp	r3, #15
 8012cf0:	d9e4      	bls.n	8012cbc <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	881b      	ldrh	r3, [r3, #0]
 8012cf6:	2b00      	cmp	r3, #0
 8012cf8:	d1d8      	bne.n	8012cac <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8012cfa:	69fb      	ldr	r3, [r7, #28]
 8012cfc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8012cfe:	2307      	movs	r3, #7
 8012d00:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	b2db      	uxtb	r3, r3
 8012d06:	f003 030f 	and.w	r3, r3, #15
 8012d0a:	b2db      	uxtb	r3, r3
 8012d0c:	3330      	adds	r3, #48	; 0x30
 8012d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8012d12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d16:	2b39      	cmp	r3, #57	; 0x39
 8012d18:	d904      	bls.n	8012d24 <gen_numname+0x9c>
 8012d1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d1e:	3307      	adds	r3, #7
 8012d20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8012d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d26:	1e5a      	subs	r2, r3, #1
 8012d28:	62ba      	str	r2, [r7, #40]	; 0x28
 8012d2a:	3330      	adds	r3, #48	; 0x30
 8012d2c:	443b      	add	r3, r7
 8012d2e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012d32:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	091b      	lsrs	r3, r3, #4
 8012d3a:	603b      	str	r3, [r7, #0]
	} while (seq);
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d1df      	bne.n	8012d02 <gen_numname+0x7a>
	ns[i] = '~';
 8012d42:	f107 0214 	add.w	r2, r7, #20
 8012d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d48:	4413      	add	r3, r2
 8012d4a:	227e      	movs	r2, #126	; 0x7e
 8012d4c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8012d4e:	2300      	movs	r3, #0
 8012d50:	627b      	str	r3, [r7, #36]	; 0x24
 8012d52:	e002      	b.n	8012d5a <gen_numname+0xd2>
 8012d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d56:	3301      	adds	r3, #1
 8012d58:	627b      	str	r3, [r7, #36]	; 0x24
 8012d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d205      	bcs.n	8012d6e <gen_numname+0xe6>
 8012d62:	68fa      	ldr	r2, [r7, #12]
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d66:	4413      	add	r3, r2
 8012d68:	781b      	ldrb	r3, [r3, #0]
 8012d6a:	2b20      	cmp	r3, #32
 8012d6c:	d1f2      	bne.n	8012d54 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8012d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d70:	2b07      	cmp	r3, #7
 8012d72:	d807      	bhi.n	8012d84 <gen_numname+0xfc>
 8012d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d76:	1c5a      	adds	r2, r3, #1
 8012d78:	62ba      	str	r2, [r7, #40]	; 0x28
 8012d7a:	3330      	adds	r3, #48	; 0x30
 8012d7c:	443b      	add	r3, r7
 8012d7e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8012d82:	e000      	b.n	8012d86 <gen_numname+0xfe>
 8012d84:	2120      	movs	r1, #32
 8012d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d88:	1c5a      	adds	r2, r3, #1
 8012d8a:	627a      	str	r2, [r7, #36]	; 0x24
 8012d8c:	68fa      	ldr	r2, [r7, #12]
 8012d8e:	4413      	add	r3, r2
 8012d90:	460a      	mov	r2, r1
 8012d92:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8012d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d96:	2b07      	cmp	r3, #7
 8012d98:	d9e9      	bls.n	8012d6e <gen_numname+0xe6>
}
 8012d9a:	bf00      	nop
 8012d9c:	bf00      	nop
 8012d9e:	3730      	adds	r7, #48	; 0x30
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8012da4:	b480      	push	{r7}
 8012da6:	b085      	sub	sp, #20
 8012da8:	af00      	add	r7, sp, #0
 8012daa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8012dac:	2300      	movs	r3, #0
 8012dae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8012db0:	230b      	movs	r3, #11
 8012db2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012db4:	7bfb      	ldrb	r3, [r7, #15]
 8012db6:	b2da      	uxtb	r2, r3
 8012db8:	0852      	lsrs	r2, r2, #1
 8012dba:	01db      	lsls	r3, r3, #7
 8012dbc:	4313      	orrs	r3, r2
 8012dbe:	b2da      	uxtb	r2, r3
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	1c59      	adds	r1, r3, #1
 8012dc4:	6079      	str	r1, [r7, #4]
 8012dc6:	781b      	ldrb	r3, [r3, #0]
 8012dc8:	4413      	add	r3, r2
 8012dca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	3b01      	subs	r3, #1
 8012dd0:	60bb      	str	r3, [r7, #8]
 8012dd2:	68bb      	ldr	r3, [r7, #8]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d1ed      	bne.n	8012db4 <sum_sfn+0x10>
	return sum;
 8012dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dda:	4618      	mov	r0, r3
 8012ddc:	3714      	adds	r7, #20
 8012dde:	46bd      	mov	sp, r7
 8012de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de4:	4770      	bx	lr

08012de6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8012de6:	b580      	push	{r7, lr}
 8012de8:	b086      	sub	sp, #24
 8012dea:	af00      	add	r7, sp, #0
 8012dec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8012df4:	2100      	movs	r1, #0
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f7ff fc88 	bl	801270c <dir_sdi>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8012e00:	7dfb      	ldrb	r3, [r7, #23]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d001      	beq.n	8012e0a <dir_find+0x24>
 8012e06:	7dfb      	ldrb	r3, [r7, #23]
 8012e08:	e0a9      	b.n	8012f5e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012e0a:	23ff      	movs	r3, #255	; 0xff
 8012e0c:	753b      	strb	r3, [r7, #20]
 8012e0e:	7d3b      	ldrb	r3, [r7, #20]
 8012e10:	757b      	strb	r3, [r7, #21]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	f04f 32ff 	mov.w	r2, #4294967295
 8012e18:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	69db      	ldr	r3, [r3, #28]
 8012e1e:	4619      	mov	r1, r3
 8012e20:	6938      	ldr	r0, [r7, #16]
 8012e22:	f7ff f891 	bl	8011f48 <move_window>
 8012e26:	4603      	mov	r3, r0
 8012e28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8012e2a:	7dfb      	ldrb	r3, [r7, #23]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	f040 8090 	bne.w	8012f52 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	6a1b      	ldr	r3, [r3, #32]
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012e3a:	7dbb      	ldrb	r3, [r7, #22]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d102      	bne.n	8012e46 <dir_find+0x60>
 8012e40:	2304      	movs	r3, #4
 8012e42:	75fb      	strb	r3, [r7, #23]
 8012e44:	e08a      	b.n	8012f5c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012e46:	687b      	ldr	r3, [r7, #4]
 8012e48:	6a1b      	ldr	r3, [r3, #32]
 8012e4a:	330b      	adds	r3, #11
 8012e4c:	781b      	ldrb	r3, [r3, #0]
 8012e4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012e52:	73fb      	strb	r3, [r7, #15]
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	7bfa      	ldrb	r2, [r7, #15]
 8012e58:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012e5a:	7dbb      	ldrb	r3, [r7, #22]
 8012e5c:	2be5      	cmp	r3, #229	; 0xe5
 8012e5e:	d007      	beq.n	8012e70 <dir_find+0x8a>
 8012e60:	7bfb      	ldrb	r3, [r7, #15]
 8012e62:	f003 0308 	and.w	r3, r3, #8
 8012e66:	2b00      	cmp	r3, #0
 8012e68:	d009      	beq.n	8012e7e <dir_find+0x98>
 8012e6a:	7bfb      	ldrb	r3, [r7, #15]
 8012e6c:	2b0f      	cmp	r3, #15
 8012e6e:	d006      	beq.n	8012e7e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012e70:	23ff      	movs	r3, #255	; 0xff
 8012e72:	757b      	strb	r3, [r7, #21]
 8012e74:	687b      	ldr	r3, [r7, #4]
 8012e76:	f04f 32ff 	mov.w	r2, #4294967295
 8012e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8012e7c:	e05e      	b.n	8012f3c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012e7e:	7bfb      	ldrb	r3, [r7, #15]
 8012e80:	2b0f      	cmp	r3, #15
 8012e82:	d136      	bne.n	8012ef2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d154      	bne.n	8012f3c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8012e92:	7dbb      	ldrb	r3, [r7, #22]
 8012e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d00d      	beq.n	8012eb8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	6a1b      	ldr	r3, [r3, #32]
 8012ea0:	7b5b      	ldrb	r3, [r3, #13]
 8012ea2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012ea4:	7dbb      	ldrb	r3, [r7, #22]
 8012ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012eaa:	75bb      	strb	r3, [r7, #22]
 8012eac:	7dbb      	ldrb	r3, [r7, #22]
 8012eae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	695a      	ldr	r2, [r3, #20]
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012eb8:	7dba      	ldrb	r2, [r7, #22]
 8012eba:	7d7b      	ldrb	r3, [r7, #21]
 8012ebc:	429a      	cmp	r2, r3
 8012ebe:	d115      	bne.n	8012eec <dir_find+0x106>
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6a1b      	ldr	r3, [r3, #32]
 8012ec4:	330d      	adds	r3, #13
 8012ec6:	781b      	ldrb	r3, [r3, #0]
 8012ec8:	7d3a      	ldrb	r2, [r7, #20]
 8012eca:	429a      	cmp	r2, r3
 8012ecc:	d10e      	bne.n	8012eec <dir_find+0x106>
 8012ece:	693b      	ldr	r3, [r7, #16]
 8012ed0:	691a      	ldr	r2, [r3, #16]
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	6a1b      	ldr	r3, [r3, #32]
 8012ed6:	4619      	mov	r1, r3
 8012ed8:	4610      	mov	r0, r2
 8012eda:	f7ff fdfd 	bl	8012ad8 <cmp_lfn>
 8012ede:	4603      	mov	r3, r0
 8012ee0:	2b00      	cmp	r3, #0
 8012ee2:	d003      	beq.n	8012eec <dir_find+0x106>
 8012ee4:	7d7b      	ldrb	r3, [r7, #21]
 8012ee6:	3b01      	subs	r3, #1
 8012ee8:	b2db      	uxtb	r3, r3
 8012eea:	e000      	b.n	8012eee <dir_find+0x108>
 8012eec:	23ff      	movs	r3, #255	; 0xff
 8012eee:	757b      	strb	r3, [r7, #21]
 8012ef0:	e024      	b.n	8012f3c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012ef2:	7d7b      	ldrb	r3, [r7, #21]
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d109      	bne.n	8012f0c <dir_find+0x126>
 8012ef8:	687b      	ldr	r3, [r7, #4]
 8012efa:	6a1b      	ldr	r3, [r3, #32]
 8012efc:	4618      	mov	r0, r3
 8012efe:	f7ff ff51 	bl	8012da4 <sum_sfn>
 8012f02:	4603      	mov	r3, r0
 8012f04:	461a      	mov	r2, r3
 8012f06:	7d3b      	ldrb	r3, [r7, #20]
 8012f08:	4293      	cmp	r3, r2
 8012f0a:	d024      	beq.n	8012f56 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f12:	f003 0301 	and.w	r3, r3, #1
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d10a      	bne.n	8012f30 <dir_find+0x14a>
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	6a18      	ldr	r0, [r3, #32]
 8012f1e:	687b      	ldr	r3, [r7, #4]
 8012f20:	3324      	adds	r3, #36	; 0x24
 8012f22:	220b      	movs	r2, #11
 8012f24:	4619      	mov	r1, r3
 8012f26:	f7fe fdeb 	bl	8011b00 <mem_cmp>
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d014      	beq.n	8012f5a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8012f30:	23ff      	movs	r3, #255	; 0xff
 8012f32:	757b      	strb	r3, [r7, #21]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	f04f 32ff 	mov.w	r2, #4294967295
 8012f3a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8012f3c:	2100      	movs	r1, #0
 8012f3e:	6878      	ldr	r0, [r7, #4]
 8012f40:	f7ff fc6d 	bl	801281e <dir_next>
 8012f44:	4603      	mov	r3, r0
 8012f46:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8012f48:	7dfb      	ldrb	r3, [r7, #23]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	f43f af65 	beq.w	8012e1a <dir_find+0x34>
 8012f50:	e004      	b.n	8012f5c <dir_find+0x176>
		if (res != FR_OK) break;
 8012f52:	bf00      	nop
 8012f54:	e002      	b.n	8012f5c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012f56:	bf00      	nop
 8012f58:	e000      	b.n	8012f5c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8012f5a:	bf00      	nop

	return res;
 8012f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012f5e:	4618      	mov	r0, r3
 8012f60:	3718      	adds	r7, #24
 8012f62:	46bd      	mov	sp, r7
 8012f64:	bd80      	pop	{r7, pc}
	...

08012f68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b08c      	sub	sp, #48	; 0x30
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8012f7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d001      	beq.n	8012f88 <dir_register+0x20>
 8012f84:	2306      	movs	r3, #6
 8012f86:	e0e0      	b.n	801314a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8012f88:	2300      	movs	r3, #0
 8012f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8012f8c:	e002      	b.n	8012f94 <dir_register+0x2c>
 8012f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f90:	3301      	adds	r3, #1
 8012f92:	627b      	str	r3, [r7, #36]	; 0x24
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	691a      	ldr	r2, [r3, #16]
 8012f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f9a:	005b      	lsls	r3, r3, #1
 8012f9c:	4413      	add	r3, r2
 8012f9e:	881b      	ldrh	r3, [r3, #0]
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d1f4      	bne.n	8012f8e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8012faa:	f107 030c 	add.w	r3, r7, #12
 8012fae:	220c      	movs	r2, #12
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	f7fe fd69 	bl	8011a88 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8012fb6:	7dfb      	ldrb	r3, [r7, #23]
 8012fb8:	f003 0301 	and.w	r3, r3, #1
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d032      	beq.n	8013026 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2240      	movs	r2, #64	; 0x40
 8012fc4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8012fc8:	2301      	movs	r3, #1
 8012fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fcc:	e016      	b.n	8012ffc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8012fd4:	69fb      	ldr	r3, [r7, #28]
 8012fd6:	691a      	ldr	r2, [r3, #16]
 8012fd8:	f107 010c 	add.w	r1, r7, #12
 8012fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012fde:	f7ff fe53 	bl	8012c88 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f7ff feff 	bl	8012de6 <dir_find>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8012fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012ff2:	2b00      	cmp	r3, #0
 8012ff4:	d106      	bne.n	8013004 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8012ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	62bb      	str	r3, [r7, #40]	; 0x28
 8012ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffe:	2b63      	cmp	r3, #99	; 0x63
 8013000:	d9e5      	bls.n	8012fce <dir_register+0x66>
 8013002:	e000      	b.n	8013006 <dir_register+0x9e>
			if (res != FR_OK) break;
 8013004:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013008:	2b64      	cmp	r3, #100	; 0x64
 801300a:	d101      	bne.n	8013010 <dir_register+0xa8>
 801300c:	2307      	movs	r3, #7
 801300e:	e09c      	b.n	801314a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013010:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013014:	2b04      	cmp	r3, #4
 8013016:	d002      	beq.n	801301e <dir_register+0xb6>
 8013018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801301c:	e095      	b.n	801314a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801301e:	7dfa      	ldrb	r2, [r7, #23]
 8013020:	687b      	ldr	r3, [r7, #4]
 8013022:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013026:	7dfb      	ldrb	r3, [r7, #23]
 8013028:	f003 0302 	and.w	r3, r3, #2
 801302c:	2b00      	cmp	r3, #0
 801302e:	d007      	beq.n	8013040 <dir_register+0xd8>
 8013030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013032:	330c      	adds	r3, #12
 8013034:	4a47      	ldr	r2, [pc, #284]	; (8013154 <dir_register+0x1ec>)
 8013036:	fba2 2303 	umull	r2, r3, r2, r3
 801303a:	089b      	lsrs	r3, r3, #2
 801303c:	3301      	adds	r3, #1
 801303e:	e000      	b.n	8013042 <dir_register+0xda>
 8013040:	2301      	movs	r3, #1
 8013042:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013044:	6a39      	ldr	r1, [r7, #32]
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7ff fcbf 	bl	80129ca <dir_alloc>
 801304c:	4603      	mov	r3, r0
 801304e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8013052:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013056:	2b00      	cmp	r3, #0
 8013058:	d148      	bne.n	80130ec <dir_register+0x184>
 801305a:	6a3b      	ldr	r3, [r7, #32]
 801305c:	3b01      	subs	r3, #1
 801305e:	623b      	str	r3, [r7, #32]
 8013060:	6a3b      	ldr	r3, [r7, #32]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d042      	beq.n	80130ec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	695a      	ldr	r2, [r3, #20]
 801306a:	6a3b      	ldr	r3, [r7, #32]
 801306c:	015b      	lsls	r3, r3, #5
 801306e:	1ad3      	subs	r3, r2, r3
 8013070:	4619      	mov	r1, r3
 8013072:	6878      	ldr	r0, [r7, #4]
 8013074:	f7ff fb4a 	bl	801270c <dir_sdi>
 8013078:	4603      	mov	r3, r0
 801307a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 801307e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013082:	2b00      	cmp	r3, #0
 8013084:	d132      	bne.n	80130ec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	3324      	adds	r3, #36	; 0x24
 801308a:	4618      	mov	r0, r3
 801308c:	f7ff fe8a 	bl	8012da4 <sum_sfn>
 8013090:	4603      	mov	r3, r0
 8013092:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013094:	687b      	ldr	r3, [r7, #4]
 8013096:	69db      	ldr	r3, [r3, #28]
 8013098:	4619      	mov	r1, r3
 801309a:	69f8      	ldr	r0, [r7, #28]
 801309c:	f7fe ff54 	bl	8011f48 <move_window>
 80130a0:	4603      	mov	r3, r0
 80130a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80130a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d11d      	bne.n	80130ea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80130ae:	69fb      	ldr	r3, [r7, #28]
 80130b0:	6918      	ldr	r0, [r3, #16]
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	6a19      	ldr	r1, [r3, #32]
 80130b6:	6a3b      	ldr	r3, [r7, #32]
 80130b8:	b2da      	uxtb	r2, r3
 80130ba:	7efb      	ldrb	r3, [r7, #27]
 80130bc:	f7ff fd7c 	bl	8012bb8 <put_lfn>
				fs->wflag = 1;
 80130c0:	69fb      	ldr	r3, [r7, #28]
 80130c2:	2201      	movs	r2, #1
 80130c4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80130c6:	2100      	movs	r1, #0
 80130c8:	6878      	ldr	r0, [r7, #4]
 80130ca:	f7ff fba8 	bl	801281e <dir_next>
 80130ce:	4603      	mov	r3, r0
 80130d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80130d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d107      	bne.n	80130ec <dir_register+0x184>
 80130dc:	6a3b      	ldr	r3, [r7, #32]
 80130de:	3b01      	subs	r3, #1
 80130e0:	623b      	str	r3, [r7, #32]
 80130e2:	6a3b      	ldr	r3, [r7, #32]
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d1d5      	bne.n	8013094 <dir_register+0x12c>
 80130e8:	e000      	b.n	80130ec <dir_register+0x184>
				if (res != FR_OK) break;
 80130ea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80130ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d128      	bne.n	8013146 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	69db      	ldr	r3, [r3, #28]
 80130f8:	4619      	mov	r1, r3
 80130fa:	69f8      	ldr	r0, [r7, #28]
 80130fc:	f7fe ff24 	bl	8011f48 <move_window>
 8013100:	4603      	mov	r3, r0
 8013102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8013106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801310a:	2b00      	cmp	r3, #0
 801310c:	d11b      	bne.n	8013146 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	6a1b      	ldr	r3, [r3, #32]
 8013112:	2220      	movs	r2, #32
 8013114:	2100      	movs	r1, #0
 8013116:	4618      	mov	r0, r3
 8013118:	f7fe fcd7 	bl	8011aca <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	6a18      	ldr	r0, [r3, #32]
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	3324      	adds	r3, #36	; 0x24
 8013124:	220b      	movs	r2, #11
 8013126:	4619      	mov	r1, r3
 8013128:	f7fe fcae 	bl	8011a88 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6a1b      	ldr	r3, [r3, #32]
 8013136:	330c      	adds	r3, #12
 8013138:	f002 0218 	and.w	r2, r2, #24
 801313c:	b2d2      	uxtb	r2, r2
 801313e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	2201      	movs	r2, #1
 8013144:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013146:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801314a:	4618      	mov	r0, r3
 801314c:	3730      	adds	r7, #48	; 0x30
 801314e:	46bd      	mov	sp, r7
 8013150:	bd80      	pop	{r7, pc}
 8013152:	bf00      	nop
 8013154:	4ec4ec4f 	.word	0x4ec4ec4f

08013158 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013158:	b580      	push	{r7, lr}
 801315a:	b08a      	sub	sp, #40	; 0x28
 801315c:	af00      	add	r7, sp, #0
 801315e:	6078      	str	r0, [r7, #4]
 8013160:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8013162:	683b      	ldr	r3, [r7, #0]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	613b      	str	r3, [r7, #16]
 8013168:	687b      	ldr	r3, [r7, #4]
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	691b      	ldr	r3, [r3, #16]
 801316e:	60fb      	str	r3, [r7, #12]
 8013170:	2300      	movs	r3, #0
 8013172:	617b      	str	r3, [r7, #20]
 8013174:	697b      	ldr	r3, [r7, #20]
 8013176:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8013178:	69bb      	ldr	r3, [r7, #24]
 801317a:	1c5a      	adds	r2, r3, #1
 801317c:	61ba      	str	r2, [r7, #24]
 801317e:	693a      	ldr	r2, [r7, #16]
 8013180:	4413      	add	r3, r2
 8013182:	781b      	ldrb	r3, [r3, #0]
 8013184:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8013186:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013188:	2b1f      	cmp	r3, #31
 801318a:	d940      	bls.n	801320e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 801318c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801318e:	2b2f      	cmp	r3, #47	; 0x2f
 8013190:	d006      	beq.n	80131a0 <create_name+0x48>
 8013192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013194:	2b5c      	cmp	r3, #92	; 0x5c
 8013196:	d110      	bne.n	80131ba <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8013198:	e002      	b.n	80131a0 <create_name+0x48>
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	3301      	adds	r3, #1
 801319e:	61bb      	str	r3, [r7, #24]
 80131a0:	693a      	ldr	r2, [r7, #16]
 80131a2:	69bb      	ldr	r3, [r7, #24]
 80131a4:	4413      	add	r3, r2
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	2b2f      	cmp	r3, #47	; 0x2f
 80131aa:	d0f6      	beq.n	801319a <create_name+0x42>
 80131ac:	693a      	ldr	r2, [r7, #16]
 80131ae:	69bb      	ldr	r3, [r7, #24]
 80131b0:	4413      	add	r3, r2
 80131b2:	781b      	ldrb	r3, [r3, #0]
 80131b4:	2b5c      	cmp	r3, #92	; 0x5c
 80131b6:	d0f0      	beq.n	801319a <create_name+0x42>
			break;
 80131b8:	e02a      	b.n	8013210 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80131ba:	697b      	ldr	r3, [r7, #20]
 80131bc:	2bfe      	cmp	r3, #254	; 0xfe
 80131be:	d901      	bls.n	80131c4 <create_name+0x6c>
 80131c0:	2306      	movs	r3, #6
 80131c2:	e17d      	b.n	80134c0 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80131c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131c6:	b2db      	uxtb	r3, r3
 80131c8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80131ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131cc:	2101      	movs	r1, #1
 80131ce:	4618      	mov	r0, r3
 80131d0:	f002 f8f6 	bl	80153c0 <ff_convert>
 80131d4:	4603      	mov	r3, r0
 80131d6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80131d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d101      	bne.n	80131e2 <create_name+0x8a>
 80131de:	2306      	movs	r3, #6
 80131e0:	e16e      	b.n	80134c0 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80131e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131e4:	2b7f      	cmp	r3, #127	; 0x7f
 80131e6:	d809      	bhi.n	80131fc <create_name+0xa4>
 80131e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80131ea:	4619      	mov	r1, r3
 80131ec:	488d      	ldr	r0, [pc, #564]	; (8013424 <create_name+0x2cc>)
 80131ee:	f7fe fcae 	bl	8011b4e <chk_chr>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d001      	beq.n	80131fc <create_name+0xa4>
 80131f8:	2306      	movs	r3, #6
 80131fa:	e161      	b.n	80134c0 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	1c5a      	adds	r2, r3, #1
 8013200:	617a      	str	r2, [r7, #20]
 8013202:	005b      	lsls	r3, r3, #1
 8013204:	68fa      	ldr	r2, [r7, #12]
 8013206:	4413      	add	r3, r2
 8013208:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801320a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 801320c:	e7b4      	b.n	8013178 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 801320e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013210:	693a      	ldr	r2, [r7, #16]
 8013212:	69bb      	ldr	r3, [r7, #24]
 8013214:	441a      	add	r2, r3
 8013216:	683b      	ldr	r3, [r7, #0]
 8013218:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801321a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801321c:	2b1f      	cmp	r3, #31
 801321e:	d801      	bhi.n	8013224 <create_name+0xcc>
 8013220:	2304      	movs	r3, #4
 8013222:	e000      	b.n	8013226 <create_name+0xce>
 8013224:	2300      	movs	r3, #0
 8013226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801322a:	e011      	b.n	8013250 <create_name+0xf8>
		w = lfn[di - 1];
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8013232:	3b01      	subs	r3, #1
 8013234:	005b      	lsls	r3, r3, #1
 8013236:	68fa      	ldr	r2, [r7, #12]
 8013238:	4413      	add	r3, r2
 801323a:	881b      	ldrh	r3, [r3, #0]
 801323c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 801323e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013240:	2b20      	cmp	r3, #32
 8013242:	d002      	beq.n	801324a <create_name+0xf2>
 8013244:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013246:	2b2e      	cmp	r3, #46	; 0x2e
 8013248:	d106      	bne.n	8013258 <create_name+0x100>
		di--;
 801324a:	697b      	ldr	r3, [r7, #20]
 801324c:	3b01      	subs	r3, #1
 801324e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d1ea      	bne.n	801322c <create_name+0xd4>
 8013256:	e000      	b.n	801325a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013258:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	005b      	lsls	r3, r3, #1
 801325e:	68fa      	ldr	r2, [r7, #12]
 8013260:	4413      	add	r3, r2
 8013262:	2200      	movs	r2, #0
 8013264:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8013266:	697b      	ldr	r3, [r7, #20]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d101      	bne.n	8013270 <create_name+0x118>
 801326c:	2306      	movs	r3, #6
 801326e:	e127      	b.n	80134c0 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	3324      	adds	r3, #36	; 0x24
 8013274:	220b      	movs	r2, #11
 8013276:	2120      	movs	r1, #32
 8013278:	4618      	mov	r0, r3
 801327a:	f7fe fc26 	bl	8011aca <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801327e:	2300      	movs	r3, #0
 8013280:	61bb      	str	r3, [r7, #24]
 8013282:	e002      	b.n	801328a <create_name+0x132>
 8013284:	69bb      	ldr	r3, [r7, #24]
 8013286:	3301      	adds	r3, #1
 8013288:	61bb      	str	r3, [r7, #24]
 801328a:	69bb      	ldr	r3, [r7, #24]
 801328c:	005b      	lsls	r3, r3, #1
 801328e:	68fa      	ldr	r2, [r7, #12]
 8013290:	4413      	add	r3, r2
 8013292:	881b      	ldrh	r3, [r3, #0]
 8013294:	2b20      	cmp	r3, #32
 8013296:	d0f5      	beq.n	8013284 <create_name+0x12c>
 8013298:	69bb      	ldr	r3, [r7, #24]
 801329a:	005b      	lsls	r3, r3, #1
 801329c:	68fa      	ldr	r2, [r7, #12]
 801329e:	4413      	add	r3, r2
 80132a0:	881b      	ldrh	r3, [r3, #0]
 80132a2:	2b2e      	cmp	r3, #46	; 0x2e
 80132a4:	d0ee      	beq.n	8013284 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80132a6:	69bb      	ldr	r3, [r7, #24]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d009      	beq.n	80132c0 <create_name+0x168>
 80132ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80132b0:	f043 0303 	orr.w	r3, r3, #3
 80132b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80132b8:	e002      	b.n	80132c0 <create_name+0x168>
 80132ba:	697b      	ldr	r3, [r7, #20]
 80132bc:	3b01      	subs	r3, #1
 80132be:	617b      	str	r3, [r7, #20]
 80132c0:	697b      	ldr	r3, [r7, #20]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d009      	beq.n	80132da <create_name+0x182>
 80132c6:	697b      	ldr	r3, [r7, #20]
 80132c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80132cc:	3b01      	subs	r3, #1
 80132ce:	005b      	lsls	r3, r3, #1
 80132d0:	68fa      	ldr	r2, [r7, #12]
 80132d2:	4413      	add	r3, r2
 80132d4:	881b      	ldrh	r3, [r3, #0]
 80132d6:	2b2e      	cmp	r3, #46	; 0x2e
 80132d8:	d1ef      	bne.n	80132ba <create_name+0x162>

	i = b = 0; ni = 8;
 80132da:	2300      	movs	r3, #0
 80132dc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80132e0:	2300      	movs	r3, #0
 80132e2:	623b      	str	r3, [r7, #32]
 80132e4:	2308      	movs	r3, #8
 80132e6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	1c5a      	adds	r2, r3, #1
 80132ec:	61ba      	str	r2, [r7, #24]
 80132ee:	005b      	lsls	r3, r3, #1
 80132f0:	68fa      	ldr	r2, [r7, #12]
 80132f2:	4413      	add	r3, r2
 80132f4:	881b      	ldrh	r3, [r3, #0]
 80132f6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80132f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	f000 8090 	beq.w	8013420 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013300:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013302:	2b20      	cmp	r3, #32
 8013304:	d006      	beq.n	8013314 <create_name+0x1bc>
 8013306:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013308:	2b2e      	cmp	r3, #46	; 0x2e
 801330a:	d10a      	bne.n	8013322 <create_name+0x1ca>
 801330c:	69ba      	ldr	r2, [r7, #24]
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	429a      	cmp	r2, r3
 8013312:	d006      	beq.n	8013322 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8013314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013318:	f043 0303 	orr.w	r3, r3, #3
 801331c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013320:	e07d      	b.n	801341e <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8013322:	6a3a      	ldr	r2, [r7, #32]
 8013324:	69fb      	ldr	r3, [r7, #28]
 8013326:	429a      	cmp	r2, r3
 8013328:	d203      	bcs.n	8013332 <create_name+0x1da>
 801332a:	69ba      	ldr	r2, [r7, #24]
 801332c:	697b      	ldr	r3, [r7, #20]
 801332e:	429a      	cmp	r2, r3
 8013330:	d123      	bne.n	801337a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8013332:	69fb      	ldr	r3, [r7, #28]
 8013334:	2b0b      	cmp	r3, #11
 8013336:	d106      	bne.n	8013346 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801333c:	f043 0303 	orr.w	r3, r3, #3
 8013340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013344:	e075      	b.n	8013432 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8013346:	69ba      	ldr	r2, [r7, #24]
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	429a      	cmp	r2, r3
 801334c:	d005      	beq.n	801335a <create_name+0x202>
 801334e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013352:	f043 0303 	orr.w	r3, r3, #3
 8013356:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801335a:	69ba      	ldr	r2, [r7, #24]
 801335c:	697b      	ldr	r3, [r7, #20]
 801335e:	429a      	cmp	r2, r3
 8013360:	d866      	bhi.n	8013430 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8013362:	697b      	ldr	r3, [r7, #20]
 8013364:	61bb      	str	r3, [r7, #24]
 8013366:	2308      	movs	r3, #8
 8013368:	623b      	str	r3, [r7, #32]
 801336a:	230b      	movs	r3, #11
 801336c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801336e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013372:	009b      	lsls	r3, r3, #2
 8013374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013378:	e051      	b.n	801341e <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801337a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801337c:	2b7f      	cmp	r3, #127	; 0x7f
 801337e:	d914      	bls.n	80133aa <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8013380:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013382:	2100      	movs	r1, #0
 8013384:	4618      	mov	r0, r3
 8013386:	f002 f81b 	bl	80153c0 <ff_convert>
 801338a:	4603      	mov	r3, r0
 801338c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801338e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013390:	2b00      	cmp	r3, #0
 8013392:	d004      	beq.n	801339e <create_name+0x246>
 8013394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013396:	3b80      	subs	r3, #128	; 0x80
 8013398:	4a23      	ldr	r2, [pc, #140]	; (8013428 <create_name+0x2d0>)
 801339a:	5cd3      	ldrb	r3, [r2, r3]
 801339c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801339e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133a2:	f043 0302 	orr.w	r3, r3, #2
 80133a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80133aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133ac:	2b00      	cmp	r3, #0
 80133ae:	d007      	beq.n	80133c0 <create_name+0x268>
 80133b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133b2:	4619      	mov	r1, r3
 80133b4:	481d      	ldr	r0, [pc, #116]	; (801342c <create_name+0x2d4>)
 80133b6:	f7fe fbca 	bl	8011b4e <chk_chr>
 80133ba:	4603      	mov	r3, r0
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d008      	beq.n	80133d2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80133c0:	235f      	movs	r3, #95	; 0x5f
 80133c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80133c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80133c8:	f043 0303 	orr.w	r3, r3, #3
 80133cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80133d0:	e01b      	b.n	801340a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80133d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133d4:	2b40      	cmp	r3, #64	; 0x40
 80133d6:	d909      	bls.n	80133ec <create_name+0x294>
 80133d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133da:	2b5a      	cmp	r3, #90	; 0x5a
 80133dc:	d806      	bhi.n	80133ec <create_name+0x294>
					b |= 2;
 80133de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80133e2:	f043 0302 	orr.w	r3, r3, #2
 80133e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80133ea:	e00e      	b.n	801340a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80133ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133ee:	2b60      	cmp	r3, #96	; 0x60
 80133f0:	d90b      	bls.n	801340a <create_name+0x2b2>
 80133f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133f4:	2b7a      	cmp	r3, #122	; 0x7a
 80133f6:	d808      	bhi.n	801340a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80133f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80133fc:	f043 0301 	orr.w	r3, r3, #1
 8013400:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013406:	3b20      	subs	r3, #32
 8013408:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801340a:	6a3b      	ldr	r3, [r7, #32]
 801340c:	1c5a      	adds	r2, r3, #1
 801340e:	623a      	str	r2, [r7, #32]
 8013410:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013412:	b2d1      	uxtb	r1, r2
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	4413      	add	r3, r2
 8013418:	460a      	mov	r2, r1
 801341a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 801341e:	e763      	b.n	80132e8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013420:	bf00      	nop
 8013422:	e006      	b.n	8013432 <create_name+0x2da>
 8013424:	080206d8 	.word	0x080206d8
 8013428:	08028c54 	.word	0x08028c54
 801342c:	080206e4 	.word	0x080206e4
			if (si > di) break;			/* No extension */
 8013430:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013438:	2be5      	cmp	r3, #229	; 0xe5
 801343a:	d103      	bne.n	8013444 <create_name+0x2ec>
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	2205      	movs	r2, #5
 8013440:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8013444:	69fb      	ldr	r3, [r7, #28]
 8013446:	2b08      	cmp	r3, #8
 8013448:	d104      	bne.n	8013454 <create_name+0x2fc>
 801344a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801344e:	009b      	lsls	r3, r3, #2
 8013450:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013454:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013458:	f003 030c 	and.w	r3, r3, #12
 801345c:	2b0c      	cmp	r3, #12
 801345e:	d005      	beq.n	801346c <create_name+0x314>
 8013460:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013464:	f003 0303 	and.w	r3, r3, #3
 8013468:	2b03      	cmp	r3, #3
 801346a:	d105      	bne.n	8013478 <create_name+0x320>
 801346c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013470:	f043 0302 	orr.w	r3, r3, #2
 8013474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013478:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801347c:	f003 0302 	and.w	r3, r3, #2
 8013480:	2b00      	cmp	r3, #0
 8013482:	d117      	bne.n	80134b4 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013484:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013488:	f003 0303 	and.w	r3, r3, #3
 801348c:	2b01      	cmp	r3, #1
 801348e:	d105      	bne.n	801349c <create_name+0x344>
 8013490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013494:	f043 0310 	orr.w	r3, r3, #16
 8013498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 801349c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80134a0:	f003 030c 	and.w	r3, r3, #12
 80134a4:	2b04      	cmp	r3, #4
 80134a6:	d105      	bne.n	80134b4 <create_name+0x35c>
 80134a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80134ac:	f043 0308 	orr.w	r3, r3, #8
 80134b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80134ba:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80134be:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3728      	adds	r7, #40	; 0x28
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}

080134c8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b086      	sub	sp, #24
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80134d6:	693b      	ldr	r3, [r7, #16]
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80134dc:	e002      	b.n	80134e4 <follow_path+0x1c>
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	3301      	adds	r3, #1
 80134e2:	603b      	str	r3, [r7, #0]
 80134e4:	683b      	ldr	r3, [r7, #0]
 80134e6:	781b      	ldrb	r3, [r3, #0]
 80134e8:	2b2f      	cmp	r3, #47	; 0x2f
 80134ea:	d0f8      	beq.n	80134de <follow_path+0x16>
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	781b      	ldrb	r3, [r3, #0]
 80134f0:	2b5c      	cmp	r3, #92	; 0x5c
 80134f2:	d0f4      	beq.n	80134de <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80134f4:	693b      	ldr	r3, [r7, #16]
 80134f6:	2200      	movs	r2, #0
 80134f8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80134fa:	683b      	ldr	r3, [r7, #0]
 80134fc:	781b      	ldrb	r3, [r3, #0]
 80134fe:	2b1f      	cmp	r3, #31
 8013500:	d80a      	bhi.n	8013518 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	2280      	movs	r2, #128	; 0x80
 8013506:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801350a:	2100      	movs	r1, #0
 801350c:	6878      	ldr	r0, [r7, #4]
 801350e:	f7ff f8fd 	bl	801270c <dir_sdi>
 8013512:	4603      	mov	r3, r0
 8013514:	75fb      	strb	r3, [r7, #23]
 8013516:	e048      	b.n	80135aa <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013518:	463b      	mov	r3, r7
 801351a:	4619      	mov	r1, r3
 801351c:	6878      	ldr	r0, [r7, #4]
 801351e:	f7ff fe1b 	bl	8013158 <create_name>
 8013522:	4603      	mov	r3, r0
 8013524:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013526:	7dfb      	ldrb	r3, [r7, #23]
 8013528:	2b00      	cmp	r3, #0
 801352a:	d139      	bne.n	80135a0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f7ff fc5a 	bl	8012de6 <dir_find>
 8013532:	4603      	mov	r3, r0
 8013534:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801353c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801353e:	7dfb      	ldrb	r3, [r7, #23]
 8013540:	2b00      	cmp	r3, #0
 8013542:	d00a      	beq.n	801355a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013544:	7dfb      	ldrb	r3, [r7, #23]
 8013546:	2b04      	cmp	r3, #4
 8013548:	d12c      	bne.n	80135a4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801354a:	7afb      	ldrb	r3, [r7, #11]
 801354c:	f003 0304 	and.w	r3, r3, #4
 8013550:	2b00      	cmp	r3, #0
 8013552:	d127      	bne.n	80135a4 <follow_path+0xdc>
 8013554:	2305      	movs	r3, #5
 8013556:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013558:	e024      	b.n	80135a4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801355a:	7afb      	ldrb	r3, [r7, #11]
 801355c:	f003 0304 	and.w	r3, r3, #4
 8013560:	2b00      	cmp	r3, #0
 8013562:	d121      	bne.n	80135a8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013564:	693b      	ldr	r3, [r7, #16]
 8013566:	799b      	ldrb	r3, [r3, #6]
 8013568:	f003 0310 	and.w	r3, r3, #16
 801356c:	2b00      	cmp	r3, #0
 801356e:	d102      	bne.n	8013576 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013570:	2305      	movs	r3, #5
 8013572:	75fb      	strb	r3, [r7, #23]
 8013574:	e019      	b.n	80135aa <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801357c:	687b      	ldr	r3, [r7, #4]
 801357e:	695b      	ldr	r3, [r3, #20]
 8013580:	68fa      	ldr	r2, [r7, #12]
 8013582:	8992      	ldrh	r2, [r2, #12]
 8013584:	fbb3 f0f2 	udiv	r0, r3, r2
 8013588:	fb00 f202 	mul.w	r2, r0, r2
 801358c:	1a9b      	subs	r3, r3, r2
 801358e:	440b      	add	r3, r1
 8013590:	4619      	mov	r1, r3
 8013592:	68f8      	ldr	r0, [r7, #12]
 8013594:	f7ff fa60 	bl	8012a58 <ld_clust>
 8013598:	4602      	mov	r2, r0
 801359a:	693b      	ldr	r3, [r7, #16]
 801359c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801359e:	e7bb      	b.n	8013518 <follow_path+0x50>
			if (res != FR_OK) break;
 80135a0:	bf00      	nop
 80135a2:	e002      	b.n	80135aa <follow_path+0xe2>
				break;
 80135a4:	bf00      	nop
 80135a6:	e000      	b.n	80135aa <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80135a8:	bf00      	nop
			}
		}
	}

	return res;
 80135aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80135ac:	4618      	mov	r0, r3
 80135ae:	3718      	adds	r7, #24
 80135b0:	46bd      	mov	sp, r7
 80135b2:	bd80      	pop	{r7, pc}

080135b4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80135b4:	b480      	push	{r7}
 80135b6:	b087      	sub	sp, #28
 80135b8:	af00      	add	r7, sp, #0
 80135ba:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80135bc:	f04f 33ff 	mov.w	r3, #4294967295
 80135c0:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d031      	beq.n	801362e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	617b      	str	r3, [r7, #20]
 80135d0:	e002      	b.n	80135d8 <get_ldnumber+0x24>
 80135d2:	697b      	ldr	r3, [r7, #20]
 80135d4:	3301      	adds	r3, #1
 80135d6:	617b      	str	r3, [r7, #20]
 80135d8:	697b      	ldr	r3, [r7, #20]
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	2b1f      	cmp	r3, #31
 80135de:	d903      	bls.n	80135e8 <get_ldnumber+0x34>
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	781b      	ldrb	r3, [r3, #0]
 80135e4:	2b3a      	cmp	r3, #58	; 0x3a
 80135e6:	d1f4      	bne.n	80135d2 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80135e8:	697b      	ldr	r3, [r7, #20]
 80135ea:	781b      	ldrb	r3, [r3, #0]
 80135ec:	2b3a      	cmp	r3, #58	; 0x3a
 80135ee:	d11c      	bne.n	801362a <get_ldnumber+0x76>
			tp = *path;
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80135f6:	68fb      	ldr	r3, [r7, #12]
 80135f8:	1c5a      	adds	r2, r3, #1
 80135fa:	60fa      	str	r2, [r7, #12]
 80135fc:	781b      	ldrb	r3, [r3, #0]
 80135fe:	3b30      	subs	r3, #48	; 0x30
 8013600:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	2b09      	cmp	r3, #9
 8013606:	d80e      	bhi.n	8013626 <get_ldnumber+0x72>
 8013608:	68fa      	ldr	r2, [r7, #12]
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	429a      	cmp	r2, r3
 801360e:	d10a      	bne.n	8013626 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d107      	bne.n	8013626 <get_ldnumber+0x72>
					vol = (int)i;
 8013616:	68bb      	ldr	r3, [r7, #8]
 8013618:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801361a:	697b      	ldr	r3, [r7, #20]
 801361c:	3301      	adds	r3, #1
 801361e:	617b      	str	r3, [r7, #20]
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	697a      	ldr	r2, [r7, #20]
 8013624:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013626:	693b      	ldr	r3, [r7, #16]
 8013628:	e002      	b.n	8013630 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801362a:	2300      	movs	r3, #0
 801362c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801362e:	693b      	ldr	r3, [r7, #16]
}
 8013630:	4618      	mov	r0, r3
 8013632:	371c      	adds	r7, #28
 8013634:	46bd      	mov	sp, r7
 8013636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363a:	4770      	bx	lr

0801363c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b082      	sub	sp, #8
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2200      	movs	r2, #0
 801364a:	70da      	strb	r2, [r3, #3]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	f04f 32ff 	mov.w	r2, #4294967295
 8013652:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013654:	6839      	ldr	r1, [r7, #0]
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7fe fc76 	bl	8011f48 <move_window>
 801365c:	4603      	mov	r3, r0
 801365e:	2b00      	cmp	r3, #0
 8013660:	d001      	beq.n	8013666 <check_fs+0x2a>
 8013662:	2304      	movs	r3, #4
 8013664:	e038      	b.n	80136d8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	333c      	adds	r3, #60	; 0x3c
 801366a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801366e:	4618      	mov	r0, r3
 8013670:	f7fe f988 	bl	8011984 <ld_word>
 8013674:	4603      	mov	r3, r0
 8013676:	461a      	mov	r2, r3
 8013678:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801367c:	429a      	cmp	r2, r3
 801367e:	d001      	beq.n	8013684 <check_fs+0x48>
 8013680:	2303      	movs	r3, #3
 8013682:	e029      	b.n	80136d8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801368a:	2be9      	cmp	r3, #233	; 0xe9
 801368c:	d009      	beq.n	80136a2 <check_fs+0x66>
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8013694:	2beb      	cmp	r3, #235	; 0xeb
 8013696:	d11e      	bne.n	80136d6 <check_fs+0x9a>
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801369e:	2b90      	cmp	r3, #144	; 0x90
 80136a0:	d119      	bne.n	80136d6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	333c      	adds	r3, #60	; 0x3c
 80136a6:	3336      	adds	r3, #54	; 0x36
 80136a8:	4618      	mov	r0, r3
 80136aa:	f7fe f983 	bl	80119b4 <ld_dword>
 80136ae:	4603      	mov	r3, r0
 80136b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80136b4:	4a0a      	ldr	r2, [pc, #40]	; (80136e0 <check_fs+0xa4>)
 80136b6:	4293      	cmp	r3, r2
 80136b8:	d101      	bne.n	80136be <check_fs+0x82>
 80136ba:	2300      	movs	r3, #0
 80136bc:	e00c      	b.n	80136d8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	333c      	adds	r3, #60	; 0x3c
 80136c2:	3352      	adds	r3, #82	; 0x52
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7fe f975 	bl	80119b4 <ld_dword>
 80136ca:	4603      	mov	r3, r0
 80136cc:	4a05      	ldr	r2, [pc, #20]	; (80136e4 <check_fs+0xa8>)
 80136ce:	4293      	cmp	r3, r2
 80136d0:	d101      	bne.n	80136d6 <check_fs+0x9a>
 80136d2:	2300      	movs	r3, #0
 80136d4:	e000      	b.n	80136d8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80136d6:	2302      	movs	r3, #2
}
 80136d8:	4618      	mov	r0, r3
 80136da:	3708      	adds	r7, #8
 80136dc:	46bd      	mov	sp, r7
 80136de:	bd80      	pop	{r7, pc}
 80136e0:	00544146 	.word	0x00544146
 80136e4:	33544146 	.word	0x33544146

080136e8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80136e8:	b580      	push	{r7, lr}
 80136ea:	b096      	sub	sp, #88	; 0x58
 80136ec:	af00      	add	r7, sp, #0
 80136ee:	60f8      	str	r0, [r7, #12]
 80136f0:	60b9      	str	r1, [r7, #8]
 80136f2:	4613      	mov	r3, r2
 80136f4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	2200      	movs	r2, #0
 80136fa:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80136fc:	68f8      	ldr	r0, [r7, #12]
 80136fe:	f7ff ff59 	bl	80135b4 <get_ldnumber>
 8013702:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013706:	2b00      	cmp	r3, #0
 8013708:	da01      	bge.n	801370e <find_volume+0x26>
 801370a:	230b      	movs	r3, #11
 801370c:	e26a      	b.n	8013be4 <find_volume+0x4fc>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801370e:	4aa3      	ldr	r2, [pc, #652]	; (801399c <find_volume+0x2b4>)
 8013710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013716:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801371a:	2b00      	cmp	r3, #0
 801371c:	d101      	bne.n	8013722 <find_volume+0x3a>
 801371e:	230c      	movs	r3, #12
 8013720:	e260      	b.n	8013be4 <find_volume+0x4fc>

	ENTER_FF(fs);						/* Lock the volume */
 8013722:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013724:	f7fe fa2e 	bl	8011b84 <lock_fs>
 8013728:	4603      	mov	r3, r0
 801372a:	2b00      	cmp	r3, #0
 801372c:	d101      	bne.n	8013732 <find_volume+0x4a>
 801372e:	230f      	movs	r3, #15
 8013730:	e258      	b.n	8013be4 <find_volume+0x4fc>
	*rfs = fs;							/* Return pointer to the file system object */
 8013732:	68bb      	ldr	r3, [r7, #8]
 8013734:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013736:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013738:	79fb      	ldrb	r3, [r7, #7]
 801373a:	f023 0301 	bic.w	r3, r3, #1
 801373e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013742:	781b      	ldrb	r3, [r3, #0]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d01a      	beq.n	801377e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8013748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801374a:	785b      	ldrb	r3, [r3, #1]
 801374c:	4618      	mov	r0, r3
 801374e:	f7fe f87b 	bl	8011848 <disk_status>
 8013752:	4603      	mov	r3, r0
 8013754:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013758:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801375c:	f003 0301 	and.w	r3, r3, #1
 8013760:	2b00      	cmp	r3, #0
 8013762:	d10c      	bne.n	801377e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013764:	79fb      	ldrb	r3, [r7, #7]
 8013766:	2b00      	cmp	r3, #0
 8013768:	d007      	beq.n	801377a <find_volume+0x92>
 801376a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801376e:	f003 0304 	and.w	r3, r3, #4
 8013772:	2b00      	cmp	r3, #0
 8013774:	d001      	beq.n	801377a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8013776:	230a      	movs	r3, #10
 8013778:	e234      	b.n	8013be4 <find_volume+0x4fc>
			}
			return FR_OK;				/* The file system object is valid */
 801377a:	2300      	movs	r3, #0
 801377c:	e232      	b.n	8013be4 <find_volume+0x4fc>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801377e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013780:	2200      	movs	r2, #0
 8013782:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013786:	b2da      	uxtb	r2, r3
 8013788:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801378c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801378e:	785b      	ldrb	r3, [r3, #1]
 8013790:	4618      	mov	r0, r3
 8013792:	f7fe f873 	bl	801187c <disk_initialize>
 8013796:	4603      	mov	r3, r0
 8013798:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801379c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137a0:	f003 0301 	and.w	r3, r3, #1
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d001      	beq.n	80137ac <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80137a8:	2303      	movs	r3, #3
 80137aa:	e21b      	b.n	8013be4 <find_volume+0x4fc>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80137ac:	79fb      	ldrb	r3, [r7, #7]
 80137ae:	2b00      	cmp	r3, #0
 80137b0:	d007      	beq.n	80137c2 <find_volume+0xda>
 80137b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80137b6:	f003 0304 	and.w	r3, r3, #4
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d001      	beq.n	80137c2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80137be:	230a      	movs	r3, #10
 80137c0:	e210      	b.n	8013be4 <find_volume+0x4fc>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80137c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c4:	7858      	ldrb	r0, [r3, #1]
 80137c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137c8:	330c      	adds	r3, #12
 80137ca:	461a      	mov	r2, r3
 80137cc:	2102      	movs	r1, #2
 80137ce:	f7fe f8bb 	bl	8011948 <disk_ioctl>
 80137d2:	4603      	mov	r3, r0
 80137d4:	2b00      	cmp	r3, #0
 80137d6:	d001      	beq.n	80137dc <find_volume+0xf4>
 80137d8:	2301      	movs	r3, #1
 80137da:	e203      	b.n	8013be4 <find_volume+0x4fc>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80137dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137de:	899b      	ldrh	r3, [r3, #12]
 80137e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80137e4:	d80d      	bhi.n	8013802 <find_volume+0x11a>
 80137e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137e8:	899b      	ldrh	r3, [r3, #12]
 80137ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80137ee:	d308      	bcc.n	8013802 <find_volume+0x11a>
 80137f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f2:	899b      	ldrh	r3, [r3, #12]
 80137f4:	461a      	mov	r2, r3
 80137f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137f8:	899b      	ldrh	r3, [r3, #12]
 80137fa:	3b01      	subs	r3, #1
 80137fc:	4013      	ands	r3, r2
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d001      	beq.n	8013806 <find_volume+0x11e>
 8013802:	2301      	movs	r3, #1
 8013804:	e1ee      	b.n	8013be4 <find_volume+0x4fc>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013806:	2300      	movs	r3, #0
 8013808:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801380a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801380c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801380e:	f7ff ff15 	bl	801363c <check_fs>
 8013812:	4603      	mov	r3, r0
 8013814:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013818:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801381c:	2b02      	cmp	r3, #2
 801381e:	d149      	bne.n	80138b4 <find_volume+0x1cc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013820:	2300      	movs	r3, #0
 8013822:	643b      	str	r3, [r7, #64]	; 0x40
 8013824:	e01e      	b.n	8013864 <find_volume+0x17c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013828:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 801382c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801382e:	011b      	lsls	r3, r3, #4
 8013830:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013834:	4413      	add	r3, r2
 8013836:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383a:	3304      	adds	r3, #4
 801383c:	781b      	ldrb	r3, [r3, #0]
 801383e:	2b00      	cmp	r3, #0
 8013840:	d006      	beq.n	8013850 <find_volume+0x168>
 8013842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013844:	3308      	adds	r3, #8
 8013846:	4618      	mov	r0, r3
 8013848:	f7fe f8b4 	bl	80119b4 <ld_dword>
 801384c:	4602      	mov	r2, r0
 801384e:	e000      	b.n	8013852 <find_volume+0x16a>
 8013850:	2200      	movs	r2, #0
 8013852:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	3358      	adds	r3, #88	; 0x58
 8013858:	443b      	add	r3, r7
 801385a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801385e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013860:	3301      	adds	r3, #1
 8013862:	643b      	str	r3, [r7, #64]	; 0x40
 8013864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013866:	2b03      	cmp	r3, #3
 8013868:	d9dd      	bls.n	8013826 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801386a:	2300      	movs	r3, #0
 801386c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801386e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013870:	2b00      	cmp	r3, #0
 8013872:	d002      	beq.n	801387a <find_volume+0x192>
 8013874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013876:	3b01      	subs	r3, #1
 8013878:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801387a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801387c:	009b      	lsls	r3, r3, #2
 801387e:	3358      	adds	r3, #88	; 0x58
 8013880:	443b      	add	r3, r7
 8013882:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013886:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801388a:	2b00      	cmp	r3, #0
 801388c:	d005      	beq.n	801389a <find_volume+0x1b2>
 801388e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013890:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013892:	f7ff fed3 	bl	801363c <check_fs>
 8013896:	4603      	mov	r3, r0
 8013898:	e000      	b.n	801389c <find_volume+0x1b4>
 801389a:	2303      	movs	r3, #3
 801389c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80138a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138a4:	2b01      	cmp	r3, #1
 80138a6:	d905      	bls.n	80138b4 <find_volume+0x1cc>
 80138a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138aa:	3301      	adds	r3, #1
 80138ac:	643b      	str	r3, [r7, #64]	; 0x40
 80138ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80138b0:	2b03      	cmp	r3, #3
 80138b2:	d9e2      	bls.n	801387a <find_volume+0x192>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80138b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138b8:	2b04      	cmp	r3, #4
 80138ba:	d101      	bne.n	80138c0 <find_volume+0x1d8>
 80138bc:	2301      	movs	r3, #1
 80138be:	e191      	b.n	8013be4 <find_volume+0x4fc>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80138c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80138c4:	2b01      	cmp	r3, #1
 80138c6:	d901      	bls.n	80138cc <find_volume+0x1e4>
 80138c8:	230d      	movs	r3, #13
 80138ca:	e18b      	b.n	8013be4 <find_volume+0x4fc>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80138cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ce:	333c      	adds	r3, #60	; 0x3c
 80138d0:	330b      	adds	r3, #11
 80138d2:	4618      	mov	r0, r3
 80138d4:	f7fe f856 	bl	8011984 <ld_word>
 80138d8:	4603      	mov	r3, r0
 80138da:	461a      	mov	r2, r3
 80138dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138de:	899b      	ldrh	r3, [r3, #12]
 80138e0:	429a      	cmp	r2, r3
 80138e2:	d001      	beq.n	80138e8 <find_volume+0x200>
 80138e4:	230d      	movs	r3, #13
 80138e6:	e17d      	b.n	8013be4 <find_volume+0x4fc>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80138e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138ea:	333c      	adds	r3, #60	; 0x3c
 80138ec:	3316      	adds	r3, #22
 80138ee:	4618      	mov	r0, r3
 80138f0:	f7fe f848 	bl	8011984 <ld_word>
 80138f4:	4603      	mov	r3, r0
 80138f6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80138f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80138fa:	2b00      	cmp	r3, #0
 80138fc:	d106      	bne.n	801390c <find_volume+0x224>
 80138fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013900:	333c      	adds	r3, #60	; 0x3c
 8013902:	3324      	adds	r3, #36	; 0x24
 8013904:	4618      	mov	r0, r3
 8013906:	f7fe f855 	bl	80119b4 <ld_dword>
 801390a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 801390c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801390e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013910:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013914:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8013918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801391a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801391c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801391e:	789b      	ldrb	r3, [r3, #2]
 8013920:	2b01      	cmp	r3, #1
 8013922:	d005      	beq.n	8013930 <find_volume+0x248>
 8013924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013926:	789b      	ldrb	r3, [r3, #2]
 8013928:	2b02      	cmp	r3, #2
 801392a:	d001      	beq.n	8013930 <find_volume+0x248>
 801392c:	230d      	movs	r3, #13
 801392e:	e159      	b.n	8013be4 <find_volume+0x4fc>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013932:	789b      	ldrb	r3, [r3, #2]
 8013934:	461a      	mov	r2, r3
 8013936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013938:	fb02 f303 	mul.w	r3, r2, r3
 801393c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801393e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013940:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8013944:	b29a      	uxth	r2, r3
 8013946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013948:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801394c:	895b      	ldrh	r3, [r3, #10]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d008      	beq.n	8013964 <find_volume+0x27c>
 8013952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013954:	895b      	ldrh	r3, [r3, #10]
 8013956:	461a      	mov	r2, r3
 8013958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395a:	895b      	ldrh	r3, [r3, #10]
 801395c:	3b01      	subs	r3, #1
 801395e:	4013      	ands	r3, r2
 8013960:	2b00      	cmp	r3, #0
 8013962:	d001      	beq.n	8013968 <find_volume+0x280>
 8013964:	230d      	movs	r3, #13
 8013966:	e13d      	b.n	8013be4 <find_volume+0x4fc>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801396a:	333c      	adds	r3, #60	; 0x3c
 801396c:	3311      	adds	r3, #17
 801396e:	4618      	mov	r0, r3
 8013970:	f7fe f808 	bl	8011984 <ld_word>
 8013974:	4603      	mov	r3, r0
 8013976:	461a      	mov	r2, r3
 8013978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801397c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397e:	891b      	ldrh	r3, [r3, #8]
 8013980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013982:	8992      	ldrh	r2, [r2, #12]
 8013984:	0952      	lsrs	r2, r2, #5
 8013986:	b292      	uxth	r2, r2
 8013988:	fbb3 f1f2 	udiv	r1, r3, r2
 801398c:	fb01 f202 	mul.w	r2, r1, r2
 8013990:	1a9b      	subs	r3, r3, r2
 8013992:	b29b      	uxth	r3, r3
 8013994:	2b00      	cmp	r3, #0
 8013996:	d003      	beq.n	80139a0 <find_volume+0x2b8>
 8013998:	230d      	movs	r3, #13
 801399a:	e123      	b.n	8013be4 <find_volume+0x4fc>
 801399c:	20019160 	.word	0x20019160

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80139a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139a2:	333c      	adds	r3, #60	; 0x3c
 80139a4:	3313      	adds	r3, #19
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7fd ffec 	bl	8011984 <ld_word>
 80139ac:	4603      	mov	r3, r0
 80139ae:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80139b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d106      	bne.n	80139c4 <find_volume+0x2dc>
 80139b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b8:	333c      	adds	r3, #60	; 0x3c
 80139ba:	3320      	adds	r3, #32
 80139bc:	4618      	mov	r0, r3
 80139be:	f7fd fff9 	bl	80119b4 <ld_dword>
 80139c2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80139c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139c6:	333c      	adds	r3, #60	; 0x3c
 80139c8:	330e      	adds	r3, #14
 80139ca:	4618      	mov	r0, r3
 80139cc:	f7fd ffda 	bl	8011984 <ld_word>
 80139d0:	4603      	mov	r3, r0
 80139d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80139d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d101      	bne.n	80139de <find_volume+0x2f6>
 80139da:	230d      	movs	r3, #13
 80139dc:	e102      	b.n	8013be4 <find_volume+0x4fc>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80139de:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80139e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139e2:	4413      	add	r3, r2
 80139e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139e6:	8911      	ldrh	r1, [r2, #8]
 80139e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80139ea:	8992      	ldrh	r2, [r2, #12]
 80139ec:	0952      	lsrs	r2, r2, #5
 80139ee:	b292      	uxth	r2, r2
 80139f0:	fbb1 f2f2 	udiv	r2, r1, r2
 80139f4:	b292      	uxth	r2, r2
 80139f6:	4413      	add	r3, r2
 80139f8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80139fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80139fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139fe:	429a      	cmp	r2, r3
 8013a00:	d201      	bcs.n	8013a06 <find_volume+0x31e>
 8013a02:	230d      	movs	r3, #13
 8013a04:	e0ee      	b.n	8013be4 <find_volume+0x4fc>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8013a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a0a:	1ad3      	subs	r3, r2, r3
 8013a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013a0e:	8952      	ldrh	r2, [r2, #10]
 8013a10:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a14:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8013a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d101      	bne.n	8013a20 <find_volume+0x338>
 8013a1c:	230d      	movs	r3, #13
 8013a1e:	e0e1      	b.n	8013be4 <find_volume+0x4fc>
		fmt = FS_FAT32;
 8013a20:	2303      	movs	r3, #3
 8013a22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8013a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a28:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8013a2c:	4293      	cmp	r3, r2
 8013a2e:	d802      	bhi.n	8013a36 <find_volume+0x34e>
 8013a30:	2302      	movs	r3, #2
 8013a32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8013a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a38:	f640 72f5 	movw	r2, #4085	; 0xff5
 8013a3c:	4293      	cmp	r3, r2
 8013a3e:	d802      	bhi.n	8013a46 <find_volume+0x35e>
 8013a40:	2301      	movs	r3, #1
 8013a42:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8013a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a48:	1c9a      	adds	r2, r3, #2
 8013a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8013a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a52:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8013a54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013a56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a58:	441a      	add	r2, r3
 8013a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8013a5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013a60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a62:	441a      	add	r2, r3
 8013a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a66:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8013a68:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013a6c:	2b03      	cmp	r3, #3
 8013a6e:	d11e      	bne.n	8013aae <find_volume+0x3c6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8013a70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a72:	333c      	adds	r3, #60	; 0x3c
 8013a74:	332a      	adds	r3, #42	; 0x2a
 8013a76:	4618      	mov	r0, r3
 8013a78:	f7fd ff84 	bl	8011984 <ld_word>
 8013a7c:	4603      	mov	r3, r0
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d001      	beq.n	8013a86 <find_volume+0x39e>
 8013a82:	230d      	movs	r3, #13
 8013a84:	e0ae      	b.n	8013be4 <find_volume+0x4fc>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8013a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a88:	891b      	ldrh	r3, [r3, #8]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d001      	beq.n	8013a92 <find_volume+0x3aa>
 8013a8e:	230d      	movs	r3, #13
 8013a90:	e0a8      	b.n	8013be4 <find_volume+0x4fc>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8013a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a94:	333c      	adds	r3, #60	; 0x3c
 8013a96:	332c      	adds	r3, #44	; 0x2c
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7fd ff8b 	bl	80119b4 <ld_dword>
 8013a9e:	4602      	mov	r2, r0
 8013aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa2:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8013aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013aa6:	6a1b      	ldr	r3, [r3, #32]
 8013aa8:	009b      	lsls	r3, r3, #2
 8013aaa:	647b      	str	r3, [r7, #68]	; 0x44
 8013aac:	e01f      	b.n	8013aee <find_volume+0x406>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8013aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab0:	891b      	ldrh	r3, [r3, #8]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d101      	bne.n	8013aba <find_volume+0x3d2>
 8013ab6:	230d      	movs	r3, #13
 8013ab8:	e094      	b.n	8013be4 <find_volume+0x4fc>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8013aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013abc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013abe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ac0:	441a      	add	r2, r3
 8013ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac4:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8013ac6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013aca:	2b02      	cmp	r3, #2
 8013acc:	d103      	bne.n	8013ad6 <find_volume+0x3ee>
 8013ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad0:	6a1b      	ldr	r3, [r3, #32]
 8013ad2:	005b      	lsls	r3, r3, #1
 8013ad4:	e00a      	b.n	8013aec <find_volume+0x404>
 8013ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ad8:	6a1a      	ldr	r2, [r3, #32]
 8013ada:	4613      	mov	r3, r2
 8013adc:	005b      	lsls	r3, r3, #1
 8013ade:	4413      	add	r3, r2
 8013ae0:	085a      	lsrs	r2, r3, #1
 8013ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae4:	6a1b      	ldr	r3, [r3, #32]
 8013ae6:	f003 0301 	and.w	r3, r3, #1
 8013aea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8013aec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8013aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af4:	899b      	ldrh	r3, [r3, #12]
 8013af6:	4619      	mov	r1, r3
 8013af8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013afa:	440b      	add	r3, r1
 8013afc:	3b01      	subs	r3, #1
 8013afe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b00:	8989      	ldrh	r1, [r1, #12]
 8013b02:	fbb3 f3f1 	udiv	r3, r3, r1
 8013b06:	429a      	cmp	r2, r3
 8013b08:	d201      	bcs.n	8013b0e <find_volume+0x426>
 8013b0a:	230d      	movs	r3, #13
 8013b0c:	e06a      	b.n	8013be4 <find_volume+0x4fc>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b10:	f04f 32ff 	mov.w	r2, #4294967295
 8013b14:	61da      	str	r2, [r3, #28]
 8013b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b18:	69da      	ldr	r2, [r3, #28]
 8013b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b1c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8013b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b20:	2280      	movs	r2, #128	; 0x80
 8013b22:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8013b24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013b28:	2b03      	cmp	r3, #3
 8013b2a:	d149      	bne.n	8013bc0 <find_volume+0x4d8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8013b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b2e:	333c      	adds	r3, #60	; 0x3c
 8013b30:	3330      	adds	r3, #48	; 0x30
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7fd ff26 	bl	8011984 <ld_word>
 8013b38:	4603      	mov	r3, r0
 8013b3a:	2b01      	cmp	r3, #1
 8013b3c:	d140      	bne.n	8013bc0 <find_volume+0x4d8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8013b3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013b40:	3301      	adds	r3, #1
 8013b42:	4619      	mov	r1, r3
 8013b44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b46:	f7fe f9ff 	bl	8011f48 <move_window>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	2b00      	cmp	r3, #0
 8013b4e:	d137      	bne.n	8013bc0 <find_volume+0x4d8>
		{
			fs->fsi_flag = 0;
 8013b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b52:	2200      	movs	r2, #0
 8013b54:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8013b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b58:	333c      	adds	r3, #60	; 0x3c
 8013b5a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013b5e:	4618      	mov	r0, r3
 8013b60:	f7fd ff10 	bl	8011984 <ld_word>
 8013b64:	4603      	mov	r3, r0
 8013b66:	461a      	mov	r2, r3
 8013b68:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013b6c:	429a      	cmp	r2, r3
 8013b6e:	d127      	bne.n	8013bc0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8013b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b72:	333c      	adds	r3, #60	; 0x3c
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7fd ff1d 	bl	80119b4 <ld_dword>
 8013b7a:	4603      	mov	r3, r0
 8013b7c:	4a1b      	ldr	r2, [pc, #108]	; (8013bec <find_volume+0x504>)
 8013b7e:	4293      	cmp	r3, r2
 8013b80:	d11e      	bne.n	8013bc0 <find_volume+0x4d8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8013b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b84:	333c      	adds	r3, #60	; 0x3c
 8013b86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f7fd ff12 	bl	80119b4 <ld_dword>
 8013b90:	4603      	mov	r3, r0
 8013b92:	4a17      	ldr	r2, [pc, #92]	; (8013bf0 <find_volume+0x508>)
 8013b94:	4293      	cmp	r3, r2
 8013b96:	d113      	bne.n	8013bc0 <find_volume+0x4d8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8013b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b9a:	333c      	adds	r3, #60	; 0x3c
 8013b9c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f7fd ff07 	bl	80119b4 <ld_dword>
 8013ba6:	4602      	mov	r2, r0
 8013ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013baa:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8013bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bae:	333c      	adds	r3, #60	; 0x3c
 8013bb0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f7fd fefd 	bl	80119b4 <ld_dword>
 8013bba:	4602      	mov	r2, r0
 8013bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bbe:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8013bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8013bc6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8013bc8:	4b0a      	ldr	r3, [pc, #40]	; (8013bf4 <find_volume+0x50c>)
 8013bca:	881b      	ldrh	r3, [r3, #0]
 8013bcc:	3301      	adds	r3, #1
 8013bce:	b29a      	uxth	r2, r3
 8013bd0:	4b08      	ldr	r3, [pc, #32]	; (8013bf4 <find_volume+0x50c>)
 8013bd2:	801a      	strh	r2, [r3, #0]
 8013bd4:	4b07      	ldr	r3, [pc, #28]	; (8013bf4 <find_volume+0x50c>)
 8013bd6:	881a      	ldrh	r2, [r3, #0]
 8013bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bda:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8013bdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013bde:	f7fe f94b 	bl	8011e78 <clear_lock>
#endif
	return FR_OK;
 8013be2:	2300      	movs	r3, #0
}
 8013be4:	4618      	mov	r0, r3
 8013be6:	3758      	adds	r7, #88	; 0x58
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}
 8013bec:	41615252 	.word	0x41615252
 8013bf0:	61417272 	.word	0x61417272
 8013bf4:	20019164 	.word	0x20019164

08013bf8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8013bf8:	b580      	push	{r7, lr}
 8013bfa:	b084      	sub	sp, #16
 8013bfc:	af00      	add	r7, sp, #0
 8013bfe:	6078      	str	r0, [r7, #4]
 8013c00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8013c02:	2309      	movs	r3, #9
 8013c04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d02e      	beq.n	8013c6a <validate+0x72>
 8013c0c:	687b      	ldr	r3, [r7, #4]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d02a      	beq.n	8013c6a <validate+0x72>
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	681b      	ldr	r3, [r3, #0]
 8013c18:	781b      	ldrb	r3, [r3, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d025      	beq.n	8013c6a <validate+0x72>
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	889a      	ldrh	r2, [r3, #4]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	681b      	ldr	r3, [r3, #0]
 8013c26:	88db      	ldrh	r3, [r3, #6]
 8013c28:	429a      	cmp	r2, r3
 8013c2a:	d11e      	bne.n	8013c6a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	4618      	mov	r0, r3
 8013c32:	f7fd ffa7 	bl	8011b84 <lock_fs>
 8013c36:	4603      	mov	r3, r0
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d014      	beq.n	8013c66 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	785b      	ldrb	r3, [r3, #1]
 8013c42:	4618      	mov	r0, r3
 8013c44:	f7fd fe00 	bl	8011848 <disk_status>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	f003 0301 	and.w	r3, r3, #1
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d102      	bne.n	8013c58 <validate+0x60>
				res = FR_OK;
 8013c52:	2300      	movs	r3, #0
 8013c54:	73fb      	strb	r3, [r7, #15]
 8013c56:	e008      	b.n	8013c6a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8013c58:	687b      	ldr	r3, [r7, #4]
 8013c5a:	681b      	ldr	r3, [r3, #0]
 8013c5c:	2100      	movs	r1, #0
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7fd ffa6 	bl	8011bb0 <unlock_fs>
 8013c64:	e001      	b.n	8013c6a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8013c66:	230f      	movs	r3, #15
 8013c68:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013c6a:	7bfb      	ldrb	r3, [r7, #15]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d102      	bne.n	8013c76 <validate+0x7e>
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	e000      	b.n	8013c78 <validate+0x80>
 8013c76:	2300      	movs	r3, #0
 8013c78:	683a      	ldr	r2, [r7, #0]
 8013c7a:	6013      	str	r3, [r2, #0]
	return res;
 8013c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c7e:	4618      	mov	r0, r3
 8013c80:	3710      	adds	r7, #16
 8013c82:	46bd      	mov	sp, r7
 8013c84:	bd80      	pop	{r7, pc}
	...

08013c88 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b088      	sub	sp, #32
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	4613      	mov	r3, r2
 8013c94:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8013c96:	68bb      	ldr	r3, [r7, #8]
 8013c98:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8013c9a:	f107 0310 	add.w	r3, r7, #16
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f7ff fc88 	bl	80135b4 <get_ldnumber>
 8013ca4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	da01      	bge.n	8013cb0 <f_mount+0x28>
 8013cac:	230b      	movs	r3, #11
 8013cae:	e048      	b.n	8013d42 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013cb0:	4a26      	ldr	r2, [pc, #152]	; (8013d4c <f_mount+0xc4>)
 8013cb2:	69fb      	ldr	r3, [r7, #28]
 8013cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013cb8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8013cba:	69bb      	ldr	r3, [r7, #24]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d00f      	beq.n	8013ce0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8013cc0:	69b8      	ldr	r0, [r7, #24]
 8013cc2:	f7fe f8d9 	bl	8011e78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8013cc6:	69bb      	ldr	r3, [r7, #24]
 8013cc8:	695b      	ldr	r3, [r3, #20]
 8013cca:	4618      	mov	r0, r3
 8013ccc:	f001 fc59 	bl	8015582 <ff_del_syncobj>
 8013cd0:	4603      	mov	r3, r0
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d101      	bne.n	8013cda <f_mount+0x52>
 8013cd6:	2302      	movs	r3, #2
 8013cd8:	e033      	b.n	8013d42 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8013cda:	69bb      	ldr	r3, [r7, #24]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8013ce0:	68fb      	ldr	r3, [r7, #12]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d00f      	beq.n	8013d06 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8013ce6:	68fb      	ldr	r3, [r7, #12]
 8013ce8:	2200      	movs	r2, #0
 8013cea:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8013cec:	69fb      	ldr	r3, [r7, #28]
 8013cee:	b2da      	uxtb	r2, r3
 8013cf0:	68fb      	ldr	r3, [r7, #12]
 8013cf2:	3314      	adds	r3, #20
 8013cf4:	4619      	mov	r1, r3
 8013cf6:	4610      	mov	r0, r2
 8013cf8:	f001 fc28 	bl	801554c <ff_cre_syncobj>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	2b00      	cmp	r3, #0
 8013d00:	d101      	bne.n	8013d06 <f_mount+0x7e>
 8013d02:	2302      	movs	r3, #2
 8013d04:	e01d      	b.n	8013d42 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8013d06:	68fa      	ldr	r2, [r7, #12]
 8013d08:	4910      	ldr	r1, [pc, #64]	; (8013d4c <f_mount+0xc4>)
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013d10:	68fb      	ldr	r3, [r7, #12]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d002      	beq.n	8013d1c <f_mount+0x94>
 8013d16:	79fb      	ldrb	r3, [r7, #7]
 8013d18:	2b01      	cmp	r3, #1
 8013d1a:	d001      	beq.n	8013d20 <f_mount+0x98>
 8013d1c:	2300      	movs	r3, #0
 8013d1e:	e010      	b.n	8013d42 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013d20:	f107 010c 	add.w	r1, r7, #12
 8013d24:	f107 0308 	add.w	r3, r7, #8
 8013d28:	2200      	movs	r2, #0
 8013d2a:	4618      	mov	r0, r3
 8013d2c:	f7ff fcdc 	bl	80136e8 <find_volume>
 8013d30:	4603      	mov	r3, r0
 8013d32:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8013d34:	68fb      	ldr	r3, [r7, #12]
 8013d36:	7dfa      	ldrb	r2, [r7, #23]
 8013d38:	4611      	mov	r1, r2
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	f7fd ff38 	bl	8011bb0 <unlock_fs>
 8013d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d42:	4618      	mov	r0, r3
 8013d44:	3720      	adds	r7, #32
 8013d46:	46bd      	mov	sp, r7
 8013d48:	bd80      	pop	{r7, pc}
 8013d4a:	bf00      	nop
 8013d4c:	20019160 	.word	0x20019160

08013d50 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013d50:	b580      	push	{r7, lr}
 8013d52:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8013d56:	af00      	add	r7, sp, #0
 8013d58:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d5c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013d60:	6018      	str	r0, [r3, #0]
 8013d62:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d66:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8013d6a:	6019      	str	r1, [r3, #0]
 8013d6c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d70:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013d74:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013d76:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d7a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d101      	bne.n	8013d88 <f_open+0x38>
 8013d84:	2309      	movs	r3, #9
 8013d86:	e2ae      	b.n	80142e6 <f_open+0x596>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013d88:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013d8c:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013d90:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013d94:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8013d98:	7812      	ldrb	r2, [r2, #0]
 8013d9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8013d9e:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8013da0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013da4:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013da8:	781a      	ldrb	r2, [r3, #0]
 8013daa:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8013dae:	f107 0308 	add.w	r3, r7, #8
 8013db2:	4618      	mov	r0, r3
 8013db4:	f7ff fc98 	bl	80136e8 <find_volume>
 8013db8:	4603      	mov	r3, r0
 8013dba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8013dbe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	f040 827a 	bne.w	80142bc <f_open+0x56c>
		dj.obj.fs = fs;
 8013dc8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013dcc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8013dd0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013dd4:	f107 0214 	add.w	r2, r7, #20
 8013dd8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013dda:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013dde:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8013de2:	681a      	ldr	r2, [r3, #0]
 8013de4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013de8:	4611      	mov	r1, r2
 8013dea:	4618      	mov	r0, r3
 8013dec:	f7ff fb6c 	bl	80134c8 <follow_path>
 8013df0:	4603      	mov	r3, r0
 8013df2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8013df6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d11e      	bne.n	8013e3c <f_open+0xec>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013dfe:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8013e02:	b25b      	sxtb	r3, r3
 8013e04:	2b00      	cmp	r3, #0
 8013e06:	da03      	bge.n	8013e10 <f_open+0xc0>
				res = FR_INVALID_NAME;
 8013e08:	2306      	movs	r3, #6
 8013e0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013e0e:	e015      	b.n	8013e3c <f_open+0xec>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013e10:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013e14:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013e18:	781b      	ldrb	r3, [r3, #0]
 8013e1a:	f023 0301 	bic.w	r3, r3, #1
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	bf14      	ite	ne
 8013e22:	2301      	movne	r3, #1
 8013e24:	2300      	moveq	r3, #0
 8013e26:	b2db      	uxtb	r3, r3
 8013e28:	461a      	mov	r2, r3
 8013e2a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013e2e:	4611      	mov	r1, r2
 8013e30:	4618      	mov	r0, r3
 8013e32:	f7fd fed9 	bl	8011be8 <chk_lock>
 8013e36:	4603      	mov	r3, r0
 8013e38:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013e3c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013e40:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	f003 031c 	and.w	r3, r3, #28
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	f000 80a7 	beq.w	8013f9e <f_open+0x24e>
			if (res != FR_OK) {					/* No file, create new */
 8013e50:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d01f      	beq.n	8013e98 <f_open+0x148>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013e58:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013e5c:	2b04      	cmp	r3, #4
 8013e5e:	d10e      	bne.n	8013e7e <f_open+0x12e>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013e60:	f7fd ff1e 	bl	8011ca0 <enq_lock>
 8013e64:	4603      	mov	r3, r0
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d006      	beq.n	8013e78 <f_open+0x128>
 8013e6a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f7ff f87a 	bl	8012f68 <dir_register>
 8013e74:	4603      	mov	r3, r0
 8013e76:	e000      	b.n	8013e7a <f_open+0x12a>
 8013e78:	2312      	movs	r3, #18
 8013e7a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013e7e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013e82:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013e86:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8013e8a:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8013e8e:	7812      	ldrb	r2, [r2, #0]
 8013e90:	f042 0208 	orr.w	r2, r2, #8
 8013e94:	701a      	strb	r2, [r3, #0]
 8013e96:	e015      	b.n	8013ec4 <f_open+0x174>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013e98:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013e9c:	f003 0311 	and.w	r3, r3, #17
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d003      	beq.n	8013eac <f_open+0x15c>
					res = FR_DENIED;
 8013ea4:	2307      	movs	r3, #7
 8013ea6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013eaa:	e00b      	b.n	8013ec4 <f_open+0x174>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013eac:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013eb0:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013eb4:	781b      	ldrb	r3, [r3, #0]
 8013eb6:	f003 0304 	and.w	r3, r3, #4
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d002      	beq.n	8013ec4 <f_open+0x174>
 8013ebe:	2308      	movs	r3, #8
 8013ec0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013ec4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	f040 8088 	bne.w	8013fde <f_open+0x28e>
 8013ece:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013ed2:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	f003 0308 	and.w	r3, r3, #8
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d07e      	beq.n	8013fde <f_open+0x28e>
				dw = GET_FATTIME();
 8013ee0:	f7f9 f8ee 	bl	800d0c0 <get_fattime>
 8013ee4:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013ee8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013eec:	330e      	adds	r3, #14
 8013eee:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	f7fd fd9c 	bl	8011a30 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013ef8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013efc:	3316      	adds	r3, #22
 8013efe:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013f02:	4618      	mov	r0, r3
 8013f04:	f7fd fd94 	bl	8011a30 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013f08:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013f0c:	330b      	adds	r3, #11
 8013f0e:	2220      	movs	r2, #32
 8013f10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013f12:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f16:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8013f1a:	4611      	mov	r1, r2
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7fe fd9b 	bl	8012a58 <ld_clust>
 8013f22:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8013f26:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f2a:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8013f2e:	2200      	movs	r2, #0
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7fe fdb0 	bl	8012a96 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8013f36:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8013f3a:	331c      	adds	r3, #28
 8013f3c:	2100      	movs	r1, #0
 8013f3e:	4618      	mov	r0, r3
 8013f40:	f7fd fd76 	bl	8011a30 <st_dword>
					fs->wflag = 1;
 8013f44:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f48:	2201      	movs	r2, #1
 8013f4a:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8013f4c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d044      	beq.n	8013fde <f_open+0x28e>
						dw = fs->winsect;
 8013f54:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f5a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8013f5e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8013f62:	2200      	movs	r2, #0
 8013f64:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8013f68:	4618      	mov	r0, r3
 8013f6a:	f7fe fa9a 	bl	80124a2 <remove_chain>
 8013f6e:	4603      	mov	r3, r0
 8013f70:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8013f74:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d130      	bne.n	8013fde <f_open+0x28e>
							res = move_window(fs, dw);
 8013f7c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f80:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fd ffdf 	bl	8011f48 <move_window>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013f90:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8013f94:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8013f98:	3a01      	subs	r2, #1
 8013f9a:	619a      	str	r2, [r3, #24]
 8013f9c:	e01f      	b.n	8013fde <f_open+0x28e>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8013f9e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d11b      	bne.n	8013fde <f_open+0x28e>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013fa6:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013faa:	f003 0310 	and.w	r3, r3, #16
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d003      	beq.n	8013fba <f_open+0x26a>
					res = FR_NO_FILE;
 8013fb2:	2304      	movs	r3, #4
 8013fb4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8013fb8:	e011      	b.n	8013fde <f_open+0x28e>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013fba:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013fbe:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013fc2:	781b      	ldrb	r3, [r3, #0]
 8013fc4:	f003 0302 	and.w	r3, r3, #2
 8013fc8:	2b00      	cmp	r3, #0
 8013fca:	d008      	beq.n	8013fde <f_open+0x28e>
 8013fcc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8013fd0:	f003 0301 	and.w	r3, r3, #1
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d002      	beq.n	8013fde <f_open+0x28e>
						res = FR_DENIED;
 8013fd8:	2307      	movs	r3, #7
 8013fda:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8013fde:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d14a      	bne.n	801407c <f_open+0x32c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013fe6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013fea:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8013fee:	781b      	ldrb	r3, [r3, #0]
 8013ff0:	f003 0308 	and.w	r3, r3, #8
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d00b      	beq.n	8014010 <f_open+0x2c0>
				mode |= FA_MODIFIED;
 8013ff8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8013ffc:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 8014000:	f507 721a 	add.w	r2, r7, #616	; 0x268
 8014004:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8014008:	7812      	ldrb	r2, [r2, #0]
 801400a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801400e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014010:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014014:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014016:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801401a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014022:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8014026:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801402a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801402e:	681b      	ldr	r3, [r3, #0]
 8014030:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014032:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014036:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801403a:	781b      	ldrb	r3, [r3, #0]
 801403c:	f023 0301 	bic.w	r3, r3, #1
 8014040:	2b00      	cmp	r3, #0
 8014042:	bf14      	ite	ne
 8014044:	2301      	movne	r3, #1
 8014046:	2300      	moveq	r3, #0
 8014048:	b2db      	uxtb	r3, r3
 801404a:	461a      	mov	r2, r3
 801404c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8014050:	4611      	mov	r1, r2
 8014052:	4618      	mov	r0, r3
 8014054:	f7fd fe46 	bl	8011ce4 <inc_lock>
 8014058:	4602      	mov	r2, r0
 801405a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801405e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014062:	681b      	ldr	r3, [r3, #0]
 8014064:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014066:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801406a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801406e:	681b      	ldr	r3, [r3, #0]
 8014070:	691b      	ldr	r3, [r3, #16]
 8014072:	2b00      	cmp	r3, #0
 8014074:	d102      	bne.n	801407c <f_open+0x32c>
 8014076:	2302      	movs	r3, #2
 8014078:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 801407c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014080:	2b00      	cmp	r3, #0
 8014082:	f040 811b 	bne.w	80142bc <f_open+0x56c>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014086:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801408a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801408e:	4611      	mov	r1, r2
 8014090:	4618      	mov	r0, r3
 8014092:	f7fe fce1 	bl	8012a58 <ld_clust>
 8014096:	4602      	mov	r2, r0
 8014098:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801409c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140a0:	681b      	ldr	r3, [r3, #0]
 80140a2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80140a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80140a8:	331c      	adds	r3, #28
 80140aa:	4618      	mov	r0, r3
 80140ac:	f7fd fc82 	bl	80119b4 <ld_dword>
 80140b0:	4602      	mov	r2, r0
 80140b2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140b6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140ba:	681b      	ldr	r3, [r3, #0]
 80140bc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80140be:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140c2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	2200      	movs	r2, #0
 80140ca:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80140cc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80140d0:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140d4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80140dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80140e0:	88da      	ldrh	r2, [r3, #6]
 80140e2:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80140ee:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80140f2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80140f6:	681b      	ldr	r3, [r3, #0]
 80140f8:	f507 721a 	add.w	r2, r7, #616	; 0x268
 80140fc:	f2a2 2261 	subw	r2, r2, #609	; 0x261
 8014100:	7812      	ldrb	r2, [r2, #0]
 8014102:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014104:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014108:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801410c:	681b      	ldr	r3, [r3, #0]
 801410e:	2200      	movs	r2, #0
 8014110:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014112:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014116:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801411a:	681b      	ldr	r3, [r3, #0]
 801411c:	2200      	movs	r2, #0
 801411e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014120:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014124:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	2200      	movs	r2, #0
 801412c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801412e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014132:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014136:	681b      	ldr	r3, [r3, #0]
 8014138:	3330      	adds	r3, #48	; 0x30
 801413a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801413e:	2100      	movs	r1, #0
 8014140:	4618      	mov	r0, r3
 8014142:	f7fd fcc2 	bl	8011aca <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014146:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801414a:	f2a3 2361 	subw	r3, r3, #609	; 0x261
 801414e:	781b      	ldrb	r3, [r3, #0]
 8014150:	f003 0320 	and.w	r3, r3, #32
 8014154:	2b00      	cmp	r3, #0
 8014156:	f000 80b1 	beq.w	80142bc <f_open+0x56c>
 801415a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801415e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014162:	681b      	ldr	r3, [r3, #0]
 8014164:	68db      	ldr	r3, [r3, #12]
 8014166:	2b00      	cmp	r3, #0
 8014168:	f000 80a8 	beq.w	80142bc <f_open+0x56c>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801416c:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014170:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	68da      	ldr	r2, [r3, #12]
 8014178:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801417c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014184:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014188:	895b      	ldrh	r3, [r3, #10]
 801418a:	461a      	mov	r2, r3
 801418c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014190:	899b      	ldrh	r3, [r3, #12]
 8014192:	fb02 f303 	mul.w	r3, r2, r3
 8014196:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801419a:	f507 731a 	add.w	r3, r7, #616	; 0x268
 801419e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	689b      	ldr	r3, [r3, #8]
 80141a6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80141aa:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80141ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	68db      	ldr	r3, [r3, #12]
 80141b6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80141ba:	e021      	b.n	8014200 <f_open+0x4b0>
					clst = get_fat(&fp->obj, clst);
 80141bc:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80141c0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80141ca:	4618      	mov	r0, r3
 80141cc:	f7fd ff79 	bl	80120c2 <get_fat>
 80141d0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80141d4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80141d8:	2b01      	cmp	r3, #1
 80141da:	d802      	bhi.n	80141e2 <f_open+0x492>
 80141dc:	2302      	movs	r3, #2
 80141de:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80141e2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80141e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80141ea:	d102      	bne.n	80141f2 <f_open+0x4a2>
 80141ec:	2301      	movs	r3, #1
 80141ee:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80141f2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80141f6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80141fa:	1ad3      	subs	r3, r2, r3
 80141fc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8014200:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014204:	2b00      	cmp	r3, #0
 8014206:	d105      	bne.n	8014214 <f_open+0x4c4>
 8014208:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801420c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8014210:	429a      	cmp	r2, r3
 8014212:	d8d3      	bhi.n	80141bc <f_open+0x46c>
				}
				fp->clust = clst;
 8014214:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014218:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8014222:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014224:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8014228:	2b00      	cmp	r3, #0
 801422a:	d147      	bne.n	80142bc <f_open+0x56c>
 801422c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014230:	899b      	ldrh	r3, [r3, #12]
 8014232:	461a      	mov	r2, r3
 8014234:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8014238:	fbb3 f1f2 	udiv	r1, r3, r2
 801423c:	fb01 f202 	mul.w	r2, r1, r2
 8014240:	1a9b      	subs	r3, r3, r2
 8014242:	2b00      	cmp	r3, #0
 8014244:	d03a      	beq.n	80142bc <f_open+0x56c>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014246:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801424a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801424e:	4618      	mov	r0, r3
 8014250:	f7fd ff18 	bl	8012084 <clust2sect>
 8014254:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8014258:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801425c:	2b00      	cmp	r3, #0
 801425e:	d103      	bne.n	8014268 <f_open+0x518>
						res = FR_INT_ERR;
 8014260:	2302      	movs	r3, #2
 8014262:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8014266:	e029      	b.n	80142bc <f_open+0x56c>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014268:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801426c:	899b      	ldrh	r3, [r3, #12]
 801426e:	461a      	mov	r2, r3
 8014270:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8014274:	fbb3 f2f2 	udiv	r2, r3, r2
 8014278:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801427c:	441a      	add	r2, r3
 801427e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014282:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801428a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801428e:	7858      	ldrb	r0, [r3, #1]
 8014290:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8014294:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801429e:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80142a2:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80142a6:	681b      	ldr	r3, [r3, #0]
 80142a8:	6a1a      	ldr	r2, [r3, #32]
 80142aa:	2301      	movs	r3, #1
 80142ac:	f7fd fb0c 	bl	80118c8 <disk_read>
 80142b0:	4603      	mov	r3, r0
 80142b2:	2b00      	cmp	r3, #0
 80142b4:	d002      	beq.n	80142bc <f_open+0x56c>
 80142b6:	2301      	movs	r3, #1
 80142b8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80142bc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d006      	beq.n	80142d2 <f_open+0x582>
 80142c4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80142c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	2200      	movs	r2, #0
 80142d0:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80142d2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80142d6:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 80142da:	4611      	mov	r1, r2
 80142dc:	4618      	mov	r0, r3
 80142de:	f7fd fc67 	bl	8011bb0 <unlock_fs>
 80142e2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80142ec:	46bd      	mov	sp, r7
 80142ee:	bd80      	pop	{r7, pc}

080142f0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b08e      	sub	sp, #56	; 0x38
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	60f8      	str	r0, [r7, #12]
 80142f8:	60b9      	str	r1, [r7, #8]
 80142fa:	607a      	str	r2, [r7, #4]
 80142fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8014302:	683b      	ldr	r3, [r7, #0]
 8014304:	2200      	movs	r2, #0
 8014306:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8014308:	68fb      	ldr	r3, [r7, #12]
 801430a:	f107 0214 	add.w	r2, r7, #20
 801430e:	4611      	mov	r1, r2
 8014310:	4618      	mov	r0, r3
 8014312:	f7ff fc71 	bl	8013bf8 <validate>
 8014316:	4603      	mov	r3, r0
 8014318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801431c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014320:	2b00      	cmp	r3, #0
 8014322:	d107      	bne.n	8014334 <f_read+0x44>
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	7d5b      	ldrb	r3, [r3, #21]
 8014328:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801432c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014330:	2b00      	cmp	r3, #0
 8014332:	d009      	beq.n	8014348 <f_read+0x58>
 8014334:	697b      	ldr	r3, [r7, #20]
 8014336:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801433a:	4611      	mov	r1, r2
 801433c:	4618      	mov	r0, r3
 801433e:	f7fd fc37 	bl	8011bb0 <unlock_fs>
 8014342:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014346:	e15d      	b.n	8014604 <f_read+0x314>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	7d1b      	ldrb	r3, [r3, #20]
 801434c:	f003 0301 	and.w	r3, r3, #1
 8014350:	2b00      	cmp	r3, #0
 8014352:	d106      	bne.n	8014362 <f_read+0x72>
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	2107      	movs	r1, #7
 8014358:	4618      	mov	r0, r3
 801435a:	f7fd fc29 	bl	8011bb0 <unlock_fs>
 801435e:	2307      	movs	r3, #7
 8014360:	e150      	b.n	8014604 <f_read+0x314>
	remain = fp->obj.objsize - fp->fptr;
 8014362:	68fb      	ldr	r3, [r7, #12]
 8014364:	68da      	ldr	r2, [r3, #12]
 8014366:	68fb      	ldr	r3, [r7, #12]
 8014368:	699b      	ldr	r3, [r3, #24]
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	6a3b      	ldr	r3, [r7, #32]
 8014372:	429a      	cmp	r2, r3
 8014374:	f240 813c 	bls.w	80145f0 <f_read+0x300>
 8014378:	6a3b      	ldr	r3, [r7, #32]
 801437a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801437c:	e138      	b.n	80145f0 <f_read+0x300>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	699b      	ldr	r3, [r3, #24]
 8014382:	697a      	ldr	r2, [r7, #20]
 8014384:	8992      	ldrh	r2, [r2, #12]
 8014386:	fbb3 f1f2 	udiv	r1, r3, r2
 801438a:	fb01 f202 	mul.w	r2, r1, r2
 801438e:	1a9b      	subs	r3, r3, r2
 8014390:	2b00      	cmp	r3, #0
 8014392:	f040 80f3 	bne.w	801457c <f_read+0x28c>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8014396:	68fb      	ldr	r3, [r7, #12]
 8014398:	699b      	ldr	r3, [r3, #24]
 801439a:	697a      	ldr	r2, [r7, #20]
 801439c:	8992      	ldrh	r2, [r2, #12]
 801439e:	fbb3 f3f2 	udiv	r3, r3, r2
 80143a2:	697a      	ldr	r2, [r7, #20]
 80143a4:	8952      	ldrh	r2, [r2, #10]
 80143a6:	3a01      	subs	r2, #1
 80143a8:	4013      	ands	r3, r2
 80143aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80143ac:	69fb      	ldr	r3, [r7, #28]
 80143ae:	2b00      	cmp	r3, #0
 80143b0:	d139      	bne.n	8014426 <f_read+0x136>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	699b      	ldr	r3, [r3, #24]
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d103      	bne.n	80143c2 <f_read+0xd2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	689b      	ldr	r3, [r3, #8]
 80143be:	633b      	str	r3, [r7, #48]	; 0x30
 80143c0:	e013      	b.n	80143ea <f_read+0xfa>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d007      	beq.n	80143da <f_read+0xea>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	699b      	ldr	r3, [r3, #24]
 80143ce:	4619      	mov	r1, r3
 80143d0:	68f8      	ldr	r0, [r7, #12]
 80143d2:	f7fe f963 	bl	801269c <clmt_clust>
 80143d6:	6338      	str	r0, [r7, #48]	; 0x30
 80143d8:	e007      	b.n	80143ea <f_read+0xfa>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80143da:	68fa      	ldr	r2, [r7, #12]
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	69db      	ldr	r3, [r3, #28]
 80143e0:	4619      	mov	r1, r3
 80143e2:	4610      	mov	r0, r2
 80143e4:	f7fd fe6d 	bl	80120c2 <get_fat>
 80143e8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80143ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ec:	2b01      	cmp	r3, #1
 80143ee:	d809      	bhi.n	8014404 <f_read+0x114>
 80143f0:	68fb      	ldr	r3, [r7, #12]
 80143f2:	2202      	movs	r2, #2
 80143f4:	755a      	strb	r2, [r3, #21]
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	2102      	movs	r1, #2
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fd fbd8 	bl	8011bb0 <unlock_fs>
 8014400:	2302      	movs	r3, #2
 8014402:	e0ff      	b.n	8014604 <f_read+0x314>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014406:	f1b3 3fff 	cmp.w	r3, #4294967295
 801440a:	d109      	bne.n	8014420 <f_read+0x130>
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	2201      	movs	r2, #1
 8014410:	755a      	strb	r2, [r3, #21]
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	2101      	movs	r1, #1
 8014416:	4618      	mov	r0, r3
 8014418:	f7fd fbca 	bl	8011bb0 <unlock_fs>
 801441c:	2301      	movs	r3, #1
 801441e:	e0f1      	b.n	8014604 <f_read+0x314>
				fp->clust = clst;				/* Update current cluster */
 8014420:	68fb      	ldr	r3, [r7, #12]
 8014422:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014424:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014426:	697a      	ldr	r2, [r7, #20]
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	69db      	ldr	r3, [r3, #28]
 801442c:	4619      	mov	r1, r3
 801442e:	4610      	mov	r0, r2
 8014430:	f7fd fe28 	bl	8012084 <clust2sect>
 8014434:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014436:	69bb      	ldr	r3, [r7, #24]
 8014438:	2b00      	cmp	r3, #0
 801443a:	d109      	bne.n	8014450 <f_read+0x160>
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	2202      	movs	r2, #2
 8014440:	755a      	strb	r2, [r3, #21]
 8014442:	697b      	ldr	r3, [r7, #20]
 8014444:	2102      	movs	r1, #2
 8014446:	4618      	mov	r0, r3
 8014448:	f7fd fbb2 	bl	8011bb0 <unlock_fs>
 801444c:	2302      	movs	r3, #2
 801444e:	e0d9      	b.n	8014604 <f_read+0x314>
			sect += csect;
 8014450:	69ba      	ldr	r2, [r7, #24]
 8014452:	69fb      	ldr	r3, [r7, #28]
 8014454:	4413      	add	r3, r2
 8014456:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8014458:	697b      	ldr	r3, [r7, #20]
 801445a:	899b      	ldrh	r3, [r3, #12]
 801445c:	461a      	mov	r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	fbb3 f3f2 	udiv	r3, r3, r2
 8014464:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8014466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014468:	2b00      	cmp	r3, #0
 801446a:	d046      	beq.n	80144fa <f_read+0x20a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801446c:	69fa      	ldr	r2, [r7, #28]
 801446e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014470:	4413      	add	r3, r2
 8014472:	697a      	ldr	r2, [r7, #20]
 8014474:	8952      	ldrh	r2, [r2, #10]
 8014476:	4293      	cmp	r3, r2
 8014478:	d905      	bls.n	8014486 <f_read+0x196>
					cc = fs->csize - csect;
 801447a:	697b      	ldr	r3, [r7, #20]
 801447c:	895b      	ldrh	r3, [r3, #10]
 801447e:	461a      	mov	r2, r3
 8014480:	69fb      	ldr	r3, [r7, #28]
 8014482:	1ad3      	subs	r3, r2, r3
 8014484:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014486:	697b      	ldr	r3, [r7, #20]
 8014488:	7858      	ldrb	r0, [r3, #1]
 801448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801448c:	69ba      	ldr	r2, [r7, #24]
 801448e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014490:	f7fd fa1a 	bl	80118c8 <disk_read>
 8014494:	4603      	mov	r3, r0
 8014496:	2b00      	cmp	r3, #0
 8014498:	d009      	beq.n	80144ae <f_read+0x1be>
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	2201      	movs	r2, #1
 801449e:	755a      	strb	r2, [r3, #21]
 80144a0:	697b      	ldr	r3, [r7, #20]
 80144a2:	2101      	movs	r1, #1
 80144a4:	4618      	mov	r0, r3
 80144a6:	f7fd fb83 	bl	8011bb0 <unlock_fs>
 80144aa:	2301      	movs	r3, #1
 80144ac:	e0aa      	b.n	8014604 <f_read+0x314>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	7d1b      	ldrb	r3, [r3, #20]
 80144b2:	b25b      	sxtb	r3, r3
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	da18      	bge.n	80144ea <f_read+0x1fa>
 80144b8:	68fb      	ldr	r3, [r7, #12]
 80144ba:	6a1a      	ldr	r2, [r3, #32]
 80144bc:	69bb      	ldr	r3, [r7, #24]
 80144be:	1ad3      	subs	r3, r2, r3
 80144c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80144c2:	429a      	cmp	r2, r3
 80144c4:	d911      	bls.n	80144ea <f_read+0x1fa>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80144c6:	68fb      	ldr	r3, [r7, #12]
 80144c8:	6a1a      	ldr	r2, [r3, #32]
 80144ca:	69bb      	ldr	r3, [r7, #24]
 80144cc:	1ad3      	subs	r3, r2, r3
 80144ce:	697a      	ldr	r2, [r7, #20]
 80144d0:	8992      	ldrh	r2, [r2, #12]
 80144d2:	fb02 f303 	mul.w	r3, r2, r3
 80144d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80144d8:	18d0      	adds	r0, r2, r3
 80144da:	68fb      	ldr	r3, [r7, #12]
 80144dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80144e0:	697b      	ldr	r3, [r7, #20]
 80144e2:	899b      	ldrh	r3, [r3, #12]
 80144e4:	461a      	mov	r2, r3
 80144e6:	f7fd facf 	bl	8011a88 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	899b      	ldrh	r3, [r3, #12]
 80144ee:	461a      	mov	r2, r3
 80144f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144f2:	fb02 f303 	mul.w	r3, r2, r3
 80144f6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80144f8:	e066      	b.n	80145c8 <f_read+0x2d8>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80144fa:	68fb      	ldr	r3, [r7, #12]
 80144fc:	6a1b      	ldr	r3, [r3, #32]
 80144fe:	69ba      	ldr	r2, [r7, #24]
 8014500:	429a      	cmp	r2, r3
 8014502:	d038      	beq.n	8014576 <f_read+0x286>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	7d1b      	ldrb	r3, [r3, #20]
 8014508:	b25b      	sxtb	r3, r3
 801450a:	2b00      	cmp	r3, #0
 801450c:	da1d      	bge.n	801454a <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	7858      	ldrb	r0, [r3, #1]
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	6a1a      	ldr	r2, [r3, #32]
 801451c:	2301      	movs	r3, #1
 801451e:	f7fd f9f3 	bl	8011908 <disk_write>
 8014522:	4603      	mov	r3, r0
 8014524:	2b00      	cmp	r3, #0
 8014526:	d009      	beq.n	801453c <f_read+0x24c>
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	2201      	movs	r2, #1
 801452c:	755a      	strb	r2, [r3, #21]
 801452e:	697b      	ldr	r3, [r7, #20]
 8014530:	2101      	movs	r1, #1
 8014532:	4618      	mov	r0, r3
 8014534:	f7fd fb3c 	bl	8011bb0 <unlock_fs>
 8014538:	2301      	movs	r3, #1
 801453a:	e063      	b.n	8014604 <f_read+0x314>
					fp->flag &= (BYTE)~FA_DIRTY;
 801453c:	68fb      	ldr	r3, [r7, #12]
 801453e:	7d1b      	ldrb	r3, [r3, #20]
 8014540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014544:	b2da      	uxtb	r2, r3
 8014546:	68fb      	ldr	r3, [r7, #12]
 8014548:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	7858      	ldrb	r0, [r3, #1]
 801454e:	68fb      	ldr	r3, [r7, #12]
 8014550:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014554:	2301      	movs	r3, #1
 8014556:	69ba      	ldr	r2, [r7, #24]
 8014558:	f7fd f9b6 	bl	80118c8 <disk_read>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d009      	beq.n	8014576 <f_read+0x286>
 8014562:	68fb      	ldr	r3, [r7, #12]
 8014564:	2201      	movs	r2, #1
 8014566:	755a      	strb	r2, [r3, #21]
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	2101      	movs	r1, #1
 801456c:	4618      	mov	r0, r3
 801456e:	f7fd fb1f 	bl	8011bb0 <unlock_fs>
 8014572:	2301      	movs	r3, #1
 8014574:	e046      	b.n	8014604 <f_read+0x314>
			}
#endif
			fp->sect = sect;
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	69ba      	ldr	r2, [r7, #24]
 801457a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	899b      	ldrh	r3, [r3, #12]
 8014580:	4618      	mov	r0, r3
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	699b      	ldr	r3, [r3, #24]
 8014586:	697a      	ldr	r2, [r7, #20]
 8014588:	8992      	ldrh	r2, [r2, #12]
 801458a:	fbb3 f1f2 	udiv	r1, r3, r2
 801458e:	fb01 f202 	mul.w	r2, r1, r2
 8014592:	1a9b      	subs	r3, r3, r2
 8014594:	1ac3      	subs	r3, r0, r3
 8014596:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	429a      	cmp	r2, r3
 801459e:	d901      	bls.n	80145a4 <f_read+0x2b4>
 80145a0:	687b      	ldr	r3, [r7, #4]
 80145a2:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	699b      	ldr	r3, [r3, #24]
 80145ae:	697a      	ldr	r2, [r7, #20]
 80145b0:	8992      	ldrh	r2, [r2, #12]
 80145b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80145b6:	fb00 f202 	mul.w	r2, r0, r2
 80145ba:	1a9b      	subs	r3, r3, r2
 80145bc:	440b      	add	r3, r1
 80145be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145c0:	4619      	mov	r1, r3
 80145c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80145c4:	f7fd fa60 	bl	8011a88 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80145c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80145ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145cc:	4413      	add	r3, r2
 80145ce:	627b      	str	r3, [r7, #36]	; 0x24
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	699a      	ldr	r2, [r3, #24]
 80145d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d6:	441a      	add	r2, r3
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	619a      	str	r2, [r3, #24]
 80145dc:	683b      	ldr	r3, [r7, #0]
 80145de:	681a      	ldr	r2, [r3, #0]
 80145e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e2:	441a      	add	r2, r3
 80145e4:	683b      	ldr	r3, [r7, #0]
 80145e6:	601a      	str	r2, [r3, #0]
 80145e8:	687a      	ldr	r2, [r7, #4]
 80145ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ec:	1ad3      	subs	r3, r2, r3
 80145ee:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	f47f aec3 	bne.w	801437e <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80145f8:	697b      	ldr	r3, [r7, #20]
 80145fa:	2100      	movs	r1, #0
 80145fc:	4618      	mov	r0, r3
 80145fe:	f7fd fad7 	bl	8011bb0 <unlock_fs>
 8014602:	2300      	movs	r3, #0
}
 8014604:	4618      	mov	r0, r3
 8014606:	3738      	adds	r7, #56	; 0x38
 8014608:	46bd      	mov	sp, r7
 801460a:	bd80      	pop	{r7, pc}

0801460c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801460c:	b580      	push	{r7, lr}
 801460e:	b08c      	sub	sp, #48	; 0x30
 8014610:	af00      	add	r7, sp, #0
 8014612:	60f8      	str	r0, [r7, #12]
 8014614:	60b9      	str	r1, [r7, #8]
 8014616:	607a      	str	r2, [r7, #4]
 8014618:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801461a:	68bb      	ldr	r3, [r7, #8]
 801461c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801461e:	683b      	ldr	r3, [r7, #0]
 8014620:	2200      	movs	r2, #0
 8014622:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014624:	68fb      	ldr	r3, [r7, #12]
 8014626:	f107 0210 	add.w	r2, r7, #16
 801462a:	4611      	mov	r1, r2
 801462c:	4618      	mov	r0, r3
 801462e:	f7ff fae3 	bl	8013bf8 <validate>
 8014632:	4603      	mov	r3, r0
 8014634:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014638:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801463c:	2b00      	cmp	r3, #0
 801463e:	d107      	bne.n	8014650 <f_write+0x44>
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	7d5b      	ldrb	r3, [r3, #21]
 8014644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801464c:	2b00      	cmp	r3, #0
 801464e:	d009      	beq.n	8014664 <f_write+0x58>
 8014650:	693b      	ldr	r3, [r7, #16]
 8014652:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014656:	4611      	mov	r1, r2
 8014658:	4618      	mov	r0, r3
 801465a:	f7fd faa9 	bl	8011bb0 <unlock_fs>
 801465e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014662:	e192      	b.n	801498a <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	7d1b      	ldrb	r3, [r3, #20]
 8014668:	f003 0302 	and.w	r3, r3, #2
 801466c:	2b00      	cmp	r3, #0
 801466e:	d106      	bne.n	801467e <f_write+0x72>
 8014670:	693b      	ldr	r3, [r7, #16]
 8014672:	2107      	movs	r1, #7
 8014674:	4618      	mov	r0, r3
 8014676:	f7fd fa9b 	bl	8011bb0 <unlock_fs>
 801467a:	2307      	movs	r3, #7
 801467c:	e185      	b.n	801498a <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801467e:	68fb      	ldr	r3, [r7, #12]
 8014680:	699a      	ldr	r2, [r3, #24]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	441a      	add	r2, r3
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	699b      	ldr	r3, [r3, #24]
 801468a:	429a      	cmp	r2, r3
 801468c:	f080 816a 	bcs.w	8014964 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	699b      	ldr	r3, [r3, #24]
 8014694:	43db      	mvns	r3, r3
 8014696:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014698:	e164      	b.n	8014964 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	699b      	ldr	r3, [r3, #24]
 801469e:	693a      	ldr	r2, [r7, #16]
 80146a0:	8992      	ldrh	r2, [r2, #12]
 80146a2:	fbb3 f1f2 	udiv	r1, r3, r2
 80146a6:	fb01 f202 	mul.w	r2, r1, r2
 80146aa:	1a9b      	subs	r3, r3, r2
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	f040 810f 	bne.w	80148d0 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80146b2:	68fb      	ldr	r3, [r7, #12]
 80146b4:	699b      	ldr	r3, [r3, #24]
 80146b6:	693a      	ldr	r2, [r7, #16]
 80146b8:	8992      	ldrh	r2, [r2, #12]
 80146ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80146be:	693a      	ldr	r2, [r7, #16]
 80146c0:	8952      	ldrh	r2, [r2, #10]
 80146c2:	3a01      	subs	r2, #1
 80146c4:	4013      	ands	r3, r2
 80146c6:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d14d      	bne.n	801476a <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80146ce:	68fb      	ldr	r3, [r7, #12]
 80146d0:	699b      	ldr	r3, [r3, #24]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d10c      	bne.n	80146f0 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80146d6:	68fb      	ldr	r3, [r7, #12]
 80146d8:	689b      	ldr	r3, [r3, #8]
 80146da:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80146dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d11a      	bne.n	8014718 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	2100      	movs	r1, #0
 80146e6:	4618      	mov	r0, r3
 80146e8:	f7fd ff40 	bl	801256c <create_chain>
 80146ec:	62b8      	str	r0, [r7, #40]	; 0x28
 80146ee:	e013      	b.n	8014718 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80146f0:	68fb      	ldr	r3, [r7, #12]
 80146f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d007      	beq.n	8014708 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	699b      	ldr	r3, [r3, #24]
 80146fc:	4619      	mov	r1, r3
 80146fe:	68f8      	ldr	r0, [r7, #12]
 8014700:	f7fd ffcc 	bl	801269c <clmt_clust>
 8014704:	62b8      	str	r0, [r7, #40]	; 0x28
 8014706:	e007      	b.n	8014718 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014708:	68fa      	ldr	r2, [r7, #12]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	69db      	ldr	r3, [r3, #28]
 801470e:	4619      	mov	r1, r3
 8014710:	4610      	mov	r0, r2
 8014712:	f7fd ff2b 	bl	801256c <create_chain>
 8014716:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801471a:	2b00      	cmp	r3, #0
 801471c:	f000 8127 	beq.w	801496e <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014722:	2b01      	cmp	r3, #1
 8014724:	d109      	bne.n	801473a <f_write+0x12e>
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	2202      	movs	r2, #2
 801472a:	755a      	strb	r2, [r3, #21]
 801472c:	693b      	ldr	r3, [r7, #16]
 801472e:	2102      	movs	r1, #2
 8014730:	4618      	mov	r0, r3
 8014732:	f7fd fa3d 	bl	8011bb0 <unlock_fs>
 8014736:	2302      	movs	r3, #2
 8014738:	e127      	b.n	801498a <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014740:	d109      	bne.n	8014756 <f_write+0x14a>
 8014742:	68fb      	ldr	r3, [r7, #12]
 8014744:	2201      	movs	r2, #1
 8014746:	755a      	strb	r2, [r3, #21]
 8014748:	693b      	ldr	r3, [r7, #16]
 801474a:	2101      	movs	r1, #1
 801474c:	4618      	mov	r0, r3
 801474e:	f7fd fa2f 	bl	8011bb0 <unlock_fs>
 8014752:	2301      	movs	r3, #1
 8014754:	e119      	b.n	801498a <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801475a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801475c:	68fb      	ldr	r3, [r7, #12]
 801475e:	689b      	ldr	r3, [r3, #8]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d102      	bne.n	801476a <f_write+0x15e>
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014768:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801476a:	68fb      	ldr	r3, [r7, #12]
 801476c:	7d1b      	ldrb	r3, [r3, #20]
 801476e:	b25b      	sxtb	r3, r3
 8014770:	2b00      	cmp	r3, #0
 8014772:	da1d      	bge.n	80147b0 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014774:	693b      	ldr	r3, [r7, #16]
 8014776:	7858      	ldrb	r0, [r3, #1]
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801477e:	68fb      	ldr	r3, [r7, #12]
 8014780:	6a1a      	ldr	r2, [r3, #32]
 8014782:	2301      	movs	r3, #1
 8014784:	f7fd f8c0 	bl	8011908 <disk_write>
 8014788:	4603      	mov	r3, r0
 801478a:	2b00      	cmp	r3, #0
 801478c:	d009      	beq.n	80147a2 <f_write+0x196>
 801478e:	68fb      	ldr	r3, [r7, #12]
 8014790:	2201      	movs	r2, #1
 8014792:	755a      	strb	r2, [r3, #21]
 8014794:	693b      	ldr	r3, [r7, #16]
 8014796:	2101      	movs	r1, #1
 8014798:	4618      	mov	r0, r3
 801479a:	f7fd fa09 	bl	8011bb0 <unlock_fs>
 801479e:	2301      	movs	r3, #1
 80147a0:	e0f3      	b.n	801498a <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80147a2:	68fb      	ldr	r3, [r7, #12]
 80147a4:	7d1b      	ldrb	r3, [r3, #20]
 80147a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80147aa:	b2da      	uxtb	r2, r3
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80147b0:	693a      	ldr	r2, [r7, #16]
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	69db      	ldr	r3, [r3, #28]
 80147b6:	4619      	mov	r1, r3
 80147b8:	4610      	mov	r0, r2
 80147ba:	f7fd fc63 	bl	8012084 <clust2sect>
 80147be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80147c0:	697b      	ldr	r3, [r7, #20]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d109      	bne.n	80147da <f_write+0x1ce>
 80147c6:	68fb      	ldr	r3, [r7, #12]
 80147c8:	2202      	movs	r2, #2
 80147ca:	755a      	strb	r2, [r3, #21]
 80147cc:	693b      	ldr	r3, [r7, #16]
 80147ce:	2102      	movs	r1, #2
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fd f9ed 	bl	8011bb0 <unlock_fs>
 80147d6:	2302      	movs	r3, #2
 80147d8:	e0d7      	b.n	801498a <f_write+0x37e>
			sect += csect;
 80147da:	697a      	ldr	r2, [r7, #20]
 80147dc:	69bb      	ldr	r3, [r7, #24]
 80147de:	4413      	add	r3, r2
 80147e0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80147e2:	693b      	ldr	r3, [r7, #16]
 80147e4:	899b      	ldrh	r3, [r3, #12]
 80147e6:	461a      	mov	r2, r3
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80147ee:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80147f0:	6a3b      	ldr	r3, [r7, #32]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d048      	beq.n	8014888 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80147f6:	69ba      	ldr	r2, [r7, #24]
 80147f8:	6a3b      	ldr	r3, [r7, #32]
 80147fa:	4413      	add	r3, r2
 80147fc:	693a      	ldr	r2, [r7, #16]
 80147fe:	8952      	ldrh	r2, [r2, #10]
 8014800:	4293      	cmp	r3, r2
 8014802:	d905      	bls.n	8014810 <f_write+0x204>
					cc = fs->csize - csect;
 8014804:	693b      	ldr	r3, [r7, #16]
 8014806:	895b      	ldrh	r3, [r3, #10]
 8014808:	461a      	mov	r2, r3
 801480a:	69bb      	ldr	r3, [r7, #24]
 801480c:	1ad3      	subs	r3, r2, r3
 801480e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014810:	693b      	ldr	r3, [r7, #16]
 8014812:	7858      	ldrb	r0, [r3, #1]
 8014814:	6a3b      	ldr	r3, [r7, #32]
 8014816:	697a      	ldr	r2, [r7, #20]
 8014818:	69f9      	ldr	r1, [r7, #28]
 801481a:	f7fd f875 	bl	8011908 <disk_write>
 801481e:	4603      	mov	r3, r0
 8014820:	2b00      	cmp	r3, #0
 8014822:	d009      	beq.n	8014838 <f_write+0x22c>
 8014824:	68fb      	ldr	r3, [r7, #12]
 8014826:	2201      	movs	r2, #1
 8014828:	755a      	strb	r2, [r3, #21]
 801482a:	693b      	ldr	r3, [r7, #16]
 801482c:	2101      	movs	r1, #1
 801482e:	4618      	mov	r0, r3
 8014830:	f7fd f9be 	bl	8011bb0 <unlock_fs>
 8014834:	2301      	movs	r3, #1
 8014836:	e0a8      	b.n	801498a <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014838:	68fb      	ldr	r3, [r7, #12]
 801483a:	6a1a      	ldr	r2, [r3, #32]
 801483c:	697b      	ldr	r3, [r7, #20]
 801483e:	1ad3      	subs	r3, r2, r3
 8014840:	6a3a      	ldr	r2, [r7, #32]
 8014842:	429a      	cmp	r2, r3
 8014844:	d918      	bls.n	8014878 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014846:	68fb      	ldr	r3, [r7, #12]
 8014848:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801484c:	68fb      	ldr	r3, [r7, #12]
 801484e:	6a1a      	ldr	r2, [r3, #32]
 8014850:	697b      	ldr	r3, [r7, #20]
 8014852:	1ad3      	subs	r3, r2, r3
 8014854:	693a      	ldr	r2, [r7, #16]
 8014856:	8992      	ldrh	r2, [r2, #12]
 8014858:	fb02 f303 	mul.w	r3, r2, r3
 801485c:	69fa      	ldr	r2, [r7, #28]
 801485e:	18d1      	adds	r1, r2, r3
 8014860:	693b      	ldr	r3, [r7, #16]
 8014862:	899b      	ldrh	r3, [r3, #12]
 8014864:	461a      	mov	r2, r3
 8014866:	f7fd f90f 	bl	8011a88 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801486a:	68fb      	ldr	r3, [r7, #12]
 801486c:	7d1b      	ldrb	r3, [r3, #20]
 801486e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014872:	b2da      	uxtb	r2, r3
 8014874:	68fb      	ldr	r3, [r7, #12]
 8014876:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014878:	693b      	ldr	r3, [r7, #16]
 801487a:	899b      	ldrh	r3, [r3, #12]
 801487c:	461a      	mov	r2, r3
 801487e:	6a3b      	ldr	r3, [r7, #32]
 8014880:	fb02 f303 	mul.w	r3, r2, r3
 8014884:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014886:	e050      	b.n	801492a <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014888:	68fb      	ldr	r3, [r7, #12]
 801488a:	6a1b      	ldr	r3, [r3, #32]
 801488c:	697a      	ldr	r2, [r7, #20]
 801488e:	429a      	cmp	r2, r3
 8014890:	d01b      	beq.n	80148ca <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8014892:	68fb      	ldr	r3, [r7, #12]
 8014894:	699a      	ldr	r2, [r3, #24]
 8014896:	68fb      	ldr	r3, [r7, #12]
 8014898:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801489a:	429a      	cmp	r2, r3
 801489c:	d215      	bcs.n	80148ca <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801489e:	693b      	ldr	r3, [r7, #16]
 80148a0:	7858      	ldrb	r0, [r3, #1]
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148a8:	2301      	movs	r3, #1
 80148aa:	697a      	ldr	r2, [r7, #20]
 80148ac:	f7fd f80c 	bl	80118c8 <disk_read>
 80148b0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d009      	beq.n	80148ca <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	2201      	movs	r2, #1
 80148ba:	755a      	strb	r2, [r3, #21]
 80148bc:	693b      	ldr	r3, [r7, #16]
 80148be:	2101      	movs	r1, #1
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7fd f975 	bl	8011bb0 <unlock_fs>
 80148c6:	2301      	movs	r3, #1
 80148c8:	e05f      	b.n	801498a <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	697a      	ldr	r2, [r7, #20]
 80148ce:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80148d0:	693b      	ldr	r3, [r7, #16]
 80148d2:	899b      	ldrh	r3, [r3, #12]
 80148d4:	4618      	mov	r0, r3
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	699b      	ldr	r3, [r3, #24]
 80148da:	693a      	ldr	r2, [r7, #16]
 80148dc:	8992      	ldrh	r2, [r2, #12]
 80148de:	fbb3 f1f2 	udiv	r1, r3, r2
 80148e2:	fb01 f202 	mul.w	r2, r1, r2
 80148e6:	1a9b      	subs	r3, r3, r2
 80148e8:	1ac3      	subs	r3, r0, r3
 80148ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80148ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	429a      	cmp	r2, r3
 80148f2:	d901      	bls.n	80148f8 <f_write+0x2ec>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148fe:	68fb      	ldr	r3, [r7, #12]
 8014900:	699b      	ldr	r3, [r3, #24]
 8014902:	693a      	ldr	r2, [r7, #16]
 8014904:	8992      	ldrh	r2, [r2, #12]
 8014906:	fbb3 f0f2 	udiv	r0, r3, r2
 801490a:	fb00 f202 	mul.w	r2, r0, r2
 801490e:	1a9b      	subs	r3, r3, r2
 8014910:	440b      	add	r3, r1
 8014912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014914:	69f9      	ldr	r1, [r7, #28]
 8014916:	4618      	mov	r0, r3
 8014918:	f7fd f8b6 	bl	8011a88 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	7d1b      	ldrb	r3, [r3, #20]
 8014920:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8014924:	b2da      	uxtb	r2, r3
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801492a:	69fa      	ldr	r2, [r7, #28]
 801492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801492e:	4413      	add	r3, r2
 8014930:	61fb      	str	r3, [r7, #28]
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	699a      	ldr	r2, [r3, #24]
 8014936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014938:	441a      	add	r2, r3
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	619a      	str	r2, [r3, #24]
 801493e:	68fb      	ldr	r3, [r7, #12]
 8014940:	68da      	ldr	r2, [r3, #12]
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	699b      	ldr	r3, [r3, #24]
 8014946:	429a      	cmp	r2, r3
 8014948:	bf38      	it	cc
 801494a:	461a      	movcc	r2, r3
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	60da      	str	r2, [r3, #12]
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	681a      	ldr	r2, [r3, #0]
 8014954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014956:	441a      	add	r2, r3
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	601a      	str	r2, [r3, #0]
 801495c:	687a      	ldr	r2, [r7, #4]
 801495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014960:	1ad3      	subs	r3, r2, r3
 8014962:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	2b00      	cmp	r3, #0
 8014968:	f47f ae97 	bne.w	801469a <f_write+0x8e>
 801496c:	e000      	b.n	8014970 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801496e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	7d1b      	ldrb	r3, [r3, #20]
 8014974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014978:	b2da      	uxtb	r2, r3
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801497e:	693b      	ldr	r3, [r7, #16]
 8014980:	2100      	movs	r1, #0
 8014982:	4618      	mov	r0, r3
 8014984:	f7fd f914 	bl	8011bb0 <unlock_fs>
 8014988:	2300      	movs	r3, #0
}
 801498a:	4618      	mov	r0, r3
 801498c:	3730      	adds	r7, #48	; 0x30
 801498e:	46bd      	mov	sp, r7
 8014990:	bd80      	pop	{r7, pc}

08014992 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8014992:	b580      	push	{r7, lr}
 8014994:	b086      	sub	sp, #24
 8014996:	af00      	add	r7, sp, #0
 8014998:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	f107 0208 	add.w	r2, r7, #8
 80149a0:	4611      	mov	r1, r2
 80149a2:	4618      	mov	r0, r3
 80149a4:	f7ff f928 	bl	8013bf8 <validate>
 80149a8:	4603      	mov	r3, r0
 80149aa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80149ac:	7dfb      	ldrb	r3, [r7, #23]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d16d      	bne.n	8014a8e <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	7d1b      	ldrb	r3, [r3, #20]
 80149b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80149ba:	2b00      	cmp	r3, #0
 80149bc:	d067      	beq.n	8014a8e <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	7d1b      	ldrb	r3, [r3, #20]
 80149c2:	b25b      	sxtb	r3, r3
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	da1a      	bge.n	80149fe <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80149c8:	68bb      	ldr	r3, [r7, #8]
 80149ca:	7858      	ldrb	r0, [r3, #1]
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	6a1a      	ldr	r2, [r3, #32]
 80149d6:	2301      	movs	r3, #1
 80149d8:	f7fc ff96 	bl	8011908 <disk_write>
 80149dc:	4603      	mov	r3, r0
 80149de:	2b00      	cmp	r3, #0
 80149e0:	d006      	beq.n	80149f0 <f_sync+0x5e>
 80149e2:	68bb      	ldr	r3, [r7, #8]
 80149e4:	2101      	movs	r1, #1
 80149e6:	4618      	mov	r0, r3
 80149e8:	f7fd f8e2 	bl	8011bb0 <unlock_fs>
 80149ec:	2301      	movs	r3, #1
 80149ee:	e055      	b.n	8014a9c <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	7d1b      	ldrb	r3, [r3, #20]
 80149f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149f8:	b2da      	uxtb	r2, r3
 80149fa:	687b      	ldr	r3, [r7, #4]
 80149fc:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80149fe:	f7f8 fb5f 	bl	800d0c0 <get_fattime>
 8014a02:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8014a04:	68ba      	ldr	r2, [r7, #8]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a0a:	4619      	mov	r1, r3
 8014a0c:	4610      	mov	r0, r2
 8014a0e:	f7fd fa9b 	bl	8011f48 <move_window>
 8014a12:	4603      	mov	r3, r0
 8014a14:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8014a16:	7dfb      	ldrb	r3, [r7, #23]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d138      	bne.n	8014a8e <f_sync+0xfc>
					dir = fp->dir_ptr;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a20:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	330b      	adds	r3, #11
 8014a26:	781a      	ldrb	r2, [r3, #0]
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	330b      	adds	r3, #11
 8014a2c:	f042 0220 	orr.w	r2, r2, #32
 8014a30:	b2d2      	uxtb	r2, r2
 8014a32:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	6818      	ldr	r0, [r3, #0]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	689b      	ldr	r3, [r3, #8]
 8014a3c:	461a      	mov	r2, r3
 8014a3e:	68f9      	ldr	r1, [r7, #12]
 8014a40:	f7fe f829 	bl	8012a96 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014a44:	68fb      	ldr	r3, [r7, #12]
 8014a46:	f103 021c 	add.w	r2, r3, #28
 8014a4a:	687b      	ldr	r3, [r7, #4]
 8014a4c:	68db      	ldr	r3, [r3, #12]
 8014a4e:	4619      	mov	r1, r3
 8014a50:	4610      	mov	r0, r2
 8014a52:	f7fc ffed 	bl	8011a30 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	3316      	adds	r3, #22
 8014a5a:	6939      	ldr	r1, [r7, #16]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7fc ffe7 	bl	8011a30 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	3312      	adds	r3, #18
 8014a66:	2100      	movs	r1, #0
 8014a68:	4618      	mov	r0, r3
 8014a6a:	f7fc ffc6 	bl	80119fa <st_word>
					fs->wflag = 1;
 8014a6e:	68bb      	ldr	r3, [r7, #8]
 8014a70:	2201      	movs	r2, #1
 8014a72:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7fd fa94 	bl	8011fa4 <sync_fs>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	7d1b      	ldrb	r3, [r3, #20]
 8014a84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a88:	b2da      	uxtb	r2, r3
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	7dfa      	ldrb	r2, [r7, #23]
 8014a92:	4611      	mov	r1, r2
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7fd f88b 	bl	8011bb0 <unlock_fs>
 8014a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a9c:	4618      	mov	r0, r3
 8014a9e:	3718      	adds	r7, #24
 8014aa0:	46bd      	mov	sp, r7
 8014aa2:	bd80      	pop	{r7, pc}

08014aa4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014aa4:	b580      	push	{r7, lr}
 8014aa6:	b084      	sub	sp, #16
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014aac:	6878      	ldr	r0, [r7, #4]
 8014aae:	f7ff ff70 	bl	8014992 <f_sync>
 8014ab2:	4603      	mov	r3, r0
 8014ab4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014ab6:	7bfb      	ldrb	r3, [r7, #15]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d11d      	bne.n	8014af8 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f107 0208 	add.w	r2, r7, #8
 8014ac2:	4611      	mov	r1, r2
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	f7ff f897 	bl	8013bf8 <validate>
 8014aca:	4603      	mov	r3, r0
 8014acc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014ace:	7bfb      	ldrb	r3, [r7, #15]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	d111      	bne.n	8014af8 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	691b      	ldr	r3, [r3, #16]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	f7fd f991 	bl	8011e00 <dec_lock>
 8014ade:	4603      	mov	r3, r0
 8014ae0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014ae2:	7bfb      	ldrb	r3, [r7, #15]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d102      	bne.n	8014aee <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	2200      	movs	r2, #0
 8014aec:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8014aee:	68bb      	ldr	r3, [r7, #8]
 8014af0:	2100      	movs	r1, #0
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7fd f85c 	bl	8011bb0 <unlock_fs>
#endif
		}
	}
	return res;
 8014af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3710      	adds	r7, #16
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}

08014b02 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8014b02:	b580      	push	{r7, lr}
 8014b04:	b090      	sub	sp, #64	; 0x40
 8014b06:	af00      	add	r7, sp, #0
 8014b08:	6078      	str	r0, [r7, #4]
 8014b0a:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f107 0208 	add.w	r2, r7, #8
 8014b12:	4611      	mov	r1, r2
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7ff f86f 	bl	8013bf8 <validate>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8014b20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d103      	bne.n	8014b30 <f_lseek+0x2e>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	7d5b      	ldrb	r3, [r3, #21]
 8014b2c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8014b30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d009      	beq.n	8014b4c <f_lseek+0x4a>
 8014b38:	68bb      	ldr	r3, [r7, #8]
 8014b3a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014b3e:	4611      	mov	r1, r2
 8014b40:	4618      	mov	r0, r3
 8014b42:	f7fd f835 	bl	8011bb0 <unlock_fs>
 8014b46:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014b4a:	e244      	b.n	8014fd6 <f_lseek+0x4d4>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	f000 80f2 	beq.w	8014d3a <f_lseek+0x238>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8014b56:	683b      	ldr	r3, [r7, #0]
 8014b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b5c:	d164      	bne.n	8014c28 <f_lseek+0x126>
			tbl = fp->cltbl;
 8014b5e:	687b      	ldr	r3, [r7, #4]
 8014b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b62:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8014b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b66:	1d1a      	adds	r2, r3, #4
 8014b68:	627a      	str	r2, [r7, #36]	; 0x24
 8014b6a:	681b      	ldr	r3, [r3, #0]
 8014b6c:	617b      	str	r3, [r7, #20]
 8014b6e:	2302      	movs	r3, #2
 8014b70:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	689b      	ldr	r3, [r3, #8]
 8014b76:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8014b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d044      	beq.n	8014c08 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8014b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b80:	613b      	str	r3, [r7, #16]
 8014b82:	2300      	movs	r3, #0
 8014b84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014b88:	3302      	adds	r3, #2
 8014b8a:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8014b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b8e:	60fb      	str	r3, [r7, #12]
 8014b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b92:	3301      	adds	r3, #1
 8014b94:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	f7fd fa91 	bl	80120c2 <get_fat>
 8014ba0:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8014ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d809      	bhi.n	8014bbc <f_lseek+0xba>
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	2202      	movs	r2, #2
 8014bac:	755a      	strb	r2, [r3, #21]
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	2102      	movs	r1, #2
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f7fc fffc 	bl	8011bb0 <unlock_fs>
 8014bb8:	2302      	movs	r3, #2
 8014bba:	e20c      	b.n	8014fd6 <f_lseek+0x4d4>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014bc2:	d109      	bne.n	8014bd8 <f_lseek+0xd6>
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	2201      	movs	r2, #1
 8014bc8:	755a      	strb	r2, [r3, #21]
 8014bca:	68bb      	ldr	r3, [r7, #8]
 8014bcc:	2101      	movs	r1, #1
 8014bce:	4618      	mov	r0, r3
 8014bd0:	f7fc ffee 	bl	8011bb0 <unlock_fs>
 8014bd4:	2301      	movs	r3, #1
 8014bd6:	e1fe      	b.n	8014fd6 <f_lseek+0x4d4>
					} while (cl == pcl + 1);
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	3301      	adds	r3, #1
 8014bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bde:	429a      	cmp	r2, r3
 8014be0:	d0d4      	beq.n	8014b8c <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8014be2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014be4:	697b      	ldr	r3, [r7, #20]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d809      	bhi.n	8014bfe <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 8014bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bec:	1d1a      	adds	r2, r3, #4
 8014bee:	627a      	str	r2, [r7, #36]	; 0x24
 8014bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014bf2:	601a      	str	r2, [r3, #0]
 8014bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bf6:	1d1a      	adds	r2, r3, #4
 8014bf8:	627a      	str	r2, [r7, #36]	; 0x24
 8014bfa:	693a      	ldr	r2, [r7, #16]
 8014bfc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8014bfe:	68bb      	ldr	r3, [r7, #8]
 8014c00:	6a1b      	ldr	r3, [r3, #32]
 8014c02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014c04:	429a      	cmp	r2, r3
 8014c06:	d3ba      	bcc.n	8014b7e <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c0e:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8014c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014c12:	697b      	ldr	r3, [r7, #20]
 8014c14:	429a      	cmp	r2, r3
 8014c16:	d803      	bhi.n	8014c20 <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8014c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c1a:	2200      	movs	r2, #0
 8014c1c:	601a      	str	r2, [r3, #0]
 8014c1e:	e1d1      	b.n	8014fc4 <f_lseek+0x4c2>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8014c20:	2311      	movs	r3, #17
 8014c22:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014c26:	e1cd      	b.n	8014fc4 <f_lseek+0x4c2>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	68db      	ldr	r3, [r3, #12]
 8014c2c:	683a      	ldr	r2, [r7, #0]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d902      	bls.n	8014c38 <f_lseek+0x136>
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	68db      	ldr	r3, [r3, #12]
 8014c36:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	683a      	ldr	r2, [r7, #0]
 8014c3c:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8014c3e:	683b      	ldr	r3, [r7, #0]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	f000 81bf 	beq.w	8014fc4 <f_lseek+0x4c2>
				fp->clust = clmt_clust(fp, ofs - 1);
 8014c46:	683b      	ldr	r3, [r7, #0]
 8014c48:	3b01      	subs	r3, #1
 8014c4a:	4619      	mov	r1, r3
 8014c4c:	6878      	ldr	r0, [r7, #4]
 8014c4e:	f7fd fd25 	bl	801269c <clmt_clust>
 8014c52:	4602      	mov	r2, r0
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8014c58:	68ba      	ldr	r2, [r7, #8]
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	69db      	ldr	r3, [r3, #28]
 8014c5e:	4619      	mov	r1, r3
 8014c60:	4610      	mov	r0, r2
 8014c62:	f7fd fa0f 	bl	8012084 <clust2sect>
 8014c66:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8014c68:	69bb      	ldr	r3, [r7, #24]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d109      	bne.n	8014c82 <f_lseek+0x180>
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	2202      	movs	r2, #2
 8014c72:	755a      	strb	r2, [r3, #21]
 8014c74:	68bb      	ldr	r3, [r7, #8]
 8014c76:	2102      	movs	r1, #2
 8014c78:	4618      	mov	r0, r3
 8014c7a:	f7fc ff99 	bl	8011bb0 <unlock_fs>
 8014c7e:	2302      	movs	r3, #2
 8014c80:	e1a9      	b.n	8014fd6 <f_lseek+0x4d4>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8014c82:	683b      	ldr	r3, [r7, #0]
 8014c84:	3b01      	subs	r3, #1
 8014c86:	68ba      	ldr	r2, [r7, #8]
 8014c88:	8992      	ldrh	r2, [r2, #12]
 8014c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8014c8e:	68ba      	ldr	r2, [r7, #8]
 8014c90:	8952      	ldrh	r2, [r2, #10]
 8014c92:	3a01      	subs	r2, #1
 8014c94:	4013      	ands	r3, r2
 8014c96:	69ba      	ldr	r2, [r7, #24]
 8014c98:	4413      	add	r3, r2
 8014c9a:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	699b      	ldr	r3, [r3, #24]
 8014ca0:	68ba      	ldr	r2, [r7, #8]
 8014ca2:	8992      	ldrh	r2, [r2, #12]
 8014ca4:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ca8:	fb01 f202 	mul.w	r2, r1, r2
 8014cac:	1a9b      	subs	r3, r3, r2
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	f000 8188 	beq.w	8014fc4 <f_lseek+0x4c2>
 8014cb4:	687b      	ldr	r3, [r7, #4]
 8014cb6:	6a1b      	ldr	r3, [r3, #32]
 8014cb8:	69ba      	ldr	r2, [r7, #24]
 8014cba:	429a      	cmp	r2, r3
 8014cbc:	f000 8182 	beq.w	8014fc4 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	7d1b      	ldrb	r3, [r3, #20]
 8014cc4:	b25b      	sxtb	r3, r3
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	da1d      	bge.n	8014d06 <f_lseek+0x204>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014cca:	68bb      	ldr	r3, [r7, #8]
 8014ccc:	7858      	ldrb	r0, [r3, #1]
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014cd4:	687b      	ldr	r3, [r7, #4]
 8014cd6:	6a1a      	ldr	r2, [r3, #32]
 8014cd8:	2301      	movs	r3, #1
 8014cda:	f7fc fe15 	bl	8011908 <disk_write>
 8014cde:	4603      	mov	r3, r0
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d009      	beq.n	8014cf8 <f_lseek+0x1f6>
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	2201      	movs	r2, #1
 8014ce8:	755a      	strb	r2, [r3, #21]
 8014cea:	68bb      	ldr	r3, [r7, #8]
 8014cec:	2101      	movs	r1, #1
 8014cee:	4618      	mov	r0, r3
 8014cf0:	f7fc ff5e 	bl	8011bb0 <unlock_fs>
 8014cf4:	2301      	movs	r3, #1
 8014cf6:	e16e      	b.n	8014fd6 <f_lseek+0x4d4>
						fp->flag &= (BYTE)~FA_DIRTY;
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	7d1b      	ldrb	r3, [r3, #20]
 8014cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d00:	b2da      	uxtb	r2, r3
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8014d06:	68bb      	ldr	r3, [r7, #8]
 8014d08:	7858      	ldrb	r0, [r3, #1]
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d10:	2301      	movs	r3, #1
 8014d12:	69ba      	ldr	r2, [r7, #24]
 8014d14:	f7fc fdd8 	bl	80118c8 <disk_read>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d009      	beq.n	8014d32 <f_lseek+0x230>
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	2201      	movs	r2, #1
 8014d22:	755a      	strb	r2, [r3, #21]
 8014d24:	68bb      	ldr	r3, [r7, #8]
 8014d26:	2101      	movs	r1, #1
 8014d28:	4618      	mov	r0, r3
 8014d2a:	f7fc ff41 	bl	8011bb0 <unlock_fs>
 8014d2e:	2301      	movs	r3, #1
 8014d30:	e151      	b.n	8014fd6 <f_lseek+0x4d4>
#endif
					fp->sect = dsc;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	69ba      	ldr	r2, [r7, #24]
 8014d36:	621a      	str	r2, [r3, #32]
 8014d38:	e144      	b.n	8014fc4 <f_lseek+0x4c2>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	68db      	ldr	r3, [r3, #12]
 8014d3e:	683a      	ldr	r2, [r7, #0]
 8014d40:	429a      	cmp	r2, r3
 8014d42:	d908      	bls.n	8014d56 <f_lseek+0x254>
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	7d1b      	ldrb	r3, [r3, #20]
 8014d48:	f003 0302 	and.w	r3, r3, #2
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d102      	bne.n	8014d56 <f_lseek+0x254>
			ofs = fp->obj.objsize;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	68db      	ldr	r3, [r3, #12]
 8014d54:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	699b      	ldr	r3, [r3, #24]
 8014d5a:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d64:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8014d66:	683b      	ldr	r3, [r7, #0]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	f000 80ce 	beq.w	8014f0a <f_lseek+0x408>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8014d6e:	68bb      	ldr	r3, [r7, #8]
 8014d70:	895b      	ldrh	r3, [r3, #10]
 8014d72:	461a      	mov	r2, r3
 8014d74:	68bb      	ldr	r3, [r7, #8]
 8014d76:	899b      	ldrh	r3, [r3, #12]
 8014d78:	fb02 f303 	mul.w	r3, r2, r3
 8014d7c:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8014d7e:	6a3b      	ldr	r3, [r7, #32]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d01b      	beq.n	8014dbc <f_lseek+0x2ba>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8014d84:	683b      	ldr	r3, [r7, #0]
 8014d86:	1e5a      	subs	r2, r3, #1
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8014d8e:	6a3b      	ldr	r3, [r7, #32]
 8014d90:	1e59      	subs	r1, r3, #1
 8014d92:	69fb      	ldr	r3, [r7, #28]
 8014d94:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8014d98:	429a      	cmp	r2, r3
 8014d9a:	d30f      	bcc.n	8014dbc <f_lseek+0x2ba>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8014d9c:	6a3b      	ldr	r3, [r7, #32]
 8014d9e:	1e5a      	subs	r2, r3, #1
 8014da0:	69fb      	ldr	r3, [r7, #28]
 8014da2:	425b      	negs	r3, r3
 8014da4:	401a      	ands	r2, r3
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	699b      	ldr	r3, [r3, #24]
 8014dae:	683a      	ldr	r2, [r7, #0]
 8014db0:	1ad3      	subs	r3, r2, r3
 8014db2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	69db      	ldr	r3, [r3, #28]
 8014db8:	63bb      	str	r3, [r7, #56]	; 0x38
 8014dba:	e02c      	b.n	8014e16 <f_lseek+0x314>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	689b      	ldr	r3, [r3, #8]
 8014dc0:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8014dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d123      	bne.n	8014e10 <f_lseek+0x30e>
					clst = create_chain(&fp->obj, 0);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2100      	movs	r1, #0
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f7fd fbcd 	bl	801256c <create_chain>
 8014dd2:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014dd6:	2b01      	cmp	r3, #1
 8014dd8:	d109      	bne.n	8014dee <f_lseek+0x2ec>
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	2202      	movs	r2, #2
 8014dde:	755a      	strb	r2, [r3, #21]
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	2102      	movs	r1, #2
 8014de4:	4618      	mov	r0, r3
 8014de6:	f7fc fee3 	bl	8011bb0 <unlock_fs>
 8014dea:	2302      	movs	r3, #2
 8014dec:	e0f3      	b.n	8014fd6 <f_lseek+0x4d4>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014df4:	d109      	bne.n	8014e0a <f_lseek+0x308>
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	2201      	movs	r2, #1
 8014dfa:	755a      	strb	r2, [r3, #21]
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	2101      	movs	r1, #1
 8014e00:	4618      	mov	r0, r3
 8014e02:	f7fc fed5 	bl	8011bb0 <unlock_fs>
 8014e06:	2301      	movs	r3, #1
 8014e08:	e0e5      	b.n	8014fd6 <f_lseek+0x4d4>
					fp->obj.sclust = clst;
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e0e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e14:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8014e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	d076      	beq.n	8014f0a <f_lseek+0x408>
				while (ofs > bcs) {						/* Cluster following loop */
 8014e1c:	e044      	b.n	8014ea8 <f_lseek+0x3a6>
					ofs -= bcs; fp->fptr += bcs;
 8014e1e:	683a      	ldr	r2, [r7, #0]
 8014e20:	69fb      	ldr	r3, [r7, #28]
 8014e22:	1ad3      	subs	r3, r2, r3
 8014e24:	603b      	str	r3, [r7, #0]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	699a      	ldr	r2, [r3, #24]
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	441a      	add	r2, r3
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	7d1b      	ldrb	r3, [r3, #20]
 8014e36:	f003 0302 	and.w	r3, r3, #2
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d00b      	beq.n	8014e56 <f_lseek+0x354>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e42:	4618      	mov	r0, r3
 8014e44:	f7fd fb92 	bl	801256c <create_chain>
 8014e48:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8014e4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d108      	bne.n	8014e62 <f_lseek+0x360>
							ofs = 0; break;
 8014e50:	2300      	movs	r3, #0
 8014e52:	603b      	str	r3, [r7, #0]
 8014e54:	e02c      	b.n	8014eb0 <f_lseek+0x3ae>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7fd f931 	bl	80120c2 <get_fat>
 8014e60:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e68:	d109      	bne.n	8014e7e <f_lseek+0x37c>
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	2201      	movs	r2, #1
 8014e6e:	755a      	strb	r2, [r3, #21]
 8014e70:	68bb      	ldr	r3, [r7, #8]
 8014e72:	2101      	movs	r1, #1
 8014e74:	4618      	mov	r0, r3
 8014e76:	f7fc fe9b 	bl	8011bb0 <unlock_fs>
 8014e7a:	2301      	movs	r3, #1
 8014e7c:	e0ab      	b.n	8014fd6 <f_lseek+0x4d4>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8014e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014e80:	2b01      	cmp	r3, #1
 8014e82:	d904      	bls.n	8014e8e <f_lseek+0x38c>
 8014e84:	68bb      	ldr	r3, [r7, #8]
 8014e86:	6a1b      	ldr	r3, [r3, #32]
 8014e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014e8a:	429a      	cmp	r2, r3
 8014e8c:	d309      	bcc.n	8014ea2 <f_lseek+0x3a0>
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	2202      	movs	r2, #2
 8014e92:	755a      	strb	r2, [r3, #21]
 8014e94:	68bb      	ldr	r3, [r7, #8]
 8014e96:	2102      	movs	r1, #2
 8014e98:	4618      	mov	r0, r3
 8014e9a:	f7fc fe89 	bl	8011bb0 <unlock_fs>
 8014e9e:	2302      	movs	r3, #2
 8014ea0:	e099      	b.n	8014fd6 <f_lseek+0x4d4>
					fp->clust = clst;
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014ea6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8014ea8:	683a      	ldr	r2, [r7, #0]
 8014eaa:	69fb      	ldr	r3, [r7, #28]
 8014eac:	429a      	cmp	r2, r3
 8014eae:	d8b6      	bhi.n	8014e1e <f_lseek+0x31c>
				}
				fp->fptr += ofs;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	699a      	ldr	r2, [r3, #24]
 8014eb4:	683b      	ldr	r3, [r7, #0]
 8014eb6:	441a      	add	r2, r3
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8014ebc:	68bb      	ldr	r3, [r7, #8]
 8014ebe:	899b      	ldrh	r3, [r3, #12]
 8014ec0:	461a      	mov	r2, r3
 8014ec2:	683b      	ldr	r3, [r7, #0]
 8014ec4:	fbb3 f1f2 	udiv	r1, r3, r2
 8014ec8:	fb01 f202 	mul.w	r2, r1, r2
 8014ecc:	1a9b      	subs	r3, r3, r2
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d01b      	beq.n	8014f0a <f_lseek+0x408>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ed6:	4618      	mov	r0, r3
 8014ed8:	f7fd f8d4 	bl	8012084 <clust2sect>
 8014edc:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8014ede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d109      	bne.n	8014ef8 <f_lseek+0x3f6>
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	2202      	movs	r2, #2
 8014ee8:	755a      	strb	r2, [r3, #21]
 8014eea:	68bb      	ldr	r3, [r7, #8]
 8014eec:	2102      	movs	r1, #2
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f7fc fe5e 	bl	8011bb0 <unlock_fs>
 8014ef4:	2302      	movs	r3, #2
 8014ef6:	e06e      	b.n	8014fd6 <f_lseek+0x4d4>
					nsect += (DWORD)(ofs / SS(fs));
 8014ef8:	68bb      	ldr	r3, [r7, #8]
 8014efa:	899b      	ldrh	r3, [r3, #12]
 8014efc:	461a      	mov	r2, r3
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	fbb3 f3f2 	udiv	r3, r3, r2
 8014f04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f06:	4413      	add	r3, r2
 8014f08:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	699a      	ldr	r2, [r3, #24]
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	68db      	ldr	r3, [r3, #12]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d90a      	bls.n	8014f2c <f_lseek+0x42a>
			fp->obj.objsize = fp->fptr;
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	699a      	ldr	r2, [r3, #24]
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	7d1b      	ldrb	r3, [r3, #20]
 8014f22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014f26:	b2da      	uxtb	r2, r3
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8014f2c:	687b      	ldr	r3, [r7, #4]
 8014f2e:	699b      	ldr	r3, [r3, #24]
 8014f30:	68ba      	ldr	r2, [r7, #8]
 8014f32:	8992      	ldrh	r2, [r2, #12]
 8014f34:	fbb3 f1f2 	udiv	r1, r3, r2
 8014f38:	fb01 f202 	mul.w	r2, r1, r2
 8014f3c:	1a9b      	subs	r3, r3, r2
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	d040      	beq.n	8014fc4 <f_lseek+0x4c2>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	6a1b      	ldr	r3, [r3, #32]
 8014f46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014f48:	429a      	cmp	r2, r3
 8014f4a:	d03b      	beq.n	8014fc4 <f_lseek+0x4c2>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8014f4c:	687b      	ldr	r3, [r7, #4]
 8014f4e:	7d1b      	ldrb	r3, [r3, #20]
 8014f50:	b25b      	sxtb	r3, r3
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	da1d      	bge.n	8014f92 <f_lseek+0x490>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f56:	68bb      	ldr	r3, [r7, #8]
 8014f58:	7858      	ldrb	r0, [r3, #1]
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6a1a      	ldr	r2, [r3, #32]
 8014f64:	2301      	movs	r3, #1
 8014f66:	f7fc fccf 	bl	8011908 <disk_write>
 8014f6a:	4603      	mov	r3, r0
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d009      	beq.n	8014f84 <f_lseek+0x482>
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	2201      	movs	r2, #1
 8014f74:	755a      	strb	r2, [r3, #21]
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	2101      	movs	r1, #1
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f7fc fe18 	bl	8011bb0 <unlock_fs>
 8014f80:	2301      	movs	r3, #1
 8014f82:	e028      	b.n	8014fd6 <f_lseek+0x4d4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	7d1b      	ldrb	r3, [r3, #20]
 8014f88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f8c:	b2da      	uxtb	r2, r3
 8014f8e:	687b      	ldr	r3, [r7, #4]
 8014f90:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8014f92:	68bb      	ldr	r3, [r7, #8]
 8014f94:	7858      	ldrb	r0, [r3, #1]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014f9c:	2301      	movs	r3, #1
 8014f9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fa0:	f7fc fc92 	bl	80118c8 <disk_read>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d009      	beq.n	8014fbe <f_lseek+0x4bc>
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	2201      	movs	r2, #1
 8014fae:	755a      	strb	r2, [r3, #21]
 8014fb0:	68bb      	ldr	r3, [r7, #8]
 8014fb2:	2101      	movs	r1, #1
 8014fb4:	4618      	mov	r0, r3
 8014fb6:	f7fc fdfb 	bl	8011bb0 <unlock_fs>
 8014fba:	2301      	movs	r3, #1
 8014fbc:	e00b      	b.n	8014fd6 <f_lseek+0x4d4>
#endif
			fp->sect = nsect;
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fc2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8014fc4:	68bb      	ldr	r3, [r7, #8]
 8014fc6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8014fca:	4611      	mov	r1, r2
 8014fcc:	4618      	mov	r0, r3
 8014fce:	f7fc fdef 	bl	8011bb0 <unlock_fs>
 8014fd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	3740      	adds	r7, #64	; 0x40
 8014fda:	46bd      	mov	sp, r7
 8014fdc:	bd80      	pop	{r7, pc}

08014fde <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8014fde:	b580      	push	{r7, lr}
 8014fe0:	b092      	sub	sp, #72	; 0x48
 8014fe2:	af00      	add	r7, sp, #0
 8014fe4:	60f8      	str	r0, [r7, #12]
 8014fe6:	60b9      	str	r1, [r7, #8]
 8014fe8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8014fea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8014fee:	f107 030c 	add.w	r3, r7, #12
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	4618      	mov	r0, r3
 8014ff6:	f7fe fb77 	bl	80136e8 <find_volume>
 8014ffa:	4603      	mov	r3, r0
 8014ffc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8015000:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8015004:	2b00      	cmp	r3, #0
 8015006:	f040 8099 	bne.w	801513c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 801500a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8015010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015012:	69da      	ldr	r2, [r3, #28]
 8015014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015016:	6a1b      	ldr	r3, [r3, #32]
 8015018:	3b02      	subs	r3, #2
 801501a:	429a      	cmp	r2, r3
 801501c:	d804      	bhi.n	8015028 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 801501e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015020:	69da      	ldr	r2, [r3, #28]
 8015022:	68bb      	ldr	r3, [r7, #8]
 8015024:	601a      	str	r2, [r3, #0]
 8015026:	e089      	b.n	801513c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8015028:	2300      	movs	r3, #0
 801502a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 801502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	2b01      	cmp	r3, #1
 8015032:	d128      	bne.n	8015086 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8015034:	2302      	movs	r3, #2
 8015036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801503a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 801503c:	f107 0314 	add.w	r3, r7, #20
 8015040:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015042:	4618      	mov	r0, r3
 8015044:	f7fd f83d 	bl	80120c2 <get_fat>
 8015048:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 801504a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801504c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015050:	d103      	bne.n	801505a <f_getfree+0x7c>
 8015052:	2301      	movs	r3, #1
 8015054:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015058:	e063      	b.n	8015122 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 801505a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505c:	2b01      	cmp	r3, #1
 801505e:	d103      	bne.n	8015068 <f_getfree+0x8a>
 8015060:	2302      	movs	r3, #2
 8015062:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8015066:	e05c      	b.n	8015122 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8015068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801506a:	2b00      	cmp	r3, #0
 801506c:	d102      	bne.n	8015074 <f_getfree+0x96>
 801506e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015070:	3301      	adds	r3, #1
 8015072:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8015074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015076:	3301      	adds	r3, #1
 8015078:	63fb      	str	r3, [r7, #60]	; 0x3c
 801507a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801507c:	6a1b      	ldr	r3, [r3, #32]
 801507e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015080:	429a      	cmp	r2, r3
 8015082:	d3db      	bcc.n	801503c <f_getfree+0x5e>
 8015084:	e04d      	b.n	8015122 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8015086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015088:	6a1b      	ldr	r3, [r3, #32]
 801508a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801508c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015090:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8015092:	2300      	movs	r3, #0
 8015094:	637b      	str	r3, [r7, #52]	; 0x34
 8015096:	2300      	movs	r3, #0
 8015098:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 801509a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801509c:	2b00      	cmp	r3, #0
 801509e:	d113      	bne.n	80150c8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 80150a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80150a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150a4:	1c5a      	adds	r2, r3, #1
 80150a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80150a8:	4619      	mov	r1, r3
 80150aa:	f7fc ff4d 	bl	8011f48 <move_window>
 80150ae:	4603      	mov	r3, r0
 80150b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80150b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d131      	bne.n	8015120 <f_getfree+0x142>
							p = fs->win;
 80150bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150be:	333c      	adds	r3, #60	; 0x3c
 80150c0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80150c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150c4:	899b      	ldrh	r3, [r3, #12]
 80150c6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80150c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80150ca:	781b      	ldrb	r3, [r3, #0]
 80150cc:	2b02      	cmp	r3, #2
 80150ce:	d10f      	bne.n	80150f0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80150d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150d2:	f7fc fc57 	bl	8011984 <ld_word>
 80150d6:	4603      	mov	r3, r0
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d102      	bne.n	80150e2 <f_getfree+0x104>
 80150dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80150de:	3301      	adds	r3, #1
 80150e0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80150e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80150e4:	3302      	adds	r3, #2
 80150e6:	633b      	str	r3, [r7, #48]	; 0x30
 80150e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80150ea:	3b02      	subs	r3, #2
 80150ec:	637b      	str	r3, [r7, #52]	; 0x34
 80150ee:	e010      	b.n	8015112 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80150f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80150f2:	f7fc fc5f 	bl	80119b4 <ld_dword>
 80150f6:	4603      	mov	r3, r0
 80150f8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d102      	bne.n	8015106 <f_getfree+0x128>
 8015100:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015102:	3301      	adds	r3, #1
 8015104:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8015106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015108:	3304      	adds	r3, #4
 801510a:	633b      	str	r3, [r7, #48]	; 0x30
 801510c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801510e:	3b04      	subs	r3, #4
 8015110:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8015112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015114:	3b01      	subs	r3, #1
 8015116:	63fb      	str	r3, [r7, #60]	; 0x3c
 8015118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801511a:	2b00      	cmp	r3, #0
 801511c:	d1bd      	bne.n	801509a <f_getfree+0xbc>
 801511e:	e000      	b.n	8015122 <f_getfree+0x144>
							if (res != FR_OK) break;
 8015120:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8015122:	68bb      	ldr	r3, [r7, #8]
 8015124:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8015126:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8015128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801512a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801512c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 801512e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015130:	791a      	ldrb	r2, [r3, #4]
 8015132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015134:	f042 0201 	orr.w	r2, r2, #1
 8015138:	b2d2      	uxtb	r2, r2
 801513a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 801513c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801513e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8015142:	4611      	mov	r1, r2
 8015144:	4618      	mov	r0, r3
 8015146:	f7fc fd33 	bl	8011bb0 <unlock_fs>
 801514a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 801514e:	4618      	mov	r0, r3
 8015150:	3748      	adds	r7, #72	; 0x48
 8015152:	46bd      	mov	sp, r7
 8015154:	bd80      	pop	{r7, pc}

08015156 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8015156:	b580      	push	{r7, lr}
 8015158:	b088      	sub	sp, #32
 801515a:	af00      	add	r7, sp, #0
 801515c:	60f8      	str	r0, [r7, #12]
 801515e:	60b9      	str	r1, [r7, #8]
 8015160:	607a      	str	r2, [r7, #4]
	int n = 0;
 8015162:	2300      	movs	r3, #0
 8015164:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 801516a:	e01b      	b.n	80151a4 <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 801516c:	f107 0310 	add.w	r3, r7, #16
 8015170:	f107 0114 	add.w	r1, r7, #20
 8015174:	2201      	movs	r2, #1
 8015176:	6878      	ldr	r0, [r7, #4]
 8015178:	f7ff f8ba 	bl	80142f0 <f_read>
		if (rc != 1) break;
 801517c:	693b      	ldr	r3, [r7, #16]
 801517e:	2b01      	cmp	r3, #1
 8015180:	d116      	bne.n	80151b0 <f_gets+0x5a>
		c = s[0];
 8015182:	7d3b      	ldrb	r3, [r7, #20]
 8015184:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8015186:	7dfb      	ldrb	r3, [r7, #23]
 8015188:	2b0d      	cmp	r3, #13
 801518a:	d100      	bne.n	801518e <f_gets+0x38>
 801518c:	e00a      	b.n	80151a4 <f_gets+0x4e>
		*p++ = c;
 801518e:	69bb      	ldr	r3, [r7, #24]
 8015190:	1c5a      	adds	r2, r3, #1
 8015192:	61ba      	str	r2, [r7, #24]
 8015194:	7dfa      	ldrb	r2, [r7, #23]
 8015196:	701a      	strb	r2, [r3, #0]
		n++;
 8015198:	69fb      	ldr	r3, [r7, #28]
 801519a:	3301      	adds	r3, #1
 801519c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 801519e:	7dfb      	ldrb	r3, [r7, #23]
 80151a0:	2b0a      	cmp	r3, #10
 80151a2:	d007      	beq.n	80151b4 <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80151a4:	68bb      	ldr	r3, [r7, #8]
 80151a6:	3b01      	subs	r3, #1
 80151a8:	69fa      	ldr	r2, [r7, #28]
 80151aa:	429a      	cmp	r2, r3
 80151ac:	dbde      	blt.n	801516c <f_gets+0x16>
 80151ae:	e002      	b.n	80151b6 <f_gets+0x60>
		if (rc != 1) break;
 80151b0:	bf00      	nop
 80151b2:	e000      	b.n	80151b6 <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80151b4:	bf00      	nop
	}
	*p = 0;
 80151b6:	69bb      	ldr	r3, [r7, #24]
 80151b8:	2200      	movs	r2, #0
 80151ba:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80151bc:	69fb      	ldr	r3, [r7, #28]
 80151be:	2b00      	cmp	r3, #0
 80151c0:	d001      	beq.n	80151c6 <f_gets+0x70>
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	e000      	b.n	80151c8 <f_gets+0x72>
 80151c6:	2300      	movs	r3, #0
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3720      	adds	r7, #32
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b084      	sub	sp, #16
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	460b      	mov	r3, r1
 80151da:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80151dc:	78fb      	ldrb	r3, [r7, #3]
 80151de:	2b0a      	cmp	r3, #10
 80151e0:	d103      	bne.n	80151ea <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80151e2:	210d      	movs	r1, #13
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f7ff fff3 	bl	80151d0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	685b      	ldr	r3, [r3, #4]
 80151ee:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	db25      	blt.n	8015242 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	1c5a      	adds	r2, r3, #1
 80151fa:	60fa      	str	r2, [r7, #12]
 80151fc:	687a      	ldr	r2, [r7, #4]
 80151fe:	4413      	add	r3, r2
 8015200:	78fa      	ldrb	r2, [r7, #3]
 8015202:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8015204:	68fb      	ldr	r3, [r7, #12]
 8015206:	2b3c      	cmp	r3, #60	; 0x3c
 8015208:	dd12      	ble.n	8015230 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 801520a:	687b      	ldr	r3, [r7, #4]
 801520c:	6818      	ldr	r0, [r3, #0]
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	f103 010c 	add.w	r1, r3, #12
 8015214:	68fa      	ldr	r2, [r7, #12]
 8015216:	f107 0308 	add.w	r3, r7, #8
 801521a:	f7ff f9f7 	bl	801460c <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 801521e:	68ba      	ldr	r2, [r7, #8]
 8015220:	68fb      	ldr	r3, [r7, #12]
 8015222:	429a      	cmp	r2, r3
 8015224:	d101      	bne.n	801522a <putc_bfd+0x5a>
 8015226:	2300      	movs	r3, #0
 8015228:	e001      	b.n	801522e <putc_bfd+0x5e>
 801522a:	f04f 33ff 	mov.w	r3, #4294967295
 801522e:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	68fa      	ldr	r2, [r7, #12]
 8015234:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	689b      	ldr	r3, [r3, #8]
 801523a:	1c5a      	adds	r2, r3, #1
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	609a      	str	r2, [r3, #8]
 8015240:	e000      	b.n	8015244 <putc_bfd+0x74>
	if (i < 0) return;
 8015242:	bf00      	nop
}
 8015244:	3710      	adds	r7, #16
 8015246:	46bd      	mov	sp, r7
 8015248:	bd80      	pop	{r7, pc}

0801524a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 801524a:	b580      	push	{r7, lr}
 801524c:	b084      	sub	sp, #16
 801524e:	af00      	add	r7, sp, #0
 8015250:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	2b00      	cmp	r3, #0
 8015258:	db16      	blt.n	8015288 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	6818      	ldr	r0, [r3, #0]
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	f103 010c 	add.w	r1, r3, #12
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	685b      	ldr	r3, [r3, #4]
 8015268:	461a      	mov	r2, r3
 801526a:	f107 030c 	add.w	r3, r7, #12
 801526e:	f7ff f9cd 	bl	801460c <f_write>
 8015272:	4603      	mov	r3, r0
 8015274:	2b00      	cmp	r3, #0
 8015276:	d107      	bne.n	8015288 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	685b      	ldr	r3, [r3, #4]
 801527c:	68fa      	ldr	r2, [r7, #12]
 801527e:	4293      	cmp	r3, r2
 8015280:	d102      	bne.n	8015288 <putc_flush+0x3e>
 8015282:	687b      	ldr	r3, [r7, #4]
 8015284:	689b      	ldr	r3, [r3, #8]
 8015286:	e001      	b.n	801528c <putc_flush+0x42>
	return EOF;
 8015288:	f04f 33ff 	mov.w	r3, #4294967295
}
 801528c:	4618      	mov	r0, r3
 801528e:	3710      	adds	r7, #16
 8015290:	46bd      	mov	sp, r7
 8015292:	bd80      	pop	{r7, pc}

08015294 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8015294:	b480      	push	{r7}
 8015296:	b083      	sub	sp, #12
 8015298:	af00      	add	r7, sp, #0
 801529a:	6078      	str	r0, [r7, #4]
 801529c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 801529e:	687b      	ldr	r3, [r7, #4]
 80152a0:	683a      	ldr	r2, [r7, #0]
 80152a2:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2200      	movs	r2, #0
 80152a8:	605a      	str	r2, [r3, #4]
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	685a      	ldr	r2, [r3, #4]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	609a      	str	r2, [r3, #8]
}
 80152b2:	bf00      	nop
 80152b4:	370c      	adds	r7, #12
 80152b6:	46bd      	mov	sp, r7
 80152b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152bc:	4770      	bx	lr

080152be <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 80152be:	b580      	push	{r7, lr}
 80152c0:	b096      	sub	sp, #88	; 0x58
 80152c2:	af00      	add	r7, sp, #0
 80152c4:	6078      	str	r0, [r7, #4]
 80152c6:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 80152c8:	f107 030c 	add.w	r3, r7, #12
 80152cc:	6839      	ldr	r1, [r7, #0]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f7ff ffe0 	bl	8015294 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80152d4:	e009      	b.n	80152ea <f_puts+0x2c>
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	1c5a      	adds	r2, r3, #1
 80152da:	607a      	str	r2, [r7, #4]
 80152dc:	781a      	ldrb	r2, [r3, #0]
 80152de:	f107 030c 	add.w	r3, r7, #12
 80152e2:	4611      	mov	r1, r2
 80152e4:	4618      	mov	r0, r3
 80152e6:	f7ff ff73 	bl	80151d0 <putc_bfd>
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d1f1      	bne.n	80152d6 <f_puts+0x18>
	return putc_flush(&pb);
 80152f2:	f107 030c 	add.w	r3, r7, #12
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7ff ffa7 	bl	801524a <putc_flush>
 80152fc:	4603      	mov	r3, r0
}
 80152fe:	4618      	mov	r0, r3
 8015300:	3758      	adds	r7, #88	; 0x58
 8015302:	46bd      	mov	sp, r7
 8015304:	bd80      	pop	{r7, pc}
	...

08015308 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015308:	b480      	push	{r7}
 801530a:	b087      	sub	sp, #28
 801530c:	af00      	add	r7, sp, #0
 801530e:	60f8      	str	r0, [r7, #12]
 8015310:	60b9      	str	r1, [r7, #8]
 8015312:	4613      	mov	r3, r2
 8015314:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015316:	2301      	movs	r3, #1
 8015318:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801531a:	2300      	movs	r3, #0
 801531c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801531e:	4b1f      	ldr	r3, [pc, #124]	; (801539c <FATFS_LinkDriverEx+0x94>)
 8015320:	7a5b      	ldrb	r3, [r3, #9]
 8015322:	b2db      	uxtb	r3, r3
 8015324:	2b00      	cmp	r3, #0
 8015326:	d131      	bne.n	801538c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015328:	4b1c      	ldr	r3, [pc, #112]	; (801539c <FATFS_LinkDriverEx+0x94>)
 801532a:	7a5b      	ldrb	r3, [r3, #9]
 801532c:	b2db      	uxtb	r3, r3
 801532e:	461a      	mov	r2, r3
 8015330:	4b1a      	ldr	r3, [pc, #104]	; (801539c <FATFS_LinkDriverEx+0x94>)
 8015332:	2100      	movs	r1, #0
 8015334:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015336:	4b19      	ldr	r3, [pc, #100]	; (801539c <FATFS_LinkDriverEx+0x94>)
 8015338:	7a5b      	ldrb	r3, [r3, #9]
 801533a:	b2db      	uxtb	r3, r3
 801533c:	4a17      	ldr	r2, [pc, #92]	; (801539c <FATFS_LinkDriverEx+0x94>)
 801533e:	009b      	lsls	r3, r3, #2
 8015340:	4413      	add	r3, r2
 8015342:	68fa      	ldr	r2, [r7, #12]
 8015344:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015346:	4b15      	ldr	r3, [pc, #84]	; (801539c <FATFS_LinkDriverEx+0x94>)
 8015348:	7a5b      	ldrb	r3, [r3, #9]
 801534a:	b2db      	uxtb	r3, r3
 801534c:	461a      	mov	r2, r3
 801534e:	4b13      	ldr	r3, [pc, #76]	; (801539c <FATFS_LinkDriverEx+0x94>)
 8015350:	4413      	add	r3, r2
 8015352:	79fa      	ldrb	r2, [r7, #7]
 8015354:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015356:	4b11      	ldr	r3, [pc, #68]	; (801539c <FATFS_LinkDriverEx+0x94>)
 8015358:	7a5b      	ldrb	r3, [r3, #9]
 801535a:	b2db      	uxtb	r3, r3
 801535c:	1c5a      	adds	r2, r3, #1
 801535e:	b2d1      	uxtb	r1, r2
 8015360:	4a0e      	ldr	r2, [pc, #56]	; (801539c <FATFS_LinkDriverEx+0x94>)
 8015362:	7251      	strb	r1, [r2, #9]
 8015364:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015366:	7dbb      	ldrb	r3, [r7, #22]
 8015368:	3330      	adds	r3, #48	; 0x30
 801536a:	b2da      	uxtb	r2, r3
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	3301      	adds	r3, #1
 8015374:	223a      	movs	r2, #58	; 0x3a
 8015376:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015378:	68bb      	ldr	r3, [r7, #8]
 801537a:	3302      	adds	r3, #2
 801537c:	222f      	movs	r2, #47	; 0x2f
 801537e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015380:	68bb      	ldr	r3, [r7, #8]
 8015382:	3303      	adds	r3, #3
 8015384:	2200      	movs	r2, #0
 8015386:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015388:	2300      	movs	r3, #0
 801538a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801538c:	7dfb      	ldrb	r3, [r7, #23]
}
 801538e:	4618      	mov	r0, r3
 8015390:	371c      	adds	r7, #28
 8015392:	46bd      	mov	sp, r7
 8015394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015398:	4770      	bx	lr
 801539a:	bf00      	nop
 801539c:	20019188 	.word	0x20019188

080153a0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80153a0:	b580      	push	{r7, lr}
 80153a2:	b082      	sub	sp, #8
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
 80153a8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80153aa:	2200      	movs	r2, #0
 80153ac:	6839      	ldr	r1, [r7, #0]
 80153ae:	6878      	ldr	r0, [r7, #4]
 80153b0:	f7ff ffaa 	bl	8015308 <FATFS_LinkDriverEx>
 80153b4:	4603      	mov	r3, r0
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3708      	adds	r7, #8
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
	...

080153c0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80153c0:	b480      	push	{r7}
 80153c2:	b085      	sub	sp, #20
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	4603      	mov	r3, r0
 80153c8:	6039      	str	r1, [r7, #0]
 80153ca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80153cc:	88fb      	ldrh	r3, [r7, #6]
 80153ce:	2b7f      	cmp	r3, #127	; 0x7f
 80153d0:	d802      	bhi.n	80153d8 <ff_convert+0x18>
		c = chr;
 80153d2:	88fb      	ldrh	r3, [r7, #6]
 80153d4:	81fb      	strh	r3, [r7, #14]
 80153d6:	e025      	b.n	8015424 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80153d8:	683b      	ldr	r3, [r7, #0]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d00b      	beq.n	80153f6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80153de:	88fb      	ldrh	r3, [r7, #6]
 80153e0:	2bff      	cmp	r3, #255	; 0xff
 80153e2:	d805      	bhi.n	80153f0 <ff_convert+0x30>
 80153e4:	88fb      	ldrh	r3, [r7, #6]
 80153e6:	3b80      	subs	r3, #128	; 0x80
 80153e8:	4a12      	ldr	r2, [pc, #72]	; (8015434 <ff_convert+0x74>)
 80153ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80153ee:	e000      	b.n	80153f2 <ff_convert+0x32>
 80153f0:	2300      	movs	r3, #0
 80153f2:	81fb      	strh	r3, [r7, #14]
 80153f4:	e016      	b.n	8015424 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80153f6:	2300      	movs	r3, #0
 80153f8:	81fb      	strh	r3, [r7, #14]
 80153fa:	e009      	b.n	8015410 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80153fc:	89fb      	ldrh	r3, [r7, #14]
 80153fe:	4a0d      	ldr	r2, [pc, #52]	; (8015434 <ff_convert+0x74>)
 8015400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015404:	88fa      	ldrh	r2, [r7, #6]
 8015406:	429a      	cmp	r2, r3
 8015408:	d006      	beq.n	8015418 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 801540a:	89fb      	ldrh	r3, [r7, #14]
 801540c:	3301      	adds	r3, #1
 801540e:	81fb      	strh	r3, [r7, #14]
 8015410:	89fb      	ldrh	r3, [r7, #14]
 8015412:	2b7f      	cmp	r3, #127	; 0x7f
 8015414:	d9f2      	bls.n	80153fc <ff_convert+0x3c>
 8015416:	e000      	b.n	801541a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8015418:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 801541a:	89fb      	ldrh	r3, [r7, #14]
 801541c:	3380      	adds	r3, #128	; 0x80
 801541e:	b29b      	uxth	r3, r3
 8015420:	b2db      	uxtb	r3, r3
 8015422:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8015424:	89fb      	ldrh	r3, [r7, #14]
}
 8015426:	4618      	mov	r0, r3
 8015428:	3714      	adds	r7, #20
 801542a:	46bd      	mov	sp, r7
 801542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015430:	4770      	bx	lr
 8015432:	bf00      	nop
 8015434:	08028ce4 	.word	0x08028ce4

08015438 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8015438:	b480      	push	{r7}
 801543a:	b087      	sub	sp, #28
 801543c:	af00      	add	r7, sp, #0
 801543e:	4603      	mov	r3, r0
 8015440:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8015442:	88fb      	ldrh	r3, [r7, #6]
 8015444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015448:	d201      	bcs.n	801544e <ff_wtoupper+0x16>
 801544a:	4b3e      	ldr	r3, [pc, #248]	; (8015544 <ff_wtoupper+0x10c>)
 801544c:	e000      	b.n	8015450 <ff_wtoupper+0x18>
 801544e:	4b3e      	ldr	r3, [pc, #248]	; (8015548 <ff_wtoupper+0x110>)
 8015450:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8015452:	697b      	ldr	r3, [r7, #20]
 8015454:	1c9a      	adds	r2, r3, #2
 8015456:	617a      	str	r2, [r7, #20]
 8015458:	881b      	ldrh	r3, [r3, #0]
 801545a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801545c:	8a7b      	ldrh	r3, [r7, #18]
 801545e:	2b00      	cmp	r3, #0
 8015460:	d068      	beq.n	8015534 <ff_wtoupper+0xfc>
 8015462:	88fa      	ldrh	r2, [r7, #6]
 8015464:	8a7b      	ldrh	r3, [r7, #18]
 8015466:	429a      	cmp	r2, r3
 8015468:	d364      	bcc.n	8015534 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801546a:	697b      	ldr	r3, [r7, #20]
 801546c:	1c9a      	adds	r2, r3, #2
 801546e:	617a      	str	r2, [r7, #20]
 8015470:	881b      	ldrh	r3, [r3, #0]
 8015472:	823b      	strh	r3, [r7, #16]
 8015474:	8a3b      	ldrh	r3, [r7, #16]
 8015476:	0a1b      	lsrs	r3, r3, #8
 8015478:	81fb      	strh	r3, [r7, #14]
 801547a:	8a3b      	ldrh	r3, [r7, #16]
 801547c:	b2db      	uxtb	r3, r3
 801547e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8015480:	88fa      	ldrh	r2, [r7, #6]
 8015482:	8a79      	ldrh	r1, [r7, #18]
 8015484:	8a3b      	ldrh	r3, [r7, #16]
 8015486:	440b      	add	r3, r1
 8015488:	429a      	cmp	r2, r3
 801548a:	da49      	bge.n	8015520 <ff_wtoupper+0xe8>
			switch (cmd) {
 801548c:	89fb      	ldrh	r3, [r7, #14]
 801548e:	2b08      	cmp	r3, #8
 8015490:	d84f      	bhi.n	8015532 <ff_wtoupper+0xfa>
 8015492:	a201      	add	r2, pc, #4	; (adr r2, 8015498 <ff_wtoupper+0x60>)
 8015494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015498:	080154bd 	.word	0x080154bd
 801549c:	080154cf 	.word	0x080154cf
 80154a0:	080154e5 	.word	0x080154e5
 80154a4:	080154ed 	.word	0x080154ed
 80154a8:	080154f5 	.word	0x080154f5
 80154ac:	080154fd 	.word	0x080154fd
 80154b0:	08015505 	.word	0x08015505
 80154b4:	0801550d 	.word	0x0801550d
 80154b8:	08015515 	.word	0x08015515
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80154bc:	88fa      	ldrh	r2, [r7, #6]
 80154be:	8a7b      	ldrh	r3, [r7, #18]
 80154c0:	1ad3      	subs	r3, r2, r3
 80154c2:	005b      	lsls	r3, r3, #1
 80154c4:	697a      	ldr	r2, [r7, #20]
 80154c6:	4413      	add	r3, r2
 80154c8:	881b      	ldrh	r3, [r3, #0]
 80154ca:	80fb      	strh	r3, [r7, #6]
 80154cc:	e027      	b.n	801551e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80154ce:	88fa      	ldrh	r2, [r7, #6]
 80154d0:	8a7b      	ldrh	r3, [r7, #18]
 80154d2:	1ad3      	subs	r3, r2, r3
 80154d4:	b29b      	uxth	r3, r3
 80154d6:	f003 0301 	and.w	r3, r3, #1
 80154da:	b29b      	uxth	r3, r3
 80154dc:	88fa      	ldrh	r2, [r7, #6]
 80154de:	1ad3      	subs	r3, r2, r3
 80154e0:	80fb      	strh	r3, [r7, #6]
 80154e2:	e01c      	b.n	801551e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80154e4:	88fb      	ldrh	r3, [r7, #6]
 80154e6:	3b10      	subs	r3, #16
 80154e8:	80fb      	strh	r3, [r7, #6]
 80154ea:	e018      	b.n	801551e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80154ec:	88fb      	ldrh	r3, [r7, #6]
 80154ee:	3b20      	subs	r3, #32
 80154f0:	80fb      	strh	r3, [r7, #6]
 80154f2:	e014      	b.n	801551e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80154f4:	88fb      	ldrh	r3, [r7, #6]
 80154f6:	3b30      	subs	r3, #48	; 0x30
 80154f8:	80fb      	strh	r3, [r7, #6]
 80154fa:	e010      	b.n	801551e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80154fc:	88fb      	ldrh	r3, [r7, #6]
 80154fe:	3b1a      	subs	r3, #26
 8015500:	80fb      	strh	r3, [r7, #6]
 8015502:	e00c      	b.n	801551e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8015504:	88fb      	ldrh	r3, [r7, #6]
 8015506:	3308      	adds	r3, #8
 8015508:	80fb      	strh	r3, [r7, #6]
 801550a:	e008      	b.n	801551e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 801550c:	88fb      	ldrh	r3, [r7, #6]
 801550e:	3b50      	subs	r3, #80	; 0x50
 8015510:	80fb      	strh	r3, [r7, #6]
 8015512:	e004      	b.n	801551e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8015514:	88fb      	ldrh	r3, [r7, #6]
 8015516:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 801551a:	80fb      	strh	r3, [r7, #6]
 801551c:	bf00      	nop
			}
			break;
 801551e:	e008      	b.n	8015532 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8015520:	89fb      	ldrh	r3, [r7, #14]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d195      	bne.n	8015452 <ff_wtoupper+0x1a>
 8015526:	8a3b      	ldrh	r3, [r7, #16]
 8015528:	005b      	lsls	r3, r3, #1
 801552a:	697a      	ldr	r2, [r7, #20]
 801552c:	4413      	add	r3, r2
 801552e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8015530:	e78f      	b.n	8015452 <ff_wtoupper+0x1a>
			break;
 8015532:	bf00      	nop
	}

	return chr;
 8015534:	88fb      	ldrh	r3, [r7, #6]
}
 8015536:	4618      	mov	r0, r3
 8015538:	371c      	adds	r7, #28
 801553a:	46bd      	mov	sp, r7
 801553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015540:	4770      	bx	lr
 8015542:	bf00      	nop
 8015544:	08028de4 	.word	0x08028de4
 8015548:	08028fd8 	.word	0x08028fd8

0801554c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b084      	sub	sp, #16
 8015550:	af00      	add	r7, sp, #0
 8015552:	4603      	mov	r3, r0
 8015554:	6039      	str	r1, [r7, #0]
 8015556:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015558:	2200      	movs	r2, #0
 801555a:	2101      	movs	r1, #1
 801555c:	2001      	movs	r0, #1
 801555e:	f000 f978 	bl	8015852 <osSemaphoreNew>
 8015562:	4602      	mov	r2, r0
 8015564:	683b      	ldr	r3, [r7, #0]
 8015566:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015568:	683b      	ldr	r3, [r7, #0]
 801556a:	681b      	ldr	r3, [r3, #0]
 801556c:	2b00      	cmp	r3, #0
 801556e:	bf14      	ite	ne
 8015570:	2301      	movne	r3, #1
 8015572:	2300      	moveq	r3, #0
 8015574:	b2db      	uxtb	r3, r3
 8015576:	60fb      	str	r3, [r7, #12]

    return ret;
 8015578:	68fb      	ldr	r3, [r7, #12]
}
 801557a:	4618      	mov	r0, r3
 801557c:	3710      	adds	r7, #16
 801557e:	46bd      	mov	sp, r7
 8015580:	bd80      	pop	{r7, pc}

08015582 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015582:	b580      	push	{r7, lr}
 8015584:	b082      	sub	sp, #8
 8015586:	af00      	add	r7, sp, #0
 8015588:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801558a:	6878      	ldr	r0, [r7, #4]
 801558c:	f000 fa80 	bl	8015a90 <osSemaphoreDelete>
#endif
    return 1;
 8015590:	2301      	movs	r3, #1
}
 8015592:	4618      	mov	r0, r3
 8015594:	3708      	adds	r7, #8
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}

0801559a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801559a:	b580      	push	{r7, lr}
 801559c:	b084      	sub	sp, #16
 801559e:	af00      	add	r7, sp, #0
 80155a0:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80155a2:	2300      	movs	r3, #0
 80155a4:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80155a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80155aa:	6878      	ldr	r0, [r7, #4]
 80155ac:	f000 f9da 	bl	8015964 <osSemaphoreAcquire>
 80155b0:	4603      	mov	r3, r0
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d101      	bne.n	80155ba <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80155b6:	2301      	movs	r3, #1
 80155b8:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80155ba:	68fb      	ldr	r3, [r7, #12]
}
 80155bc:	4618      	mov	r0, r3
 80155be:	3710      	adds	r7, #16
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}

080155c4 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b082      	sub	sp, #8
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f000 fa1b 	bl	8015a08 <osSemaphoreRelease>
#endif
}
 80155d2:	bf00      	nop
 80155d4:	3708      	adds	r7, #8
 80155d6:	46bd      	mov	sp, r7
 80155d8:	bd80      	pop	{r7, pc}
	...

080155dc <__NVIC_SetPriority>:
{
 80155dc:	b480      	push	{r7}
 80155de:	b083      	sub	sp, #12
 80155e0:	af00      	add	r7, sp, #0
 80155e2:	4603      	mov	r3, r0
 80155e4:	6039      	str	r1, [r7, #0]
 80155e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80155e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155ec:	2b00      	cmp	r3, #0
 80155ee:	db0a      	blt.n	8015606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80155f0:	683b      	ldr	r3, [r7, #0]
 80155f2:	b2da      	uxtb	r2, r3
 80155f4:	490c      	ldr	r1, [pc, #48]	; (8015628 <__NVIC_SetPriority+0x4c>)
 80155f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155fa:	0112      	lsls	r2, r2, #4
 80155fc:	b2d2      	uxtb	r2, r2
 80155fe:	440b      	add	r3, r1
 8015600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8015604:	e00a      	b.n	801561c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8015606:	683b      	ldr	r3, [r7, #0]
 8015608:	b2da      	uxtb	r2, r3
 801560a:	4908      	ldr	r1, [pc, #32]	; (801562c <__NVIC_SetPriority+0x50>)
 801560c:	79fb      	ldrb	r3, [r7, #7]
 801560e:	f003 030f 	and.w	r3, r3, #15
 8015612:	3b04      	subs	r3, #4
 8015614:	0112      	lsls	r2, r2, #4
 8015616:	b2d2      	uxtb	r2, r2
 8015618:	440b      	add	r3, r1
 801561a:	761a      	strb	r2, [r3, #24]
}
 801561c:	bf00      	nop
 801561e:	370c      	adds	r7, #12
 8015620:	46bd      	mov	sp, r7
 8015622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015626:	4770      	bx	lr
 8015628:	e000e100 	.word	0xe000e100
 801562c:	e000ed00 	.word	0xe000ed00

08015630 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8015630:	b580      	push	{r7, lr}
 8015632:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8015634:	4b05      	ldr	r3, [pc, #20]	; (801564c <SysTick_Handler+0x1c>)
 8015636:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8015638:	f002 f98c 	bl	8017954 <xTaskGetSchedulerState>
 801563c:	4603      	mov	r3, r0
 801563e:	2b01      	cmp	r3, #1
 8015640:	d001      	beq.n	8015646 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8015642:	f003 f871 	bl	8018728 <xPortSysTickHandler>
  }
}
 8015646:	bf00      	nop
 8015648:	bd80      	pop	{r7, pc}
 801564a:	bf00      	nop
 801564c:	e000e010 	.word	0xe000e010

08015650 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015650:	b580      	push	{r7, lr}
 8015652:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8015654:	2100      	movs	r1, #0
 8015656:	f06f 0004 	mvn.w	r0, #4
 801565a:	f7ff ffbf 	bl	80155dc <__NVIC_SetPriority>
#endif
}
 801565e:	bf00      	nop
 8015660:	bd80      	pop	{r7, pc}
	...

08015664 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015664:	b480      	push	{r7}
 8015666:	b083      	sub	sp, #12
 8015668:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801566a:	f3ef 8305 	mrs	r3, IPSR
 801566e:	603b      	str	r3, [r7, #0]
  return(result);
 8015670:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015672:	2b00      	cmp	r3, #0
 8015674:	d003      	beq.n	801567e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8015676:	f06f 0305 	mvn.w	r3, #5
 801567a:	607b      	str	r3, [r7, #4]
 801567c:	e00c      	b.n	8015698 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801567e:	4b0a      	ldr	r3, [pc, #40]	; (80156a8 <osKernelInitialize+0x44>)
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d105      	bne.n	8015692 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015686:	4b08      	ldr	r3, [pc, #32]	; (80156a8 <osKernelInitialize+0x44>)
 8015688:	2201      	movs	r2, #1
 801568a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801568c:	2300      	movs	r3, #0
 801568e:	607b      	str	r3, [r7, #4]
 8015690:	e002      	b.n	8015698 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8015692:	f04f 33ff 	mov.w	r3, #4294967295
 8015696:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8015698:	687b      	ldr	r3, [r7, #4]
}
 801569a:	4618      	mov	r0, r3
 801569c:	370c      	adds	r7, #12
 801569e:	46bd      	mov	sp, r7
 80156a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156a4:	4770      	bx	lr
 80156a6:	bf00      	nop
 80156a8:	20019194 	.word	0x20019194

080156ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80156b2:	f3ef 8305 	mrs	r3, IPSR
 80156b6:	603b      	str	r3, [r7, #0]
  return(result);
 80156b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d003      	beq.n	80156c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80156be:	f06f 0305 	mvn.w	r3, #5
 80156c2:	607b      	str	r3, [r7, #4]
 80156c4:	e010      	b.n	80156e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80156c6:	4b0b      	ldr	r3, [pc, #44]	; (80156f4 <osKernelStart+0x48>)
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	2b01      	cmp	r3, #1
 80156cc:	d109      	bne.n	80156e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80156ce:	f7ff ffbf 	bl	8015650 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80156d2:	4b08      	ldr	r3, [pc, #32]	; (80156f4 <osKernelStart+0x48>)
 80156d4:	2202      	movs	r2, #2
 80156d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80156d8:	f001 fce0 	bl	801709c <vTaskStartScheduler>
      stat = osOK;
 80156dc:	2300      	movs	r3, #0
 80156de:	607b      	str	r3, [r7, #4]
 80156e0:	e002      	b.n	80156e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80156e2:	f04f 33ff 	mov.w	r3, #4294967295
 80156e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80156e8:	687b      	ldr	r3, [r7, #4]
}
 80156ea:	4618      	mov	r0, r3
 80156ec:	3708      	adds	r7, #8
 80156ee:	46bd      	mov	sp, r7
 80156f0:	bd80      	pop	{r7, pc}
 80156f2:	bf00      	nop
 80156f4:	20019194 	.word	0x20019194

080156f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80156f8:	b580      	push	{r7, lr}
 80156fa:	b08e      	sub	sp, #56	; 0x38
 80156fc:	af04      	add	r7, sp, #16
 80156fe:	60f8      	str	r0, [r7, #12]
 8015700:	60b9      	str	r1, [r7, #8]
 8015702:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015704:	2300      	movs	r3, #0
 8015706:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015708:	f3ef 8305 	mrs	r3, IPSR
 801570c:	617b      	str	r3, [r7, #20]
  return(result);
 801570e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8015710:	2b00      	cmp	r3, #0
 8015712:	d17e      	bne.n	8015812 <osThreadNew+0x11a>
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d07b      	beq.n	8015812 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 801571a:	2380      	movs	r3, #128	; 0x80
 801571c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801571e:	2318      	movs	r3, #24
 8015720:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8015722:	2300      	movs	r3, #0
 8015724:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8015726:	f04f 33ff 	mov.w	r3, #4294967295
 801572a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d045      	beq.n	80157be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	2b00      	cmp	r3, #0
 8015738:	d002      	beq.n	8015740 <osThreadNew+0x48>
        name = attr->name;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	681b      	ldr	r3, [r3, #0]
 801573e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	699b      	ldr	r3, [r3, #24]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d002      	beq.n	801574e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	699b      	ldr	r3, [r3, #24]
 801574c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801574e:	69fb      	ldr	r3, [r7, #28]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d008      	beq.n	8015766 <osThreadNew+0x6e>
 8015754:	69fb      	ldr	r3, [r7, #28]
 8015756:	2b38      	cmp	r3, #56	; 0x38
 8015758:	d805      	bhi.n	8015766 <osThreadNew+0x6e>
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	f003 0301 	and.w	r3, r3, #1
 8015762:	2b00      	cmp	r3, #0
 8015764:	d001      	beq.n	801576a <osThreadNew+0x72>
        return (NULL);
 8015766:	2300      	movs	r3, #0
 8015768:	e054      	b.n	8015814 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	695b      	ldr	r3, [r3, #20]
 801576e:	2b00      	cmp	r3, #0
 8015770:	d003      	beq.n	801577a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	695b      	ldr	r3, [r3, #20]
 8015776:	089b      	lsrs	r3, r3, #2
 8015778:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	689b      	ldr	r3, [r3, #8]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d00e      	beq.n	80157a0 <osThreadNew+0xa8>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	68db      	ldr	r3, [r3, #12]
 8015786:	2bbb      	cmp	r3, #187	; 0xbb
 8015788:	d90a      	bls.n	80157a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801578a:	687b      	ldr	r3, [r7, #4]
 801578c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801578e:	2b00      	cmp	r3, #0
 8015790:	d006      	beq.n	80157a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015792:	687b      	ldr	r3, [r7, #4]
 8015794:	695b      	ldr	r3, [r3, #20]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d002      	beq.n	80157a0 <osThreadNew+0xa8>
        mem = 1;
 801579a:	2301      	movs	r3, #1
 801579c:	61bb      	str	r3, [r7, #24]
 801579e:	e010      	b.n	80157c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	689b      	ldr	r3, [r3, #8]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d10c      	bne.n	80157c2 <osThreadNew+0xca>
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	68db      	ldr	r3, [r3, #12]
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d108      	bne.n	80157c2 <osThreadNew+0xca>
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	691b      	ldr	r3, [r3, #16]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d104      	bne.n	80157c2 <osThreadNew+0xca>
          mem = 0;
 80157b8:	2300      	movs	r3, #0
 80157ba:	61bb      	str	r3, [r7, #24]
 80157bc:	e001      	b.n	80157c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80157be:	2300      	movs	r3, #0
 80157c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80157c2:	69bb      	ldr	r3, [r7, #24]
 80157c4:	2b01      	cmp	r3, #1
 80157c6:	d110      	bne.n	80157ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80157cc:	687a      	ldr	r2, [r7, #4]
 80157ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80157d0:	9202      	str	r2, [sp, #8]
 80157d2:	9301      	str	r3, [sp, #4]
 80157d4:	69fb      	ldr	r3, [r7, #28]
 80157d6:	9300      	str	r3, [sp, #0]
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	6a3a      	ldr	r2, [r7, #32]
 80157dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80157de:	68f8      	ldr	r0, [r7, #12]
 80157e0:	f001 fa70 	bl	8016cc4 <xTaskCreateStatic>
 80157e4:	4603      	mov	r3, r0
 80157e6:	613b      	str	r3, [r7, #16]
 80157e8:	e013      	b.n	8015812 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d110      	bne.n	8015812 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80157f0:	6a3b      	ldr	r3, [r7, #32]
 80157f2:	b29a      	uxth	r2, r3
 80157f4:	f107 0310 	add.w	r3, r7, #16
 80157f8:	9301      	str	r3, [sp, #4]
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	9300      	str	r3, [sp, #0]
 80157fe:	68bb      	ldr	r3, [r7, #8]
 8015800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015802:	68f8      	ldr	r0, [r7, #12]
 8015804:	f001 fabb 	bl	8016d7e <xTaskCreate>
 8015808:	4603      	mov	r3, r0
 801580a:	2b01      	cmp	r3, #1
 801580c:	d001      	beq.n	8015812 <osThreadNew+0x11a>
            hTask = NULL;
 801580e:	2300      	movs	r3, #0
 8015810:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015812:	693b      	ldr	r3, [r7, #16]
}
 8015814:	4618      	mov	r0, r3
 8015816:	3728      	adds	r7, #40	; 0x28
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}

0801581c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801581c:	b580      	push	{r7, lr}
 801581e:	b084      	sub	sp, #16
 8015820:	af00      	add	r7, sp, #0
 8015822:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015824:	f3ef 8305 	mrs	r3, IPSR
 8015828:	60bb      	str	r3, [r7, #8]
  return(result);
 801582a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801582c:	2b00      	cmp	r3, #0
 801582e:	d003      	beq.n	8015838 <osDelay+0x1c>
    stat = osErrorISR;
 8015830:	f06f 0305 	mvn.w	r3, #5
 8015834:	60fb      	str	r3, [r7, #12]
 8015836:	e007      	b.n	8015848 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8015838:	2300      	movs	r3, #0
 801583a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d002      	beq.n	8015848 <osDelay+0x2c>
      vTaskDelay(ticks);
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f001 fbf6 	bl	8017034 <vTaskDelay>
    }
  }

  return (stat);
 8015848:	68fb      	ldr	r3, [r7, #12]
}
 801584a:	4618      	mov	r0, r3
 801584c:	3710      	adds	r7, #16
 801584e:	46bd      	mov	sp, r7
 8015850:	bd80      	pop	{r7, pc}

08015852 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8015852:	b580      	push	{r7, lr}
 8015854:	b08a      	sub	sp, #40	; 0x28
 8015856:	af02      	add	r7, sp, #8
 8015858:	60f8      	str	r0, [r7, #12]
 801585a:	60b9      	str	r1, [r7, #8]
 801585c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801585e:	2300      	movs	r3, #0
 8015860:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015862:	f3ef 8305 	mrs	r3, IPSR
 8015866:	613b      	str	r3, [r7, #16]
  return(result);
 8015868:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801586a:	2b00      	cmp	r3, #0
 801586c:	d175      	bne.n	801595a <osSemaphoreNew+0x108>
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	2b00      	cmp	r3, #0
 8015872:	d072      	beq.n	801595a <osSemaphoreNew+0x108>
 8015874:	68ba      	ldr	r2, [r7, #8]
 8015876:	68fb      	ldr	r3, [r7, #12]
 8015878:	429a      	cmp	r2, r3
 801587a:	d86e      	bhi.n	801595a <osSemaphoreNew+0x108>
    mem = -1;
 801587c:	f04f 33ff 	mov.w	r3, #4294967295
 8015880:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	2b00      	cmp	r3, #0
 8015886:	d015      	beq.n	80158b4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015888:	687b      	ldr	r3, [r7, #4]
 801588a:	689b      	ldr	r3, [r3, #8]
 801588c:	2b00      	cmp	r3, #0
 801588e:	d006      	beq.n	801589e <osSemaphoreNew+0x4c>
 8015890:	687b      	ldr	r3, [r7, #4]
 8015892:	68db      	ldr	r3, [r3, #12]
 8015894:	2b4f      	cmp	r3, #79	; 0x4f
 8015896:	d902      	bls.n	801589e <osSemaphoreNew+0x4c>
        mem = 1;
 8015898:	2301      	movs	r3, #1
 801589a:	61bb      	str	r3, [r7, #24]
 801589c:	e00c      	b.n	80158b8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	689b      	ldr	r3, [r3, #8]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d108      	bne.n	80158b8 <osSemaphoreNew+0x66>
 80158a6:	687b      	ldr	r3, [r7, #4]
 80158a8:	68db      	ldr	r3, [r3, #12]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d104      	bne.n	80158b8 <osSemaphoreNew+0x66>
          mem = 0;
 80158ae:	2300      	movs	r3, #0
 80158b0:	61bb      	str	r3, [r7, #24]
 80158b2:	e001      	b.n	80158b8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80158b4:	2300      	movs	r3, #0
 80158b6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80158b8:	69bb      	ldr	r3, [r7, #24]
 80158ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158be:	d04c      	beq.n	801595a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80158c0:	68fb      	ldr	r3, [r7, #12]
 80158c2:	2b01      	cmp	r3, #1
 80158c4:	d128      	bne.n	8015918 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80158c6:	69bb      	ldr	r3, [r7, #24]
 80158c8:	2b01      	cmp	r3, #1
 80158ca:	d10a      	bne.n	80158e2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	689b      	ldr	r3, [r3, #8]
 80158d0:	2203      	movs	r2, #3
 80158d2:	9200      	str	r2, [sp, #0]
 80158d4:	2200      	movs	r2, #0
 80158d6:	2100      	movs	r1, #0
 80158d8:	2001      	movs	r0, #1
 80158da:	f000 fa4d 	bl	8015d78 <xQueueGenericCreateStatic>
 80158de:	61f8      	str	r0, [r7, #28]
 80158e0:	e005      	b.n	80158ee <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80158e2:	2203      	movs	r2, #3
 80158e4:	2100      	movs	r1, #0
 80158e6:	2001      	movs	r0, #1
 80158e8:	f000 fabe 	bl	8015e68 <xQueueGenericCreate>
 80158ec:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80158ee:	69fb      	ldr	r3, [r7, #28]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d022      	beq.n	801593a <osSemaphoreNew+0xe8>
 80158f4:	68bb      	ldr	r3, [r7, #8]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d01f      	beq.n	801593a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80158fa:	2300      	movs	r3, #0
 80158fc:	2200      	movs	r2, #0
 80158fe:	2100      	movs	r1, #0
 8015900:	69f8      	ldr	r0, [r7, #28]
 8015902:	f000 fb79 	bl	8015ff8 <xQueueGenericSend>
 8015906:	4603      	mov	r3, r0
 8015908:	2b01      	cmp	r3, #1
 801590a:	d016      	beq.n	801593a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801590c:	69f8      	ldr	r0, [r7, #28]
 801590e:	f001 f805 	bl	801691c <vQueueDelete>
            hSemaphore = NULL;
 8015912:	2300      	movs	r3, #0
 8015914:	61fb      	str	r3, [r7, #28]
 8015916:	e010      	b.n	801593a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8015918:	69bb      	ldr	r3, [r7, #24]
 801591a:	2b01      	cmp	r3, #1
 801591c:	d108      	bne.n	8015930 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801591e:	687b      	ldr	r3, [r7, #4]
 8015920:	689b      	ldr	r3, [r3, #8]
 8015922:	461a      	mov	r2, r3
 8015924:	68b9      	ldr	r1, [r7, #8]
 8015926:	68f8      	ldr	r0, [r7, #12]
 8015928:	f000 fafb 	bl	8015f22 <xQueueCreateCountingSemaphoreStatic>
 801592c:	61f8      	str	r0, [r7, #28]
 801592e:	e004      	b.n	801593a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8015930:	68b9      	ldr	r1, [r7, #8]
 8015932:	68f8      	ldr	r0, [r7, #12]
 8015934:	f000 fb2c 	bl	8015f90 <xQueueCreateCountingSemaphore>
 8015938:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 801593a:	69fb      	ldr	r3, [r7, #28]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d00c      	beq.n	801595a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d003      	beq.n	801594e <osSemaphoreNew+0xfc>
          name = attr->name;
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	681b      	ldr	r3, [r3, #0]
 801594a:	617b      	str	r3, [r7, #20]
 801594c:	e001      	b.n	8015952 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801594e:	2300      	movs	r3, #0
 8015950:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8015952:	6979      	ldr	r1, [r7, #20]
 8015954:	69f8      	ldr	r0, [r7, #28]
 8015956:	f001 f92d 	bl	8016bb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801595a:	69fb      	ldr	r3, [r7, #28]
}
 801595c:	4618      	mov	r0, r3
 801595e:	3720      	adds	r7, #32
 8015960:	46bd      	mov	sp, r7
 8015962:	bd80      	pop	{r7, pc}

08015964 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8015964:	b580      	push	{r7, lr}
 8015966:	b086      	sub	sp, #24
 8015968:	af00      	add	r7, sp, #0
 801596a:	6078      	str	r0, [r7, #4]
 801596c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015972:	2300      	movs	r3, #0
 8015974:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d103      	bne.n	8015984 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801597c:	f06f 0303 	mvn.w	r3, #3
 8015980:	617b      	str	r3, [r7, #20]
 8015982:	e039      	b.n	80159f8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015984:	f3ef 8305 	mrs	r3, IPSR
 8015988:	60fb      	str	r3, [r7, #12]
  return(result);
 801598a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801598c:	2b00      	cmp	r3, #0
 801598e:	d022      	beq.n	80159d6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d003      	beq.n	801599e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8015996:	f06f 0303 	mvn.w	r3, #3
 801599a:	617b      	str	r3, [r7, #20]
 801599c:	e02c      	b.n	80159f8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801599e:	2300      	movs	r3, #0
 80159a0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80159a2:	f107 0308 	add.w	r3, r7, #8
 80159a6:	461a      	mov	r2, r3
 80159a8:	2100      	movs	r1, #0
 80159aa:	6938      	ldr	r0, [r7, #16]
 80159ac:	f000 ff36 	bl	801681c <xQueueReceiveFromISR>
 80159b0:	4603      	mov	r3, r0
 80159b2:	2b01      	cmp	r3, #1
 80159b4:	d003      	beq.n	80159be <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80159b6:	f06f 0302 	mvn.w	r3, #2
 80159ba:	617b      	str	r3, [r7, #20]
 80159bc:	e01c      	b.n	80159f8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80159be:	68bb      	ldr	r3, [r7, #8]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d019      	beq.n	80159f8 <osSemaphoreAcquire+0x94>
 80159c4:	4b0f      	ldr	r3, [pc, #60]	; (8015a04 <osSemaphoreAcquire+0xa0>)
 80159c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80159ca:	601a      	str	r2, [r3, #0]
 80159cc:	f3bf 8f4f 	dsb	sy
 80159d0:	f3bf 8f6f 	isb	sy
 80159d4:	e010      	b.n	80159f8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80159d6:	6839      	ldr	r1, [r7, #0]
 80159d8:	6938      	ldr	r0, [r7, #16]
 80159da:	f000 fe13 	bl	8016604 <xQueueSemaphoreTake>
 80159de:	4603      	mov	r3, r0
 80159e0:	2b01      	cmp	r3, #1
 80159e2:	d009      	beq.n	80159f8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80159e4:	683b      	ldr	r3, [r7, #0]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d003      	beq.n	80159f2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80159ea:	f06f 0301 	mvn.w	r3, #1
 80159ee:	617b      	str	r3, [r7, #20]
 80159f0:	e002      	b.n	80159f8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80159f2:	f06f 0302 	mvn.w	r3, #2
 80159f6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80159f8:	697b      	ldr	r3, [r7, #20]
}
 80159fa:	4618      	mov	r0, r3
 80159fc:	3718      	adds	r7, #24
 80159fe:	46bd      	mov	sp, r7
 8015a00:	bd80      	pop	{r7, pc}
 8015a02:	bf00      	nop
 8015a04:	e000ed04 	.word	0xe000ed04

08015a08 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8015a08:	b580      	push	{r7, lr}
 8015a0a:	b086      	sub	sp, #24
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8015a14:	2300      	movs	r3, #0
 8015a16:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8015a18:	693b      	ldr	r3, [r7, #16]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d103      	bne.n	8015a26 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8015a1e:	f06f 0303 	mvn.w	r3, #3
 8015a22:	617b      	str	r3, [r7, #20]
 8015a24:	e02c      	b.n	8015a80 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a26:	f3ef 8305 	mrs	r3, IPSR
 8015a2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8015a2c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8015a2e:	2b00      	cmp	r3, #0
 8015a30:	d01a      	beq.n	8015a68 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8015a32:	2300      	movs	r3, #0
 8015a34:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8015a36:	f107 0308 	add.w	r3, r7, #8
 8015a3a:	4619      	mov	r1, r3
 8015a3c:	6938      	ldr	r0, [r7, #16]
 8015a3e:	f000 fc74 	bl	801632a <xQueueGiveFromISR>
 8015a42:	4603      	mov	r3, r0
 8015a44:	2b01      	cmp	r3, #1
 8015a46:	d003      	beq.n	8015a50 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8015a48:	f06f 0302 	mvn.w	r3, #2
 8015a4c:	617b      	str	r3, [r7, #20]
 8015a4e:	e017      	b.n	8015a80 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	2b00      	cmp	r3, #0
 8015a54:	d014      	beq.n	8015a80 <osSemaphoreRelease+0x78>
 8015a56:	4b0d      	ldr	r3, [pc, #52]	; (8015a8c <osSemaphoreRelease+0x84>)
 8015a58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015a5c:	601a      	str	r2, [r3, #0]
 8015a5e:	f3bf 8f4f 	dsb	sy
 8015a62:	f3bf 8f6f 	isb	sy
 8015a66:	e00b      	b.n	8015a80 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8015a68:	2300      	movs	r3, #0
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	2100      	movs	r1, #0
 8015a6e:	6938      	ldr	r0, [r7, #16]
 8015a70:	f000 fac2 	bl	8015ff8 <xQueueGenericSend>
 8015a74:	4603      	mov	r3, r0
 8015a76:	2b01      	cmp	r3, #1
 8015a78:	d002      	beq.n	8015a80 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8015a7a:	f06f 0302 	mvn.w	r3, #2
 8015a7e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8015a80:	697b      	ldr	r3, [r7, #20]
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	3718      	adds	r7, #24
 8015a86:	46bd      	mov	sp, r7
 8015a88:	bd80      	pop	{r7, pc}
 8015a8a:	bf00      	nop
 8015a8c:	e000ed04 	.word	0xe000ed04

08015a90 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8015a90:	b580      	push	{r7, lr}
 8015a92:	b086      	sub	sp, #24
 8015a94:	af00      	add	r7, sp, #0
 8015a96:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a9c:	f3ef 8305 	mrs	r3, IPSR
 8015aa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8015aa2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8015aa4:	2b00      	cmp	r3, #0
 8015aa6:	d003      	beq.n	8015ab0 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8015aa8:	f06f 0305 	mvn.w	r3, #5
 8015aac:	617b      	str	r3, [r7, #20]
 8015aae:	e00e      	b.n	8015ace <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8015ab0:	693b      	ldr	r3, [r7, #16]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d103      	bne.n	8015abe <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8015ab6:	f06f 0303 	mvn.w	r3, #3
 8015aba:	617b      	str	r3, [r7, #20]
 8015abc:	e007      	b.n	8015ace <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8015abe:	6938      	ldr	r0, [r7, #16]
 8015ac0:	f001 f8a2 	bl	8016c08 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8015ac4:	2300      	movs	r3, #0
 8015ac6:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8015ac8:	6938      	ldr	r0, [r7, #16]
 8015aca:	f000 ff27 	bl	801691c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8015ace:	697b      	ldr	r3, [r7, #20]
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3718      	adds	r7, #24
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8015ad8:	b480      	push	{r7}
 8015ada:	b085      	sub	sp, #20
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	60f8      	str	r0, [r7, #12]
 8015ae0:	60b9      	str	r1, [r7, #8]
 8015ae2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8015ae4:	68fb      	ldr	r3, [r7, #12]
 8015ae6:	4a07      	ldr	r2, [pc, #28]	; (8015b04 <vApplicationGetIdleTaskMemory+0x2c>)
 8015ae8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8015aea:	68bb      	ldr	r3, [r7, #8]
 8015aec:	4a06      	ldr	r2, [pc, #24]	; (8015b08 <vApplicationGetIdleTaskMemory+0x30>)
 8015aee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8015af0:	687b      	ldr	r3, [r7, #4]
 8015af2:	2280      	movs	r2, #128	; 0x80
 8015af4:	601a      	str	r2, [r3, #0]
}
 8015af6:	bf00      	nop
 8015af8:	3714      	adds	r7, #20
 8015afa:	46bd      	mov	sp, r7
 8015afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b00:	4770      	bx	lr
 8015b02:	bf00      	nop
 8015b04:	20019198 	.word	0x20019198
 8015b08:	20019254 	.word	0x20019254

08015b0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8015b0c:	b480      	push	{r7}
 8015b0e:	b085      	sub	sp, #20
 8015b10:	af00      	add	r7, sp, #0
 8015b12:	60f8      	str	r0, [r7, #12]
 8015b14:	60b9      	str	r1, [r7, #8]
 8015b16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8015b18:	68fb      	ldr	r3, [r7, #12]
 8015b1a:	4a07      	ldr	r2, [pc, #28]	; (8015b38 <vApplicationGetTimerTaskMemory+0x2c>)
 8015b1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8015b1e:	68bb      	ldr	r3, [r7, #8]
 8015b20:	4a06      	ldr	r2, [pc, #24]	; (8015b3c <vApplicationGetTimerTaskMemory+0x30>)
 8015b22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015b2a:	601a      	str	r2, [r3, #0]
}
 8015b2c:	bf00      	nop
 8015b2e:	3714      	adds	r7, #20
 8015b30:	46bd      	mov	sp, r7
 8015b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b36:	4770      	bx	lr
 8015b38:	20019454 	.word	0x20019454
 8015b3c:	20019510 	.word	0x20019510

08015b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8015b40:	b480      	push	{r7}
 8015b42:	b083      	sub	sp, #12
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	f103 0208 	add.w	r2, r3, #8
 8015b4e:	687b      	ldr	r3, [r7, #4]
 8015b50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	f04f 32ff 	mov.w	r2, #4294967295
 8015b58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f103 0208 	add.w	r2, r3, #8
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f103 0208 	add.w	r2, r3, #8
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015b6e:	687b      	ldr	r3, [r7, #4]
 8015b70:	2200      	movs	r2, #0
 8015b72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015b74:	bf00      	nop
 8015b76:	370c      	adds	r7, #12
 8015b78:	46bd      	mov	sp, r7
 8015b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7e:	4770      	bx	lr

08015b80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8015b80:	b480      	push	{r7}
 8015b82:	b083      	sub	sp, #12
 8015b84:	af00      	add	r7, sp, #0
 8015b86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2200      	movs	r2, #0
 8015b8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8015b8e:	bf00      	nop
 8015b90:	370c      	adds	r7, #12
 8015b92:	46bd      	mov	sp, r7
 8015b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b98:	4770      	bx	lr

08015b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015b9a:	b480      	push	{r7}
 8015b9c:	b085      	sub	sp, #20
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	6078      	str	r0, [r7, #4]
 8015ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8015ba4:	687b      	ldr	r3, [r7, #4]
 8015ba6:	685b      	ldr	r3, [r3, #4]
 8015ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8015baa:	683b      	ldr	r3, [r7, #0]
 8015bac:	68fa      	ldr	r2, [r7, #12]
 8015bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	689a      	ldr	r2, [r3, #8]
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	689b      	ldr	r3, [r3, #8]
 8015bbc:	683a      	ldr	r2, [r7, #0]
 8015bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015bc0:	68fb      	ldr	r3, [r7, #12]
 8015bc2:	683a      	ldr	r2, [r7, #0]
 8015bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8015bc6:	683b      	ldr	r3, [r7, #0]
 8015bc8:	687a      	ldr	r2, [r7, #4]
 8015bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	681b      	ldr	r3, [r3, #0]
 8015bd0:	1c5a      	adds	r2, r3, #1
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	601a      	str	r2, [r3, #0]
}
 8015bd6:	bf00      	nop
 8015bd8:	3714      	adds	r7, #20
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be0:	4770      	bx	lr

08015be2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015be2:	b480      	push	{r7}
 8015be4:	b085      	sub	sp, #20
 8015be6:	af00      	add	r7, sp, #0
 8015be8:	6078      	str	r0, [r7, #4]
 8015bea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015bec:	683b      	ldr	r3, [r7, #0]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015bf2:	68bb      	ldr	r3, [r7, #8]
 8015bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015bf8:	d103      	bne.n	8015c02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	691b      	ldr	r3, [r3, #16]
 8015bfe:	60fb      	str	r3, [r7, #12]
 8015c00:	e00c      	b.n	8015c1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	3308      	adds	r3, #8
 8015c06:	60fb      	str	r3, [r7, #12]
 8015c08:	e002      	b.n	8015c10 <vListInsert+0x2e>
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	685b      	ldr	r3, [r3, #4]
 8015c0e:	60fb      	str	r3, [r7, #12]
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	685b      	ldr	r3, [r3, #4]
 8015c14:	681b      	ldr	r3, [r3, #0]
 8015c16:	68ba      	ldr	r2, [r7, #8]
 8015c18:	429a      	cmp	r2, r3
 8015c1a:	d2f6      	bcs.n	8015c0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	685a      	ldr	r2, [r3, #4]
 8015c20:	683b      	ldr	r3, [r7, #0]
 8015c22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	685b      	ldr	r3, [r3, #4]
 8015c28:	683a      	ldr	r2, [r7, #0]
 8015c2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8015c2c:	683b      	ldr	r3, [r7, #0]
 8015c2e:	68fa      	ldr	r2, [r7, #12]
 8015c30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	683a      	ldr	r2, [r7, #0]
 8015c36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8015c38:	683b      	ldr	r3, [r7, #0]
 8015c3a:	687a      	ldr	r2, [r7, #4]
 8015c3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8015c3e:	687b      	ldr	r3, [r7, #4]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	1c5a      	adds	r2, r3, #1
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	601a      	str	r2, [r3, #0]
}
 8015c48:	bf00      	nop
 8015c4a:	3714      	adds	r7, #20
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c52:	4770      	bx	lr

08015c54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8015c54:	b480      	push	{r7}
 8015c56:	b085      	sub	sp, #20
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	691b      	ldr	r3, [r3, #16]
 8015c60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	687a      	ldr	r2, [r7, #4]
 8015c68:	6892      	ldr	r2, [r2, #8]
 8015c6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	689b      	ldr	r3, [r3, #8]
 8015c70:	687a      	ldr	r2, [r7, #4]
 8015c72:	6852      	ldr	r2, [r2, #4]
 8015c74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	685b      	ldr	r3, [r3, #4]
 8015c7a:	687a      	ldr	r2, [r7, #4]
 8015c7c:	429a      	cmp	r2, r3
 8015c7e:	d103      	bne.n	8015c88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	689a      	ldr	r2, [r3, #8]
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	1e5a      	subs	r2, r3, #1
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	681b      	ldr	r3, [r3, #0]
}
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	3714      	adds	r7, #20
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca6:	4770      	bx	lr

08015ca8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b084      	sub	sp, #16
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8015cb6:	68fb      	ldr	r3, [r7, #12]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d10a      	bne.n	8015cd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc0:	f383 8811 	msr	BASEPRI, r3
 8015cc4:	f3bf 8f6f 	isb	sy
 8015cc8:	f3bf 8f4f 	dsb	sy
 8015ccc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8015cce:	bf00      	nop
 8015cd0:	e7fe      	b.n	8015cd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8015cd2:	f002 fc97 	bl	8018604 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	681a      	ldr	r2, [r3, #0]
 8015cda:	68fb      	ldr	r3, [r7, #12]
 8015cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015cde:	68f9      	ldr	r1, [r7, #12]
 8015ce0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015ce2:	fb01 f303 	mul.w	r3, r1, r3
 8015ce6:	441a      	add	r2, r3
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	2200      	movs	r2, #0
 8015cf0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	681a      	ldr	r2, [r3, #0]
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	681a      	ldr	r2, [r3, #0]
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d02:	3b01      	subs	r3, #1
 8015d04:	68f9      	ldr	r1, [r7, #12]
 8015d06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8015d08:	fb01 f303 	mul.w	r3, r1, r3
 8015d0c:	441a      	add	r2, r3
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	22ff      	movs	r2, #255	; 0xff
 8015d16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015d1a:	68fb      	ldr	r3, [r7, #12]
 8015d1c:	22ff      	movs	r2, #255	; 0xff
 8015d1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8015d22:	683b      	ldr	r3, [r7, #0]
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d114      	bne.n	8015d52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	691b      	ldr	r3, [r3, #16]
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d01a      	beq.n	8015d66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	3310      	adds	r3, #16
 8015d34:	4618      	mov	r0, r3
 8015d36:	f001 fc4b 	bl	80175d0 <xTaskRemoveFromEventList>
 8015d3a:	4603      	mov	r3, r0
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	d012      	beq.n	8015d66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8015d40:	4b0c      	ldr	r3, [pc, #48]	; (8015d74 <xQueueGenericReset+0xcc>)
 8015d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015d46:	601a      	str	r2, [r3, #0]
 8015d48:	f3bf 8f4f 	dsb	sy
 8015d4c:	f3bf 8f6f 	isb	sy
 8015d50:	e009      	b.n	8015d66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	3310      	adds	r3, #16
 8015d56:	4618      	mov	r0, r3
 8015d58:	f7ff fef2 	bl	8015b40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015d5c:	68fb      	ldr	r3, [r7, #12]
 8015d5e:	3324      	adds	r3, #36	; 0x24
 8015d60:	4618      	mov	r0, r3
 8015d62:	f7ff feed 	bl	8015b40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8015d66:	f002 fc7d 	bl	8018664 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8015d6a:	2301      	movs	r3, #1
}
 8015d6c:	4618      	mov	r0, r3
 8015d6e:	3710      	adds	r7, #16
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}
 8015d74:	e000ed04 	.word	0xe000ed04

08015d78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8015d78:	b580      	push	{r7, lr}
 8015d7a:	b08e      	sub	sp, #56	; 0x38
 8015d7c:	af02      	add	r7, sp, #8
 8015d7e:	60f8      	str	r0, [r7, #12]
 8015d80:	60b9      	str	r1, [r7, #8]
 8015d82:	607a      	str	r2, [r7, #4]
 8015d84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d10a      	bne.n	8015da2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8015d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d90:	f383 8811 	msr	BASEPRI, r3
 8015d94:	f3bf 8f6f 	isb	sy
 8015d98:	f3bf 8f4f 	dsb	sy
 8015d9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8015d9e:	bf00      	nop
 8015da0:	e7fe      	b.n	8015da0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8015da2:	683b      	ldr	r3, [r7, #0]
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	d10a      	bne.n	8015dbe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8015da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dac:	f383 8811 	msr	BASEPRI, r3
 8015db0:	f3bf 8f6f 	isb	sy
 8015db4:	f3bf 8f4f 	dsb	sy
 8015db8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8015dba:	bf00      	nop
 8015dbc:	e7fe      	b.n	8015dbc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d002      	beq.n	8015dca <xQueueGenericCreateStatic+0x52>
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d001      	beq.n	8015dce <xQueueGenericCreateStatic+0x56>
 8015dca:	2301      	movs	r3, #1
 8015dcc:	e000      	b.n	8015dd0 <xQueueGenericCreateStatic+0x58>
 8015dce:	2300      	movs	r3, #0
 8015dd0:	2b00      	cmp	r3, #0
 8015dd2:	d10a      	bne.n	8015dea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8015dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dd8:	f383 8811 	msr	BASEPRI, r3
 8015ddc:	f3bf 8f6f 	isb	sy
 8015de0:	f3bf 8f4f 	dsb	sy
 8015de4:	623b      	str	r3, [r7, #32]
}
 8015de6:	bf00      	nop
 8015de8:	e7fe      	b.n	8015de8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	2b00      	cmp	r3, #0
 8015dee:	d102      	bne.n	8015df6 <xQueueGenericCreateStatic+0x7e>
 8015df0:	68bb      	ldr	r3, [r7, #8]
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d101      	bne.n	8015dfa <xQueueGenericCreateStatic+0x82>
 8015df6:	2301      	movs	r3, #1
 8015df8:	e000      	b.n	8015dfc <xQueueGenericCreateStatic+0x84>
 8015dfa:	2300      	movs	r3, #0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d10a      	bne.n	8015e16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8015e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e04:	f383 8811 	msr	BASEPRI, r3
 8015e08:	f3bf 8f6f 	isb	sy
 8015e0c:	f3bf 8f4f 	dsb	sy
 8015e10:	61fb      	str	r3, [r7, #28]
}
 8015e12:	bf00      	nop
 8015e14:	e7fe      	b.n	8015e14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8015e16:	2350      	movs	r3, #80	; 0x50
 8015e18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8015e1a:	697b      	ldr	r3, [r7, #20]
 8015e1c:	2b50      	cmp	r3, #80	; 0x50
 8015e1e:	d00a      	beq.n	8015e36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8015e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e24:	f383 8811 	msr	BASEPRI, r3
 8015e28:	f3bf 8f6f 	isb	sy
 8015e2c:	f3bf 8f4f 	dsb	sy
 8015e30:	61bb      	str	r3, [r7, #24]
}
 8015e32:	bf00      	nop
 8015e34:	e7fe      	b.n	8015e34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8015e36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015e38:	683b      	ldr	r3, [r7, #0]
 8015e3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8015e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d00d      	beq.n	8015e5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e44:	2201      	movs	r2, #1
 8015e46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015e4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8015e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e50:	9300      	str	r3, [sp, #0]
 8015e52:	4613      	mov	r3, r2
 8015e54:	687a      	ldr	r2, [r7, #4]
 8015e56:	68b9      	ldr	r1, [r7, #8]
 8015e58:	68f8      	ldr	r0, [r7, #12]
 8015e5a:	f000 f83f 	bl	8015edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8015e60:	4618      	mov	r0, r3
 8015e62:	3730      	adds	r7, #48	; 0x30
 8015e64:	46bd      	mov	sp, r7
 8015e66:	bd80      	pop	{r7, pc}

08015e68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8015e68:	b580      	push	{r7, lr}
 8015e6a:	b08a      	sub	sp, #40	; 0x28
 8015e6c:	af02      	add	r7, sp, #8
 8015e6e:	60f8      	str	r0, [r7, #12]
 8015e70:	60b9      	str	r1, [r7, #8]
 8015e72:	4613      	mov	r3, r2
 8015e74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015e76:	68fb      	ldr	r3, [r7, #12]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d10a      	bne.n	8015e92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8015e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e80:	f383 8811 	msr	BASEPRI, r3
 8015e84:	f3bf 8f6f 	isb	sy
 8015e88:	f3bf 8f4f 	dsb	sy
 8015e8c:	613b      	str	r3, [r7, #16]
}
 8015e8e:	bf00      	nop
 8015e90:	e7fe      	b.n	8015e90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e92:	68fb      	ldr	r3, [r7, #12]
 8015e94:	68ba      	ldr	r2, [r7, #8]
 8015e96:	fb02 f303 	mul.w	r3, r2, r3
 8015e9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015e9c:	69fb      	ldr	r3, [r7, #28]
 8015e9e:	3350      	adds	r3, #80	; 0x50
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	f002 fcd1 	bl	8018848 <pvPortMalloc>
 8015ea6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8015ea8:	69bb      	ldr	r3, [r7, #24]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d011      	beq.n	8015ed2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8015eae:	69bb      	ldr	r3, [r7, #24]
 8015eb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015eb2:	697b      	ldr	r3, [r7, #20]
 8015eb4:	3350      	adds	r3, #80	; 0x50
 8015eb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015eb8:	69bb      	ldr	r3, [r7, #24]
 8015eba:	2200      	movs	r2, #0
 8015ebc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8015ec0:	79fa      	ldrb	r2, [r7, #7]
 8015ec2:	69bb      	ldr	r3, [r7, #24]
 8015ec4:	9300      	str	r3, [sp, #0]
 8015ec6:	4613      	mov	r3, r2
 8015ec8:	697a      	ldr	r2, [r7, #20]
 8015eca:	68b9      	ldr	r1, [r7, #8]
 8015ecc:	68f8      	ldr	r0, [r7, #12]
 8015ece:	f000 f805 	bl	8015edc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8015ed2:	69bb      	ldr	r3, [r7, #24]
	}
 8015ed4:	4618      	mov	r0, r3
 8015ed6:	3720      	adds	r7, #32
 8015ed8:	46bd      	mov	sp, r7
 8015eda:	bd80      	pop	{r7, pc}

08015edc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b084      	sub	sp, #16
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	60f8      	str	r0, [r7, #12]
 8015ee4:	60b9      	str	r1, [r7, #8]
 8015ee6:	607a      	str	r2, [r7, #4]
 8015ee8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d103      	bne.n	8015ef8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015ef0:	69bb      	ldr	r3, [r7, #24]
 8015ef2:	69ba      	ldr	r2, [r7, #24]
 8015ef4:	601a      	str	r2, [r3, #0]
 8015ef6:	e002      	b.n	8015efe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015ef8:	69bb      	ldr	r3, [r7, #24]
 8015efa:	687a      	ldr	r2, [r7, #4]
 8015efc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8015efe:	69bb      	ldr	r3, [r7, #24]
 8015f00:	68fa      	ldr	r2, [r7, #12]
 8015f02:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8015f04:	69bb      	ldr	r3, [r7, #24]
 8015f06:	68ba      	ldr	r2, [r7, #8]
 8015f08:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015f0a:	2101      	movs	r1, #1
 8015f0c:	69b8      	ldr	r0, [r7, #24]
 8015f0e:	f7ff fecb 	bl	8015ca8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8015f12:	69bb      	ldr	r3, [r7, #24]
 8015f14:	78fa      	ldrb	r2, [r7, #3]
 8015f16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8015f1a:	bf00      	nop
 8015f1c:	3710      	adds	r7, #16
 8015f1e:	46bd      	mov	sp, r7
 8015f20:	bd80      	pop	{r7, pc}

08015f22 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8015f22:	b580      	push	{r7, lr}
 8015f24:	b08a      	sub	sp, #40	; 0x28
 8015f26:	af02      	add	r7, sp, #8
 8015f28:	60f8      	str	r0, [r7, #12]
 8015f2a:	60b9      	str	r1, [r7, #8]
 8015f2c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015f2e:	68fb      	ldr	r3, [r7, #12]
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d10a      	bne.n	8015f4a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8015f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f38:	f383 8811 	msr	BASEPRI, r3
 8015f3c:	f3bf 8f6f 	isb	sy
 8015f40:	f3bf 8f4f 	dsb	sy
 8015f44:	61bb      	str	r3, [r7, #24]
}
 8015f46:	bf00      	nop
 8015f48:	e7fe      	b.n	8015f48 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015f4a:	68ba      	ldr	r2, [r7, #8]
 8015f4c:	68fb      	ldr	r3, [r7, #12]
 8015f4e:	429a      	cmp	r2, r3
 8015f50:	d90a      	bls.n	8015f68 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8015f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f56:	f383 8811 	msr	BASEPRI, r3
 8015f5a:	f3bf 8f6f 	isb	sy
 8015f5e:	f3bf 8f4f 	dsb	sy
 8015f62:	617b      	str	r3, [r7, #20]
}
 8015f64:	bf00      	nop
 8015f66:	e7fe      	b.n	8015f66 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015f68:	2302      	movs	r3, #2
 8015f6a:	9300      	str	r3, [sp, #0]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	2200      	movs	r2, #0
 8015f70:	2100      	movs	r1, #0
 8015f72:	68f8      	ldr	r0, [r7, #12]
 8015f74:	f7ff ff00 	bl	8015d78 <xQueueGenericCreateStatic>
 8015f78:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8015f7a:	69fb      	ldr	r3, [r7, #28]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d002      	beq.n	8015f86 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015f80:	69fb      	ldr	r3, [r7, #28]
 8015f82:	68ba      	ldr	r2, [r7, #8]
 8015f84:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015f86:	69fb      	ldr	r3, [r7, #28]
	}
 8015f88:	4618      	mov	r0, r3
 8015f8a:	3720      	adds	r7, #32
 8015f8c:	46bd      	mov	sp, r7
 8015f8e:	bd80      	pop	{r7, pc}

08015f90 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8015f90:	b580      	push	{r7, lr}
 8015f92:	b086      	sub	sp, #24
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d10a      	bne.n	8015fb6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8015fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fa4:	f383 8811 	msr	BASEPRI, r3
 8015fa8:	f3bf 8f6f 	isb	sy
 8015fac:	f3bf 8f4f 	dsb	sy
 8015fb0:	613b      	str	r3, [r7, #16]
}
 8015fb2:	bf00      	nop
 8015fb4:	e7fe      	b.n	8015fb4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8015fb6:	683a      	ldr	r2, [r7, #0]
 8015fb8:	687b      	ldr	r3, [r7, #4]
 8015fba:	429a      	cmp	r2, r3
 8015fbc:	d90a      	bls.n	8015fd4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8015fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015fc2:	f383 8811 	msr	BASEPRI, r3
 8015fc6:	f3bf 8f6f 	isb	sy
 8015fca:	f3bf 8f4f 	dsb	sy
 8015fce:	60fb      	str	r3, [r7, #12]
}
 8015fd0:	bf00      	nop
 8015fd2:	e7fe      	b.n	8015fd2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8015fd4:	2202      	movs	r2, #2
 8015fd6:	2100      	movs	r1, #0
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f7ff ff45 	bl	8015e68 <xQueueGenericCreate>
 8015fde:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8015fe0:	697b      	ldr	r3, [r7, #20]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d002      	beq.n	8015fec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8015fe6:	697b      	ldr	r3, [r7, #20]
 8015fe8:	683a      	ldr	r2, [r7, #0]
 8015fea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8015fec:	697b      	ldr	r3, [r7, #20]
	}
 8015fee:	4618      	mov	r0, r3
 8015ff0:	3718      	adds	r7, #24
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd80      	pop	{r7, pc}
	...

08015ff8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8015ff8:	b580      	push	{r7, lr}
 8015ffa:	b08e      	sub	sp, #56	; 0x38
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	60b9      	str	r1, [r7, #8]
 8016002:	607a      	str	r2, [r7, #4]
 8016004:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016006:	2300      	movs	r3, #0
 8016008:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016010:	2b00      	cmp	r3, #0
 8016012:	d10a      	bne.n	801602a <xQueueGenericSend+0x32>
	__asm volatile
 8016014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016018:	f383 8811 	msr	BASEPRI, r3
 801601c:	f3bf 8f6f 	isb	sy
 8016020:	f3bf 8f4f 	dsb	sy
 8016024:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8016026:	bf00      	nop
 8016028:	e7fe      	b.n	8016028 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801602a:	68bb      	ldr	r3, [r7, #8]
 801602c:	2b00      	cmp	r3, #0
 801602e:	d103      	bne.n	8016038 <xQueueGenericSend+0x40>
 8016030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016034:	2b00      	cmp	r3, #0
 8016036:	d101      	bne.n	801603c <xQueueGenericSend+0x44>
 8016038:	2301      	movs	r3, #1
 801603a:	e000      	b.n	801603e <xQueueGenericSend+0x46>
 801603c:	2300      	movs	r3, #0
 801603e:	2b00      	cmp	r3, #0
 8016040:	d10a      	bne.n	8016058 <xQueueGenericSend+0x60>
	__asm volatile
 8016042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016046:	f383 8811 	msr	BASEPRI, r3
 801604a:	f3bf 8f6f 	isb	sy
 801604e:	f3bf 8f4f 	dsb	sy
 8016052:	627b      	str	r3, [r7, #36]	; 0x24
}
 8016054:	bf00      	nop
 8016056:	e7fe      	b.n	8016056 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016058:	683b      	ldr	r3, [r7, #0]
 801605a:	2b02      	cmp	r3, #2
 801605c:	d103      	bne.n	8016066 <xQueueGenericSend+0x6e>
 801605e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016062:	2b01      	cmp	r3, #1
 8016064:	d101      	bne.n	801606a <xQueueGenericSend+0x72>
 8016066:	2301      	movs	r3, #1
 8016068:	e000      	b.n	801606c <xQueueGenericSend+0x74>
 801606a:	2300      	movs	r3, #0
 801606c:	2b00      	cmp	r3, #0
 801606e:	d10a      	bne.n	8016086 <xQueueGenericSend+0x8e>
	__asm volatile
 8016070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016074:	f383 8811 	msr	BASEPRI, r3
 8016078:	f3bf 8f6f 	isb	sy
 801607c:	f3bf 8f4f 	dsb	sy
 8016080:	623b      	str	r3, [r7, #32]
}
 8016082:	bf00      	nop
 8016084:	e7fe      	b.n	8016084 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016086:	f001 fc65 	bl	8017954 <xTaskGetSchedulerState>
 801608a:	4603      	mov	r3, r0
 801608c:	2b00      	cmp	r3, #0
 801608e:	d102      	bne.n	8016096 <xQueueGenericSend+0x9e>
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	2b00      	cmp	r3, #0
 8016094:	d101      	bne.n	801609a <xQueueGenericSend+0xa2>
 8016096:	2301      	movs	r3, #1
 8016098:	e000      	b.n	801609c <xQueueGenericSend+0xa4>
 801609a:	2300      	movs	r3, #0
 801609c:	2b00      	cmp	r3, #0
 801609e:	d10a      	bne.n	80160b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80160a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160a4:	f383 8811 	msr	BASEPRI, r3
 80160a8:	f3bf 8f6f 	isb	sy
 80160ac:	f3bf 8f4f 	dsb	sy
 80160b0:	61fb      	str	r3, [r7, #28]
}
 80160b2:	bf00      	nop
 80160b4:	e7fe      	b.n	80160b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80160b6:	f002 faa5 	bl	8018604 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80160ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80160be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d302      	bcc.n	80160cc <xQueueGenericSend+0xd4>
 80160c6:	683b      	ldr	r3, [r7, #0]
 80160c8:	2b02      	cmp	r3, #2
 80160ca:	d129      	bne.n	8016120 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80160cc:	683a      	ldr	r2, [r7, #0]
 80160ce:	68b9      	ldr	r1, [r7, #8]
 80160d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80160d2:	f000 fc5e 	bl	8016992 <prvCopyDataToQueue>
 80160d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80160d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d010      	beq.n	8016102 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80160e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80160e2:	3324      	adds	r3, #36	; 0x24
 80160e4:	4618      	mov	r0, r3
 80160e6:	f001 fa73 	bl	80175d0 <xTaskRemoveFromEventList>
 80160ea:	4603      	mov	r3, r0
 80160ec:	2b00      	cmp	r3, #0
 80160ee:	d013      	beq.n	8016118 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80160f0:	4b3f      	ldr	r3, [pc, #252]	; (80161f0 <xQueueGenericSend+0x1f8>)
 80160f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80160f6:	601a      	str	r2, [r3, #0]
 80160f8:	f3bf 8f4f 	dsb	sy
 80160fc:	f3bf 8f6f 	isb	sy
 8016100:	e00a      	b.n	8016118 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016104:	2b00      	cmp	r3, #0
 8016106:	d007      	beq.n	8016118 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016108:	4b39      	ldr	r3, [pc, #228]	; (80161f0 <xQueueGenericSend+0x1f8>)
 801610a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801610e:	601a      	str	r2, [r3, #0]
 8016110:	f3bf 8f4f 	dsb	sy
 8016114:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016118:	f002 faa4 	bl	8018664 <vPortExitCritical>
				return pdPASS;
 801611c:	2301      	movs	r3, #1
 801611e:	e063      	b.n	80161e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	2b00      	cmp	r3, #0
 8016124:	d103      	bne.n	801612e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016126:	f002 fa9d 	bl	8018664 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801612a:	2300      	movs	r3, #0
 801612c:	e05c      	b.n	80161e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801612e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016130:	2b00      	cmp	r3, #0
 8016132:	d106      	bne.n	8016142 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016134:	f107 0314 	add.w	r3, r7, #20
 8016138:	4618      	mov	r0, r3
 801613a:	f001 faad 	bl	8017698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801613e:	2301      	movs	r3, #1
 8016140:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016142:	f002 fa8f 	bl	8018664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016146:	f001 f819 	bl	801717c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801614a:	f002 fa5b 	bl	8018604 <vPortEnterCritical>
 801614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016150:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016154:	b25b      	sxtb	r3, r3
 8016156:	f1b3 3fff 	cmp.w	r3, #4294967295
 801615a:	d103      	bne.n	8016164 <xQueueGenericSend+0x16c>
 801615c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801615e:	2200      	movs	r2, #0
 8016160:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016166:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801616a:	b25b      	sxtb	r3, r3
 801616c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016170:	d103      	bne.n	801617a <xQueueGenericSend+0x182>
 8016172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016174:	2200      	movs	r2, #0
 8016176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801617a:	f002 fa73 	bl	8018664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801617e:	1d3a      	adds	r2, r7, #4
 8016180:	f107 0314 	add.w	r3, r7, #20
 8016184:	4611      	mov	r1, r2
 8016186:	4618      	mov	r0, r3
 8016188:	f001 fa9c 	bl	80176c4 <xTaskCheckForTimeOut>
 801618c:	4603      	mov	r3, r0
 801618e:	2b00      	cmp	r3, #0
 8016190:	d124      	bne.n	80161dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016192:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016194:	f000 fcf5 	bl	8016b82 <prvIsQueueFull>
 8016198:	4603      	mov	r3, r0
 801619a:	2b00      	cmp	r3, #0
 801619c:	d018      	beq.n	80161d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801619e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a0:	3310      	adds	r3, #16
 80161a2:	687a      	ldr	r2, [r7, #4]
 80161a4:	4611      	mov	r1, r2
 80161a6:	4618      	mov	r0, r3
 80161a8:	f001 f9c2 	bl	8017530 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80161ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161ae:	f000 fc80 	bl	8016ab2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80161b2:	f000 fff1 	bl	8017198 <xTaskResumeAll>
 80161b6:	4603      	mov	r3, r0
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	f47f af7c 	bne.w	80160b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80161be:	4b0c      	ldr	r3, [pc, #48]	; (80161f0 <xQueueGenericSend+0x1f8>)
 80161c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80161c4:	601a      	str	r2, [r3, #0]
 80161c6:	f3bf 8f4f 	dsb	sy
 80161ca:	f3bf 8f6f 	isb	sy
 80161ce:	e772      	b.n	80160b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80161d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161d2:	f000 fc6e 	bl	8016ab2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80161d6:	f000 ffdf 	bl	8017198 <xTaskResumeAll>
 80161da:	e76c      	b.n	80160b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80161dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80161de:	f000 fc68 	bl	8016ab2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80161e2:	f000 ffd9 	bl	8017198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80161e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80161e8:	4618      	mov	r0, r3
 80161ea:	3738      	adds	r7, #56	; 0x38
 80161ec:	46bd      	mov	sp, r7
 80161ee:	bd80      	pop	{r7, pc}
 80161f0:	e000ed04 	.word	0xe000ed04

080161f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80161f4:	b580      	push	{r7, lr}
 80161f6:	b090      	sub	sp, #64	; 0x40
 80161f8:	af00      	add	r7, sp, #0
 80161fa:	60f8      	str	r0, [r7, #12]
 80161fc:	60b9      	str	r1, [r7, #8]
 80161fe:	607a      	str	r2, [r7, #4]
 8016200:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8016206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016208:	2b00      	cmp	r3, #0
 801620a:	d10a      	bne.n	8016222 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801620c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016210:	f383 8811 	msr	BASEPRI, r3
 8016214:	f3bf 8f6f 	isb	sy
 8016218:	f3bf 8f4f 	dsb	sy
 801621c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801621e:	bf00      	nop
 8016220:	e7fe      	b.n	8016220 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016222:	68bb      	ldr	r3, [r7, #8]
 8016224:	2b00      	cmp	r3, #0
 8016226:	d103      	bne.n	8016230 <xQueueGenericSendFromISR+0x3c>
 8016228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801622a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801622c:	2b00      	cmp	r3, #0
 801622e:	d101      	bne.n	8016234 <xQueueGenericSendFromISR+0x40>
 8016230:	2301      	movs	r3, #1
 8016232:	e000      	b.n	8016236 <xQueueGenericSendFromISR+0x42>
 8016234:	2300      	movs	r3, #0
 8016236:	2b00      	cmp	r3, #0
 8016238:	d10a      	bne.n	8016250 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801623a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801623e:	f383 8811 	msr	BASEPRI, r3
 8016242:	f3bf 8f6f 	isb	sy
 8016246:	f3bf 8f4f 	dsb	sy
 801624a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801624c:	bf00      	nop
 801624e:	e7fe      	b.n	801624e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016250:	683b      	ldr	r3, [r7, #0]
 8016252:	2b02      	cmp	r3, #2
 8016254:	d103      	bne.n	801625e <xQueueGenericSendFromISR+0x6a>
 8016256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801625a:	2b01      	cmp	r3, #1
 801625c:	d101      	bne.n	8016262 <xQueueGenericSendFromISR+0x6e>
 801625e:	2301      	movs	r3, #1
 8016260:	e000      	b.n	8016264 <xQueueGenericSendFromISR+0x70>
 8016262:	2300      	movs	r3, #0
 8016264:	2b00      	cmp	r3, #0
 8016266:	d10a      	bne.n	801627e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8016268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801626c:	f383 8811 	msr	BASEPRI, r3
 8016270:	f3bf 8f6f 	isb	sy
 8016274:	f3bf 8f4f 	dsb	sy
 8016278:	623b      	str	r3, [r7, #32]
}
 801627a:	bf00      	nop
 801627c:	e7fe      	b.n	801627c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801627e:	f002 faa3 	bl	80187c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016282:	f3ef 8211 	mrs	r2, BASEPRI
 8016286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801628a:	f383 8811 	msr	BASEPRI, r3
 801628e:	f3bf 8f6f 	isb	sy
 8016292:	f3bf 8f4f 	dsb	sy
 8016296:	61fa      	str	r2, [r7, #28]
 8016298:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801629a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801629c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801629e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80162a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80162a6:	429a      	cmp	r2, r3
 80162a8:	d302      	bcc.n	80162b0 <xQueueGenericSendFromISR+0xbc>
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	2b02      	cmp	r3, #2
 80162ae:	d12f      	bne.n	8016310 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80162b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80162b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80162ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80162c0:	683a      	ldr	r2, [r7, #0]
 80162c2:	68b9      	ldr	r1, [r7, #8]
 80162c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80162c6:	f000 fb64 	bl	8016992 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80162ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80162ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80162d2:	d112      	bne.n	80162fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80162d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d016      	beq.n	801630a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80162dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80162de:	3324      	adds	r3, #36	; 0x24
 80162e0:	4618      	mov	r0, r3
 80162e2:	f001 f975 	bl	80175d0 <xTaskRemoveFromEventList>
 80162e6:	4603      	mov	r3, r0
 80162e8:	2b00      	cmp	r3, #0
 80162ea:	d00e      	beq.n	801630a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d00b      	beq.n	801630a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80162f2:	687b      	ldr	r3, [r7, #4]
 80162f4:	2201      	movs	r2, #1
 80162f6:	601a      	str	r2, [r3, #0]
 80162f8:	e007      	b.n	801630a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80162fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80162fe:	3301      	adds	r3, #1
 8016300:	b2db      	uxtb	r3, r3
 8016302:	b25a      	sxtb	r2, r3
 8016304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801630a:	2301      	movs	r3, #1
 801630c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801630e:	e001      	b.n	8016314 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8016310:	2300      	movs	r3, #0
 8016312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016316:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8016318:	697b      	ldr	r3, [r7, #20]
 801631a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801631e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016320:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8016322:	4618      	mov	r0, r3
 8016324:	3740      	adds	r7, #64	; 0x40
 8016326:	46bd      	mov	sp, r7
 8016328:	bd80      	pop	{r7, pc}

0801632a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801632a:	b580      	push	{r7, lr}
 801632c:	b08e      	sub	sp, #56	; 0x38
 801632e:	af00      	add	r7, sp, #0
 8016330:	6078      	str	r0, [r7, #4]
 8016332:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8016338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801633a:	2b00      	cmp	r3, #0
 801633c:	d10a      	bne.n	8016354 <xQueueGiveFromISR+0x2a>
	__asm volatile
 801633e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016342:	f383 8811 	msr	BASEPRI, r3
 8016346:	f3bf 8f6f 	isb	sy
 801634a:	f3bf 8f4f 	dsb	sy
 801634e:	623b      	str	r3, [r7, #32]
}
 8016350:	bf00      	nop
 8016352:	e7fe      	b.n	8016352 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016358:	2b00      	cmp	r3, #0
 801635a:	d00a      	beq.n	8016372 <xQueueGiveFromISR+0x48>
	__asm volatile
 801635c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016360:	f383 8811 	msr	BASEPRI, r3
 8016364:	f3bf 8f6f 	isb	sy
 8016368:	f3bf 8f4f 	dsb	sy
 801636c:	61fb      	str	r3, [r7, #28]
}
 801636e:	bf00      	nop
 8016370:	e7fe      	b.n	8016370 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8016372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	2b00      	cmp	r3, #0
 8016378:	d103      	bne.n	8016382 <xQueueGiveFromISR+0x58>
 801637a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801637c:	689b      	ldr	r3, [r3, #8]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d101      	bne.n	8016386 <xQueueGiveFromISR+0x5c>
 8016382:	2301      	movs	r3, #1
 8016384:	e000      	b.n	8016388 <xQueueGiveFromISR+0x5e>
 8016386:	2300      	movs	r3, #0
 8016388:	2b00      	cmp	r3, #0
 801638a:	d10a      	bne.n	80163a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 801638c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016390:	f383 8811 	msr	BASEPRI, r3
 8016394:	f3bf 8f6f 	isb	sy
 8016398:	f3bf 8f4f 	dsb	sy
 801639c:	61bb      	str	r3, [r7, #24]
}
 801639e:	bf00      	nop
 80163a0:	e7fe      	b.n	80163a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80163a2:	f002 fa11 	bl	80187c8 <vPortValidateInterruptPriority>
	__asm volatile
 80163a6:	f3ef 8211 	mrs	r2, BASEPRI
 80163aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80163ae:	f383 8811 	msr	BASEPRI, r3
 80163b2:	f3bf 8f6f 	isb	sy
 80163b6:	f3bf 8f4f 	dsb	sy
 80163ba:	617a      	str	r2, [r7, #20]
 80163bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80163be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80163c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80163c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80163c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80163c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80163cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80163ce:	429a      	cmp	r2, r3
 80163d0:	d22b      	bcs.n	801642a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80163d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80163d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80163dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163de:	1c5a      	adds	r2, r3, #1
 80163e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80163e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80163e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80163ec:	d112      	bne.n	8016414 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80163ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163f2:	2b00      	cmp	r3, #0
 80163f4:	d016      	beq.n	8016424 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80163f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f8:	3324      	adds	r3, #36	; 0x24
 80163fa:	4618      	mov	r0, r3
 80163fc:	f001 f8e8 	bl	80175d0 <xTaskRemoveFromEventList>
 8016400:	4603      	mov	r3, r0
 8016402:	2b00      	cmp	r3, #0
 8016404:	d00e      	beq.n	8016424 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8016406:	683b      	ldr	r3, [r7, #0]
 8016408:	2b00      	cmp	r3, #0
 801640a:	d00b      	beq.n	8016424 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	2201      	movs	r2, #1
 8016410:	601a      	str	r2, [r3, #0]
 8016412:	e007      	b.n	8016424 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8016414:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016418:	3301      	adds	r3, #1
 801641a:	b2db      	uxtb	r3, r3
 801641c:	b25a      	sxtb	r2, r3
 801641e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8016424:	2301      	movs	r3, #1
 8016426:	637b      	str	r3, [r7, #52]	; 0x34
 8016428:	e001      	b.n	801642e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801642a:	2300      	movs	r3, #0
 801642c:	637b      	str	r3, [r7, #52]	; 0x34
 801642e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016430:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	f383 8811 	msr	BASEPRI, r3
}
 8016438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801643c:	4618      	mov	r0, r3
 801643e:	3738      	adds	r7, #56	; 0x38
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}

08016444 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8016444:	b580      	push	{r7, lr}
 8016446:	b08c      	sub	sp, #48	; 0x30
 8016448:	af00      	add	r7, sp, #0
 801644a:	60f8      	str	r0, [r7, #12]
 801644c:	60b9      	str	r1, [r7, #8]
 801644e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8016450:	2300      	movs	r3, #0
 8016452:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016454:	68fb      	ldr	r3, [r7, #12]
 8016456:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8016458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645a:	2b00      	cmp	r3, #0
 801645c:	d10a      	bne.n	8016474 <xQueueReceive+0x30>
	__asm volatile
 801645e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016462:	f383 8811 	msr	BASEPRI, r3
 8016466:	f3bf 8f6f 	isb	sy
 801646a:	f3bf 8f4f 	dsb	sy
 801646e:	623b      	str	r3, [r7, #32]
}
 8016470:	bf00      	nop
 8016472:	e7fe      	b.n	8016472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016474:	68bb      	ldr	r3, [r7, #8]
 8016476:	2b00      	cmp	r3, #0
 8016478:	d103      	bne.n	8016482 <xQueueReceive+0x3e>
 801647a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801647c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801647e:	2b00      	cmp	r3, #0
 8016480:	d101      	bne.n	8016486 <xQueueReceive+0x42>
 8016482:	2301      	movs	r3, #1
 8016484:	e000      	b.n	8016488 <xQueueReceive+0x44>
 8016486:	2300      	movs	r3, #0
 8016488:	2b00      	cmp	r3, #0
 801648a:	d10a      	bne.n	80164a2 <xQueueReceive+0x5e>
	__asm volatile
 801648c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016490:	f383 8811 	msr	BASEPRI, r3
 8016494:	f3bf 8f6f 	isb	sy
 8016498:	f3bf 8f4f 	dsb	sy
 801649c:	61fb      	str	r3, [r7, #28]
}
 801649e:	bf00      	nop
 80164a0:	e7fe      	b.n	80164a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80164a2:	f001 fa57 	bl	8017954 <xTaskGetSchedulerState>
 80164a6:	4603      	mov	r3, r0
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d102      	bne.n	80164b2 <xQueueReceive+0x6e>
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d101      	bne.n	80164b6 <xQueueReceive+0x72>
 80164b2:	2301      	movs	r3, #1
 80164b4:	e000      	b.n	80164b8 <xQueueReceive+0x74>
 80164b6:	2300      	movs	r3, #0
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d10a      	bne.n	80164d2 <xQueueReceive+0x8e>
	__asm volatile
 80164bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80164c0:	f383 8811 	msr	BASEPRI, r3
 80164c4:	f3bf 8f6f 	isb	sy
 80164c8:	f3bf 8f4f 	dsb	sy
 80164cc:	61bb      	str	r3, [r7, #24]
}
 80164ce:	bf00      	nop
 80164d0:	e7fe      	b.n	80164d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80164d2:	f002 f897 	bl	8018604 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80164d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80164da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80164dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164de:	2b00      	cmp	r3, #0
 80164e0:	d01f      	beq.n	8016522 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80164e2:	68b9      	ldr	r1, [r7, #8]
 80164e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80164e6:	f000 fabe 	bl	8016a66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80164ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ec:	1e5a      	subs	r2, r3, #1
 80164ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80164f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164f4:	691b      	ldr	r3, [r3, #16]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d00f      	beq.n	801651a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80164fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80164fc:	3310      	adds	r3, #16
 80164fe:	4618      	mov	r0, r3
 8016500:	f001 f866 	bl	80175d0 <xTaskRemoveFromEventList>
 8016504:	4603      	mov	r3, r0
 8016506:	2b00      	cmp	r3, #0
 8016508:	d007      	beq.n	801651a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801650a:	4b3d      	ldr	r3, [pc, #244]	; (8016600 <xQueueReceive+0x1bc>)
 801650c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016510:	601a      	str	r2, [r3, #0]
 8016512:	f3bf 8f4f 	dsb	sy
 8016516:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801651a:	f002 f8a3 	bl	8018664 <vPortExitCritical>
				return pdPASS;
 801651e:	2301      	movs	r3, #1
 8016520:	e069      	b.n	80165f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d103      	bne.n	8016530 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016528:	f002 f89c 	bl	8018664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801652c:	2300      	movs	r3, #0
 801652e:	e062      	b.n	80165f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016532:	2b00      	cmp	r3, #0
 8016534:	d106      	bne.n	8016544 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016536:	f107 0310 	add.w	r3, r7, #16
 801653a:	4618      	mov	r0, r3
 801653c:	f001 f8ac 	bl	8017698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016540:	2301      	movs	r3, #1
 8016542:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016544:	f002 f88e 	bl	8018664 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016548:	f000 fe18 	bl	801717c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801654c:	f002 f85a 	bl	8018604 <vPortEnterCritical>
 8016550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016556:	b25b      	sxtb	r3, r3
 8016558:	f1b3 3fff 	cmp.w	r3, #4294967295
 801655c:	d103      	bne.n	8016566 <xQueueReceive+0x122>
 801655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016560:	2200      	movs	r2, #0
 8016562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801656c:	b25b      	sxtb	r3, r3
 801656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016572:	d103      	bne.n	801657c <xQueueReceive+0x138>
 8016574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016576:	2200      	movs	r2, #0
 8016578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801657c:	f002 f872 	bl	8018664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016580:	1d3a      	adds	r2, r7, #4
 8016582:	f107 0310 	add.w	r3, r7, #16
 8016586:	4611      	mov	r1, r2
 8016588:	4618      	mov	r0, r3
 801658a:	f001 f89b 	bl	80176c4 <xTaskCheckForTimeOut>
 801658e:	4603      	mov	r3, r0
 8016590:	2b00      	cmp	r3, #0
 8016592:	d123      	bne.n	80165dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8016594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016596:	f000 fade 	bl	8016b56 <prvIsQueueEmpty>
 801659a:	4603      	mov	r3, r0
 801659c:	2b00      	cmp	r3, #0
 801659e:	d017      	beq.n	80165d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80165a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165a2:	3324      	adds	r3, #36	; 0x24
 80165a4:	687a      	ldr	r2, [r7, #4]
 80165a6:	4611      	mov	r1, r2
 80165a8:	4618      	mov	r0, r3
 80165aa:	f000 ffc1 	bl	8017530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80165ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165b0:	f000 fa7f 	bl	8016ab2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80165b4:	f000 fdf0 	bl	8017198 <xTaskResumeAll>
 80165b8:	4603      	mov	r3, r0
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d189      	bne.n	80164d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80165be:	4b10      	ldr	r3, [pc, #64]	; (8016600 <xQueueReceive+0x1bc>)
 80165c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165c4:	601a      	str	r2, [r3, #0]
 80165c6:	f3bf 8f4f 	dsb	sy
 80165ca:	f3bf 8f6f 	isb	sy
 80165ce:	e780      	b.n	80164d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80165d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165d2:	f000 fa6e 	bl	8016ab2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80165d6:	f000 fddf 	bl	8017198 <xTaskResumeAll>
 80165da:	e77a      	b.n	80164d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80165dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165de:	f000 fa68 	bl	8016ab2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80165e2:	f000 fdd9 	bl	8017198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80165e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80165e8:	f000 fab5 	bl	8016b56 <prvIsQueueEmpty>
 80165ec:	4603      	mov	r3, r0
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	f43f af6f 	beq.w	80164d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80165f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80165f6:	4618      	mov	r0, r3
 80165f8:	3730      	adds	r7, #48	; 0x30
 80165fa:	46bd      	mov	sp, r7
 80165fc:	bd80      	pop	{r7, pc}
 80165fe:	bf00      	nop
 8016600:	e000ed04 	.word	0xe000ed04

08016604 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8016604:	b580      	push	{r7, lr}
 8016606:	b08e      	sub	sp, #56	; 0x38
 8016608:	af00      	add	r7, sp, #0
 801660a:	6078      	str	r0, [r7, #4]
 801660c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801660e:	2300      	movs	r3, #0
 8016610:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8016616:	2300      	movs	r3, #0
 8016618:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661c:	2b00      	cmp	r3, #0
 801661e:	d10a      	bne.n	8016636 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8016620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016624:	f383 8811 	msr	BASEPRI, r3
 8016628:	f3bf 8f6f 	isb	sy
 801662c:	f3bf 8f4f 	dsb	sy
 8016630:	623b      	str	r3, [r7, #32]
}
 8016632:	bf00      	nop
 8016634:	e7fe      	b.n	8016634 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8016636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801663a:	2b00      	cmp	r3, #0
 801663c:	d00a      	beq.n	8016654 <xQueueSemaphoreTake+0x50>
	__asm volatile
 801663e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016642:	f383 8811 	msr	BASEPRI, r3
 8016646:	f3bf 8f6f 	isb	sy
 801664a:	f3bf 8f4f 	dsb	sy
 801664e:	61fb      	str	r3, [r7, #28]
}
 8016650:	bf00      	nop
 8016652:	e7fe      	b.n	8016652 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016654:	f001 f97e 	bl	8017954 <xTaskGetSchedulerState>
 8016658:	4603      	mov	r3, r0
 801665a:	2b00      	cmp	r3, #0
 801665c:	d102      	bne.n	8016664 <xQueueSemaphoreTake+0x60>
 801665e:	683b      	ldr	r3, [r7, #0]
 8016660:	2b00      	cmp	r3, #0
 8016662:	d101      	bne.n	8016668 <xQueueSemaphoreTake+0x64>
 8016664:	2301      	movs	r3, #1
 8016666:	e000      	b.n	801666a <xQueueSemaphoreTake+0x66>
 8016668:	2300      	movs	r3, #0
 801666a:	2b00      	cmp	r3, #0
 801666c:	d10a      	bne.n	8016684 <xQueueSemaphoreTake+0x80>
	__asm volatile
 801666e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016672:	f383 8811 	msr	BASEPRI, r3
 8016676:	f3bf 8f6f 	isb	sy
 801667a:	f3bf 8f4f 	dsb	sy
 801667e:	61bb      	str	r3, [r7, #24]
}
 8016680:	bf00      	nop
 8016682:	e7fe      	b.n	8016682 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016684:	f001 ffbe 	bl	8018604 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8016688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801668a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801668c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016690:	2b00      	cmp	r3, #0
 8016692:	d024      	beq.n	80166de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8016694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016696:	1e5a      	subs	r2, r3, #1
 8016698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669e:	681b      	ldr	r3, [r3, #0]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d104      	bne.n	80166ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80166a4:	f001 facc 	bl	8017c40 <pvTaskIncrementMutexHeldCount>
 80166a8:	4602      	mov	r2, r0
 80166aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80166ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b0:	691b      	ldr	r3, [r3, #16]
 80166b2:	2b00      	cmp	r3, #0
 80166b4:	d00f      	beq.n	80166d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80166b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166b8:	3310      	adds	r3, #16
 80166ba:	4618      	mov	r0, r3
 80166bc:	f000 ff88 	bl	80175d0 <xTaskRemoveFromEventList>
 80166c0:	4603      	mov	r3, r0
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d007      	beq.n	80166d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80166c6:	4b54      	ldr	r3, [pc, #336]	; (8016818 <xQueueSemaphoreTake+0x214>)
 80166c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80166cc:	601a      	str	r2, [r3, #0]
 80166ce:	f3bf 8f4f 	dsb	sy
 80166d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80166d6:	f001 ffc5 	bl	8018664 <vPortExitCritical>
				return pdPASS;
 80166da:	2301      	movs	r3, #1
 80166dc:	e097      	b.n	801680e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	d111      	bne.n	8016708 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80166e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d00a      	beq.n	8016700 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80166ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166ee:	f383 8811 	msr	BASEPRI, r3
 80166f2:	f3bf 8f6f 	isb	sy
 80166f6:	f3bf 8f4f 	dsb	sy
 80166fa:	617b      	str	r3, [r7, #20]
}
 80166fc:	bf00      	nop
 80166fe:	e7fe      	b.n	80166fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8016700:	f001 ffb0 	bl	8018664 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8016704:	2300      	movs	r3, #0
 8016706:	e082      	b.n	801680e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801670a:	2b00      	cmp	r3, #0
 801670c:	d106      	bne.n	801671c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801670e:	f107 030c 	add.w	r3, r7, #12
 8016712:	4618      	mov	r0, r3
 8016714:	f000 ffc0 	bl	8017698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016718:	2301      	movs	r3, #1
 801671a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801671c:	f001 ffa2 	bl	8018664 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016720:	f000 fd2c 	bl	801717c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016724:	f001 ff6e 	bl	8018604 <vPortEnterCritical>
 8016728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801672a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801672e:	b25b      	sxtb	r3, r3
 8016730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016734:	d103      	bne.n	801673e <xQueueSemaphoreTake+0x13a>
 8016736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016738:	2200      	movs	r2, #0
 801673a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801673e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016740:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016744:	b25b      	sxtb	r3, r3
 8016746:	f1b3 3fff 	cmp.w	r3, #4294967295
 801674a:	d103      	bne.n	8016754 <xQueueSemaphoreTake+0x150>
 801674c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801674e:	2200      	movs	r2, #0
 8016750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016754:	f001 ff86 	bl	8018664 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016758:	463a      	mov	r2, r7
 801675a:	f107 030c 	add.w	r3, r7, #12
 801675e:	4611      	mov	r1, r2
 8016760:	4618      	mov	r0, r3
 8016762:	f000 ffaf 	bl	80176c4 <xTaskCheckForTimeOut>
 8016766:	4603      	mov	r3, r0
 8016768:	2b00      	cmp	r3, #0
 801676a:	d132      	bne.n	80167d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801676c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801676e:	f000 f9f2 	bl	8016b56 <prvIsQueueEmpty>
 8016772:	4603      	mov	r3, r0
 8016774:	2b00      	cmp	r3, #0
 8016776:	d026      	beq.n	80167c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8016778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d109      	bne.n	8016794 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8016780:	f001 ff40 	bl	8018604 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8016784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016786:	689b      	ldr	r3, [r3, #8]
 8016788:	4618      	mov	r0, r3
 801678a:	f001 f901 	bl	8017990 <xTaskPriorityInherit>
 801678e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8016790:	f001 ff68 	bl	8018664 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8016794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016796:	3324      	adds	r3, #36	; 0x24
 8016798:	683a      	ldr	r2, [r7, #0]
 801679a:	4611      	mov	r1, r2
 801679c:	4618      	mov	r0, r3
 801679e:	f000 fec7 	bl	8017530 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80167a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167a4:	f000 f985 	bl	8016ab2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80167a8:	f000 fcf6 	bl	8017198 <xTaskResumeAll>
 80167ac:	4603      	mov	r3, r0
 80167ae:	2b00      	cmp	r3, #0
 80167b0:	f47f af68 	bne.w	8016684 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80167b4:	4b18      	ldr	r3, [pc, #96]	; (8016818 <xQueueSemaphoreTake+0x214>)
 80167b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80167ba:	601a      	str	r2, [r3, #0]
 80167bc:	f3bf 8f4f 	dsb	sy
 80167c0:	f3bf 8f6f 	isb	sy
 80167c4:	e75e      	b.n	8016684 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80167c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167c8:	f000 f973 	bl	8016ab2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80167cc:	f000 fce4 	bl	8017198 <xTaskResumeAll>
 80167d0:	e758      	b.n	8016684 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80167d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167d4:	f000 f96d 	bl	8016ab2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80167d8:	f000 fcde 	bl	8017198 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80167dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167de:	f000 f9ba 	bl	8016b56 <prvIsQueueEmpty>
 80167e2:	4603      	mov	r3, r0
 80167e4:	2b00      	cmp	r3, #0
 80167e6:	f43f af4d 	beq.w	8016684 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80167ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167ec:	2b00      	cmp	r3, #0
 80167ee:	d00d      	beq.n	801680c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80167f0:	f001 ff08 	bl	8018604 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80167f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80167f6:	f000 f8b4 	bl	8016962 <prvGetDisinheritPriorityAfterTimeout>
 80167fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80167fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167fe:	689b      	ldr	r3, [r3, #8]
 8016800:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016802:	4618      	mov	r0, r3
 8016804:	f001 f99a 	bl	8017b3c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8016808:	f001 ff2c 	bl	8018664 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801680c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801680e:	4618      	mov	r0, r3
 8016810:	3738      	adds	r7, #56	; 0x38
 8016812:	46bd      	mov	sp, r7
 8016814:	bd80      	pop	{r7, pc}
 8016816:	bf00      	nop
 8016818:	e000ed04 	.word	0xe000ed04

0801681c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801681c:	b580      	push	{r7, lr}
 801681e:	b08e      	sub	sp, #56	; 0x38
 8016820:	af00      	add	r7, sp, #0
 8016822:	60f8      	str	r0, [r7, #12]
 8016824:	60b9      	str	r1, [r7, #8]
 8016826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801682c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801682e:	2b00      	cmp	r3, #0
 8016830:	d10a      	bne.n	8016848 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8016832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016836:	f383 8811 	msr	BASEPRI, r3
 801683a:	f3bf 8f6f 	isb	sy
 801683e:	f3bf 8f4f 	dsb	sy
 8016842:	623b      	str	r3, [r7, #32]
}
 8016844:	bf00      	nop
 8016846:	e7fe      	b.n	8016846 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016848:	68bb      	ldr	r3, [r7, #8]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d103      	bne.n	8016856 <xQueueReceiveFromISR+0x3a>
 801684e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016852:	2b00      	cmp	r3, #0
 8016854:	d101      	bne.n	801685a <xQueueReceiveFromISR+0x3e>
 8016856:	2301      	movs	r3, #1
 8016858:	e000      	b.n	801685c <xQueueReceiveFromISR+0x40>
 801685a:	2300      	movs	r3, #0
 801685c:	2b00      	cmp	r3, #0
 801685e:	d10a      	bne.n	8016876 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8016860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016864:	f383 8811 	msr	BASEPRI, r3
 8016868:	f3bf 8f6f 	isb	sy
 801686c:	f3bf 8f4f 	dsb	sy
 8016870:	61fb      	str	r3, [r7, #28]
}
 8016872:	bf00      	nop
 8016874:	e7fe      	b.n	8016874 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016876:	f001 ffa7 	bl	80187c8 <vPortValidateInterruptPriority>
	__asm volatile
 801687a:	f3ef 8211 	mrs	r2, BASEPRI
 801687e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016882:	f383 8811 	msr	BASEPRI, r3
 8016886:	f3bf 8f6f 	isb	sy
 801688a:	f3bf 8f4f 	dsb	sy
 801688e:	61ba      	str	r2, [r7, #24]
 8016890:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8016892:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016894:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8016896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801689a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801689c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d02f      	beq.n	8016902 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80168a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80168a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80168ac:	68b9      	ldr	r1, [r7, #8]
 80168ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80168b0:	f000 f8d9 	bl	8016a66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80168b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b6:	1e5a      	subs	r2, r3, #1
 80168b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80168bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80168c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168c4:	d112      	bne.n	80168ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c8:	691b      	ldr	r3, [r3, #16]
 80168ca:	2b00      	cmp	r3, #0
 80168cc:	d016      	beq.n	80168fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d0:	3310      	adds	r3, #16
 80168d2:	4618      	mov	r0, r3
 80168d4:	f000 fe7c 	bl	80175d0 <xTaskRemoveFromEventList>
 80168d8:	4603      	mov	r3, r0
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d00e      	beq.n	80168fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d00b      	beq.n	80168fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	2201      	movs	r2, #1
 80168e8:	601a      	str	r2, [r3, #0]
 80168ea:	e007      	b.n	80168fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80168ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168f0:	3301      	adds	r3, #1
 80168f2:	b2db      	uxtb	r3, r3
 80168f4:	b25a      	sxtb	r2, r3
 80168f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80168fc:	2301      	movs	r3, #1
 80168fe:	637b      	str	r3, [r7, #52]	; 0x34
 8016900:	e001      	b.n	8016906 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8016902:	2300      	movs	r3, #0
 8016904:	637b      	str	r3, [r7, #52]	; 0x34
 8016906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016908:	613b      	str	r3, [r7, #16]
	__asm volatile
 801690a:	693b      	ldr	r3, [r7, #16]
 801690c:	f383 8811 	msr	BASEPRI, r3
}
 8016910:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8016912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8016914:	4618      	mov	r0, r3
 8016916:	3738      	adds	r7, #56	; 0x38
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}

0801691c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b084      	sub	sp, #16
 8016920:	af00      	add	r7, sp, #0
 8016922:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016928:	68fb      	ldr	r3, [r7, #12]
 801692a:	2b00      	cmp	r3, #0
 801692c:	d10a      	bne.n	8016944 <vQueueDelete+0x28>
	__asm volatile
 801692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016932:	f383 8811 	msr	BASEPRI, r3
 8016936:	f3bf 8f6f 	isb	sy
 801693a:	f3bf 8f4f 	dsb	sy
 801693e:	60bb      	str	r3, [r7, #8]
}
 8016940:	bf00      	nop
 8016942:	e7fe      	b.n	8016942 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8016944:	68f8      	ldr	r0, [r7, #12]
 8016946:	f000 f95f 	bl	8016c08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8016950:	2b00      	cmp	r3, #0
 8016952:	d102      	bne.n	801695a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8016954:	68f8      	ldr	r0, [r7, #12]
 8016956:	f002 f843 	bl	80189e0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801695a:	bf00      	nop
 801695c:	3710      	adds	r7, #16
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}

08016962 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8016962:	b480      	push	{r7}
 8016964:	b085      	sub	sp, #20
 8016966:	af00      	add	r7, sp, #0
 8016968:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801696e:	2b00      	cmp	r3, #0
 8016970:	d006      	beq.n	8016980 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016976:	681b      	ldr	r3, [r3, #0]
 8016978:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 801697c:	60fb      	str	r3, [r7, #12]
 801697e:	e001      	b.n	8016984 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8016980:	2300      	movs	r3, #0
 8016982:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8016984:	68fb      	ldr	r3, [r7, #12]
	}
 8016986:	4618      	mov	r0, r3
 8016988:	3714      	adds	r7, #20
 801698a:	46bd      	mov	sp, r7
 801698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016990:	4770      	bx	lr

08016992 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8016992:	b580      	push	{r7, lr}
 8016994:	b086      	sub	sp, #24
 8016996:	af00      	add	r7, sp, #0
 8016998:	60f8      	str	r0, [r7, #12]
 801699a:	60b9      	str	r1, [r7, #8]
 801699c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801699e:	2300      	movs	r3, #0
 80169a0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80169a2:	68fb      	ldr	r3, [r7, #12]
 80169a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80169a6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169ac:	2b00      	cmp	r3, #0
 80169ae:	d10d      	bne.n	80169cc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80169b0:	68fb      	ldr	r3, [r7, #12]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d14d      	bne.n	8016a54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	689b      	ldr	r3, [r3, #8]
 80169bc:	4618      	mov	r0, r3
 80169be:	f001 f84f 	bl	8017a60 <xTaskPriorityDisinherit>
 80169c2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	2200      	movs	r2, #0
 80169c8:	609a      	str	r2, [r3, #8]
 80169ca:	e043      	b.n	8016a54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d119      	bne.n	8016a06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	6858      	ldr	r0, [r3, #4]
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169da:	461a      	mov	r2, r3
 80169dc:	68b9      	ldr	r1, [r7, #8]
 80169de:	f007 fca1 	bl	801e324 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80169e2:	68fb      	ldr	r3, [r7, #12]
 80169e4:	685a      	ldr	r2, [r3, #4]
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169ea:	441a      	add	r2, r3
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80169f0:	68fb      	ldr	r3, [r7, #12]
 80169f2:	685a      	ldr	r2, [r3, #4]
 80169f4:	68fb      	ldr	r3, [r7, #12]
 80169f6:	689b      	ldr	r3, [r3, #8]
 80169f8:	429a      	cmp	r2, r3
 80169fa:	d32b      	bcc.n	8016a54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80169fc:	68fb      	ldr	r3, [r7, #12]
 80169fe:	681a      	ldr	r2, [r3, #0]
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	605a      	str	r2, [r3, #4]
 8016a04:	e026      	b.n	8016a54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	68d8      	ldr	r0, [r3, #12]
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a0e:	461a      	mov	r2, r3
 8016a10:	68b9      	ldr	r1, [r7, #8]
 8016a12:	f007 fc87 	bl	801e324 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8016a16:	68fb      	ldr	r3, [r7, #12]
 8016a18:	68da      	ldr	r2, [r3, #12]
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a1e:	425b      	negs	r3, r3
 8016a20:	441a      	add	r2, r3
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8016a26:	68fb      	ldr	r3, [r7, #12]
 8016a28:	68da      	ldr	r2, [r3, #12]
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	429a      	cmp	r2, r3
 8016a30:	d207      	bcs.n	8016a42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8016a32:	68fb      	ldr	r3, [r7, #12]
 8016a34:	689a      	ldr	r2, [r3, #8]
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a3a:	425b      	negs	r3, r3
 8016a3c:	441a      	add	r2, r3
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	2b02      	cmp	r3, #2
 8016a46:	d105      	bne.n	8016a54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d002      	beq.n	8016a54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8016a4e:	693b      	ldr	r3, [r7, #16]
 8016a50:	3b01      	subs	r3, #1
 8016a52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8016a54:	693b      	ldr	r3, [r7, #16]
 8016a56:	1c5a      	adds	r2, r3, #1
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8016a5c:	697b      	ldr	r3, [r7, #20]
}
 8016a5e:	4618      	mov	r0, r3
 8016a60:	3718      	adds	r7, #24
 8016a62:	46bd      	mov	sp, r7
 8016a64:	bd80      	pop	{r7, pc}

08016a66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8016a66:	b580      	push	{r7, lr}
 8016a68:	b082      	sub	sp, #8
 8016a6a:	af00      	add	r7, sp, #0
 8016a6c:	6078      	str	r0, [r7, #4]
 8016a6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d018      	beq.n	8016aaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	68da      	ldr	r2, [r3, #12]
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016a80:	441a      	add	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	68da      	ldr	r2, [r3, #12]
 8016a8a:	687b      	ldr	r3, [r7, #4]
 8016a8c:	689b      	ldr	r3, [r3, #8]
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d303      	bcc.n	8016a9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	681a      	ldr	r2, [r3, #0]
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8016a9a:	687b      	ldr	r3, [r7, #4]
 8016a9c:	68d9      	ldr	r1, [r3, #12]
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016aa2:	461a      	mov	r2, r3
 8016aa4:	6838      	ldr	r0, [r7, #0]
 8016aa6:	f007 fc3d 	bl	801e324 <memcpy>
	}
}
 8016aaa:	bf00      	nop
 8016aac:	3708      	adds	r7, #8
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}

08016ab2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8016ab2:	b580      	push	{r7, lr}
 8016ab4:	b084      	sub	sp, #16
 8016ab6:	af00      	add	r7, sp, #0
 8016ab8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8016aba:	f001 fda3 	bl	8018604 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016ac4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016ac6:	e011      	b.n	8016aec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d012      	beq.n	8016af6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	3324      	adds	r3, #36	; 0x24
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f000 fd7b 	bl	80175d0 <xTaskRemoveFromEventList>
 8016ada:	4603      	mov	r3, r0
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d001      	beq.n	8016ae4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8016ae0:	f000 fe52 	bl	8017788 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8016ae4:	7bfb      	ldrb	r3, [r7, #15]
 8016ae6:	3b01      	subs	r3, #1
 8016ae8:	b2db      	uxtb	r3, r3
 8016aea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8016aec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	dce9      	bgt.n	8016ac8 <prvUnlockQueue+0x16>
 8016af4:	e000      	b.n	8016af8 <prvUnlockQueue+0x46>
					break;
 8016af6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	22ff      	movs	r2, #255	; 0xff
 8016afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8016b00:	f001 fdb0 	bl	8018664 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8016b04:	f001 fd7e 	bl	8018604 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016b0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016b10:	e011      	b.n	8016b36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	691b      	ldr	r3, [r3, #16]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d012      	beq.n	8016b40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	3310      	adds	r3, #16
 8016b1e:	4618      	mov	r0, r3
 8016b20:	f000 fd56 	bl	80175d0 <xTaskRemoveFromEventList>
 8016b24:	4603      	mov	r3, r0
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d001      	beq.n	8016b2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8016b2a:	f000 fe2d 	bl	8017788 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8016b2e:	7bbb      	ldrb	r3, [r7, #14]
 8016b30:	3b01      	subs	r3, #1
 8016b32:	b2db      	uxtb	r3, r3
 8016b34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8016b36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	dce9      	bgt.n	8016b12 <prvUnlockQueue+0x60>
 8016b3e:	e000      	b.n	8016b42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8016b40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	22ff      	movs	r2, #255	; 0xff
 8016b46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8016b4a:	f001 fd8b 	bl	8018664 <vPortExitCritical>
}
 8016b4e:	bf00      	nop
 8016b50:	3710      	adds	r7, #16
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd80      	pop	{r7, pc}

08016b56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8016b56:	b580      	push	{r7, lr}
 8016b58:	b084      	sub	sp, #16
 8016b5a:	af00      	add	r7, sp, #0
 8016b5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016b5e:	f001 fd51 	bl	8018604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d102      	bne.n	8016b70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8016b6a:	2301      	movs	r3, #1
 8016b6c:	60fb      	str	r3, [r7, #12]
 8016b6e:	e001      	b.n	8016b74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8016b70:	2300      	movs	r3, #0
 8016b72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016b74:	f001 fd76 	bl	8018664 <vPortExitCritical>

	return xReturn;
 8016b78:	68fb      	ldr	r3, [r7, #12]
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3710      	adds	r7, #16
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b084      	sub	sp, #16
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8016b8a:	f001 fd3b 	bl	8018604 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016b92:	687b      	ldr	r3, [r7, #4]
 8016b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016b96:	429a      	cmp	r2, r3
 8016b98:	d102      	bne.n	8016ba0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8016b9a:	2301      	movs	r3, #1
 8016b9c:	60fb      	str	r3, [r7, #12]
 8016b9e:	e001      	b.n	8016ba4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8016ba4:	f001 fd5e 	bl	8018664 <vPortExitCritical>

	return xReturn;
 8016ba8:	68fb      	ldr	r3, [r7, #12]
}
 8016baa:	4618      	mov	r0, r3
 8016bac:	3710      	adds	r7, #16
 8016bae:	46bd      	mov	sp, r7
 8016bb0:	bd80      	pop	{r7, pc}
	...

08016bb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8016bb4:	b480      	push	{r7}
 8016bb6:	b085      	sub	sp, #20
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	6078      	str	r0, [r7, #4]
 8016bbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016bbe:	2300      	movs	r3, #0
 8016bc0:	60fb      	str	r3, [r7, #12]
 8016bc2:	e014      	b.n	8016bee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8016bc4:	4a0f      	ldr	r2, [pc, #60]	; (8016c04 <vQueueAddToRegistry+0x50>)
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8016bcc:	2b00      	cmp	r3, #0
 8016bce:	d10b      	bne.n	8016be8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8016bd0:	490c      	ldr	r1, [pc, #48]	; (8016c04 <vQueueAddToRegistry+0x50>)
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	683a      	ldr	r2, [r7, #0]
 8016bd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8016bda:	4a0a      	ldr	r2, [pc, #40]	; (8016c04 <vQueueAddToRegistry+0x50>)
 8016bdc:	68fb      	ldr	r3, [r7, #12]
 8016bde:	00db      	lsls	r3, r3, #3
 8016be0:	4413      	add	r3, r2
 8016be2:	687a      	ldr	r2, [r7, #4]
 8016be4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8016be6:	e006      	b.n	8016bf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016be8:	68fb      	ldr	r3, [r7, #12]
 8016bea:	3301      	adds	r3, #1
 8016bec:	60fb      	str	r3, [r7, #12]
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	2b07      	cmp	r3, #7
 8016bf2:	d9e7      	bls.n	8016bc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8016bf4:	bf00      	nop
 8016bf6:	bf00      	nop
 8016bf8:	3714      	adds	r7, #20
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c00:	4770      	bx	lr
 8016c02:	bf00      	nop
 8016c04:	20019910 	.word	0x20019910

08016c08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8016c08:	b480      	push	{r7}
 8016c0a:	b085      	sub	sp, #20
 8016c0c:	af00      	add	r7, sp, #0
 8016c0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016c10:	2300      	movs	r3, #0
 8016c12:	60fb      	str	r3, [r7, #12]
 8016c14:	e016      	b.n	8016c44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8016c16:	4a10      	ldr	r2, [pc, #64]	; (8016c58 <vQueueUnregisterQueue+0x50>)
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	00db      	lsls	r3, r3, #3
 8016c1c:	4413      	add	r3, r2
 8016c1e:	685b      	ldr	r3, [r3, #4]
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	429a      	cmp	r2, r3
 8016c24:	d10b      	bne.n	8016c3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8016c26:	4a0c      	ldr	r2, [pc, #48]	; (8016c58 <vQueueUnregisterQueue+0x50>)
 8016c28:	68fb      	ldr	r3, [r7, #12]
 8016c2a:	2100      	movs	r1, #0
 8016c2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8016c30:	4a09      	ldr	r2, [pc, #36]	; (8016c58 <vQueueUnregisterQueue+0x50>)
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	00db      	lsls	r3, r3, #3
 8016c36:	4413      	add	r3, r2
 8016c38:	2200      	movs	r2, #0
 8016c3a:	605a      	str	r2, [r3, #4]
				break;
 8016c3c:	e006      	b.n	8016c4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8016c3e:	68fb      	ldr	r3, [r7, #12]
 8016c40:	3301      	adds	r3, #1
 8016c42:	60fb      	str	r3, [r7, #12]
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	2b07      	cmp	r3, #7
 8016c48:	d9e5      	bls.n	8016c16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8016c4a:	bf00      	nop
 8016c4c:	bf00      	nop
 8016c4e:	3714      	adds	r7, #20
 8016c50:	46bd      	mov	sp, r7
 8016c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c56:	4770      	bx	lr
 8016c58:	20019910 	.word	0x20019910

08016c5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8016c5c:	b580      	push	{r7, lr}
 8016c5e:	b086      	sub	sp, #24
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	60f8      	str	r0, [r7, #12]
 8016c64:	60b9      	str	r1, [r7, #8]
 8016c66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8016c68:	68fb      	ldr	r3, [r7, #12]
 8016c6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8016c6c:	f001 fcca 	bl	8018604 <vPortEnterCritical>
 8016c70:	697b      	ldr	r3, [r7, #20]
 8016c72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016c76:	b25b      	sxtb	r3, r3
 8016c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c7c:	d103      	bne.n	8016c86 <vQueueWaitForMessageRestricted+0x2a>
 8016c7e:	697b      	ldr	r3, [r7, #20]
 8016c80:	2200      	movs	r2, #0
 8016c82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016c86:	697b      	ldr	r3, [r7, #20]
 8016c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016c8c:	b25b      	sxtb	r3, r3
 8016c8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016c92:	d103      	bne.n	8016c9c <vQueueWaitForMessageRestricted+0x40>
 8016c94:	697b      	ldr	r3, [r7, #20]
 8016c96:	2200      	movs	r2, #0
 8016c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016c9c:	f001 fce2 	bl	8018664 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8016ca0:	697b      	ldr	r3, [r7, #20]
 8016ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d106      	bne.n	8016cb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8016ca8:	697b      	ldr	r3, [r7, #20]
 8016caa:	3324      	adds	r3, #36	; 0x24
 8016cac:	687a      	ldr	r2, [r7, #4]
 8016cae:	68b9      	ldr	r1, [r7, #8]
 8016cb0:	4618      	mov	r0, r3
 8016cb2:	f000 fc61 	bl	8017578 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8016cb6:	6978      	ldr	r0, [r7, #20]
 8016cb8:	f7ff fefb 	bl	8016ab2 <prvUnlockQueue>
	}
 8016cbc:	bf00      	nop
 8016cbe:	3718      	adds	r7, #24
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	bd80      	pop	{r7, pc}

08016cc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8016cc4:	b580      	push	{r7, lr}
 8016cc6:	b08e      	sub	sp, #56	; 0x38
 8016cc8:	af04      	add	r7, sp, #16
 8016cca:	60f8      	str	r0, [r7, #12]
 8016ccc:	60b9      	str	r1, [r7, #8]
 8016cce:	607a      	str	r2, [r7, #4]
 8016cd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8016cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d10a      	bne.n	8016cee <xTaskCreateStatic+0x2a>
	__asm volatile
 8016cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cdc:	f383 8811 	msr	BASEPRI, r3
 8016ce0:	f3bf 8f6f 	isb	sy
 8016ce4:	f3bf 8f4f 	dsb	sy
 8016ce8:	623b      	str	r3, [r7, #32]
}
 8016cea:	bf00      	nop
 8016cec:	e7fe      	b.n	8016cec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8016cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d10a      	bne.n	8016d0a <xTaskCreateStatic+0x46>
	__asm volatile
 8016cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cf8:	f383 8811 	msr	BASEPRI, r3
 8016cfc:	f3bf 8f6f 	isb	sy
 8016d00:	f3bf 8f4f 	dsb	sy
 8016d04:	61fb      	str	r3, [r7, #28]
}
 8016d06:	bf00      	nop
 8016d08:	e7fe      	b.n	8016d08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8016d0a:	23bc      	movs	r3, #188	; 0xbc
 8016d0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8016d0e:	693b      	ldr	r3, [r7, #16]
 8016d10:	2bbc      	cmp	r3, #188	; 0xbc
 8016d12:	d00a      	beq.n	8016d2a <xTaskCreateStatic+0x66>
	__asm volatile
 8016d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d18:	f383 8811 	msr	BASEPRI, r3
 8016d1c:	f3bf 8f6f 	isb	sy
 8016d20:	f3bf 8f4f 	dsb	sy
 8016d24:	61bb      	str	r3, [r7, #24]
}
 8016d26:	bf00      	nop
 8016d28:	e7fe      	b.n	8016d28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8016d2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8016d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d2e:	2b00      	cmp	r3, #0
 8016d30:	d01e      	beq.n	8016d70 <xTaskCreateStatic+0xac>
 8016d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016d34:	2b00      	cmp	r3, #0
 8016d36:	d01b      	beq.n	8016d70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8016d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016d40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8016d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d44:	2202      	movs	r2, #2
 8016d46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	9303      	str	r3, [sp, #12]
 8016d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d50:	9302      	str	r3, [sp, #8]
 8016d52:	f107 0314 	add.w	r3, r7, #20
 8016d56:	9301      	str	r3, [sp, #4]
 8016d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d5a:	9300      	str	r3, [sp, #0]
 8016d5c:	683b      	ldr	r3, [r7, #0]
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	68b9      	ldr	r1, [r7, #8]
 8016d62:	68f8      	ldr	r0, [r7, #12]
 8016d64:	f000 f850 	bl	8016e08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016d68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d6a:	f000 f8f3 	bl	8016f54 <prvAddNewTaskToReadyList>
 8016d6e:	e001      	b.n	8016d74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8016d70:	2300      	movs	r3, #0
 8016d72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8016d74:	697b      	ldr	r3, [r7, #20]
	}
 8016d76:	4618      	mov	r0, r3
 8016d78:	3728      	adds	r7, #40	; 0x28
 8016d7a:	46bd      	mov	sp, r7
 8016d7c:	bd80      	pop	{r7, pc}

08016d7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8016d7e:	b580      	push	{r7, lr}
 8016d80:	b08c      	sub	sp, #48	; 0x30
 8016d82:	af04      	add	r7, sp, #16
 8016d84:	60f8      	str	r0, [r7, #12]
 8016d86:	60b9      	str	r1, [r7, #8]
 8016d88:	603b      	str	r3, [r7, #0]
 8016d8a:	4613      	mov	r3, r2
 8016d8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8016d8e:	88fb      	ldrh	r3, [r7, #6]
 8016d90:	009b      	lsls	r3, r3, #2
 8016d92:	4618      	mov	r0, r3
 8016d94:	f001 fd58 	bl	8018848 <pvPortMalloc>
 8016d98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d00e      	beq.n	8016dbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8016da0:	20bc      	movs	r0, #188	; 0xbc
 8016da2:	f001 fd51 	bl	8018848 <pvPortMalloc>
 8016da6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8016da8:	69fb      	ldr	r3, [r7, #28]
 8016daa:	2b00      	cmp	r3, #0
 8016dac:	d003      	beq.n	8016db6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8016dae:	69fb      	ldr	r3, [r7, #28]
 8016db0:	697a      	ldr	r2, [r7, #20]
 8016db2:	631a      	str	r2, [r3, #48]	; 0x30
 8016db4:	e005      	b.n	8016dc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8016db6:	6978      	ldr	r0, [r7, #20]
 8016db8:	f001 fe12 	bl	80189e0 <vPortFree>
 8016dbc:	e001      	b.n	8016dc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8016dbe:	2300      	movs	r3, #0
 8016dc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8016dc2:	69fb      	ldr	r3, [r7, #28]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d017      	beq.n	8016df8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016dc8:	69fb      	ldr	r3, [r7, #28]
 8016dca:	2200      	movs	r2, #0
 8016dcc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016dd0:	88fa      	ldrh	r2, [r7, #6]
 8016dd2:	2300      	movs	r3, #0
 8016dd4:	9303      	str	r3, [sp, #12]
 8016dd6:	69fb      	ldr	r3, [r7, #28]
 8016dd8:	9302      	str	r3, [sp, #8]
 8016dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ddc:	9301      	str	r3, [sp, #4]
 8016dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016de0:	9300      	str	r3, [sp, #0]
 8016de2:	683b      	ldr	r3, [r7, #0]
 8016de4:	68b9      	ldr	r1, [r7, #8]
 8016de6:	68f8      	ldr	r0, [r7, #12]
 8016de8:	f000 f80e 	bl	8016e08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8016dec:	69f8      	ldr	r0, [r7, #28]
 8016dee:	f000 f8b1 	bl	8016f54 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016df2:	2301      	movs	r3, #1
 8016df4:	61bb      	str	r3, [r7, #24]
 8016df6:	e002      	b.n	8016dfe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8016df8:	f04f 33ff 	mov.w	r3, #4294967295
 8016dfc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8016dfe:	69bb      	ldr	r3, [r7, #24]
	}
 8016e00:	4618      	mov	r0, r3
 8016e02:	3720      	adds	r7, #32
 8016e04:	46bd      	mov	sp, r7
 8016e06:	bd80      	pop	{r7, pc}

08016e08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8016e08:	b580      	push	{r7, lr}
 8016e0a:	b088      	sub	sp, #32
 8016e0c:	af00      	add	r7, sp, #0
 8016e0e:	60f8      	str	r0, [r7, #12]
 8016e10:	60b9      	str	r1, [r7, #8]
 8016e12:	607a      	str	r2, [r7, #4]
 8016e14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8016e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	009b      	lsls	r3, r3, #2
 8016e1e:	461a      	mov	r2, r3
 8016e20:	21a5      	movs	r1, #165	; 0xa5
 8016e22:	f007 faa7 	bl	801e374 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8016e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8016e30:	3b01      	subs	r3, #1
 8016e32:	009b      	lsls	r3, r3, #2
 8016e34:	4413      	add	r3, r2
 8016e36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8016e38:	69bb      	ldr	r3, [r7, #24]
 8016e3a:	f023 0307 	bic.w	r3, r3, #7
 8016e3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8016e40:	69bb      	ldr	r3, [r7, #24]
 8016e42:	f003 0307 	and.w	r3, r3, #7
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d00a      	beq.n	8016e60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8016e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e4e:	f383 8811 	msr	BASEPRI, r3
 8016e52:	f3bf 8f6f 	isb	sy
 8016e56:	f3bf 8f4f 	dsb	sy
 8016e5a:	617b      	str	r3, [r7, #20]
}
 8016e5c:	bf00      	nop
 8016e5e:	e7fe      	b.n	8016e5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8016e60:	68bb      	ldr	r3, [r7, #8]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d01f      	beq.n	8016ea6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e66:	2300      	movs	r3, #0
 8016e68:	61fb      	str	r3, [r7, #28]
 8016e6a:	e012      	b.n	8016e92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8016e6c:	68ba      	ldr	r2, [r7, #8]
 8016e6e:	69fb      	ldr	r3, [r7, #28]
 8016e70:	4413      	add	r3, r2
 8016e72:	7819      	ldrb	r1, [r3, #0]
 8016e74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016e76:	69fb      	ldr	r3, [r7, #28]
 8016e78:	4413      	add	r3, r2
 8016e7a:	3334      	adds	r3, #52	; 0x34
 8016e7c:	460a      	mov	r2, r1
 8016e7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8016e80:	68ba      	ldr	r2, [r7, #8]
 8016e82:	69fb      	ldr	r3, [r7, #28]
 8016e84:	4413      	add	r3, r2
 8016e86:	781b      	ldrb	r3, [r3, #0]
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d006      	beq.n	8016e9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8016e8c:	69fb      	ldr	r3, [r7, #28]
 8016e8e:	3301      	adds	r3, #1
 8016e90:	61fb      	str	r3, [r7, #28]
 8016e92:	69fb      	ldr	r3, [r7, #28]
 8016e94:	2b0f      	cmp	r3, #15
 8016e96:	d9e9      	bls.n	8016e6c <prvInitialiseNewTask+0x64>
 8016e98:	e000      	b.n	8016e9c <prvInitialiseNewTask+0x94>
			{
				break;
 8016e9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8016e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e9e:	2200      	movs	r2, #0
 8016ea0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016ea4:	e003      	b.n	8016eae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8016ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea8:	2200      	movs	r2, #0
 8016eaa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8016eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eb0:	2b37      	cmp	r3, #55	; 0x37
 8016eb2:	d901      	bls.n	8016eb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8016eb4:	2337      	movs	r3, #55	; 0x37
 8016eb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8016eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ebc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8016ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016ec2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8016ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8016eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ecc:	3304      	adds	r3, #4
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f7fe fe56 	bl	8015b80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ed6:	3318      	adds	r3, #24
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7fe fe51 	bl	8015b80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ee0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ee2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ee6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8016eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8016eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ef2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8016ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef6:	2200      	movs	r2, #0
 8016ef8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016efe:	2200      	movs	r2, #0
 8016f00:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f06:	3354      	adds	r3, #84	; 0x54
 8016f08:	2260      	movs	r2, #96	; 0x60
 8016f0a:	2100      	movs	r1, #0
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f007 fa31 	bl	801e374 <memset>
 8016f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f14:	4a0c      	ldr	r2, [pc, #48]	; (8016f48 <prvInitialiseNewTask+0x140>)
 8016f16:	659a      	str	r2, [r3, #88]	; 0x58
 8016f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f1a:	4a0c      	ldr	r2, [pc, #48]	; (8016f4c <prvInitialiseNewTask+0x144>)
 8016f1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8016f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f20:	4a0b      	ldr	r2, [pc, #44]	; (8016f50 <prvInitialiseNewTask+0x148>)
 8016f22:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016f24:	683a      	ldr	r2, [r7, #0]
 8016f26:	68f9      	ldr	r1, [r7, #12]
 8016f28:	69b8      	ldr	r0, [r7, #24]
 8016f2a:	f001 fa3f 	bl	80183ac <pxPortInitialiseStack>
 8016f2e:	4602      	mov	r2, r0
 8016f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f32:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8016f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d002      	beq.n	8016f40 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016f3e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016f40:	bf00      	nop
 8016f42:	3720      	adds	r7, #32
 8016f44:	46bd      	mov	sp, r7
 8016f46:	bd80      	pop	{r7, pc}
 8016f48:	08029374 	.word	0x08029374
 8016f4c:	08029394 	.word	0x08029394
 8016f50:	08029354 	.word	0x08029354

08016f54 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8016f54:	b580      	push	{r7, lr}
 8016f56:	b082      	sub	sp, #8
 8016f58:	af00      	add	r7, sp, #0
 8016f5a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8016f5c:	f001 fb52 	bl	8018604 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8016f60:	4b2d      	ldr	r3, [pc, #180]	; (8017018 <prvAddNewTaskToReadyList+0xc4>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	3301      	adds	r3, #1
 8016f66:	4a2c      	ldr	r2, [pc, #176]	; (8017018 <prvAddNewTaskToReadyList+0xc4>)
 8016f68:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8016f6a:	4b2c      	ldr	r3, [pc, #176]	; (801701c <prvAddNewTaskToReadyList+0xc8>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d109      	bne.n	8016f86 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8016f72:	4a2a      	ldr	r2, [pc, #168]	; (801701c <prvAddNewTaskToReadyList+0xc8>)
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8016f78:	4b27      	ldr	r3, [pc, #156]	; (8017018 <prvAddNewTaskToReadyList+0xc4>)
 8016f7a:	681b      	ldr	r3, [r3, #0]
 8016f7c:	2b01      	cmp	r3, #1
 8016f7e:	d110      	bne.n	8016fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8016f80:	f000 fc26 	bl	80177d0 <prvInitialiseTaskLists>
 8016f84:	e00d      	b.n	8016fa2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8016f86:	4b26      	ldr	r3, [pc, #152]	; (8017020 <prvAddNewTaskToReadyList+0xcc>)
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	d109      	bne.n	8016fa2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8016f8e:	4b23      	ldr	r3, [pc, #140]	; (801701c <prvAddNewTaskToReadyList+0xc8>)
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016f98:	429a      	cmp	r2, r3
 8016f9a:	d802      	bhi.n	8016fa2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8016f9c:	4a1f      	ldr	r2, [pc, #124]	; (801701c <prvAddNewTaskToReadyList+0xc8>)
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8016fa2:	4b20      	ldr	r3, [pc, #128]	; (8017024 <prvAddNewTaskToReadyList+0xd0>)
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	3301      	adds	r3, #1
 8016fa8:	4a1e      	ldr	r2, [pc, #120]	; (8017024 <prvAddNewTaskToReadyList+0xd0>)
 8016faa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8016fac:	4b1d      	ldr	r3, [pc, #116]	; (8017024 <prvAddNewTaskToReadyList+0xd0>)
 8016fae:	681a      	ldr	r2, [r3, #0]
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fb8:	4b1b      	ldr	r3, [pc, #108]	; (8017028 <prvAddNewTaskToReadyList+0xd4>)
 8016fba:	681b      	ldr	r3, [r3, #0]
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d903      	bls.n	8016fc8 <prvAddNewTaskToReadyList+0x74>
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016fc4:	4a18      	ldr	r2, [pc, #96]	; (8017028 <prvAddNewTaskToReadyList+0xd4>)
 8016fc6:	6013      	str	r3, [r2, #0]
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016fcc:	4613      	mov	r3, r2
 8016fce:	009b      	lsls	r3, r3, #2
 8016fd0:	4413      	add	r3, r2
 8016fd2:	009b      	lsls	r3, r3, #2
 8016fd4:	4a15      	ldr	r2, [pc, #84]	; (801702c <prvAddNewTaskToReadyList+0xd8>)
 8016fd6:	441a      	add	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	3304      	adds	r3, #4
 8016fdc:	4619      	mov	r1, r3
 8016fde:	4610      	mov	r0, r2
 8016fe0:	f7fe fddb 	bl	8015b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8016fe4:	f001 fb3e 	bl	8018664 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8016fe8:	4b0d      	ldr	r3, [pc, #52]	; (8017020 <prvAddNewTaskToReadyList+0xcc>)
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	d00e      	beq.n	801700e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8016ff0:	4b0a      	ldr	r3, [pc, #40]	; (801701c <prvAddNewTaskToReadyList+0xc8>)
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ffa:	429a      	cmp	r2, r3
 8016ffc:	d207      	bcs.n	801700e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8016ffe:	4b0c      	ldr	r3, [pc, #48]	; (8017030 <prvAddNewTaskToReadyList+0xdc>)
 8017000:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017004:	601a      	str	r2, [r3, #0]
 8017006:	f3bf 8f4f 	dsb	sy
 801700a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801700e:	bf00      	nop
 8017010:	3708      	adds	r7, #8
 8017012:	46bd      	mov	sp, r7
 8017014:	bd80      	pop	{r7, pc}
 8017016:	bf00      	nop
 8017018:	20019e24 	.word	0x20019e24
 801701c:	20019950 	.word	0x20019950
 8017020:	20019e30 	.word	0x20019e30
 8017024:	20019e40 	.word	0x20019e40
 8017028:	20019e2c 	.word	0x20019e2c
 801702c:	20019954 	.word	0x20019954
 8017030:	e000ed04 	.word	0xe000ed04

08017034 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017034:	b580      	push	{r7, lr}
 8017036:	b084      	sub	sp, #16
 8017038:	af00      	add	r7, sp, #0
 801703a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801703c:	2300      	movs	r3, #0
 801703e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	2b00      	cmp	r3, #0
 8017044:	d017      	beq.n	8017076 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017046:	4b13      	ldr	r3, [pc, #76]	; (8017094 <vTaskDelay+0x60>)
 8017048:	681b      	ldr	r3, [r3, #0]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d00a      	beq.n	8017064 <vTaskDelay+0x30>
	__asm volatile
 801704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017052:	f383 8811 	msr	BASEPRI, r3
 8017056:	f3bf 8f6f 	isb	sy
 801705a:	f3bf 8f4f 	dsb	sy
 801705e:	60bb      	str	r3, [r7, #8]
}
 8017060:	bf00      	nop
 8017062:	e7fe      	b.n	8017062 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8017064:	f000 f88a 	bl	801717c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017068:	2100      	movs	r1, #0
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f000 fdfc 	bl	8017c68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017070:	f000 f892 	bl	8017198 <xTaskResumeAll>
 8017074:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	2b00      	cmp	r3, #0
 801707a:	d107      	bne.n	801708c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801707c:	4b06      	ldr	r3, [pc, #24]	; (8017098 <vTaskDelay+0x64>)
 801707e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017082:	601a      	str	r2, [r3, #0]
 8017084:	f3bf 8f4f 	dsb	sy
 8017088:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801708c:	bf00      	nop
 801708e:	3710      	adds	r7, #16
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	20019e4c 	.word	0x20019e4c
 8017098:	e000ed04 	.word	0xe000ed04

0801709c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801709c:	b580      	push	{r7, lr}
 801709e:	b08a      	sub	sp, #40	; 0x28
 80170a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80170a2:	2300      	movs	r3, #0
 80170a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80170a6:	2300      	movs	r3, #0
 80170a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80170aa:	463a      	mov	r2, r7
 80170ac:	1d39      	adds	r1, r7, #4
 80170ae:	f107 0308 	add.w	r3, r7, #8
 80170b2:	4618      	mov	r0, r3
 80170b4:	f7fe fd10 	bl	8015ad8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80170b8:	6839      	ldr	r1, [r7, #0]
 80170ba:	687b      	ldr	r3, [r7, #4]
 80170bc:	68ba      	ldr	r2, [r7, #8]
 80170be:	9202      	str	r2, [sp, #8]
 80170c0:	9301      	str	r3, [sp, #4]
 80170c2:	2300      	movs	r3, #0
 80170c4:	9300      	str	r3, [sp, #0]
 80170c6:	2300      	movs	r3, #0
 80170c8:	460a      	mov	r2, r1
 80170ca:	4924      	ldr	r1, [pc, #144]	; (801715c <vTaskStartScheduler+0xc0>)
 80170cc:	4824      	ldr	r0, [pc, #144]	; (8017160 <vTaskStartScheduler+0xc4>)
 80170ce:	f7ff fdf9 	bl	8016cc4 <xTaskCreateStatic>
 80170d2:	4603      	mov	r3, r0
 80170d4:	4a23      	ldr	r2, [pc, #140]	; (8017164 <vTaskStartScheduler+0xc8>)
 80170d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80170d8:	4b22      	ldr	r3, [pc, #136]	; (8017164 <vTaskStartScheduler+0xc8>)
 80170da:	681b      	ldr	r3, [r3, #0]
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d002      	beq.n	80170e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80170e0:	2301      	movs	r3, #1
 80170e2:	617b      	str	r3, [r7, #20]
 80170e4:	e001      	b.n	80170ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80170e6:	2300      	movs	r3, #0
 80170e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80170ea:	697b      	ldr	r3, [r7, #20]
 80170ec:	2b01      	cmp	r3, #1
 80170ee:	d102      	bne.n	80170f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80170f0:	f000 fe0e 	bl	8017d10 <xTimerCreateTimerTask>
 80170f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80170f6:	697b      	ldr	r3, [r7, #20]
 80170f8:	2b01      	cmp	r3, #1
 80170fa:	d11b      	bne.n	8017134 <vTaskStartScheduler+0x98>
	__asm volatile
 80170fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017100:	f383 8811 	msr	BASEPRI, r3
 8017104:	f3bf 8f6f 	isb	sy
 8017108:	f3bf 8f4f 	dsb	sy
 801710c:	613b      	str	r3, [r7, #16]
}
 801710e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017110:	4b15      	ldr	r3, [pc, #84]	; (8017168 <vTaskStartScheduler+0xcc>)
 8017112:	681b      	ldr	r3, [r3, #0]
 8017114:	3354      	adds	r3, #84	; 0x54
 8017116:	4a15      	ldr	r2, [pc, #84]	; (801716c <vTaskStartScheduler+0xd0>)
 8017118:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801711a:	4b15      	ldr	r3, [pc, #84]	; (8017170 <vTaskStartScheduler+0xd4>)
 801711c:	f04f 32ff 	mov.w	r2, #4294967295
 8017120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017122:	4b14      	ldr	r3, [pc, #80]	; (8017174 <vTaskStartScheduler+0xd8>)
 8017124:	2201      	movs	r2, #1
 8017126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017128:	4b13      	ldr	r3, [pc, #76]	; (8017178 <vTaskStartScheduler+0xdc>)
 801712a:	2200      	movs	r2, #0
 801712c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801712e:	f001 f9c7 	bl	80184c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017132:	e00e      	b.n	8017152 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017134:	697b      	ldr	r3, [r7, #20]
 8017136:	f1b3 3fff 	cmp.w	r3, #4294967295
 801713a:	d10a      	bne.n	8017152 <vTaskStartScheduler+0xb6>
	__asm volatile
 801713c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017140:	f383 8811 	msr	BASEPRI, r3
 8017144:	f3bf 8f6f 	isb	sy
 8017148:	f3bf 8f4f 	dsb	sy
 801714c:	60fb      	str	r3, [r7, #12]
}
 801714e:	bf00      	nop
 8017150:	e7fe      	b.n	8017150 <vTaskStartScheduler+0xb4>
}
 8017152:	bf00      	nop
 8017154:	3718      	adds	r7, #24
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	08020720 	.word	0x08020720
 8017160:	080177a1 	.word	0x080177a1
 8017164:	20019e48 	.word	0x20019e48
 8017168:	20019950 	.word	0x20019950
 801716c:	20000048 	.word	0x20000048
 8017170:	20019e44 	.word	0x20019e44
 8017174:	20019e30 	.word	0x20019e30
 8017178:	20019e28 	.word	0x20019e28

0801717c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801717c:	b480      	push	{r7}
 801717e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8017180:	4b04      	ldr	r3, [pc, #16]	; (8017194 <vTaskSuspendAll+0x18>)
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	3301      	adds	r3, #1
 8017186:	4a03      	ldr	r2, [pc, #12]	; (8017194 <vTaskSuspendAll+0x18>)
 8017188:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801718a:	bf00      	nop
 801718c:	46bd      	mov	sp, r7
 801718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017192:	4770      	bx	lr
 8017194:	20019e4c 	.word	0x20019e4c

08017198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b084      	sub	sp, #16
 801719c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801719e:	2300      	movs	r3, #0
 80171a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80171a2:	2300      	movs	r3, #0
 80171a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80171a6:	4b42      	ldr	r3, [pc, #264]	; (80172b0 <xTaskResumeAll+0x118>)
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d10a      	bne.n	80171c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80171ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171b2:	f383 8811 	msr	BASEPRI, r3
 80171b6:	f3bf 8f6f 	isb	sy
 80171ba:	f3bf 8f4f 	dsb	sy
 80171be:	603b      	str	r3, [r7, #0]
}
 80171c0:	bf00      	nop
 80171c2:	e7fe      	b.n	80171c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80171c4:	f001 fa1e 	bl	8018604 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80171c8:	4b39      	ldr	r3, [pc, #228]	; (80172b0 <xTaskResumeAll+0x118>)
 80171ca:	681b      	ldr	r3, [r3, #0]
 80171cc:	3b01      	subs	r3, #1
 80171ce:	4a38      	ldr	r2, [pc, #224]	; (80172b0 <xTaskResumeAll+0x118>)
 80171d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80171d2:	4b37      	ldr	r3, [pc, #220]	; (80172b0 <xTaskResumeAll+0x118>)
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d162      	bne.n	80172a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80171da:	4b36      	ldr	r3, [pc, #216]	; (80172b4 <xTaskResumeAll+0x11c>)
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d05e      	beq.n	80172a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80171e2:	e02f      	b.n	8017244 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80171e4:	4b34      	ldr	r3, [pc, #208]	; (80172b8 <xTaskResumeAll+0x120>)
 80171e6:	68db      	ldr	r3, [r3, #12]
 80171e8:	68db      	ldr	r3, [r3, #12]
 80171ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	3318      	adds	r3, #24
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7fe fd2f 	bl	8015c54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	3304      	adds	r3, #4
 80171fa:	4618      	mov	r0, r3
 80171fc:	f7fe fd2a 	bl	8015c54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8017200:	68fb      	ldr	r3, [r7, #12]
 8017202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017204:	4b2d      	ldr	r3, [pc, #180]	; (80172bc <xTaskResumeAll+0x124>)
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	429a      	cmp	r2, r3
 801720a:	d903      	bls.n	8017214 <xTaskResumeAll+0x7c>
 801720c:	68fb      	ldr	r3, [r7, #12]
 801720e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017210:	4a2a      	ldr	r2, [pc, #168]	; (80172bc <xTaskResumeAll+0x124>)
 8017212:	6013      	str	r3, [r2, #0]
 8017214:	68fb      	ldr	r3, [r7, #12]
 8017216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017218:	4613      	mov	r3, r2
 801721a:	009b      	lsls	r3, r3, #2
 801721c:	4413      	add	r3, r2
 801721e:	009b      	lsls	r3, r3, #2
 8017220:	4a27      	ldr	r2, [pc, #156]	; (80172c0 <xTaskResumeAll+0x128>)
 8017222:	441a      	add	r2, r3
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	3304      	adds	r3, #4
 8017228:	4619      	mov	r1, r3
 801722a:	4610      	mov	r0, r2
 801722c:	f7fe fcb5 	bl	8015b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017234:	4b23      	ldr	r3, [pc, #140]	; (80172c4 <xTaskResumeAll+0x12c>)
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801723a:	429a      	cmp	r2, r3
 801723c:	d302      	bcc.n	8017244 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801723e:	4b22      	ldr	r3, [pc, #136]	; (80172c8 <xTaskResumeAll+0x130>)
 8017240:	2201      	movs	r2, #1
 8017242:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017244:	4b1c      	ldr	r3, [pc, #112]	; (80172b8 <xTaskResumeAll+0x120>)
 8017246:	681b      	ldr	r3, [r3, #0]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d1cb      	bne.n	80171e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d001      	beq.n	8017256 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8017252:	f000 fb5f 	bl	8017914 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8017256:	4b1d      	ldr	r3, [pc, #116]	; (80172cc <xTaskResumeAll+0x134>)
 8017258:	681b      	ldr	r3, [r3, #0]
 801725a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	2b00      	cmp	r3, #0
 8017260:	d010      	beq.n	8017284 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8017262:	f000 f847 	bl	80172f4 <xTaskIncrementTick>
 8017266:	4603      	mov	r3, r0
 8017268:	2b00      	cmp	r3, #0
 801726a:	d002      	beq.n	8017272 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801726c:	4b16      	ldr	r3, [pc, #88]	; (80172c8 <xTaskResumeAll+0x130>)
 801726e:	2201      	movs	r2, #1
 8017270:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	3b01      	subs	r3, #1
 8017276:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2b00      	cmp	r3, #0
 801727c:	d1f1      	bne.n	8017262 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801727e:	4b13      	ldr	r3, [pc, #76]	; (80172cc <xTaskResumeAll+0x134>)
 8017280:	2200      	movs	r2, #0
 8017282:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8017284:	4b10      	ldr	r3, [pc, #64]	; (80172c8 <xTaskResumeAll+0x130>)
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	2b00      	cmp	r3, #0
 801728a:	d009      	beq.n	80172a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801728c:	2301      	movs	r3, #1
 801728e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8017290:	4b0f      	ldr	r3, [pc, #60]	; (80172d0 <xTaskResumeAll+0x138>)
 8017292:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017296:	601a      	str	r2, [r3, #0]
 8017298:	f3bf 8f4f 	dsb	sy
 801729c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80172a0:	f001 f9e0 	bl	8018664 <vPortExitCritical>

	return xAlreadyYielded;
 80172a4:	68bb      	ldr	r3, [r7, #8]
}
 80172a6:	4618      	mov	r0, r3
 80172a8:	3710      	adds	r7, #16
 80172aa:	46bd      	mov	sp, r7
 80172ac:	bd80      	pop	{r7, pc}
 80172ae:	bf00      	nop
 80172b0:	20019e4c 	.word	0x20019e4c
 80172b4:	20019e24 	.word	0x20019e24
 80172b8:	20019de4 	.word	0x20019de4
 80172bc:	20019e2c 	.word	0x20019e2c
 80172c0:	20019954 	.word	0x20019954
 80172c4:	20019950 	.word	0x20019950
 80172c8:	20019e38 	.word	0x20019e38
 80172cc:	20019e34 	.word	0x20019e34
 80172d0:	e000ed04 	.word	0xe000ed04

080172d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80172d4:	b480      	push	{r7}
 80172d6:	b083      	sub	sp, #12
 80172d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80172da:	4b05      	ldr	r3, [pc, #20]	; (80172f0 <xTaskGetTickCount+0x1c>)
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80172e0:	687b      	ldr	r3, [r7, #4]
}
 80172e2:	4618      	mov	r0, r3
 80172e4:	370c      	adds	r7, #12
 80172e6:	46bd      	mov	sp, r7
 80172e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ec:	4770      	bx	lr
 80172ee:	bf00      	nop
 80172f0:	20019e28 	.word	0x20019e28

080172f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80172f4:	b580      	push	{r7, lr}
 80172f6:	b086      	sub	sp, #24
 80172f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80172fa:	2300      	movs	r3, #0
 80172fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80172fe:	4b4f      	ldr	r3, [pc, #316]	; (801743c <xTaskIncrementTick+0x148>)
 8017300:	681b      	ldr	r3, [r3, #0]
 8017302:	2b00      	cmp	r3, #0
 8017304:	f040 808f 	bne.w	8017426 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8017308:	4b4d      	ldr	r3, [pc, #308]	; (8017440 <xTaskIncrementTick+0x14c>)
 801730a:	681b      	ldr	r3, [r3, #0]
 801730c:	3301      	adds	r3, #1
 801730e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8017310:	4a4b      	ldr	r2, [pc, #300]	; (8017440 <xTaskIncrementTick+0x14c>)
 8017312:	693b      	ldr	r3, [r7, #16]
 8017314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8017316:	693b      	ldr	r3, [r7, #16]
 8017318:	2b00      	cmp	r3, #0
 801731a:	d120      	bne.n	801735e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801731c:	4b49      	ldr	r3, [pc, #292]	; (8017444 <xTaskIncrementTick+0x150>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d00a      	beq.n	801733c <xTaskIncrementTick+0x48>
	__asm volatile
 8017326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801732a:	f383 8811 	msr	BASEPRI, r3
 801732e:	f3bf 8f6f 	isb	sy
 8017332:	f3bf 8f4f 	dsb	sy
 8017336:	603b      	str	r3, [r7, #0]
}
 8017338:	bf00      	nop
 801733a:	e7fe      	b.n	801733a <xTaskIncrementTick+0x46>
 801733c:	4b41      	ldr	r3, [pc, #260]	; (8017444 <xTaskIncrementTick+0x150>)
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	60fb      	str	r3, [r7, #12]
 8017342:	4b41      	ldr	r3, [pc, #260]	; (8017448 <xTaskIncrementTick+0x154>)
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	4a3f      	ldr	r2, [pc, #252]	; (8017444 <xTaskIncrementTick+0x150>)
 8017348:	6013      	str	r3, [r2, #0]
 801734a:	4a3f      	ldr	r2, [pc, #252]	; (8017448 <xTaskIncrementTick+0x154>)
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	6013      	str	r3, [r2, #0]
 8017350:	4b3e      	ldr	r3, [pc, #248]	; (801744c <xTaskIncrementTick+0x158>)
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	3301      	adds	r3, #1
 8017356:	4a3d      	ldr	r2, [pc, #244]	; (801744c <xTaskIncrementTick+0x158>)
 8017358:	6013      	str	r3, [r2, #0]
 801735a:	f000 fadb 	bl	8017914 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801735e:	4b3c      	ldr	r3, [pc, #240]	; (8017450 <xTaskIncrementTick+0x15c>)
 8017360:	681b      	ldr	r3, [r3, #0]
 8017362:	693a      	ldr	r2, [r7, #16]
 8017364:	429a      	cmp	r2, r3
 8017366:	d349      	bcc.n	80173fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8017368:	4b36      	ldr	r3, [pc, #216]	; (8017444 <xTaskIncrementTick+0x150>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	2b00      	cmp	r3, #0
 8017370:	d104      	bne.n	801737c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017372:	4b37      	ldr	r3, [pc, #220]	; (8017450 <xTaskIncrementTick+0x15c>)
 8017374:	f04f 32ff 	mov.w	r2, #4294967295
 8017378:	601a      	str	r2, [r3, #0]
					break;
 801737a:	e03f      	b.n	80173fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801737c:	4b31      	ldr	r3, [pc, #196]	; (8017444 <xTaskIncrementTick+0x150>)
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	68db      	ldr	r3, [r3, #12]
 8017382:	68db      	ldr	r3, [r3, #12]
 8017384:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8017386:	68bb      	ldr	r3, [r7, #8]
 8017388:	685b      	ldr	r3, [r3, #4]
 801738a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801738c:	693a      	ldr	r2, [r7, #16]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	429a      	cmp	r2, r3
 8017392:	d203      	bcs.n	801739c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8017394:	4a2e      	ldr	r2, [pc, #184]	; (8017450 <xTaskIncrementTick+0x15c>)
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801739a:	e02f      	b.n	80173fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801739c:	68bb      	ldr	r3, [r7, #8]
 801739e:	3304      	adds	r3, #4
 80173a0:	4618      	mov	r0, r3
 80173a2:	f7fe fc57 	bl	8015c54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80173a6:	68bb      	ldr	r3, [r7, #8]
 80173a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80173aa:	2b00      	cmp	r3, #0
 80173ac:	d004      	beq.n	80173b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80173ae:	68bb      	ldr	r3, [r7, #8]
 80173b0:	3318      	adds	r3, #24
 80173b2:	4618      	mov	r0, r3
 80173b4:	f7fe fc4e 	bl	8015c54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80173b8:	68bb      	ldr	r3, [r7, #8]
 80173ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173bc:	4b25      	ldr	r3, [pc, #148]	; (8017454 <xTaskIncrementTick+0x160>)
 80173be:	681b      	ldr	r3, [r3, #0]
 80173c0:	429a      	cmp	r2, r3
 80173c2:	d903      	bls.n	80173cc <xTaskIncrementTick+0xd8>
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173c8:	4a22      	ldr	r2, [pc, #136]	; (8017454 <xTaskIncrementTick+0x160>)
 80173ca:	6013      	str	r3, [r2, #0]
 80173cc:	68bb      	ldr	r3, [r7, #8]
 80173ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173d0:	4613      	mov	r3, r2
 80173d2:	009b      	lsls	r3, r3, #2
 80173d4:	4413      	add	r3, r2
 80173d6:	009b      	lsls	r3, r3, #2
 80173d8:	4a1f      	ldr	r2, [pc, #124]	; (8017458 <xTaskIncrementTick+0x164>)
 80173da:	441a      	add	r2, r3
 80173dc:	68bb      	ldr	r3, [r7, #8]
 80173de:	3304      	adds	r3, #4
 80173e0:	4619      	mov	r1, r3
 80173e2:	4610      	mov	r0, r2
 80173e4:	f7fe fbd9 	bl	8015b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80173e8:	68bb      	ldr	r3, [r7, #8]
 80173ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173ec:	4b1b      	ldr	r3, [pc, #108]	; (801745c <xTaskIncrementTick+0x168>)
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d3b8      	bcc.n	8017368 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80173f6:	2301      	movs	r3, #1
 80173f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80173fa:	e7b5      	b.n	8017368 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80173fc:	4b17      	ldr	r3, [pc, #92]	; (801745c <xTaskIncrementTick+0x168>)
 80173fe:	681b      	ldr	r3, [r3, #0]
 8017400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017402:	4915      	ldr	r1, [pc, #84]	; (8017458 <xTaskIncrementTick+0x164>)
 8017404:	4613      	mov	r3, r2
 8017406:	009b      	lsls	r3, r3, #2
 8017408:	4413      	add	r3, r2
 801740a:	009b      	lsls	r3, r3, #2
 801740c:	440b      	add	r3, r1
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	2b01      	cmp	r3, #1
 8017412:	d901      	bls.n	8017418 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8017414:	2301      	movs	r3, #1
 8017416:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8017418:	4b11      	ldr	r3, [pc, #68]	; (8017460 <xTaskIncrementTick+0x16c>)
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	2b00      	cmp	r3, #0
 801741e:	d007      	beq.n	8017430 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8017420:	2301      	movs	r3, #1
 8017422:	617b      	str	r3, [r7, #20]
 8017424:	e004      	b.n	8017430 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8017426:	4b0f      	ldr	r3, [pc, #60]	; (8017464 <xTaskIncrementTick+0x170>)
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	3301      	adds	r3, #1
 801742c:	4a0d      	ldr	r2, [pc, #52]	; (8017464 <xTaskIncrementTick+0x170>)
 801742e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8017430:	697b      	ldr	r3, [r7, #20]
}
 8017432:	4618      	mov	r0, r3
 8017434:	3718      	adds	r7, #24
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}
 801743a:	bf00      	nop
 801743c:	20019e4c 	.word	0x20019e4c
 8017440:	20019e28 	.word	0x20019e28
 8017444:	20019ddc 	.word	0x20019ddc
 8017448:	20019de0 	.word	0x20019de0
 801744c:	20019e3c 	.word	0x20019e3c
 8017450:	20019e44 	.word	0x20019e44
 8017454:	20019e2c 	.word	0x20019e2c
 8017458:	20019954 	.word	0x20019954
 801745c:	20019950 	.word	0x20019950
 8017460:	20019e38 	.word	0x20019e38
 8017464:	20019e34 	.word	0x20019e34

08017468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8017468:	b480      	push	{r7}
 801746a:	b085      	sub	sp, #20
 801746c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801746e:	4b2a      	ldr	r3, [pc, #168]	; (8017518 <vTaskSwitchContext+0xb0>)
 8017470:	681b      	ldr	r3, [r3, #0]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d003      	beq.n	801747e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8017476:	4b29      	ldr	r3, [pc, #164]	; (801751c <vTaskSwitchContext+0xb4>)
 8017478:	2201      	movs	r2, #1
 801747a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801747c:	e046      	b.n	801750c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801747e:	4b27      	ldr	r3, [pc, #156]	; (801751c <vTaskSwitchContext+0xb4>)
 8017480:	2200      	movs	r2, #0
 8017482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017484:	4b26      	ldr	r3, [pc, #152]	; (8017520 <vTaskSwitchContext+0xb8>)
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	60fb      	str	r3, [r7, #12]
 801748a:	e010      	b.n	80174ae <vTaskSwitchContext+0x46>
 801748c:	68fb      	ldr	r3, [r7, #12]
 801748e:	2b00      	cmp	r3, #0
 8017490:	d10a      	bne.n	80174a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8017492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017496:	f383 8811 	msr	BASEPRI, r3
 801749a:	f3bf 8f6f 	isb	sy
 801749e:	f3bf 8f4f 	dsb	sy
 80174a2:	607b      	str	r3, [r7, #4]
}
 80174a4:	bf00      	nop
 80174a6:	e7fe      	b.n	80174a6 <vTaskSwitchContext+0x3e>
 80174a8:	68fb      	ldr	r3, [r7, #12]
 80174aa:	3b01      	subs	r3, #1
 80174ac:	60fb      	str	r3, [r7, #12]
 80174ae:	491d      	ldr	r1, [pc, #116]	; (8017524 <vTaskSwitchContext+0xbc>)
 80174b0:	68fa      	ldr	r2, [r7, #12]
 80174b2:	4613      	mov	r3, r2
 80174b4:	009b      	lsls	r3, r3, #2
 80174b6:	4413      	add	r3, r2
 80174b8:	009b      	lsls	r3, r3, #2
 80174ba:	440b      	add	r3, r1
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	2b00      	cmp	r3, #0
 80174c0:	d0e4      	beq.n	801748c <vTaskSwitchContext+0x24>
 80174c2:	68fa      	ldr	r2, [r7, #12]
 80174c4:	4613      	mov	r3, r2
 80174c6:	009b      	lsls	r3, r3, #2
 80174c8:	4413      	add	r3, r2
 80174ca:	009b      	lsls	r3, r3, #2
 80174cc:	4a15      	ldr	r2, [pc, #84]	; (8017524 <vTaskSwitchContext+0xbc>)
 80174ce:	4413      	add	r3, r2
 80174d0:	60bb      	str	r3, [r7, #8]
 80174d2:	68bb      	ldr	r3, [r7, #8]
 80174d4:	685b      	ldr	r3, [r3, #4]
 80174d6:	685a      	ldr	r2, [r3, #4]
 80174d8:	68bb      	ldr	r3, [r7, #8]
 80174da:	605a      	str	r2, [r3, #4]
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	685a      	ldr	r2, [r3, #4]
 80174e0:	68bb      	ldr	r3, [r7, #8]
 80174e2:	3308      	adds	r3, #8
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d104      	bne.n	80174f2 <vTaskSwitchContext+0x8a>
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	685b      	ldr	r3, [r3, #4]
 80174ec:	685a      	ldr	r2, [r3, #4]
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	605a      	str	r2, [r3, #4]
 80174f2:	68bb      	ldr	r3, [r7, #8]
 80174f4:	685b      	ldr	r3, [r3, #4]
 80174f6:	68db      	ldr	r3, [r3, #12]
 80174f8:	4a0b      	ldr	r2, [pc, #44]	; (8017528 <vTaskSwitchContext+0xc0>)
 80174fa:	6013      	str	r3, [r2, #0]
 80174fc:	4a08      	ldr	r2, [pc, #32]	; (8017520 <vTaskSwitchContext+0xb8>)
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8017502:	4b09      	ldr	r3, [pc, #36]	; (8017528 <vTaskSwitchContext+0xc0>)
 8017504:	681b      	ldr	r3, [r3, #0]
 8017506:	3354      	adds	r3, #84	; 0x54
 8017508:	4a08      	ldr	r2, [pc, #32]	; (801752c <vTaskSwitchContext+0xc4>)
 801750a:	6013      	str	r3, [r2, #0]
}
 801750c:	bf00      	nop
 801750e:	3714      	adds	r7, #20
 8017510:	46bd      	mov	sp, r7
 8017512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017516:	4770      	bx	lr
 8017518:	20019e4c 	.word	0x20019e4c
 801751c:	20019e38 	.word	0x20019e38
 8017520:	20019e2c 	.word	0x20019e2c
 8017524:	20019954 	.word	0x20019954
 8017528:	20019950 	.word	0x20019950
 801752c:	20000048 	.word	0x20000048

08017530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8017530:	b580      	push	{r7, lr}
 8017532:	b084      	sub	sp, #16
 8017534:	af00      	add	r7, sp, #0
 8017536:	6078      	str	r0, [r7, #4]
 8017538:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801753a:	687b      	ldr	r3, [r7, #4]
 801753c:	2b00      	cmp	r3, #0
 801753e:	d10a      	bne.n	8017556 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8017540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017544:	f383 8811 	msr	BASEPRI, r3
 8017548:	f3bf 8f6f 	isb	sy
 801754c:	f3bf 8f4f 	dsb	sy
 8017550:	60fb      	str	r3, [r7, #12]
}
 8017552:	bf00      	nop
 8017554:	e7fe      	b.n	8017554 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8017556:	4b07      	ldr	r3, [pc, #28]	; (8017574 <vTaskPlaceOnEventList+0x44>)
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	3318      	adds	r3, #24
 801755c:	4619      	mov	r1, r3
 801755e:	6878      	ldr	r0, [r7, #4]
 8017560:	f7fe fb3f 	bl	8015be2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8017564:	2101      	movs	r1, #1
 8017566:	6838      	ldr	r0, [r7, #0]
 8017568:	f000 fb7e 	bl	8017c68 <prvAddCurrentTaskToDelayedList>
}
 801756c:	bf00      	nop
 801756e:	3710      	adds	r7, #16
 8017570:	46bd      	mov	sp, r7
 8017572:	bd80      	pop	{r7, pc}
 8017574:	20019950 	.word	0x20019950

08017578 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017578:	b580      	push	{r7, lr}
 801757a:	b086      	sub	sp, #24
 801757c:	af00      	add	r7, sp, #0
 801757e:	60f8      	str	r0, [r7, #12]
 8017580:	60b9      	str	r1, [r7, #8]
 8017582:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8017584:	68fb      	ldr	r3, [r7, #12]
 8017586:	2b00      	cmp	r3, #0
 8017588:	d10a      	bne.n	80175a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801758a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801758e:	f383 8811 	msr	BASEPRI, r3
 8017592:	f3bf 8f6f 	isb	sy
 8017596:	f3bf 8f4f 	dsb	sy
 801759a:	617b      	str	r3, [r7, #20]
}
 801759c:	bf00      	nop
 801759e:	e7fe      	b.n	801759e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80175a0:	4b0a      	ldr	r3, [pc, #40]	; (80175cc <vTaskPlaceOnEventListRestricted+0x54>)
 80175a2:	681b      	ldr	r3, [r3, #0]
 80175a4:	3318      	adds	r3, #24
 80175a6:	4619      	mov	r1, r3
 80175a8:	68f8      	ldr	r0, [r7, #12]
 80175aa:	f7fe faf6 	bl	8015b9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d002      	beq.n	80175ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80175b4:	f04f 33ff 	mov.w	r3, #4294967295
 80175b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80175ba:	6879      	ldr	r1, [r7, #4]
 80175bc:	68b8      	ldr	r0, [r7, #8]
 80175be:	f000 fb53 	bl	8017c68 <prvAddCurrentTaskToDelayedList>
	}
 80175c2:	bf00      	nop
 80175c4:	3718      	adds	r7, #24
 80175c6:	46bd      	mov	sp, r7
 80175c8:	bd80      	pop	{r7, pc}
 80175ca:	bf00      	nop
 80175cc:	20019950 	.word	0x20019950

080175d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80175d0:	b580      	push	{r7, lr}
 80175d2:	b086      	sub	sp, #24
 80175d4:	af00      	add	r7, sp, #0
 80175d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	68db      	ldr	r3, [r3, #12]
 80175dc:	68db      	ldr	r3, [r3, #12]
 80175de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80175e0:	693b      	ldr	r3, [r7, #16]
 80175e2:	2b00      	cmp	r3, #0
 80175e4:	d10a      	bne.n	80175fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80175e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175ea:	f383 8811 	msr	BASEPRI, r3
 80175ee:	f3bf 8f6f 	isb	sy
 80175f2:	f3bf 8f4f 	dsb	sy
 80175f6:	60fb      	str	r3, [r7, #12]
}
 80175f8:	bf00      	nop
 80175fa:	e7fe      	b.n	80175fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80175fc:	693b      	ldr	r3, [r7, #16]
 80175fe:	3318      	adds	r3, #24
 8017600:	4618      	mov	r0, r3
 8017602:	f7fe fb27 	bl	8015c54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017606:	4b1e      	ldr	r3, [pc, #120]	; (8017680 <xTaskRemoveFromEventList+0xb0>)
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d11d      	bne.n	801764a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801760e:	693b      	ldr	r3, [r7, #16]
 8017610:	3304      	adds	r3, #4
 8017612:	4618      	mov	r0, r3
 8017614:	f7fe fb1e 	bl	8015c54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801761c:	4b19      	ldr	r3, [pc, #100]	; (8017684 <xTaskRemoveFromEventList+0xb4>)
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	429a      	cmp	r2, r3
 8017622:	d903      	bls.n	801762c <xTaskRemoveFromEventList+0x5c>
 8017624:	693b      	ldr	r3, [r7, #16]
 8017626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017628:	4a16      	ldr	r2, [pc, #88]	; (8017684 <xTaskRemoveFromEventList+0xb4>)
 801762a:	6013      	str	r3, [r2, #0]
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017630:	4613      	mov	r3, r2
 8017632:	009b      	lsls	r3, r3, #2
 8017634:	4413      	add	r3, r2
 8017636:	009b      	lsls	r3, r3, #2
 8017638:	4a13      	ldr	r2, [pc, #76]	; (8017688 <xTaskRemoveFromEventList+0xb8>)
 801763a:	441a      	add	r2, r3
 801763c:	693b      	ldr	r3, [r7, #16]
 801763e:	3304      	adds	r3, #4
 8017640:	4619      	mov	r1, r3
 8017642:	4610      	mov	r0, r2
 8017644:	f7fe faa9 	bl	8015b9a <vListInsertEnd>
 8017648:	e005      	b.n	8017656 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801764a:	693b      	ldr	r3, [r7, #16]
 801764c:	3318      	adds	r3, #24
 801764e:	4619      	mov	r1, r3
 8017650:	480e      	ldr	r0, [pc, #56]	; (801768c <xTaskRemoveFromEventList+0xbc>)
 8017652:	f7fe faa2 	bl	8015b9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8017656:	693b      	ldr	r3, [r7, #16]
 8017658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801765a:	4b0d      	ldr	r3, [pc, #52]	; (8017690 <xTaskRemoveFromEventList+0xc0>)
 801765c:	681b      	ldr	r3, [r3, #0]
 801765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017660:	429a      	cmp	r2, r3
 8017662:	d905      	bls.n	8017670 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8017664:	2301      	movs	r3, #1
 8017666:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8017668:	4b0a      	ldr	r3, [pc, #40]	; (8017694 <xTaskRemoveFromEventList+0xc4>)
 801766a:	2201      	movs	r2, #1
 801766c:	601a      	str	r2, [r3, #0]
 801766e:	e001      	b.n	8017674 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8017670:	2300      	movs	r3, #0
 8017672:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8017674:	697b      	ldr	r3, [r7, #20]
}
 8017676:	4618      	mov	r0, r3
 8017678:	3718      	adds	r7, #24
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
 801767e:	bf00      	nop
 8017680:	20019e4c 	.word	0x20019e4c
 8017684:	20019e2c 	.word	0x20019e2c
 8017688:	20019954 	.word	0x20019954
 801768c:	20019de4 	.word	0x20019de4
 8017690:	20019950 	.word	0x20019950
 8017694:	20019e38 	.word	0x20019e38

08017698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8017698:	b480      	push	{r7}
 801769a:	b083      	sub	sp, #12
 801769c:	af00      	add	r7, sp, #0
 801769e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80176a0:	4b06      	ldr	r3, [pc, #24]	; (80176bc <vTaskInternalSetTimeOutState+0x24>)
 80176a2:	681a      	ldr	r2, [r3, #0]
 80176a4:	687b      	ldr	r3, [r7, #4]
 80176a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80176a8:	4b05      	ldr	r3, [pc, #20]	; (80176c0 <vTaskInternalSetTimeOutState+0x28>)
 80176aa:	681a      	ldr	r2, [r3, #0]
 80176ac:	687b      	ldr	r3, [r7, #4]
 80176ae:	605a      	str	r2, [r3, #4]
}
 80176b0:	bf00      	nop
 80176b2:	370c      	adds	r7, #12
 80176b4:	46bd      	mov	sp, r7
 80176b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ba:	4770      	bx	lr
 80176bc:	20019e3c 	.word	0x20019e3c
 80176c0:	20019e28 	.word	0x20019e28

080176c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b088      	sub	sp, #32
 80176c8:	af00      	add	r7, sp, #0
 80176ca:	6078      	str	r0, [r7, #4]
 80176cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d10a      	bne.n	80176ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80176d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d8:	f383 8811 	msr	BASEPRI, r3
 80176dc:	f3bf 8f6f 	isb	sy
 80176e0:	f3bf 8f4f 	dsb	sy
 80176e4:	613b      	str	r3, [r7, #16]
}
 80176e6:	bf00      	nop
 80176e8:	e7fe      	b.n	80176e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d10a      	bne.n	8017706 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80176f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176f4:	f383 8811 	msr	BASEPRI, r3
 80176f8:	f3bf 8f6f 	isb	sy
 80176fc:	f3bf 8f4f 	dsb	sy
 8017700:	60fb      	str	r3, [r7, #12]
}
 8017702:	bf00      	nop
 8017704:	e7fe      	b.n	8017704 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8017706:	f000 ff7d 	bl	8018604 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801770a:	4b1d      	ldr	r3, [pc, #116]	; (8017780 <xTaskCheckForTimeOut+0xbc>)
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	685b      	ldr	r3, [r3, #4]
 8017714:	69ba      	ldr	r2, [r7, #24]
 8017716:	1ad3      	subs	r3, r2, r3
 8017718:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017722:	d102      	bne.n	801772a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8017724:	2300      	movs	r3, #0
 8017726:	61fb      	str	r3, [r7, #28]
 8017728:	e023      	b.n	8017772 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	681a      	ldr	r2, [r3, #0]
 801772e:	4b15      	ldr	r3, [pc, #84]	; (8017784 <xTaskCheckForTimeOut+0xc0>)
 8017730:	681b      	ldr	r3, [r3, #0]
 8017732:	429a      	cmp	r2, r3
 8017734:	d007      	beq.n	8017746 <xTaskCheckForTimeOut+0x82>
 8017736:	687b      	ldr	r3, [r7, #4]
 8017738:	685b      	ldr	r3, [r3, #4]
 801773a:	69ba      	ldr	r2, [r7, #24]
 801773c:	429a      	cmp	r2, r3
 801773e:	d302      	bcc.n	8017746 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8017740:	2301      	movs	r3, #1
 8017742:	61fb      	str	r3, [r7, #28]
 8017744:	e015      	b.n	8017772 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8017746:	683b      	ldr	r3, [r7, #0]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	697a      	ldr	r2, [r7, #20]
 801774c:	429a      	cmp	r2, r3
 801774e:	d20b      	bcs.n	8017768 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8017750:	683b      	ldr	r3, [r7, #0]
 8017752:	681a      	ldr	r2, [r3, #0]
 8017754:	697b      	ldr	r3, [r7, #20]
 8017756:	1ad2      	subs	r2, r2, r3
 8017758:	683b      	ldr	r3, [r7, #0]
 801775a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801775c:	6878      	ldr	r0, [r7, #4]
 801775e:	f7ff ff9b 	bl	8017698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8017762:	2300      	movs	r3, #0
 8017764:	61fb      	str	r3, [r7, #28]
 8017766:	e004      	b.n	8017772 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	2200      	movs	r2, #0
 801776c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801776e:	2301      	movs	r3, #1
 8017770:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8017772:	f000 ff77 	bl	8018664 <vPortExitCritical>

	return xReturn;
 8017776:	69fb      	ldr	r3, [r7, #28]
}
 8017778:	4618      	mov	r0, r3
 801777a:	3720      	adds	r7, #32
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}
 8017780:	20019e28 	.word	0x20019e28
 8017784:	20019e3c 	.word	0x20019e3c

08017788 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8017788:	b480      	push	{r7}
 801778a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801778c:	4b03      	ldr	r3, [pc, #12]	; (801779c <vTaskMissedYield+0x14>)
 801778e:	2201      	movs	r2, #1
 8017790:	601a      	str	r2, [r3, #0]
}
 8017792:	bf00      	nop
 8017794:	46bd      	mov	sp, r7
 8017796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779a:	4770      	bx	lr
 801779c:	20019e38 	.word	0x20019e38

080177a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	b082      	sub	sp, #8
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80177a8:	f000 f852 	bl	8017850 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80177ac:	4b06      	ldr	r3, [pc, #24]	; (80177c8 <prvIdleTask+0x28>)
 80177ae:	681b      	ldr	r3, [r3, #0]
 80177b0:	2b01      	cmp	r3, #1
 80177b2:	d9f9      	bls.n	80177a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80177b4:	4b05      	ldr	r3, [pc, #20]	; (80177cc <prvIdleTask+0x2c>)
 80177b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80177ba:	601a      	str	r2, [r3, #0]
 80177bc:	f3bf 8f4f 	dsb	sy
 80177c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80177c4:	e7f0      	b.n	80177a8 <prvIdleTask+0x8>
 80177c6:	bf00      	nop
 80177c8:	20019954 	.word	0x20019954
 80177cc:	e000ed04 	.word	0xe000ed04

080177d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b082      	sub	sp, #8
 80177d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80177d6:	2300      	movs	r3, #0
 80177d8:	607b      	str	r3, [r7, #4]
 80177da:	e00c      	b.n	80177f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80177dc:	687a      	ldr	r2, [r7, #4]
 80177de:	4613      	mov	r3, r2
 80177e0:	009b      	lsls	r3, r3, #2
 80177e2:	4413      	add	r3, r2
 80177e4:	009b      	lsls	r3, r3, #2
 80177e6:	4a12      	ldr	r2, [pc, #72]	; (8017830 <prvInitialiseTaskLists+0x60>)
 80177e8:	4413      	add	r3, r2
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7fe f9a8 	bl	8015b40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	3301      	adds	r3, #1
 80177f4:	607b      	str	r3, [r7, #4]
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	2b37      	cmp	r3, #55	; 0x37
 80177fa:	d9ef      	bls.n	80177dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80177fc:	480d      	ldr	r0, [pc, #52]	; (8017834 <prvInitialiseTaskLists+0x64>)
 80177fe:	f7fe f99f 	bl	8015b40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8017802:	480d      	ldr	r0, [pc, #52]	; (8017838 <prvInitialiseTaskLists+0x68>)
 8017804:	f7fe f99c 	bl	8015b40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8017808:	480c      	ldr	r0, [pc, #48]	; (801783c <prvInitialiseTaskLists+0x6c>)
 801780a:	f7fe f999 	bl	8015b40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801780e:	480c      	ldr	r0, [pc, #48]	; (8017840 <prvInitialiseTaskLists+0x70>)
 8017810:	f7fe f996 	bl	8015b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8017814:	480b      	ldr	r0, [pc, #44]	; (8017844 <prvInitialiseTaskLists+0x74>)
 8017816:	f7fe f993 	bl	8015b40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801781a:	4b0b      	ldr	r3, [pc, #44]	; (8017848 <prvInitialiseTaskLists+0x78>)
 801781c:	4a05      	ldr	r2, [pc, #20]	; (8017834 <prvInitialiseTaskLists+0x64>)
 801781e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8017820:	4b0a      	ldr	r3, [pc, #40]	; (801784c <prvInitialiseTaskLists+0x7c>)
 8017822:	4a05      	ldr	r2, [pc, #20]	; (8017838 <prvInitialiseTaskLists+0x68>)
 8017824:	601a      	str	r2, [r3, #0]
}
 8017826:	bf00      	nop
 8017828:	3708      	adds	r7, #8
 801782a:	46bd      	mov	sp, r7
 801782c:	bd80      	pop	{r7, pc}
 801782e:	bf00      	nop
 8017830:	20019954 	.word	0x20019954
 8017834:	20019db4 	.word	0x20019db4
 8017838:	20019dc8 	.word	0x20019dc8
 801783c:	20019de4 	.word	0x20019de4
 8017840:	20019df8 	.word	0x20019df8
 8017844:	20019e10 	.word	0x20019e10
 8017848:	20019ddc 	.word	0x20019ddc
 801784c:	20019de0 	.word	0x20019de0

08017850 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8017850:	b580      	push	{r7, lr}
 8017852:	b082      	sub	sp, #8
 8017854:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8017856:	e019      	b.n	801788c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8017858:	f000 fed4 	bl	8018604 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801785c:	4b10      	ldr	r3, [pc, #64]	; (80178a0 <prvCheckTasksWaitingTermination+0x50>)
 801785e:	68db      	ldr	r3, [r3, #12]
 8017860:	68db      	ldr	r3, [r3, #12]
 8017862:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	3304      	adds	r3, #4
 8017868:	4618      	mov	r0, r3
 801786a:	f7fe f9f3 	bl	8015c54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801786e:	4b0d      	ldr	r3, [pc, #52]	; (80178a4 <prvCheckTasksWaitingTermination+0x54>)
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	3b01      	subs	r3, #1
 8017874:	4a0b      	ldr	r2, [pc, #44]	; (80178a4 <prvCheckTasksWaitingTermination+0x54>)
 8017876:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8017878:	4b0b      	ldr	r3, [pc, #44]	; (80178a8 <prvCheckTasksWaitingTermination+0x58>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	3b01      	subs	r3, #1
 801787e:	4a0a      	ldr	r2, [pc, #40]	; (80178a8 <prvCheckTasksWaitingTermination+0x58>)
 8017880:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8017882:	f000 feef 	bl	8018664 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8017886:	6878      	ldr	r0, [r7, #4]
 8017888:	f000 f810 	bl	80178ac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801788c:	4b06      	ldr	r3, [pc, #24]	; (80178a8 <prvCheckTasksWaitingTermination+0x58>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d1e1      	bne.n	8017858 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8017894:	bf00      	nop
 8017896:	bf00      	nop
 8017898:	3708      	adds	r7, #8
 801789a:	46bd      	mov	sp, r7
 801789c:	bd80      	pop	{r7, pc}
 801789e:	bf00      	nop
 80178a0:	20019df8 	.word	0x20019df8
 80178a4:	20019e24 	.word	0x20019e24
 80178a8:	20019e0c 	.word	0x20019e0c

080178ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80178ac:	b580      	push	{r7, lr}
 80178ae:	b084      	sub	sp, #16
 80178b0:	af00      	add	r7, sp, #0
 80178b2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	3354      	adds	r3, #84	; 0x54
 80178b8:	4618      	mov	r0, r3
 80178ba:	f006 fef5 	bl	801e6a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80178be:	687b      	ldr	r3, [r7, #4]
 80178c0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d108      	bne.n	80178da <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178cc:	4618      	mov	r0, r3
 80178ce:	f001 f887 	bl	80189e0 <vPortFree>
				vPortFree( pxTCB );
 80178d2:	6878      	ldr	r0, [r7, #4]
 80178d4:	f001 f884 	bl	80189e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80178d8:	e018      	b.n	801790c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80178e0:	2b01      	cmp	r3, #1
 80178e2:	d103      	bne.n	80178ec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80178e4:	6878      	ldr	r0, [r7, #4]
 80178e6:	f001 f87b 	bl	80189e0 <vPortFree>
	}
 80178ea:	e00f      	b.n	801790c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80178f2:	2b02      	cmp	r3, #2
 80178f4:	d00a      	beq.n	801790c <prvDeleteTCB+0x60>
	__asm volatile
 80178f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80178fa:	f383 8811 	msr	BASEPRI, r3
 80178fe:	f3bf 8f6f 	isb	sy
 8017902:	f3bf 8f4f 	dsb	sy
 8017906:	60fb      	str	r3, [r7, #12]
}
 8017908:	bf00      	nop
 801790a:	e7fe      	b.n	801790a <prvDeleteTCB+0x5e>
	}
 801790c:	bf00      	nop
 801790e:	3710      	adds	r7, #16
 8017910:	46bd      	mov	sp, r7
 8017912:	bd80      	pop	{r7, pc}

08017914 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8017914:	b480      	push	{r7}
 8017916:	b083      	sub	sp, #12
 8017918:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801791a:	4b0c      	ldr	r3, [pc, #48]	; (801794c <prvResetNextTaskUnblockTime+0x38>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	2b00      	cmp	r3, #0
 8017922:	d104      	bne.n	801792e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8017924:	4b0a      	ldr	r3, [pc, #40]	; (8017950 <prvResetNextTaskUnblockTime+0x3c>)
 8017926:	f04f 32ff 	mov.w	r2, #4294967295
 801792a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801792c:	e008      	b.n	8017940 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801792e:	4b07      	ldr	r3, [pc, #28]	; (801794c <prvResetNextTaskUnblockTime+0x38>)
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	68db      	ldr	r3, [r3, #12]
 8017934:	68db      	ldr	r3, [r3, #12]
 8017936:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	685b      	ldr	r3, [r3, #4]
 801793c:	4a04      	ldr	r2, [pc, #16]	; (8017950 <prvResetNextTaskUnblockTime+0x3c>)
 801793e:	6013      	str	r3, [r2, #0]
}
 8017940:	bf00      	nop
 8017942:	370c      	adds	r7, #12
 8017944:	46bd      	mov	sp, r7
 8017946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801794a:	4770      	bx	lr
 801794c:	20019ddc 	.word	0x20019ddc
 8017950:	20019e44 	.word	0x20019e44

08017954 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8017954:	b480      	push	{r7}
 8017956:	b083      	sub	sp, #12
 8017958:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801795a:	4b0b      	ldr	r3, [pc, #44]	; (8017988 <xTaskGetSchedulerState+0x34>)
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d102      	bne.n	8017968 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8017962:	2301      	movs	r3, #1
 8017964:	607b      	str	r3, [r7, #4]
 8017966:	e008      	b.n	801797a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017968:	4b08      	ldr	r3, [pc, #32]	; (801798c <xTaskGetSchedulerState+0x38>)
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d102      	bne.n	8017976 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8017970:	2302      	movs	r3, #2
 8017972:	607b      	str	r3, [r7, #4]
 8017974:	e001      	b.n	801797a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8017976:	2300      	movs	r3, #0
 8017978:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801797a:	687b      	ldr	r3, [r7, #4]
	}
 801797c:	4618      	mov	r0, r3
 801797e:	370c      	adds	r7, #12
 8017980:	46bd      	mov	sp, r7
 8017982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017986:	4770      	bx	lr
 8017988:	20019e30 	.word	0x20019e30
 801798c:	20019e4c 	.word	0x20019e4c

08017990 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8017990:	b580      	push	{r7, lr}
 8017992:	b084      	sub	sp, #16
 8017994:	af00      	add	r7, sp, #0
 8017996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801799c:	2300      	movs	r3, #0
 801799e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80179a0:	687b      	ldr	r3, [r7, #4]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	d051      	beq.n	8017a4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80179a6:	68bb      	ldr	r3, [r7, #8]
 80179a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179aa:	4b2a      	ldr	r3, [pc, #168]	; (8017a54 <xTaskPriorityInherit+0xc4>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d241      	bcs.n	8017a38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80179b4:	68bb      	ldr	r3, [r7, #8]
 80179b6:	699b      	ldr	r3, [r3, #24]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	db06      	blt.n	80179ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80179bc:	4b25      	ldr	r3, [pc, #148]	; (8017a54 <xTaskPriorityInherit+0xc4>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80179c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80179c6:	68bb      	ldr	r3, [r7, #8]
 80179c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80179ca:	68bb      	ldr	r3, [r7, #8]
 80179cc:	6959      	ldr	r1, [r3, #20]
 80179ce:	68bb      	ldr	r3, [r7, #8]
 80179d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179d2:	4613      	mov	r3, r2
 80179d4:	009b      	lsls	r3, r3, #2
 80179d6:	4413      	add	r3, r2
 80179d8:	009b      	lsls	r3, r3, #2
 80179da:	4a1f      	ldr	r2, [pc, #124]	; (8017a58 <xTaskPriorityInherit+0xc8>)
 80179dc:	4413      	add	r3, r2
 80179de:	4299      	cmp	r1, r3
 80179e0:	d122      	bne.n	8017a28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80179e2:	68bb      	ldr	r3, [r7, #8]
 80179e4:	3304      	adds	r3, #4
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7fe f934 	bl	8015c54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80179ec:	4b19      	ldr	r3, [pc, #100]	; (8017a54 <xTaskPriorityInherit+0xc4>)
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179f2:	68bb      	ldr	r3, [r7, #8]
 80179f4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80179f6:	68bb      	ldr	r3, [r7, #8]
 80179f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80179fa:	4b18      	ldr	r3, [pc, #96]	; (8017a5c <xTaskPriorityInherit+0xcc>)
 80179fc:	681b      	ldr	r3, [r3, #0]
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d903      	bls.n	8017a0a <xTaskPriorityInherit+0x7a>
 8017a02:	68bb      	ldr	r3, [r7, #8]
 8017a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a06:	4a15      	ldr	r2, [pc, #84]	; (8017a5c <xTaskPriorityInherit+0xcc>)
 8017a08:	6013      	str	r3, [r2, #0]
 8017a0a:	68bb      	ldr	r3, [r7, #8]
 8017a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a0e:	4613      	mov	r3, r2
 8017a10:	009b      	lsls	r3, r3, #2
 8017a12:	4413      	add	r3, r2
 8017a14:	009b      	lsls	r3, r3, #2
 8017a16:	4a10      	ldr	r2, [pc, #64]	; (8017a58 <xTaskPriorityInherit+0xc8>)
 8017a18:	441a      	add	r2, r3
 8017a1a:	68bb      	ldr	r3, [r7, #8]
 8017a1c:	3304      	adds	r3, #4
 8017a1e:	4619      	mov	r1, r3
 8017a20:	4610      	mov	r0, r2
 8017a22:	f7fe f8ba 	bl	8015b9a <vListInsertEnd>
 8017a26:	e004      	b.n	8017a32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8017a28:	4b0a      	ldr	r3, [pc, #40]	; (8017a54 <xTaskPriorityInherit+0xc4>)
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8017a32:	2301      	movs	r3, #1
 8017a34:	60fb      	str	r3, [r7, #12]
 8017a36:	e008      	b.n	8017a4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8017a38:	68bb      	ldr	r3, [r7, #8]
 8017a3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017a3c:	4b05      	ldr	r3, [pc, #20]	; (8017a54 <xTaskPriorityInherit+0xc4>)
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017a42:	429a      	cmp	r2, r3
 8017a44:	d201      	bcs.n	8017a4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8017a46:	2301      	movs	r3, #1
 8017a48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017a4a:	68fb      	ldr	r3, [r7, #12]
	}
 8017a4c:	4618      	mov	r0, r3
 8017a4e:	3710      	adds	r7, #16
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	20019950 	.word	0x20019950
 8017a58:	20019954 	.word	0x20019954
 8017a5c:	20019e2c 	.word	0x20019e2c

08017a60 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b086      	sub	sp, #24
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8017a6c:	2300      	movs	r3, #0
 8017a6e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d056      	beq.n	8017b24 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8017a76:	4b2e      	ldr	r3, [pc, #184]	; (8017b30 <xTaskPriorityDisinherit+0xd0>)
 8017a78:	681b      	ldr	r3, [r3, #0]
 8017a7a:	693a      	ldr	r2, [r7, #16]
 8017a7c:	429a      	cmp	r2, r3
 8017a7e:	d00a      	beq.n	8017a96 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8017a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a84:	f383 8811 	msr	BASEPRI, r3
 8017a88:	f3bf 8f6f 	isb	sy
 8017a8c:	f3bf 8f4f 	dsb	sy
 8017a90:	60fb      	str	r3, [r7, #12]
}
 8017a92:	bf00      	nop
 8017a94:	e7fe      	b.n	8017a94 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8017a96:	693b      	ldr	r3, [r7, #16]
 8017a98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017a9a:	2b00      	cmp	r3, #0
 8017a9c:	d10a      	bne.n	8017ab4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8017a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017aa2:	f383 8811 	msr	BASEPRI, r3
 8017aa6:	f3bf 8f6f 	isb	sy
 8017aaa:	f3bf 8f4f 	dsb	sy
 8017aae:	60bb      	str	r3, [r7, #8]
}
 8017ab0:	bf00      	nop
 8017ab2:	e7fe      	b.n	8017ab2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8017ab4:	693b      	ldr	r3, [r7, #16]
 8017ab6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ab8:	1e5a      	subs	r2, r3, #1
 8017aba:	693b      	ldr	r3, [r7, #16]
 8017abc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8017abe:	693b      	ldr	r3, [r7, #16]
 8017ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ac2:	693b      	ldr	r3, [r7, #16]
 8017ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017ac6:	429a      	cmp	r2, r3
 8017ac8:	d02c      	beq.n	8017b24 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8017aca:	693b      	ldr	r3, [r7, #16]
 8017acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017ace:	2b00      	cmp	r3, #0
 8017ad0:	d128      	bne.n	8017b24 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017ad2:	693b      	ldr	r3, [r7, #16]
 8017ad4:	3304      	adds	r3, #4
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7fe f8bc 	bl	8015c54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8017adc:	693b      	ldr	r3, [r7, #16]
 8017ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017ae4:	693b      	ldr	r3, [r7, #16]
 8017ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ae8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017aec:	693b      	ldr	r3, [r7, #16]
 8017aee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8017af0:	693b      	ldr	r3, [r7, #16]
 8017af2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017af4:	4b0f      	ldr	r3, [pc, #60]	; (8017b34 <xTaskPriorityDisinherit+0xd4>)
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d903      	bls.n	8017b04 <xTaskPriorityDisinherit+0xa4>
 8017afc:	693b      	ldr	r3, [r7, #16]
 8017afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b00:	4a0c      	ldr	r2, [pc, #48]	; (8017b34 <xTaskPriorityDisinherit+0xd4>)
 8017b02:	6013      	str	r3, [r2, #0]
 8017b04:	693b      	ldr	r3, [r7, #16]
 8017b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017b08:	4613      	mov	r3, r2
 8017b0a:	009b      	lsls	r3, r3, #2
 8017b0c:	4413      	add	r3, r2
 8017b0e:	009b      	lsls	r3, r3, #2
 8017b10:	4a09      	ldr	r2, [pc, #36]	; (8017b38 <xTaskPriorityDisinherit+0xd8>)
 8017b12:	441a      	add	r2, r3
 8017b14:	693b      	ldr	r3, [r7, #16]
 8017b16:	3304      	adds	r3, #4
 8017b18:	4619      	mov	r1, r3
 8017b1a:	4610      	mov	r0, r2
 8017b1c:	f7fe f83d 	bl	8015b9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8017b20:	2301      	movs	r3, #1
 8017b22:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8017b24:	697b      	ldr	r3, [r7, #20]
	}
 8017b26:	4618      	mov	r0, r3
 8017b28:	3718      	adds	r7, #24
 8017b2a:	46bd      	mov	sp, r7
 8017b2c:	bd80      	pop	{r7, pc}
 8017b2e:	bf00      	nop
 8017b30:	20019950 	.word	0x20019950
 8017b34:	20019e2c 	.word	0x20019e2c
 8017b38:	20019954 	.word	0x20019954

08017b3c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b088      	sub	sp, #32
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	6078      	str	r0, [r7, #4]
 8017b44:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8017b46:	687b      	ldr	r3, [r7, #4]
 8017b48:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8017b4a:	2301      	movs	r3, #1
 8017b4c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8017b4e:	687b      	ldr	r3, [r7, #4]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d06a      	beq.n	8017c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8017b54:	69bb      	ldr	r3, [r7, #24]
 8017b56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d10a      	bne.n	8017b72 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8017b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b60:	f383 8811 	msr	BASEPRI, r3
 8017b64:	f3bf 8f6f 	isb	sy
 8017b68:	f3bf 8f4f 	dsb	sy
 8017b6c:	60fb      	str	r3, [r7, #12]
}
 8017b6e:	bf00      	nop
 8017b70:	e7fe      	b.n	8017b70 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8017b72:	69bb      	ldr	r3, [r7, #24]
 8017b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b76:	683a      	ldr	r2, [r7, #0]
 8017b78:	429a      	cmp	r2, r3
 8017b7a:	d902      	bls.n	8017b82 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8017b7c:	683b      	ldr	r3, [r7, #0]
 8017b7e:	61fb      	str	r3, [r7, #28]
 8017b80:	e002      	b.n	8017b88 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8017b82:	69bb      	ldr	r3, [r7, #24]
 8017b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8017b86:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8017b88:	69bb      	ldr	r3, [r7, #24]
 8017b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017b8c:	69fa      	ldr	r2, [r7, #28]
 8017b8e:	429a      	cmp	r2, r3
 8017b90:	d04b      	beq.n	8017c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8017b92:	69bb      	ldr	r3, [r7, #24]
 8017b94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017b96:	697a      	ldr	r2, [r7, #20]
 8017b98:	429a      	cmp	r2, r3
 8017b9a:	d146      	bne.n	8017c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8017b9c:	4b25      	ldr	r3, [pc, #148]	; (8017c34 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	69ba      	ldr	r2, [r7, #24]
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	d10a      	bne.n	8017bbc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8017ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017baa:	f383 8811 	msr	BASEPRI, r3
 8017bae:	f3bf 8f6f 	isb	sy
 8017bb2:	f3bf 8f4f 	dsb	sy
 8017bb6:	60bb      	str	r3, [r7, #8]
}
 8017bb8:	bf00      	nop
 8017bba:	e7fe      	b.n	8017bba <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8017bbc:	69bb      	ldr	r3, [r7, #24]
 8017bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8017bc2:	69bb      	ldr	r3, [r7, #24]
 8017bc4:	69fa      	ldr	r2, [r7, #28]
 8017bc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8017bc8:	69bb      	ldr	r3, [r7, #24]
 8017bca:	699b      	ldr	r3, [r3, #24]
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	db04      	blt.n	8017bda <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017bd0:	69fb      	ldr	r3, [r7, #28]
 8017bd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017bd6:	69bb      	ldr	r3, [r7, #24]
 8017bd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8017bda:	69bb      	ldr	r3, [r7, #24]
 8017bdc:	6959      	ldr	r1, [r3, #20]
 8017bde:	693a      	ldr	r2, [r7, #16]
 8017be0:	4613      	mov	r3, r2
 8017be2:	009b      	lsls	r3, r3, #2
 8017be4:	4413      	add	r3, r2
 8017be6:	009b      	lsls	r3, r3, #2
 8017be8:	4a13      	ldr	r2, [pc, #76]	; (8017c38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017bea:	4413      	add	r3, r2
 8017bec:	4299      	cmp	r1, r3
 8017bee:	d11c      	bne.n	8017c2a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017bf0:	69bb      	ldr	r3, [r7, #24]
 8017bf2:	3304      	adds	r3, #4
 8017bf4:	4618      	mov	r0, r3
 8017bf6:	f7fe f82d 	bl	8015c54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8017bfa:	69bb      	ldr	r3, [r7, #24]
 8017bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017bfe:	4b0f      	ldr	r3, [pc, #60]	; (8017c3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	429a      	cmp	r2, r3
 8017c04:	d903      	bls.n	8017c0e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8017c06:	69bb      	ldr	r3, [r7, #24]
 8017c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017c0a:	4a0c      	ldr	r2, [pc, #48]	; (8017c3c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8017c0c:	6013      	str	r3, [r2, #0]
 8017c0e:	69bb      	ldr	r3, [r7, #24]
 8017c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c12:	4613      	mov	r3, r2
 8017c14:	009b      	lsls	r3, r3, #2
 8017c16:	4413      	add	r3, r2
 8017c18:	009b      	lsls	r3, r3, #2
 8017c1a:	4a07      	ldr	r2, [pc, #28]	; (8017c38 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8017c1c:	441a      	add	r2, r3
 8017c1e:	69bb      	ldr	r3, [r7, #24]
 8017c20:	3304      	adds	r3, #4
 8017c22:	4619      	mov	r1, r3
 8017c24:	4610      	mov	r0, r2
 8017c26:	f7fd ffb8 	bl	8015b9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017c2a:	bf00      	nop
 8017c2c:	3720      	adds	r7, #32
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	bd80      	pop	{r7, pc}
 8017c32:	bf00      	nop
 8017c34:	20019950 	.word	0x20019950
 8017c38:	20019954 	.word	0x20019954
 8017c3c:	20019e2c 	.word	0x20019e2c

08017c40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8017c40:	b480      	push	{r7}
 8017c42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8017c44:	4b07      	ldr	r3, [pc, #28]	; (8017c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c46:	681b      	ldr	r3, [r3, #0]
 8017c48:	2b00      	cmp	r3, #0
 8017c4a:	d004      	beq.n	8017c56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8017c4c:	4b05      	ldr	r3, [pc, #20]	; (8017c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c4e:	681b      	ldr	r3, [r3, #0]
 8017c50:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017c52:	3201      	adds	r2, #1
 8017c54:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8017c56:	4b03      	ldr	r3, [pc, #12]	; (8017c64 <pvTaskIncrementMutexHeldCount+0x24>)
 8017c58:	681b      	ldr	r3, [r3, #0]
	}
 8017c5a:	4618      	mov	r0, r3
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c62:	4770      	bx	lr
 8017c64:	20019950 	.word	0x20019950

08017c68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8017c68:	b580      	push	{r7, lr}
 8017c6a:	b084      	sub	sp, #16
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8017c72:	4b21      	ldr	r3, [pc, #132]	; (8017cf8 <prvAddCurrentTaskToDelayedList+0x90>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8017c78:	4b20      	ldr	r3, [pc, #128]	; (8017cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	3304      	adds	r3, #4
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7fd ffe8 	bl	8015c54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017c8a:	d10a      	bne.n	8017ca2 <prvAddCurrentTaskToDelayedList+0x3a>
 8017c8c:	683b      	ldr	r3, [r7, #0]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d007      	beq.n	8017ca2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017c92:	4b1a      	ldr	r3, [pc, #104]	; (8017cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	3304      	adds	r3, #4
 8017c98:	4619      	mov	r1, r3
 8017c9a:	4819      	ldr	r0, [pc, #100]	; (8017d00 <prvAddCurrentTaskToDelayedList+0x98>)
 8017c9c:	f7fd ff7d 	bl	8015b9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8017ca0:	e026      	b.n	8017cf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8017ca2:	68fa      	ldr	r2, [r7, #12]
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	4413      	add	r3, r2
 8017ca8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8017caa:	4b14      	ldr	r3, [pc, #80]	; (8017cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	68ba      	ldr	r2, [r7, #8]
 8017cb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8017cb2:	68ba      	ldr	r2, [r7, #8]
 8017cb4:	68fb      	ldr	r3, [r7, #12]
 8017cb6:	429a      	cmp	r2, r3
 8017cb8:	d209      	bcs.n	8017cce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017cba:	4b12      	ldr	r3, [pc, #72]	; (8017d04 <prvAddCurrentTaskToDelayedList+0x9c>)
 8017cbc:	681a      	ldr	r2, [r3, #0]
 8017cbe:	4b0f      	ldr	r3, [pc, #60]	; (8017cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	3304      	adds	r3, #4
 8017cc4:	4619      	mov	r1, r3
 8017cc6:	4610      	mov	r0, r2
 8017cc8:	f7fd ff8b 	bl	8015be2 <vListInsert>
}
 8017ccc:	e010      	b.n	8017cf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8017cce:	4b0e      	ldr	r3, [pc, #56]	; (8017d08 <prvAddCurrentTaskToDelayedList+0xa0>)
 8017cd0:	681a      	ldr	r2, [r3, #0]
 8017cd2:	4b0a      	ldr	r3, [pc, #40]	; (8017cfc <prvAddCurrentTaskToDelayedList+0x94>)
 8017cd4:	681b      	ldr	r3, [r3, #0]
 8017cd6:	3304      	adds	r3, #4
 8017cd8:	4619      	mov	r1, r3
 8017cda:	4610      	mov	r0, r2
 8017cdc:	f7fd ff81 	bl	8015be2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8017ce0:	4b0a      	ldr	r3, [pc, #40]	; (8017d0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8017ce2:	681b      	ldr	r3, [r3, #0]
 8017ce4:	68ba      	ldr	r2, [r7, #8]
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	d202      	bcs.n	8017cf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8017cea:	4a08      	ldr	r2, [pc, #32]	; (8017d0c <prvAddCurrentTaskToDelayedList+0xa4>)
 8017cec:	68bb      	ldr	r3, [r7, #8]
 8017cee:	6013      	str	r3, [r2, #0]
}
 8017cf0:	bf00      	nop
 8017cf2:	3710      	adds	r7, #16
 8017cf4:	46bd      	mov	sp, r7
 8017cf6:	bd80      	pop	{r7, pc}
 8017cf8:	20019e28 	.word	0x20019e28
 8017cfc:	20019950 	.word	0x20019950
 8017d00:	20019e10 	.word	0x20019e10
 8017d04:	20019de0 	.word	0x20019de0
 8017d08:	20019ddc 	.word	0x20019ddc
 8017d0c:	20019e44 	.word	0x20019e44

08017d10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8017d10:	b580      	push	{r7, lr}
 8017d12:	b08a      	sub	sp, #40	; 0x28
 8017d14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8017d16:	2300      	movs	r3, #0
 8017d18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8017d1a:	f000 fb07 	bl	801832c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8017d1e:	4b1c      	ldr	r3, [pc, #112]	; (8017d90 <xTimerCreateTimerTask+0x80>)
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	2b00      	cmp	r3, #0
 8017d24:	d021      	beq.n	8017d6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8017d26:	2300      	movs	r3, #0
 8017d28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8017d2e:	1d3a      	adds	r2, r7, #4
 8017d30:	f107 0108 	add.w	r1, r7, #8
 8017d34:	f107 030c 	add.w	r3, r7, #12
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f7fd fee7 	bl	8015b0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8017d3e:	6879      	ldr	r1, [r7, #4]
 8017d40:	68bb      	ldr	r3, [r7, #8]
 8017d42:	68fa      	ldr	r2, [r7, #12]
 8017d44:	9202      	str	r2, [sp, #8]
 8017d46:	9301      	str	r3, [sp, #4]
 8017d48:	2302      	movs	r3, #2
 8017d4a:	9300      	str	r3, [sp, #0]
 8017d4c:	2300      	movs	r3, #0
 8017d4e:	460a      	mov	r2, r1
 8017d50:	4910      	ldr	r1, [pc, #64]	; (8017d94 <xTimerCreateTimerTask+0x84>)
 8017d52:	4811      	ldr	r0, [pc, #68]	; (8017d98 <xTimerCreateTimerTask+0x88>)
 8017d54:	f7fe ffb6 	bl	8016cc4 <xTaskCreateStatic>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	4a10      	ldr	r2, [pc, #64]	; (8017d9c <xTimerCreateTimerTask+0x8c>)
 8017d5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8017d5e:	4b0f      	ldr	r3, [pc, #60]	; (8017d9c <xTimerCreateTimerTask+0x8c>)
 8017d60:	681b      	ldr	r3, [r3, #0]
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d001      	beq.n	8017d6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8017d66:	2301      	movs	r3, #1
 8017d68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8017d6a:	697b      	ldr	r3, [r7, #20]
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d10a      	bne.n	8017d86 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8017d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d74:	f383 8811 	msr	BASEPRI, r3
 8017d78:	f3bf 8f6f 	isb	sy
 8017d7c:	f3bf 8f4f 	dsb	sy
 8017d80:	613b      	str	r3, [r7, #16]
}
 8017d82:	bf00      	nop
 8017d84:	e7fe      	b.n	8017d84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8017d86:	697b      	ldr	r3, [r7, #20]
}
 8017d88:	4618      	mov	r0, r3
 8017d8a:	3718      	adds	r7, #24
 8017d8c:	46bd      	mov	sp, r7
 8017d8e:	bd80      	pop	{r7, pc}
 8017d90:	20019e80 	.word	0x20019e80
 8017d94:	08020728 	.word	0x08020728
 8017d98:	08017ed5 	.word	0x08017ed5
 8017d9c:	20019e84 	.word	0x20019e84

08017da0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8017da0:	b580      	push	{r7, lr}
 8017da2:	b08a      	sub	sp, #40	; 0x28
 8017da4:	af00      	add	r7, sp, #0
 8017da6:	60f8      	str	r0, [r7, #12]
 8017da8:	60b9      	str	r1, [r7, #8]
 8017daa:	607a      	str	r2, [r7, #4]
 8017dac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8017dae:	2300      	movs	r3, #0
 8017db0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8017db2:	68fb      	ldr	r3, [r7, #12]
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	d10a      	bne.n	8017dce <xTimerGenericCommand+0x2e>
	__asm volatile
 8017db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017dbc:	f383 8811 	msr	BASEPRI, r3
 8017dc0:	f3bf 8f6f 	isb	sy
 8017dc4:	f3bf 8f4f 	dsb	sy
 8017dc8:	623b      	str	r3, [r7, #32]
}
 8017dca:	bf00      	nop
 8017dcc:	e7fe      	b.n	8017dcc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8017dce:	4b1a      	ldr	r3, [pc, #104]	; (8017e38 <xTimerGenericCommand+0x98>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	2b00      	cmp	r3, #0
 8017dd4:	d02a      	beq.n	8017e2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8017dd6:	68bb      	ldr	r3, [r7, #8]
 8017dd8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8017dda:	687b      	ldr	r3, [r7, #4]
 8017ddc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8017dde:	68fb      	ldr	r3, [r7, #12]
 8017de0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8017de2:	68bb      	ldr	r3, [r7, #8]
 8017de4:	2b05      	cmp	r3, #5
 8017de6:	dc18      	bgt.n	8017e1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8017de8:	f7ff fdb4 	bl	8017954 <xTaskGetSchedulerState>
 8017dec:	4603      	mov	r3, r0
 8017dee:	2b02      	cmp	r3, #2
 8017df0:	d109      	bne.n	8017e06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8017df2:	4b11      	ldr	r3, [pc, #68]	; (8017e38 <xTimerGenericCommand+0x98>)
 8017df4:	6818      	ldr	r0, [r3, #0]
 8017df6:	f107 0110 	add.w	r1, r7, #16
 8017dfa:	2300      	movs	r3, #0
 8017dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017dfe:	f7fe f8fb 	bl	8015ff8 <xQueueGenericSend>
 8017e02:	6278      	str	r0, [r7, #36]	; 0x24
 8017e04:	e012      	b.n	8017e2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8017e06:	4b0c      	ldr	r3, [pc, #48]	; (8017e38 <xTimerGenericCommand+0x98>)
 8017e08:	6818      	ldr	r0, [r3, #0]
 8017e0a:	f107 0110 	add.w	r1, r7, #16
 8017e0e:	2300      	movs	r3, #0
 8017e10:	2200      	movs	r2, #0
 8017e12:	f7fe f8f1 	bl	8015ff8 <xQueueGenericSend>
 8017e16:	6278      	str	r0, [r7, #36]	; 0x24
 8017e18:	e008      	b.n	8017e2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8017e1a:	4b07      	ldr	r3, [pc, #28]	; (8017e38 <xTimerGenericCommand+0x98>)
 8017e1c:	6818      	ldr	r0, [r3, #0]
 8017e1e:	f107 0110 	add.w	r1, r7, #16
 8017e22:	2300      	movs	r3, #0
 8017e24:	683a      	ldr	r2, [r7, #0]
 8017e26:	f7fe f9e5 	bl	80161f4 <xQueueGenericSendFromISR>
 8017e2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8017e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8017e2e:	4618      	mov	r0, r3
 8017e30:	3728      	adds	r7, #40	; 0x28
 8017e32:	46bd      	mov	sp, r7
 8017e34:	bd80      	pop	{r7, pc}
 8017e36:	bf00      	nop
 8017e38:	20019e80 	.word	0x20019e80

08017e3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8017e3c:	b580      	push	{r7, lr}
 8017e3e:	b088      	sub	sp, #32
 8017e40:	af02      	add	r7, sp, #8
 8017e42:	6078      	str	r0, [r7, #4]
 8017e44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017e46:	4b22      	ldr	r3, [pc, #136]	; (8017ed0 <prvProcessExpiredTimer+0x94>)
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	68db      	ldr	r3, [r3, #12]
 8017e4c:	68db      	ldr	r3, [r3, #12]
 8017e4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017e50:	697b      	ldr	r3, [r7, #20]
 8017e52:	3304      	adds	r3, #4
 8017e54:	4618      	mov	r0, r3
 8017e56:	f7fd fefd 	bl	8015c54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017e5a:	697b      	ldr	r3, [r7, #20]
 8017e5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017e60:	f003 0304 	and.w	r3, r3, #4
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d022      	beq.n	8017eae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8017e68:	697b      	ldr	r3, [r7, #20]
 8017e6a:	699a      	ldr	r2, [r3, #24]
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	18d1      	adds	r1, r2, r3
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	683a      	ldr	r2, [r7, #0]
 8017e74:	6978      	ldr	r0, [r7, #20]
 8017e76:	f000 f8d1 	bl	801801c <prvInsertTimerInActiveList>
 8017e7a:	4603      	mov	r3, r0
 8017e7c:	2b00      	cmp	r3, #0
 8017e7e:	d01f      	beq.n	8017ec0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8017e80:	2300      	movs	r3, #0
 8017e82:	9300      	str	r3, [sp, #0]
 8017e84:	2300      	movs	r3, #0
 8017e86:	687a      	ldr	r2, [r7, #4]
 8017e88:	2100      	movs	r1, #0
 8017e8a:	6978      	ldr	r0, [r7, #20]
 8017e8c:	f7ff ff88 	bl	8017da0 <xTimerGenericCommand>
 8017e90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8017e92:	693b      	ldr	r3, [r7, #16]
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	d113      	bne.n	8017ec0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8017e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e9c:	f383 8811 	msr	BASEPRI, r3
 8017ea0:	f3bf 8f6f 	isb	sy
 8017ea4:	f3bf 8f4f 	dsb	sy
 8017ea8:	60fb      	str	r3, [r7, #12]
}
 8017eaa:	bf00      	nop
 8017eac:	e7fe      	b.n	8017eac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017eb4:	f023 0301 	bic.w	r3, r3, #1
 8017eb8:	b2da      	uxtb	r2, r3
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8017ec0:	697b      	ldr	r3, [r7, #20]
 8017ec2:	6a1b      	ldr	r3, [r3, #32]
 8017ec4:	6978      	ldr	r0, [r7, #20]
 8017ec6:	4798      	blx	r3
}
 8017ec8:	bf00      	nop
 8017eca:	3718      	adds	r7, #24
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	bd80      	pop	{r7, pc}
 8017ed0:	20019e78 	.word	0x20019e78

08017ed4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8017ed4:	b580      	push	{r7, lr}
 8017ed6:	b084      	sub	sp, #16
 8017ed8:	af00      	add	r7, sp, #0
 8017eda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017edc:	f107 0308 	add.w	r3, r7, #8
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	f000 f857 	bl	8017f94 <prvGetNextExpireTime>
 8017ee6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	4619      	mov	r1, r3
 8017eec:	68f8      	ldr	r0, [r7, #12]
 8017eee:	f000 f803 	bl	8017ef8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8017ef2:	f000 f8d5 	bl	80180a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8017ef6:	e7f1      	b.n	8017edc <prvTimerTask+0x8>

08017ef8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8017ef8:	b580      	push	{r7, lr}
 8017efa:	b084      	sub	sp, #16
 8017efc:	af00      	add	r7, sp, #0
 8017efe:	6078      	str	r0, [r7, #4]
 8017f00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8017f02:	f7ff f93b 	bl	801717c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8017f06:	f107 0308 	add.w	r3, r7, #8
 8017f0a:	4618      	mov	r0, r3
 8017f0c:	f000 f866 	bl	8017fdc <prvSampleTimeNow>
 8017f10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8017f12:	68bb      	ldr	r3, [r7, #8]
 8017f14:	2b00      	cmp	r3, #0
 8017f16:	d130      	bne.n	8017f7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8017f18:	683b      	ldr	r3, [r7, #0]
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	d10a      	bne.n	8017f34 <prvProcessTimerOrBlockTask+0x3c>
 8017f1e:	687a      	ldr	r2, [r7, #4]
 8017f20:	68fb      	ldr	r3, [r7, #12]
 8017f22:	429a      	cmp	r2, r3
 8017f24:	d806      	bhi.n	8017f34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8017f26:	f7ff f937 	bl	8017198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8017f2a:	68f9      	ldr	r1, [r7, #12]
 8017f2c:	6878      	ldr	r0, [r7, #4]
 8017f2e:	f7ff ff85 	bl	8017e3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8017f32:	e024      	b.n	8017f7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8017f34:	683b      	ldr	r3, [r7, #0]
 8017f36:	2b00      	cmp	r3, #0
 8017f38:	d008      	beq.n	8017f4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017f3a:	4b13      	ldr	r3, [pc, #76]	; (8017f88 <prvProcessTimerOrBlockTask+0x90>)
 8017f3c:	681b      	ldr	r3, [r3, #0]
 8017f3e:	681b      	ldr	r3, [r3, #0]
 8017f40:	2b00      	cmp	r3, #0
 8017f42:	d101      	bne.n	8017f48 <prvProcessTimerOrBlockTask+0x50>
 8017f44:	2301      	movs	r3, #1
 8017f46:	e000      	b.n	8017f4a <prvProcessTimerOrBlockTask+0x52>
 8017f48:	2300      	movs	r3, #0
 8017f4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8017f4c:	4b0f      	ldr	r3, [pc, #60]	; (8017f8c <prvProcessTimerOrBlockTask+0x94>)
 8017f4e:	6818      	ldr	r0, [r3, #0]
 8017f50:	687a      	ldr	r2, [r7, #4]
 8017f52:	68fb      	ldr	r3, [r7, #12]
 8017f54:	1ad3      	subs	r3, r2, r3
 8017f56:	683a      	ldr	r2, [r7, #0]
 8017f58:	4619      	mov	r1, r3
 8017f5a:	f7fe fe7f 	bl	8016c5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017f5e:	f7ff f91b 	bl	8017198 <xTaskResumeAll>
 8017f62:	4603      	mov	r3, r0
 8017f64:	2b00      	cmp	r3, #0
 8017f66:	d10a      	bne.n	8017f7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8017f68:	4b09      	ldr	r3, [pc, #36]	; (8017f90 <prvProcessTimerOrBlockTask+0x98>)
 8017f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f6e:	601a      	str	r2, [r3, #0]
 8017f70:	f3bf 8f4f 	dsb	sy
 8017f74:	f3bf 8f6f 	isb	sy
}
 8017f78:	e001      	b.n	8017f7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8017f7a:	f7ff f90d 	bl	8017198 <xTaskResumeAll>
}
 8017f7e:	bf00      	nop
 8017f80:	3710      	adds	r7, #16
 8017f82:	46bd      	mov	sp, r7
 8017f84:	bd80      	pop	{r7, pc}
 8017f86:	bf00      	nop
 8017f88:	20019e7c 	.word	0x20019e7c
 8017f8c:	20019e80 	.word	0x20019e80
 8017f90:	e000ed04 	.word	0xe000ed04

08017f94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8017f94:	b480      	push	{r7}
 8017f96:	b085      	sub	sp, #20
 8017f98:	af00      	add	r7, sp, #0
 8017f9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8017f9c:	4b0e      	ldr	r3, [pc, #56]	; (8017fd8 <prvGetNextExpireTime+0x44>)
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	681b      	ldr	r3, [r3, #0]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d101      	bne.n	8017faa <prvGetNextExpireTime+0x16>
 8017fa6:	2201      	movs	r2, #1
 8017fa8:	e000      	b.n	8017fac <prvGetNextExpireTime+0x18>
 8017faa:	2200      	movs	r2, #0
 8017fac:	687b      	ldr	r3, [r7, #4]
 8017fae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d105      	bne.n	8017fc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8017fb8:	4b07      	ldr	r3, [pc, #28]	; (8017fd8 <prvGetNextExpireTime+0x44>)
 8017fba:	681b      	ldr	r3, [r3, #0]
 8017fbc:	68db      	ldr	r3, [r3, #12]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	60fb      	str	r3, [r7, #12]
 8017fc2:	e001      	b.n	8017fc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8017fc4:	2300      	movs	r3, #0
 8017fc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8017fc8:	68fb      	ldr	r3, [r7, #12]
}
 8017fca:	4618      	mov	r0, r3
 8017fcc:	3714      	adds	r7, #20
 8017fce:	46bd      	mov	sp, r7
 8017fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017fd4:	4770      	bx	lr
 8017fd6:	bf00      	nop
 8017fd8:	20019e78 	.word	0x20019e78

08017fdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8017fdc:	b580      	push	{r7, lr}
 8017fde:	b084      	sub	sp, #16
 8017fe0:	af00      	add	r7, sp, #0
 8017fe2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8017fe4:	f7ff f976 	bl	80172d4 <xTaskGetTickCount>
 8017fe8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8017fea:	4b0b      	ldr	r3, [pc, #44]	; (8018018 <prvSampleTimeNow+0x3c>)
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	68fa      	ldr	r2, [r7, #12]
 8017ff0:	429a      	cmp	r2, r3
 8017ff2:	d205      	bcs.n	8018000 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8017ff4:	f000 f936 	bl	8018264 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	2201      	movs	r2, #1
 8017ffc:	601a      	str	r2, [r3, #0]
 8017ffe:	e002      	b.n	8018006 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	2200      	movs	r2, #0
 8018004:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018006:	4a04      	ldr	r2, [pc, #16]	; (8018018 <prvSampleTimeNow+0x3c>)
 8018008:	68fb      	ldr	r3, [r7, #12]
 801800a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801800c:	68fb      	ldr	r3, [r7, #12]
}
 801800e:	4618      	mov	r0, r3
 8018010:	3710      	adds	r7, #16
 8018012:	46bd      	mov	sp, r7
 8018014:	bd80      	pop	{r7, pc}
 8018016:	bf00      	nop
 8018018:	20019e88 	.word	0x20019e88

0801801c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801801c:	b580      	push	{r7, lr}
 801801e:	b086      	sub	sp, #24
 8018020:	af00      	add	r7, sp, #0
 8018022:	60f8      	str	r0, [r7, #12]
 8018024:	60b9      	str	r1, [r7, #8]
 8018026:	607a      	str	r2, [r7, #4]
 8018028:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801802a:	2300      	movs	r3, #0
 801802c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801802e:	68fb      	ldr	r3, [r7, #12]
 8018030:	68ba      	ldr	r2, [r7, #8]
 8018032:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018034:	68fb      	ldr	r3, [r7, #12]
 8018036:	68fa      	ldr	r2, [r7, #12]
 8018038:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801803a:	68ba      	ldr	r2, [r7, #8]
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	429a      	cmp	r2, r3
 8018040:	d812      	bhi.n	8018068 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018042:	687a      	ldr	r2, [r7, #4]
 8018044:	683b      	ldr	r3, [r7, #0]
 8018046:	1ad2      	subs	r2, r2, r3
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	699b      	ldr	r3, [r3, #24]
 801804c:	429a      	cmp	r2, r3
 801804e:	d302      	bcc.n	8018056 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018050:	2301      	movs	r3, #1
 8018052:	617b      	str	r3, [r7, #20]
 8018054:	e01b      	b.n	801808e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018056:	4b10      	ldr	r3, [pc, #64]	; (8018098 <prvInsertTimerInActiveList+0x7c>)
 8018058:	681a      	ldr	r2, [r3, #0]
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	3304      	adds	r3, #4
 801805e:	4619      	mov	r1, r3
 8018060:	4610      	mov	r0, r2
 8018062:	f7fd fdbe 	bl	8015be2 <vListInsert>
 8018066:	e012      	b.n	801808e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018068:	687a      	ldr	r2, [r7, #4]
 801806a:	683b      	ldr	r3, [r7, #0]
 801806c:	429a      	cmp	r2, r3
 801806e:	d206      	bcs.n	801807e <prvInsertTimerInActiveList+0x62>
 8018070:	68ba      	ldr	r2, [r7, #8]
 8018072:	683b      	ldr	r3, [r7, #0]
 8018074:	429a      	cmp	r2, r3
 8018076:	d302      	bcc.n	801807e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018078:	2301      	movs	r3, #1
 801807a:	617b      	str	r3, [r7, #20]
 801807c:	e007      	b.n	801808e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801807e:	4b07      	ldr	r3, [pc, #28]	; (801809c <prvInsertTimerInActiveList+0x80>)
 8018080:	681a      	ldr	r2, [r3, #0]
 8018082:	68fb      	ldr	r3, [r7, #12]
 8018084:	3304      	adds	r3, #4
 8018086:	4619      	mov	r1, r3
 8018088:	4610      	mov	r0, r2
 801808a:	f7fd fdaa 	bl	8015be2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 801808e:	697b      	ldr	r3, [r7, #20]
}
 8018090:	4618      	mov	r0, r3
 8018092:	3718      	adds	r7, #24
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	20019e7c 	.word	0x20019e7c
 801809c:	20019e78 	.word	0x20019e78

080180a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b08e      	sub	sp, #56	; 0x38
 80180a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80180a6:	e0ca      	b.n	801823e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	2b00      	cmp	r3, #0
 80180ac:	da18      	bge.n	80180e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80180ae:	1d3b      	adds	r3, r7, #4
 80180b0:	3304      	adds	r3, #4
 80180b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80180b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d10a      	bne.n	80180d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80180ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180be:	f383 8811 	msr	BASEPRI, r3
 80180c2:	f3bf 8f6f 	isb	sy
 80180c6:	f3bf 8f4f 	dsb	sy
 80180ca:	61fb      	str	r3, [r7, #28]
}
 80180cc:	bf00      	nop
 80180ce:	e7fe      	b.n	80180ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80180d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80180d2:	681b      	ldr	r3, [r3, #0]
 80180d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180d6:	6850      	ldr	r0, [r2, #4]
 80180d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80180da:	6892      	ldr	r2, [r2, #8]
 80180dc:	4611      	mov	r1, r2
 80180de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	2b00      	cmp	r3, #0
 80180e4:	f2c0 80aa 	blt.w	801823c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80180e8:	68fb      	ldr	r3, [r7, #12]
 80180ea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80180ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180ee:	695b      	ldr	r3, [r3, #20]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d004      	beq.n	80180fe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80180f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180f6:	3304      	adds	r3, #4
 80180f8:	4618      	mov	r0, r3
 80180fa:	f7fd fdab 	bl	8015c54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80180fe:	463b      	mov	r3, r7
 8018100:	4618      	mov	r0, r3
 8018102:	f7ff ff6b 	bl	8017fdc <prvSampleTimeNow>
 8018106:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	2b09      	cmp	r3, #9
 801810c:	f200 8097 	bhi.w	801823e <prvProcessReceivedCommands+0x19e>
 8018110:	a201      	add	r2, pc, #4	; (adr r2, 8018118 <prvProcessReceivedCommands+0x78>)
 8018112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018116:	bf00      	nop
 8018118:	08018141 	.word	0x08018141
 801811c:	08018141 	.word	0x08018141
 8018120:	08018141 	.word	0x08018141
 8018124:	080181b5 	.word	0x080181b5
 8018128:	080181c9 	.word	0x080181c9
 801812c:	08018213 	.word	0x08018213
 8018130:	08018141 	.word	0x08018141
 8018134:	08018141 	.word	0x08018141
 8018138:	080181b5 	.word	0x080181b5
 801813c:	080181c9 	.word	0x080181c9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018146:	f043 0301 	orr.w	r3, r3, #1
 801814a:	b2da      	uxtb	r2, r3
 801814c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801814e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018152:	68ba      	ldr	r2, [r7, #8]
 8018154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018156:	699b      	ldr	r3, [r3, #24]
 8018158:	18d1      	adds	r1, r2, r3
 801815a:	68bb      	ldr	r3, [r7, #8]
 801815c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801815e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018160:	f7ff ff5c 	bl	801801c <prvInsertTimerInActiveList>
 8018164:	4603      	mov	r3, r0
 8018166:	2b00      	cmp	r3, #0
 8018168:	d069      	beq.n	801823e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801816c:	6a1b      	ldr	r3, [r3, #32]
 801816e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018170:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018174:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018178:	f003 0304 	and.w	r3, r3, #4
 801817c:	2b00      	cmp	r3, #0
 801817e:	d05e      	beq.n	801823e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018180:	68ba      	ldr	r2, [r7, #8]
 8018182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018184:	699b      	ldr	r3, [r3, #24]
 8018186:	441a      	add	r2, r3
 8018188:	2300      	movs	r3, #0
 801818a:	9300      	str	r3, [sp, #0]
 801818c:	2300      	movs	r3, #0
 801818e:	2100      	movs	r1, #0
 8018190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018192:	f7ff fe05 	bl	8017da0 <xTimerGenericCommand>
 8018196:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018198:	6a3b      	ldr	r3, [r7, #32]
 801819a:	2b00      	cmp	r3, #0
 801819c:	d14f      	bne.n	801823e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801819e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181a2:	f383 8811 	msr	BASEPRI, r3
 80181a6:	f3bf 8f6f 	isb	sy
 80181aa:	f3bf 8f4f 	dsb	sy
 80181ae:	61bb      	str	r3, [r7, #24]
}
 80181b0:	bf00      	nop
 80181b2:	e7fe      	b.n	80181b2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80181b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181ba:	f023 0301 	bic.w	r3, r3, #1
 80181be:	b2da      	uxtb	r2, r3
 80181c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80181c6:	e03a      	b.n	801823e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80181c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80181ce:	f043 0301 	orr.w	r3, r3, #1
 80181d2:	b2da      	uxtb	r2, r3
 80181d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80181da:	68ba      	ldr	r2, [r7, #8]
 80181dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181de:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80181e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181e2:	699b      	ldr	r3, [r3, #24]
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d10a      	bne.n	80181fe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80181e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80181ec:	f383 8811 	msr	BASEPRI, r3
 80181f0:	f3bf 8f6f 	isb	sy
 80181f4:	f3bf 8f4f 	dsb	sy
 80181f8:	617b      	str	r3, [r7, #20]
}
 80181fa:	bf00      	nop
 80181fc:	e7fe      	b.n	80181fc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80181fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018200:	699a      	ldr	r2, [r3, #24]
 8018202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018204:	18d1      	adds	r1, r2, r3
 8018206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801820a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801820c:	f7ff ff06 	bl	801801c <prvInsertTimerInActiveList>
					break;
 8018210:	e015      	b.n	801823e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8018212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018214:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018218:	f003 0302 	and.w	r3, r3, #2
 801821c:	2b00      	cmp	r3, #0
 801821e:	d103      	bne.n	8018228 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8018220:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018222:	f000 fbdd 	bl	80189e0 <vPortFree>
 8018226:	e00a      	b.n	801823e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801822a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801822e:	f023 0301 	bic.w	r3, r3, #1
 8018232:	b2da      	uxtb	r2, r3
 8018234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018236:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801823a:	e000      	b.n	801823e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801823c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801823e:	4b08      	ldr	r3, [pc, #32]	; (8018260 <prvProcessReceivedCommands+0x1c0>)
 8018240:	681b      	ldr	r3, [r3, #0]
 8018242:	1d39      	adds	r1, r7, #4
 8018244:	2200      	movs	r2, #0
 8018246:	4618      	mov	r0, r3
 8018248:	f7fe f8fc 	bl	8016444 <xQueueReceive>
 801824c:	4603      	mov	r3, r0
 801824e:	2b00      	cmp	r3, #0
 8018250:	f47f af2a 	bne.w	80180a8 <prvProcessReceivedCommands+0x8>
	}
}
 8018254:	bf00      	nop
 8018256:	bf00      	nop
 8018258:	3730      	adds	r7, #48	; 0x30
 801825a:	46bd      	mov	sp, r7
 801825c:	bd80      	pop	{r7, pc}
 801825e:	bf00      	nop
 8018260:	20019e80 	.word	0x20019e80

08018264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b088      	sub	sp, #32
 8018268:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801826a:	e048      	b.n	80182fe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801826c:	4b2d      	ldr	r3, [pc, #180]	; (8018324 <prvSwitchTimerLists+0xc0>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	68db      	ldr	r3, [r3, #12]
 8018272:	681b      	ldr	r3, [r3, #0]
 8018274:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018276:	4b2b      	ldr	r3, [pc, #172]	; (8018324 <prvSwitchTimerLists+0xc0>)
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	68db      	ldr	r3, [r3, #12]
 801827c:	68db      	ldr	r3, [r3, #12]
 801827e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	3304      	adds	r3, #4
 8018284:	4618      	mov	r0, r3
 8018286:	f7fd fce5 	bl	8015c54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	6a1b      	ldr	r3, [r3, #32]
 801828e:	68f8      	ldr	r0, [r7, #12]
 8018290:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018298:	f003 0304 	and.w	r3, r3, #4
 801829c:	2b00      	cmp	r3, #0
 801829e:	d02e      	beq.n	80182fe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80182a0:	68fb      	ldr	r3, [r7, #12]
 80182a2:	699b      	ldr	r3, [r3, #24]
 80182a4:	693a      	ldr	r2, [r7, #16]
 80182a6:	4413      	add	r3, r2
 80182a8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80182aa:	68ba      	ldr	r2, [r7, #8]
 80182ac:	693b      	ldr	r3, [r7, #16]
 80182ae:	429a      	cmp	r2, r3
 80182b0:	d90e      	bls.n	80182d0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80182b2:	68fb      	ldr	r3, [r7, #12]
 80182b4:	68ba      	ldr	r2, [r7, #8]
 80182b6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80182b8:	68fb      	ldr	r3, [r7, #12]
 80182ba:	68fa      	ldr	r2, [r7, #12]
 80182bc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80182be:	4b19      	ldr	r3, [pc, #100]	; (8018324 <prvSwitchTimerLists+0xc0>)
 80182c0:	681a      	ldr	r2, [r3, #0]
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	3304      	adds	r3, #4
 80182c6:	4619      	mov	r1, r3
 80182c8:	4610      	mov	r0, r2
 80182ca:	f7fd fc8a 	bl	8015be2 <vListInsert>
 80182ce:	e016      	b.n	80182fe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80182d0:	2300      	movs	r3, #0
 80182d2:	9300      	str	r3, [sp, #0]
 80182d4:	2300      	movs	r3, #0
 80182d6:	693a      	ldr	r2, [r7, #16]
 80182d8:	2100      	movs	r1, #0
 80182da:	68f8      	ldr	r0, [r7, #12]
 80182dc:	f7ff fd60 	bl	8017da0 <xTimerGenericCommand>
 80182e0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	2b00      	cmp	r3, #0
 80182e6:	d10a      	bne.n	80182fe <prvSwitchTimerLists+0x9a>
	__asm volatile
 80182e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182ec:	f383 8811 	msr	BASEPRI, r3
 80182f0:	f3bf 8f6f 	isb	sy
 80182f4:	f3bf 8f4f 	dsb	sy
 80182f8:	603b      	str	r3, [r7, #0]
}
 80182fa:	bf00      	nop
 80182fc:	e7fe      	b.n	80182fc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80182fe:	4b09      	ldr	r3, [pc, #36]	; (8018324 <prvSwitchTimerLists+0xc0>)
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	681b      	ldr	r3, [r3, #0]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d1b1      	bne.n	801826c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8018308:	4b06      	ldr	r3, [pc, #24]	; (8018324 <prvSwitchTimerLists+0xc0>)
 801830a:	681b      	ldr	r3, [r3, #0]
 801830c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801830e:	4b06      	ldr	r3, [pc, #24]	; (8018328 <prvSwitchTimerLists+0xc4>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	4a04      	ldr	r2, [pc, #16]	; (8018324 <prvSwitchTimerLists+0xc0>)
 8018314:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8018316:	4a04      	ldr	r2, [pc, #16]	; (8018328 <prvSwitchTimerLists+0xc4>)
 8018318:	697b      	ldr	r3, [r7, #20]
 801831a:	6013      	str	r3, [r2, #0]
}
 801831c:	bf00      	nop
 801831e:	3718      	adds	r7, #24
 8018320:	46bd      	mov	sp, r7
 8018322:	bd80      	pop	{r7, pc}
 8018324:	20019e78 	.word	0x20019e78
 8018328:	20019e7c 	.word	0x20019e7c

0801832c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801832c:	b580      	push	{r7, lr}
 801832e:	b082      	sub	sp, #8
 8018330:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8018332:	f000 f967 	bl	8018604 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8018336:	4b15      	ldr	r3, [pc, #84]	; (801838c <prvCheckForValidListAndQueue+0x60>)
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	2b00      	cmp	r3, #0
 801833c:	d120      	bne.n	8018380 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801833e:	4814      	ldr	r0, [pc, #80]	; (8018390 <prvCheckForValidListAndQueue+0x64>)
 8018340:	f7fd fbfe 	bl	8015b40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8018344:	4813      	ldr	r0, [pc, #76]	; (8018394 <prvCheckForValidListAndQueue+0x68>)
 8018346:	f7fd fbfb 	bl	8015b40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801834a:	4b13      	ldr	r3, [pc, #76]	; (8018398 <prvCheckForValidListAndQueue+0x6c>)
 801834c:	4a10      	ldr	r2, [pc, #64]	; (8018390 <prvCheckForValidListAndQueue+0x64>)
 801834e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8018350:	4b12      	ldr	r3, [pc, #72]	; (801839c <prvCheckForValidListAndQueue+0x70>)
 8018352:	4a10      	ldr	r2, [pc, #64]	; (8018394 <prvCheckForValidListAndQueue+0x68>)
 8018354:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8018356:	2300      	movs	r3, #0
 8018358:	9300      	str	r3, [sp, #0]
 801835a:	4b11      	ldr	r3, [pc, #68]	; (80183a0 <prvCheckForValidListAndQueue+0x74>)
 801835c:	4a11      	ldr	r2, [pc, #68]	; (80183a4 <prvCheckForValidListAndQueue+0x78>)
 801835e:	2110      	movs	r1, #16
 8018360:	200a      	movs	r0, #10
 8018362:	f7fd fd09 	bl	8015d78 <xQueueGenericCreateStatic>
 8018366:	4603      	mov	r3, r0
 8018368:	4a08      	ldr	r2, [pc, #32]	; (801838c <prvCheckForValidListAndQueue+0x60>)
 801836a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801836c:	4b07      	ldr	r3, [pc, #28]	; (801838c <prvCheckForValidListAndQueue+0x60>)
 801836e:	681b      	ldr	r3, [r3, #0]
 8018370:	2b00      	cmp	r3, #0
 8018372:	d005      	beq.n	8018380 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8018374:	4b05      	ldr	r3, [pc, #20]	; (801838c <prvCheckForValidListAndQueue+0x60>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	490b      	ldr	r1, [pc, #44]	; (80183a8 <prvCheckForValidListAndQueue+0x7c>)
 801837a:	4618      	mov	r0, r3
 801837c:	f7fe fc1a 	bl	8016bb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018380:	f000 f970 	bl	8018664 <vPortExitCritical>
}
 8018384:	bf00      	nop
 8018386:	46bd      	mov	sp, r7
 8018388:	bd80      	pop	{r7, pc}
 801838a:	bf00      	nop
 801838c:	20019e80 	.word	0x20019e80
 8018390:	20019e50 	.word	0x20019e50
 8018394:	20019e64 	.word	0x20019e64
 8018398:	20019e78 	.word	0x20019e78
 801839c:	20019e7c 	.word	0x20019e7c
 80183a0:	20019f2c 	.word	0x20019f2c
 80183a4:	20019e8c 	.word	0x20019e8c
 80183a8:	08020730 	.word	0x08020730

080183ac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80183ac:	b480      	push	{r7}
 80183ae:	b085      	sub	sp, #20
 80183b0:	af00      	add	r7, sp, #0
 80183b2:	60f8      	str	r0, [r7, #12]
 80183b4:	60b9      	str	r1, [r7, #8]
 80183b6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	3b04      	subs	r3, #4
 80183bc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80183be:	68fb      	ldr	r3, [r7, #12]
 80183c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80183c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80183c6:	68fb      	ldr	r3, [r7, #12]
 80183c8:	3b04      	subs	r3, #4
 80183ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80183cc:	68bb      	ldr	r3, [r7, #8]
 80183ce:	f023 0201 	bic.w	r2, r3, #1
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80183d6:	68fb      	ldr	r3, [r7, #12]
 80183d8:	3b04      	subs	r3, #4
 80183da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80183dc:	4a0c      	ldr	r2, [pc, #48]	; (8018410 <pxPortInitialiseStack+0x64>)
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	3b14      	subs	r3, #20
 80183e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80183e8:	687a      	ldr	r2, [r7, #4]
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	3b04      	subs	r3, #4
 80183f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	f06f 0202 	mvn.w	r2, #2
 80183fa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80183fc:	68fb      	ldr	r3, [r7, #12]
 80183fe:	3b20      	subs	r3, #32
 8018400:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018402:	68fb      	ldr	r3, [r7, #12]
}
 8018404:	4618      	mov	r0, r3
 8018406:	3714      	adds	r7, #20
 8018408:	46bd      	mov	sp, r7
 801840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840e:	4770      	bx	lr
 8018410:	08018415 	.word	0x08018415

08018414 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018414:	b480      	push	{r7}
 8018416:	b085      	sub	sp, #20
 8018418:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801841a:	2300      	movs	r3, #0
 801841c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801841e:	4b12      	ldr	r3, [pc, #72]	; (8018468 <prvTaskExitError+0x54>)
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018426:	d00a      	beq.n	801843e <prvTaskExitError+0x2a>
	__asm volatile
 8018428:	f04f 0350 	mov.w	r3, #80	; 0x50
 801842c:	f383 8811 	msr	BASEPRI, r3
 8018430:	f3bf 8f6f 	isb	sy
 8018434:	f3bf 8f4f 	dsb	sy
 8018438:	60fb      	str	r3, [r7, #12]
}
 801843a:	bf00      	nop
 801843c:	e7fe      	b.n	801843c <prvTaskExitError+0x28>
	__asm volatile
 801843e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018442:	f383 8811 	msr	BASEPRI, r3
 8018446:	f3bf 8f6f 	isb	sy
 801844a:	f3bf 8f4f 	dsb	sy
 801844e:	60bb      	str	r3, [r7, #8]
}
 8018450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018452:	bf00      	nop
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	2b00      	cmp	r3, #0
 8018458:	d0fc      	beq.n	8018454 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801845a:	bf00      	nop
 801845c:	bf00      	nop
 801845e:	3714      	adds	r7, #20
 8018460:	46bd      	mov	sp, r7
 8018462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018466:	4770      	bx	lr
 8018468:	2000002c 	.word	0x2000002c
 801846c:	00000000 	.word	0x00000000

08018470 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018470:	4b07      	ldr	r3, [pc, #28]	; (8018490 <pxCurrentTCBConst2>)
 8018472:	6819      	ldr	r1, [r3, #0]
 8018474:	6808      	ldr	r0, [r1, #0]
 8018476:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801847a:	f380 8809 	msr	PSP, r0
 801847e:	f3bf 8f6f 	isb	sy
 8018482:	f04f 0000 	mov.w	r0, #0
 8018486:	f380 8811 	msr	BASEPRI, r0
 801848a:	4770      	bx	lr
 801848c:	f3af 8000 	nop.w

08018490 <pxCurrentTCBConst2>:
 8018490:	20019950 	.word	0x20019950
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018494:	bf00      	nop
 8018496:	bf00      	nop

08018498 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018498:	4808      	ldr	r0, [pc, #32]	; (80184bc <prvPortStartFirstTask+0x24>)
 801849a:	6800      	ldr	r0, [r0, #0]
 801849c:	6800      	ldr	r0, [r0, #0]
 801849e:	f380 8808 	msr	MSP, r0
 80184a2:	f04f 0000 	mov.w	r0, #0
 80184a6:	f380 8814 	msr	CONTROL, r0
 80184aa:	b662      	cpsie	i
 80184ac:	b661      	cpsie	f
 80184ae:	f3bf 8f4f 	dsb	sy
 80184b2:	f3bf 8f6f 	isb	sy
 80184b6:	df00      	svc	0
 80184b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80184ba:	bf00      	nop
 80184bc:	e000ed08 	.word	0xe000ed08

080184c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b086      	sub	sp, #24
 80184c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80184c6:	4b46      	ldr	r3, [pc, #280]	; (80185e0 <xPortStartScheduler+0x120>)
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	4a46      	ldr	r2, [pc, #280]	; (80185e4 <xPortStartScheduler+0x124>)
 80184cc:	4293      	cmp	r3, r2
 80184ce:	d10a      	bne.n	80184e6 <xPortStartScheduler+0x26>
	__asm volatile
 80184d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184d4:	f383 8811 	msr	BASEPRI, r3
 80184d8:	f3bf 8f6f 	isb	sy
 80184dc:	f3bf 8f4f 	dsb	sy
 80184e0:	613b      	str	r3, [r7, #16]
}
 80184e2:	bf00      	nop
 80184e4:	e7fe      	b.n	80184e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80184e6:	4b3e      	ldr	r3, [pc, #248]	; (80185e0 <xPortStartScheduler+0x120>)
 80184e8:	681b      	ldr	r3, [r3, #0]
 80184ea:	4a3f      	ldr	r2, [pc, #252]	; (80185e8 <xPortStartScheduler+0x128>)
 80184ec:	4293      	cmp	r3, r2
 80184ee:	d10a      	bne.n	8018506 <xPortStartScheduler+0x46>
	__asm volatile
 80184f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184f4:	f383 8811 	msr	BASEPRI, r3
 80184f8:	f3bf 8f6f 	isb	sy
 80184fc:	f3bf 8f4f 	dsb	sy
 8018500:	60fb      	str	r3, [r7, #12]
}
 8018502:	bf00      	nop
 8018504:	e7fe      	b.n	8018504 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018506:	4b39      	ldr	r3, [pc, #228]	; (80185ec <xPortStartScheduler+0x12c>)
 8018508:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801850a:	697b      	ldr	r3, [r7, #20]
 801850c:	781b      	ldrb	r3, [r3, #0]
 801850e:	b2db      	uxtb	r3, r3
 8018510:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018512:	697b      	ldr	r3, [r7, #20]
 8018514:	22ff      	movs	r2, #255	; 0xff
 8018516:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018518:	697b      	ldr	r3, [r7, #20]
 801851a:	781b      	ldrb	r3, [r3, #0]
 801851c:	b2db      	uxtb	r3, r3
 801851e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018520:	78fb      	ldrb	r3, [r7, #3]
 8018522:	b2db      	uxtb	r3, r3
 8018524:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8018528:	b2da      	uxtb	r2, r3
 801852a:	4b31      	ldr	r3, [pc, #196]	; (80185f0 <xPortStartScheduler+0x130>)
 801852c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801852e:	4b31      	ldr	r3, [pc, #196]	; (80185f4 <xPortStartScheduler+0x134>)
 8018530:	2207      	movs	r2, #7
 8018532:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018534:	e009      	b.n	801854a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8018536:	4b2f      	ldr	r3, [pc, #188]	; (80185f4 <xPortStartScheduler+0x134>)
 8018538:	681b      	ldr	r3, [r3, #0]
 801853a:	3b01      	subs	r3, #1
 801853c:	4a2d      	ldr	r2, [pc, #180]	; (80185f4 <xPortStartScheduler+0x134>)
 801853e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018540:	78fb      	ldrb	r3, [r7, #3]
 8018542:	b2db      	uxtb	r3, r3
 8018544:	005b      	lsls	r3, r3, #1
 8018546:	b2db      	uxtb	r3, r3
 8018548:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801854a:	78fb      	ldrb	r3, [r7, #3]
 801854c:	b2db      	uxtb	r3, r3
 801854e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018552:	2b80      	cmp	r3, #128	; 0x80
 8018554:	d0ef      	beq.n	8018536 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018556:	4b27      	ldr	r3, [pc, #156]	; (80185f4 <xPortStartScheduler+0x134>)
 8018558:	681b      	ldr	r3, [r3, #0]
 801855a:	f1c3 0307 	rsb	r3, r3, #7
 801855e:	2b04      	cmp	r3, #4
 8018560:	d00a      	beq.n	8018578 <xPortStartScheduler+0xb8>
	__asm volatile
 8018562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018566:	f383 8811 	msr	BASEPRI, r3
 801856a:	f3bf 8f6f 	isb	sy
 801856e:	f3bf 8f4f 	dsb	sy
 8018572:	60bb      	str	r3, [r7, #8]
}
 8018574:	bf00      	nop
 8018576:	e7fe      	b.n	8018576 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018578:	4b1e      	ldr	r3, [pc, #120]	; (80185f4 <xPortStartScheduler+0x134>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	021b      	lsls	r3, r3, #8
 801857e:	4a1d      	ldr	r2, [pc, #116]	; (80185f4 <xPortStartScheduler+0x134>)
 8018580:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018582:	4b1c      	ldr	r3, [pc, #112]	; (80185f4 <xPortStartScheduler+0x134>)
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801858a:	4a1a      	ldr	r2, [pc, #104]	; (80185f4 <xPortStartScheduler+0x134>)
 801858c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	b2da      	uxtb	r2, r3
 8018592:	697b      	ldr	r3, [r7, #20]
 8018594:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018596:	4b18      	ldr	r3, [pc, #96]	; (80185f8 <xPortStartScheduler+0x138>)
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	4a17      	ldr	r2, [pc, #92]	; (80185f8 <xPortStartScheduler+0x138>)
 801859c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80185a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80185a2:	4b15      	ldr	r3, [pc, #84]	; (80185f8 <xPortStartScheduler+0x138>)
 80185a4:	681b      	ldr	r3, [r3, #0]
 80185a6:	4a14      	ldr	r2, [pc, #80]	; (80185f8 <xPortStartScheduler+0x138>)
 80185a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80185ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80185ae:	f000 f8dd 	bl	801876c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80185b2:	4b12      	ldr	r3, [pc, #72]	; (80185fc <xPortStartScheduler+0x13c>)
 80185b4:	2200      	movs	r2, #0
 80185b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80185b8:	f000 f8fc 	bl	80187b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80185bc:	4b10      	ldr	r3, [pc, #64]	; (8018600 <xPortStartScheduler+0x140>)
 80185be:	681b      	ldr	r3, [r3, #0]
 80185c0:	4a0f      	ldr	r2, [pc, #60]	; (8018600 <xPortStartScheduler+0x140>)
 80185c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80185c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80185c8:	f7ff ff66 	bl	8018498 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80185cc:	f7fe ff4c 	bl	8017468 <vTaskSwitchContext>
	prvTaskExitError();
 80185d0:	f7ff ff20 	bl	8018414 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80185d4:	2300      	movs	r3, #0
}
 80185d6:	4618      	mov	r0, r3
 80185d8:	3718      	adds	r7, #24
 80185da:	46bd      	mov	sp, r7
 80185dc:	bd80      	pop	{r7, pc}
 80185de:	bf00      	nop
 80185e0:	e000ed00 	.word	0xe000ed00
 80185e4:	410fc271 	.word	0x410fc271
 80185e8:	410fc270 	.word	0x410fc270
 80185ec:	e000e400 	.word	0xe000e400
 80185f0:	20019f7c 	.word	0x20019f7c
 80185f4:	20019f80 	.word	0x20019f80
 80185f8:	e000ed20 	.word	0xe000ed20
 80185fc:	2000002c 	.word	0x2000002c
 8018600:	e000ef34 	.word	0xe000ef34

08018604 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8018604:	b480      	push	{r7}
 8018606:	b083      	sub	sp, #12
 8018608:	af00      	add	r7, sp, #0
	__asm volatile
 801860a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801860e:	f383 8811 	msr	BASEPRI, r3
 8018612:	f3bf 8f6f 	isb	sy
 8018616:	f3bf 8f4f 	dsb	sy
 801861a:	607b      	str	r3, [r7, #4]
}
 801861c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801861e:	4b0f      	ldr	r3, [pc, #60]	; (801865c <vPortEnterCritical+0x58>)
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	3301      	adds	r3, #1
 8018624:	4a0d      	ldr	r2, [pc, #52]	; (801865c <vPortEnterCritical+0x58>)
 8018626:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8018628:	4b0c      	ldr	r3, [pc, #48]	; (801865c <vPortEnterCritical+0x58>)
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	2b01      	cmp	r3, #1
 801862e:	d10f      	bne.n	8018650 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8018630:	4b0b      	ldr	r3, [pc, #44]	; (8018660 <vPortEnterCritical+0x5c>)
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	b2db      	uxtb	r3, r3
 8018636:	2b00      	cmp	r3, #0
 8018638:	d00a      	beq.n	8018650 <vPortEnterCritical+0x4c>
	__asm volatile
 801863a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801863e:	f383 8811 	msr	BASEPRI, r3
 8018642:	f3bf 8f6f 	isb	sy
 8018646:	f3bf 8f4f 	dsb	sy
 801864a:	603b      	str	r3, [r7, #0]
}
 801864c:	bf00      	nop
 801864e:	e7fe      	b.n	801864e <vPortEnterCritical+0x4a>
	}
}
 8018650:	bf00      	nop
 8018652:	370c      	adds	r7, #12
 8018654:	46bd      	mov	sp, r7
 8018656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801865a:	4770      	bx	lr
 801865c:	2000002c 	.word	0x2000002c
 8018660:	e000ed04 	.word	0xe000ed04

08018664 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8018664:	b480      	push	{r7}
 8018666:	b083      	sub	sp, #12
 8018668:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801866a:	4b12      	ldr	r3, [pc, #72]	; (80186b4 <vPortExitCritical+0x50>)
 801866c:	681b      	ldr	r3, [r3, #0]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d10a      	bne.n	8018688 <vPortExitCritical+0x24>
	__asm volatile
 8018672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018676:	f383 8811 	msr	BASEPRI, r3
 801867a:	f3bf 8f6f 	isb	sy
 801867e:	f3bf 8f4f 	dsb	sy
 8018682:	607b      	str	r3, [r7, #4]
}
 8018684:	bf00      	nop
 8018686:	e7fe      	b.n	8018686 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8018688:	4b0a      	ldr	r3, [pc, #40]	; (80186b4 <vPortExitCritical+0x50>)
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	3b01      	subs	r3, #1
 801868e:	4a09      	ldr	r2, [pc, #36]	; (80186b4 <vPortExitCritical+0x50>)
 8018690:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8018692:	4b08      	ldr	r3, [pc, #32]	; (80186b4 <vPortExitCritical+0x50>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	2b00      	cmp	r3, #0
 8018698:	d105      	bne.n	80186a6 <vPortExitCritical+0x42>
 801869a:	2300      	movs	r3, #0
 801869c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801869e:	683b      	ldr	r3, [r7, #0]
 80186a0:	f383 8811 	msr	BASEPRI, r3
}
 80186a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80186a6:	bf00      	nop
 80186a8:	370c      	adds	r7, #12
 80186aa:	46bd      	mov	sp, r7
 80186ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186b0:	4770      	bx	lr
 80186b2:	bf00      	nop
 80186b4:	2000002c 	.word	0x2000002c
	...

080186c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80186c0:	f3ef 8009 	mrs	r0, PSP
 80186c4:	f3bf 8f6f 	isb	sy
 80186c8:	4b15      	ldr	r3, [pc, #84]	; (8018720 <pxCurrentTCBConst>)
 80186ca:	681a      	ldr	r2, [r3, #0]
 80186cc:	f01e 0f10 	tst.w	lr, #16
 80186d0:	bf08      	it	eq
 80186d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80186d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80186da:	6010      	str	r0, [r2, #0]
 80186dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80186e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80186e4:	f380 8811 	msr	BASEPRI, r0
 80186e8:	f3bf 8f4f 	dsb	sy
 80186ec:	f3bf 8f6f 	isb	sy
 80186f0:	f7fe feba 	bl	8017468 <vTaskSwitchContext>
 80186f4:	f04f 0000 	mov.w	r0, #0
 80186f8:	f380 8811 	msr	BASEPRI, r0
 80186fc:	bc09      	pop	{r0, r3}
 80186fe:	6819      	ldr	r1, [r3, #0]
 8018700:	6808      	ldr	r0, [r1, #0]
 8018702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018706:	f01e 0f10 	tst.w	lr, #16
 801870a:	bf08      	it	eq
 801870c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8018710:	f380 8809 	msr	PSP, r0
 8018714:	f3bf 8f6f 	isb	sy
 8018718:	4770      	bx	lr
 801871a:	bf00      	nop
 801871c:	f3af 8000 	nop.w

08018720 <pxCurrentTCBConst>:
 8018720:	20019950 	.word	0x20019950
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8018724:	bf00      	nop
 8018726:	bf00      	nop

08018728 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8018728:	b580      	push	{r7, lr}
 801872a:	b082      	sub	sp, #8
 801872c:	af00      	add	r7, sp, #0
	__asm volatile
 801872e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018732:	f383 8811 	msr	BASEPRI, r3
 8018736:	f3bf 8f6f 	isb	sy
 801873a:	f3bf 8f4f 	dsb	sy
 801873e:	607b      	str	r3, [r7, #4]
}
 8018740:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8018742:	f7fe fdd7 	bl	80172f4 <xTaskIncrementTick>
 8018746:	4603      	mov	r3, r0
 8018748:	2b00      	cmp	r3, #0
 801874a:	d003      	beq.n	8018754 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801874c:	4b06      	ldr	r3, [pc, #24]	; (8018768 <xPortSysTickHandler+0x40>)
 801874e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018752:	601a      	str	r2, [r3, #0]
 8018754:	2300      	movs	r3, #0
 8018756:	603b      	str	r3, [r7, #0]
	__asm volatile
 8018758:	683b      	ldr	r3, [r7, #0]
 801875a:	f383 8811 	msr	BASEPRI, r3
}
 801875e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8018760:	bf00      	nop
 8018762:	3708      	adds	r7, #8
 8018764:	46bd      	mov	sp, r7
 8018766:	bd80      	pop	{r7, pc}
 8018768:	e000ed04 	.word	0xe000ed04

0801876c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801876c:	b480      	push	{r7}
 801876e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8018770:	4b0b      	ldr	r3, [pc, #44]	; (80187a0 <vPortSetupTimerInterrupt+0x34>)
 8018772:	2200      	movs	r2, #0
 8018774:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8018776:	4b0b      	ldr	r3, [pc, #44]	; (80187a4 <vPortSetupTimerInterrupt+0x38>)
 8018778:	2200      	movs	r2, #0
 801877a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801877c:	4b0a      	ldr	r3, [pc, #40]	; (80187a8 <vPortSetupTimerInterrupt+0x3c>)
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	4a0a      	ldr	r2, [pc, #40]	; (80187ac <vPortSetupTimerInterrupt+0x40>)
 8018782:	fba2 2303 	umull	r2, r3, r2, r3
 8018786:	099b      	lsrs	r3, r3, #6
 8018788:	4a09      	ldr	r2, [pc, #36]	; (80187b0 <vPortSetupTimerInterrupt+0x44>)
 801878a:	3b01      	subs	r3, #1
 801878c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801878e:	4b04      	ldr	r3, [pc, #16]	; (80187a0 <vPortSetupTimerInterrupt+0x34>)
 8018790:	2207      	movs	r2, #7
 8018792:	601a      	str	r2, [r3, #0]
}
 8018794:	bf00      	nop
 8018796:	46bd      	mov	sp, r7
 8018798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801879c:	4770      	bx	lr
 801879e:	bf00      	nop
 80187a0:	e000e010 	.word	0xe000e010
 80187a4:	e000e018 	.word	0xe000e018
 80187a8:	2000000c 	.word	0x2000000c
 80187ac:	10624dd3 	.word	0x10624dd3
 80187b0:	e000e014 	.word	0xe000e014

080187b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80187b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80187c4 <vPortEnableVFP+0x10>
 80187b8:	6801      	ldr	r1, [r0, #0]
 80187ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80187be:	6001      	str	r1, [r0, #0]
 80187c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80187c2:	bf00      	nop
 80187c4:	e000ed88 	.word	0xe000ed88

080187c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80187c8:	b480      	push	{r7}
 80187ca:	b085      	sub	sp, #20
 80187cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80187ce:	f3ef 8305 	mrs	r3, IPSR
 80187d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80187d4:	68fb      	ldr	r3, [r7, #12]
 80187d6:	2b0f      	cmp	r3, #15
 80187d8:	d914      	bls.n	8018804 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80187da:	4a17      	ldr	r2, [pc, #92]	; (8018838 <vPortValidateInterruptPriority+0x70>)
 80187dc:	68fb      	ldr	r3, [r7, #12]
 80187de:	4413      	add	r3, r2
 80187e0:	781b      	ldrb	r3, [r3, #0]
 80187e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80187e4:	4b15      	ldr	r3, [pc, #84]	; (801883c <vPortValidateInterruptPriority+0x74>)
 80187e6:	781b      	ldrb	r3, [r3, #0]
 80187e8:	7afa      	ldrb	r2, [r7, #11]
 80187ea:	429a      	cmp	r2, r3
 80187ec:	d20a      	bcs.n	8018804 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80187ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187f2:	f383 8811 	msr	BASEPRI, r3
 80187f6:	f3bf 8f6f 	isb	sy
 80187fa:	f3bf 8f4f 	dsb	sy
 80187fe:	607b      	str	r3, [r7, #4]
}
 8018800:	bf00      	nop
 8018802:	e7fe      	b.n	8018802 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8018804:	4b0e      	ldr	r3, [pc, #56]	; (8018840 <vPortValidateInterruptPriority+0x78>)
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801880c:	4b0d      	ldr	r3, [pc, #52]	; (8018844 <vPortValidateInterruptPriority+0x7c>)
 801880e:	681b      	ldr	r3, [r3, #0]
 8018810:	429a      	cmp	r2, r3
 8018812:	d90a      	bls.n	801882a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8018814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018818:	f383 8811 	msr	BASEPRI, r3
 801881c:	f3bf 8f6f 	isb	sy
 8018820:	f3bf 8f4f 	dsb	sy
 8018824:	603b      	str	r3, [r7, #0]
}
 8018826:	bf00      	nop
 8018828:	e7fe      	b.n	8018828 <vPortValidateInterruptPriority+0x60>
	}
 801882a:	bf00      	nop
 801882c:	3714      	adds	r7, #20
 801882e:	46bd      	mov	sp, r7
 8018830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018834:	4770      	bx	lr
 8018836:	bf00      	nop
 8018838:	e000e3f0 	.word	0xe000e3f0
 801883c:	20019f7c 	.word	0x20019f7c
 8018840:	e000ed0c 	.word	0xe000ed0c
 8018844:	20019f80 	.word	0x20019f80

08018848 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b08a      	sub	sp, #40	; 0x28
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8018850:	2300      	movs	r3, #0
 8018852:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8018854:	f7fe fc92 	bl	801717c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8018858:	4b5b      	ldr	r3, [pc, #364]	; (80189c8 <pvPortMalloc+0x180>)
 801885a:	681b      	ldr	r3, [r3, #0]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d101      	bne.n	8018864 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8018860:	f000 f920 	bl	8018aa4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8018864:	4b59      	ldr	r3, [pc, #356]	; (80189cc <pvPortMalloc+0x184>)
 8018866:	681a      	ldr	r2, [r3, #0]
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	4013      	ands	r3, r2
 801886c:	2b00      	cmp	r3, #0
 801886e:	f040 8093 	bne.w	8018998 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	2b00      	cmp	r3, #0
 8018876:	d01d      	beq.n	80188b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8018878:	2208      	movs	r2, #8
 801887a:	687b      	ldr	r3, [r7, #4]
 801887c:	4413      	add	r3, r2
 801887e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	f003 0307 	and.w	r3, r3, #7
 8018886:	2b00      	cmp	r3, #0
 8018888:	d014      	beq.n	80188b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801888a:	687b      	ldr	r3, [r7, #4]
 801888c:	f023 0307 	bic.w	r3, r3, #7
 8018890:	3308      	adds	r3, #8
 8018892:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	f003 0307 	and.w	r3, r3, #7
 801889a:	2b00      	cmp	r3, #0
 801889c:	d00a      	beq.n	80188b4 <pvPortMalloc+0x6c>
	__asm volatile
 801889e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188a2:	f383 8811 	msr	BASEPRI, r3
 80188a6:	f3bf 8f6f 	isb	sy
 80188aa:	f3bf 8f4f 	dsb	sy
 80188ae:	617b      	str	r3, [r7, #20]
}
 80188b0:	bf00      	nop
 80188b2:	e7fe      	b.n	80188b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d06e      	beq.n	8018998 <pvPortMalloc+0x150>
 80188ba:	4b45      	ldr	r3, [pc, #276]	; (80189d0 <pvPortMalloc+0x188>)
 80188bc:	681b      	ldr	r3, [r3, #0]
 80188be:	687a      	ldr	r2, [r7, #4]
 80188c0:	429a      	cmp	r2, r3
 80188c2:	d869      	bhi.n	8018998 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80188c4:	4b43      	ldr	r3, [pc, #268]	; (80189d4 <pvPortMalloc+0x18c>)
 80188c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80188c8:	4b42      	ldr	r3, [pc, #264]	; (80189d4 <pvPortMalloc+0x18c>)
 80188ca:	681b      	ldr	r3, [r3, #0]
 80188cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80188ce:	e004      	b.n	80188da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80188d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80188d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188d6:	681b      	ldr	r3, [r3, #0]
 80188d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80188da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188dc:	685b      	ldr	r3, [r3, #4]
 80188de:	687a      	ldr	r2, [r7, #4]
 80188e0:	429a      	cmp	r2, r3
 80188e2:	d903      	bls.n	80188ec <pvPortMalloc+0xa4>
 80188e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e6:	681b      	ldr	r3, [r3, #0]
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d1f1      	bne.n	80188d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80188ec:	4b36      	ldr	r3, [pc, #216]	; (80189c8 <pvPortMalloc+0x180>)
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188f2:	429a      	cmp	r2, r3
 80188f4:	d050      	beq.n	8018998 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80188f6:	6a3b      	ldr	r3, [r7, #32]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	2208      	movs	r2, #8
 80188fc:	4413      	add	r3, r2
 80188fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8018900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018902:	681a      	ldr	r2, [r3, #0]
 8018904:	6a3b      	ldr	r3, [r7, #32]
 8018906:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8018908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801890a:	685a      	ldr	r2, [r3, #4]
 801890c:	687b      	ldr	r3, [r7, #4]
 801890e:	1ad2      	subs	r2, r2, r3
 8018910:	2308      	movs	r3, #8
 8018912:	005b      	lsls	r3, r3, #1
 8018914:	429a      	cmp	r2, r3
 8018916:	d91f      	bls.n	8018958 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8018918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	4413      	add	r3, r2
 801891e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8018920:	69bb      	ldr	r3, [r7, #24]
 8018922:	f003 0307 	and.w	r3, r3, #7
 8018926:	2b00      	cmp	r3, #0
 8018928:	d00a      	beq.n	8018940 <pvPortMalloc+0xf8>
	__asm volatile
 801892a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801892e:	f383 8811 	msr	BASEPRI, r3
 8018932:	f3bf 8f6f 	isb	sy
 8018936:	f3bf 8f4f 	dsb	sy
 801893a:	613b      	str	r3, [r7, #16]
}
 801893c:	bf00      	nop
 801893e:	e7fe      	b.n	801893e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8018940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018942:	685a      	ldr	r2, [r3, #4]
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	1ad2      	subs	r2, r2, r3
 8018948:	69bb      	ldr	r3, [r7, #24]
 801894a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801894e:	687a      	ldr	r2, [r7, #4]
 8018950:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8018952:	69b8      	ldr	r0, [r7, #24]
 8018954:	f000 f908 	bl	8018b68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8018958:	4b1d      	ldr	r3, [pc, #116]	; (80189d0 <pvPortMalloc+0x188>)
 801895a:	681a      	ldr	r2, [r3, #0]
 801895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801895e:	685b      	ldr	r3, [r3, #4]
 8018960:	1ad3      	subs	r3, r2, r3
 8018962:	4a1b      	ldr	r2, [pc, #108]	; (80189d0 <pvPortMalloc+0x188>)
 8018964:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8018966:	4b1a      	ldr	r3, [pc, #104]	; (80189d0 <pvPortMalloc+0x188>)
 8018968:	681a      	ldr	r2, [r3, #0]
 801896a:	4b1b      	ldr	r3, [pc, #108]	; (80189d8 <pvPortMalloc+0x190>)
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	429a      	cmp	r2, r3
 8018970:	d203      	bcs.n	801897a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8018972:	4b17      	ldr	r3, [pc, #92]	; (80189d0 <pvPortMalloc+0x188>)
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	4a18      	ldr	r2, [pc, #96]	; (80189d8 <pvPortMalloc+0x190>)
 8018978:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801897a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801897c:	685a      	ldr	r2, [r3, #4]
 801897e:	4b13      	ldr	r3, [pc, #76]	; (80189cc <pvPortMalloc+0x184>)
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	431a      	orrs	r2, r3
 8018984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018986:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8018988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801898a:	2200      	movs	r2, #0
 801898c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801898e:	4b13      	ldr	r3, [pc, #76]	; (80189dc <pvPortMalloc+0x194>)
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	3301      	adds	r3, #1
 8018994:	4a11      	ldr	r2, [pc, #68]	; (80189dc <pvPortMalloc+0x194>)
 8018996:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8018998:	f7fe fbfe 	bl	8017198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801899c:	69fb      	ldr	r3, [r7, #28]
 801899e:	f003 0307 	and.w	r3, r3, #7
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d00a      	beq.n	80189bc <pvPortMalloc+0x174>
	__asm volatile
 80189a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189aa:	f383 8811 	msr	BASEPRI, r3
 80189ae:	f3bf 8f6f 	isb	sy
 80189b2:	f3bf 8f4f 	dsb	sy
 80189b6:	60fb      	str	r3, [r7, #12]
}
 80189b8:	bf00      	nop
 80189ba:	e7fe      	b.n	80189ba <pvPortMalloc+0x172>
	return pvReturn;
 80189bc:	69fb      	ldr	r3, [r7, #28]
}
 80189be:	4618      	mov	r0, r3
 80189c0:	3728      	adds	r7, #40	; 0x28
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}
 80189c6:	bf00      	nop
 80189c8:	2001db8c 	.word	0x2001db8c
 80189cc:	2001dba0 	.word	0x2001dba0
 80189d0:	2001db90 	.word	0x2001db90
 80189d4:	2001db84 	.word	0x2001db84
 80189d8:	2001db94 	.word	0x2001db94
 80189dc:	2001db98 	.word	0x2001db98

080189e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b086      	sub	sp, #24
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	2b00      	cmp	r3, #0
 80189f0:	d04d      	beq.n	8018a8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80189f2:	2308      	movs	r3, #8
 80189f4:	425b      	negs	r3, r3
 80189f6:	697a      	ldr	r2, [r7, #20]
 80189f8:	4413      	add	r3, r2
 80189fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80189fc:	697b      	ldr	r3, [r7, #20]
 80189fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8018a00:	693b      	ldr	r3, [r7, #16]
 8018a02:	685a      	ldr	r2, [r3, #4]
 8018a04:	4b24      	ldr	r3, [pc, #144]	; (8018a98 <vPortFree+0xb8>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	4013      	ands	r3, r2
 8018a0a:	2b00      	cmp	r3, #0
 8018a0c:	d10a      	bne.n	8018a24 <vPortFree+0x44>
	__asm volatile
 8018a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a12:	f383 8811 	msr	BASEPRI, r3
 8018a16:	f3bf 8f6f 	isb	sy
 8018a1a:	f3bf 8f4f 	dsb	sy
 8018a1e:	60fb      	str	r3, [r7, #12]
}
 8018a20:	bf00      	nop
 8018a22:	e7fe      	b.n	8018a22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8018a24:	693b      	ldr	r3, [r7, #16]
 8018a26:	681b      	ldr	r3, [r3, #0]
 8018a28:	2b00      	cmp	r3, #0
 8018a2a:	d00a      	beq.n	8018a42 <vPortFree+0x62>
	__asm volatile
 8018a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a30:	f383 8811 	msr	BASEPRI, r3
 8018a34:	f3bf 8f6f 	isb	sy
 8018a38:	f3bf 8f4f 	dsb	sy
 8018a3c:	60bb      	str	r3, [r7, #8]
}
 8018a3e:	bf00      	nop
 8018a40:	e7fe      	b.n	8018a40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8018a42:	693b      	ldr	r3, [r7, #16]
 8018a44:	685a      	ldr	r2, [r3, #4]
 8018a46:	4b14      	ldr	r3, [pc, #80]	; (8018a98 <vPortFree+0xb8>)
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	4013      	ands	r3, r2
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d01e      	beq.n	8018a8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8018a50:	693b      	ldr	r3, [r7, #16]
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	2b00      	cmp	r3, #0
 8018a56:	d11a      	bne.n	8018a8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	685a      	ldr	r2, [r3, #4]
 8018a5c:	4b0e      	ldr	r3, [pc, #56]	; (8018a98 <vPortFree+0xb8>)
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	43db      	mvns	r3, r3
 8018a62:	401a      	ands	r2, r3
 8018a64:	693b      	ldr	r3, [r7, #16]
 8018a66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8018a68:	f7fe fb88 	bl	801717c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8018a6c:	693b      	ldr	r3, [r7, #16]
 8018a6e:	685a      	ldr	r2, [r3, #4]
 8018a70:	4b0a      	ldr	r3, [pc, #40]	; (8018a9c <vPortFree+0xbc>)
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	4413      	add	r3, r2
 8018a76:	4a09      	ldr	r2, [pc, #36]	; (8018a9c <vPortFree+0xbc>)
 8018a78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8018a7a:	6938      	ldr	r0, [r7, #16]
 8018a7c:	f000 f874 	bl	8018b68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8018a80:	4b07      	ldr	r3, [pc, #28]	; (8018aa0 <vPortFree+0xc0>)
 8018a82:	681b      	ldr	r3, [r3, #0]
 8018a84:	3301      	adds	r3, #1
 8018a86:	4a06      	ldr	r2, [pc, #24]	; (8018aa0 <vPortFree+0xc0>)
 8018a88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8018a8a:	f7fe fb85 	bl	8017198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8018a8e:	bf00      	nop
 8018a90:	3718      	adds	r7, #24
 8018a92:	46bd      	mov	sp, r7
 8018a94:	bd80      	pop	{r7, pc}
 8018a96:	bf00      	nop
 8018a98:	2001dba0 	.word	0x2001dba0
 8018a9c:	2001db90 	.word	0x2001db90
 8018aa0:	2001db9c 	.word	0x2001db9c

08018aa4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8018aa4:	b480      	push	{r7}
 8018aa6:	b085      	sub	sp, #20
 8018aa8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8018aaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8018aae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8018ab0:	4b27      	ldr	r3, [pc, #156]	; (8018b50 <prvHeapInit+0xac>)
 8018ab2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	f003 0307 	and.w	r3, r3, #7
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d00c      	beq.n	8018ad8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8018abe:	68fb      	ldr	r3, [r7, #12]
 8018ac0:	3307      	adds	r3, #7
 8018ac2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018ac4:	68fb      	ldr	r3, [r7, #12]
 8018ac6:	f023 0307 	bic.w	r3, r3, #7
 8018aca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8018acc:	68ba      	ldr	r2, [r7, #8]
 8018ace:	68fb      	ldr	r3, [r7, #12]
 8018ad0:	1ad3      	subs	r3, r2, r3
 8018ad2:	4a1f      	ldr	r2, [pc, #124]	; (8018b50 <prvHeapInit+0xac>)
 8018ad4:	4413      	add	r3, r2
 8018ad6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8018ad8:	68fb      	ldr	r3, [r7, #12]
 8018ada:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8018adc:	4a1d      	ldr	r2, [pc, #116]	; (8018b54 <prvHeapInit+0xb0>)
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8018ae2:	4b1c      	ldr	r3, [pc, #112]	; (8018b54 <prvHeapInit+0xb0>)
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8018ae8:	687b      	ldr	r3, [r7, #4]
 8018aea:	68ba      	ldr	r2, [r7, #8]
 8018aec:	4413      	add	r3, r2
 8018aee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8018af0:	2208      	movs	r2, #8
 8018af2:	68fb      	ldr	r3, [r7, #12]
 8018af4:	1a9b      	subs	r3, r3, r2
 8018af6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8018af8:	68fb      	ldr	r3, [r7, #12]
 8018afa:	f023 0307 	bic.w	r3, r3, #7
 8018afe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8018b00:	68fb      	ldr	r3, [r7, #12]
 8018b02:	4a15      	ldr	r2, [pc, #84]	; (8018b58 <prvHeapInit+0xb4>)
 8018b04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8018b06:	4b14      	ldr	r3, [pc, #80]	; (8018b58 <prvHeapInit+0xb4>)
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8018b0e:	4b12      	ldr	r3, [pc, #72]	; (8018b58 <prvHeapInit+0xb4>)
 8018b10:	681b      	ldr	r3, [r3, #0]
 8018b12:	2200      	movs	r2, #0
 8018b14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8018b16:	687b      	ldr	r3, [r7, #4]
 8018b18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8018b1a:	683b      	ldr	r3, [r7, #0]
 8018b1c:	68fa      	ldr	r2, [r7, #12]
 8018b1e:	1ad2      	subs	r2, r2, r3
 8018b20:	683b      	ldr	r3, [r7, #0]
 8018b22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8018b24:	4b0c      	ldr	r3, [pc, #48]	; (8018b58 <prvHeapInit+0xb4>)
 8018b26:	681a      	ldr	r2, [r3, #0]
 8018b28:	683b      	ldr	r3, [r7, #0]
 8018b2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018b2c:	683b      	ldr	r3, [r7, #0]
 8018b2e:	685b      	ldr	r3, [r3, #4]
 8018b30:	4a0a      	ldr	r2, [pc, #40]	; (8018b5c <prvHeapInit+0xb8>)
 8018b32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8018b34:	683b      	ldr	r3, [r7, #0]
 8018b36:	685b      	ldr	r3, [r3, #4]
 8018b38:	4a09      	ldr	r2, [pc, #36]	; (8018b60 <prvHeapInit+0xbc>)
 8018b3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8018b3c:	4b09      	ldr	r3, [pc, #36]	; (8018b64 <prvHeapInit+0xc0>)
 8018b3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8018b42:	601a      	str	r2, [r3, #0]
}
 8018b44:	bf00      	nop
 8018b46:	3714      	adds	r7, #20
 8018b48:	46bd      	mov	sp, r7
 8018b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b4e:	4770      	bx	lr
 8018b50:	20019f84 	.word	0x20019f84
 8018b54:	2001db84 	.word	0x2001db84
 8018b58:	2001db8c 	.word	0x2001db8c
 8018b5c:	2001db94 	.word	0x2001db94
 8018b60:	2001db90 	.word	0x2001db90
 8018b64:	2001dba0 	.word	0x2001dba0

08018b68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8018b68:	b480      	push	{r7}
 8018b6a:	b085      	sub	sp, #20
 8018b6c:	af00      	add	r7, sp, #0
 8018b6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8018b70:	4b28      	ldr	r3, [pc, #160]	; (8018c14 <prvInsertBlockIntoFreeList+0xac>)
 8018b72:	60fb      	str	r3, [r7, #12]
 8018b74:	e002      	b.n	8018b7c <prvInsertBlockIntoFreeList+0x14>
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	681b      	ldr	r3, [r3, #0]
 8018b7a:	60fb      	str	r3, [r7, #12]
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	681b      	ldr	r3, [r3, #0]
 8018b80:	687a      	ldr	r2, [r7, #4]
 8018b82:	429a      	cmp	r2, r3
 8018b84:	d8f7      	bhi.n	8018b76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8018b8a:	68fb      	ldr	r3, [r7, #12]
 8018b8c:	685b      	ldr	r3, [r3, #4]
 8018b8e:	68ba      	ldr	r2, [r7, #8]
 8018b90:	4413      	add	r3, r2
 8018b92:	687a      	ldr	r2, [r7, #4]
 8018b94:	429a      	cmp	r2, r3
 8018b96:	d108      	bne.n	8018baa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	685a      	ldr	r2, [r3, #4]
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	685b      	ldr	r3, [r3, #4]
 8018ba0:	441a      	add	r2, r3
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8018ba6:	68fb      	ldr	r3, [r7, #12]
 8018ba8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8018bae:	687b      	ldr	r3, [r7, #4]
 8018bb0:	685b      	ldr	r3, [r3, #4]
 8018bb2:	68ba      	ldr	r2, [r7, #8]
 8018bb4:	441a      	add	r2, r3
 8018bb6:	68fb      	ldr	r3, [r7, #12]
 8018bb8:	681b      	ldr	r3, [r3, #0]
 8018bba:	429a      	cmp	r2, r3
 8018bbc:	d118      	bne.n	8018bf0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8018bbe:	68fb      	ldr	r3, [r7, #12]
 8018bc0:	681a      	ldr	r2, [r3, #0]
 8018bc2:	4b15      	ldr	r3, [pc, #84]	; (8018c18 <prvInsertBlockIntoFreeList+0xb0>)
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	429a      	cmp	r2, r3
 8018bc8:	d00d      	beq.n	8018be6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	685a      	ldr	r2, [r3, #4]
 8018bce:	68fb      	ldr	r3, [r7, #12]
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	685b      	ldr	r3, [r3, #4]
 8018bd4:	441a      	add	r2, r3
 8018bd6:	687b      	ldr	r3, [r7, #4]
 8018bd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8018bda:	68fb      	ldr	r3, [r7, #12]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	681a      	ldr	r2, [r3, #0]
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	601a      	str	r2, [r3, #0]
 8018be4:	e008      	b.n	8018bf8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8018be6:	4b0c      	ldr	r3, [pc, #48]	; (8018c18 <prvInsertBlockIntoFreeList+0xb0>)
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	601a      	str	r2, [r3, #0]
 8018bee:	e003      	b.n	8018bf8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	681a      	ldr	r2, [r3, #0]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8018bf8:	68fa      	ldr	r2, [r7, #12]
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	429a      	cmp	r2, r3
 8018bfe:	d002      	beq.n	8018c06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	687a      	ldr	r2, [r7, #4]
 8018c04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018c06:	bf00      	nop
 8018c08:	3714      	adds	r7, #20
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c10:	4770      	bx	lr
 8018c12:	bf00      	nop
 8018c14:	2001db84 	.word	0x2001db84
 8018c18:	2001db8c 	.word	0x2001db8c

08018c1c <ble_prov_scan_result>:
		return;
	}
}

void ble_prov_scan_result(tstrM2mWifiscanResult* pstrScanResult, uint8_t resultsRemaining)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b084      	sub	sp, #16
 8018c20:	af00      	add	r7, sp, #0
 8018c22:	6078      	str	r0, [r7, #4]
 8018c24:	460b      	mov	r3, r1
 8018c26:	70fb      	strb	r3, [r7, #3]
	if (ble_scan_list.num_valid < MAX_WIPROVTASK_AP_NUM && pstrScanResult->au8SSID[0])
 8018c28:	4b21      	ldr	r3, [pc, #132]	; (8018cb0 <ble_prov_scan_result+0x94>)
 8018c2a:	781b      	ldrb	r3, [r3, #0]
 8018c2c:	2b0e      	cmp	r3, #14
 8018c2e:	d834      	bhi.n	8018c9a <ble_prov_scan_result+0x7e>
 8018c30:	687b      	ldr	r3, [r7, #4]
 8018c32:	7a9b      	ldrb	r3, [r3, #10]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d030      	beq.n	8018c9a <ble_prov_scan_result+0x7e>
	{
		uint8_t index = ble_scan_list.num_valid;
 8018c38:	4b1d      	ldr	r3, [pc, #116]	; (8018cb0 <ble_prov_scan_result+0x94>)
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	73fb      	strb	r3, [r7, #15]
		ble_scan_list.scandetails[index].rssi = pstrScanResult->s8rssi;
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8018c44:	7bfa      	ldrb	r2, [r7, #15]
 8018c46:	b2d8      	uxtb	r0, r3
 8018c48:	4919      	ldr	r1, [pc, #100]	; (8018cb0 <ble_prov_scan_result+0x94>)
 8018c4a:	4613      	mov	r3, r2
 8018c4c:	011b      	lsls	r3, r3, #4
 8018c4e:	4413      	add	r3, r2
 8018c50:	005b      	lsls	r3, r3, #1
 8018c52:	440b      	add	r3, r1
 8018c54:	3302      	adds	r3, #2
 8018c56:	4602      	mov	r2, r0
 8018c58:	701a      	strb	r2, [r3, #0]
		ble_scan_list.scandetails[index].sec_type = pstrScanResult->u8AuthType;
 8018c5a:	7bfa      	ldrb	r2, [r7, #15]
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	7898      	ldrb	r0, [r3, #2]
 8018c60:	4913      	ldr	r1, [pc, #76]	; (8018cb0 <ble_prov_scan_result+0x94>)
 8018c62:	4613      	mov	r3, r2
 8018c64:	011b      	lsls	r3, r3, #4
 8018c66:	4413      	add	r3, r2
 8018c68:	005b      	lsls	r3, r3, #1
 8018c6a:	440b      	add	r3, r1
 8018c6c:	3301      	adds	r3, #1
 8018c6e:	4602      	mov	r2, r0
 8018c70:	701a      	strb	r2, [r3, #0]
		memcpy(ble_scan_list.scandetails[index].ssid, pstrScanResult->au8SSID, sizeof(ble_scan_list.scandetails[index].ssid));
 8018c72:	7bfa      	ldrb	r2, [r7, #15]
 8018c74:	4613      	mov	r3, r2
 8018c76:	011b      	lsls	r3, r3, #4
 8018c78:	4413      	add	r3, r2
 8018c7a:	005b      	lsls	r3, r3, #1
 8018c7c:	4a0c      	ldr	r2, [pc, #48]	; (8018cb0 <ble_prov_scan_result+0x94>)
 8018c7e:	4413      	add	r3, r2
 8018c80:	1cd8      	adds	r0, r3, #3
 8018c82:	687b      	ldr	r3, [r7, #4]
 8018c84:	330a      	adds	r3, #10
 8018c86:	2220      	movs	r2, #32
 8018c88:	4619      	mov	r1, r3
 8018c8a:	f005 fb4b 	bl	801e324 <memcpy>
		ble_scan_list.num_valid++;
 8018c8e:	4b08      	ldr	r3, [pc, #32]	; (8018cb0 <ble_prov_scan_result+0x94>)
 8018c90:	781b      	ldrb	r3, [r3, #0]
 8018c92:	3301      	adds	r3, #1
 8018c94:	b2da      	uxtb	r2, r3
 8018c96:	4b06      	ldr	r3, [pc, #24]	; (8018cb0 <ble_prov_scan_result+0x94>)
 8018c98:	701a      	strb	r2, [r3, #0]
	}

	if (resultsRemaining==0)
 8018c9a:	78fb      	ldrb	r3, [r7, #3]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d102      	bne.n	8018ca6 <ble_prov_scan_result+0x8a>
	{
		wifiprov_scan_list_ind_send(&ble_scan_list);
 8018ca0:	4803      	ldr	r0, [pc, #12]	; (8018cb0 <ble_prov_scan_result+0x94>)
 8018ca2:	f005 f9c1 	bl	801e028 <wifiprov_scan_list_ind_send>
	}
}
 8018ca6:	bf00      	nop
 8018ca8:	3710      	adds	r7, #16
 8018caa:	46bd      	mov	sp, r7
 8018cac:	bd80      	pop	{r7, pc}
 8018cae:	bf00      	nop
 8018cb0:	2001dba4 	.word	0x2001dba4

08018cb4 <init_chip_pins>:
/*
 *	@fn		init_chip_pins
 *	@brief	Initialize reset, chip enable and wake pin
 */
static void init_chip_pins(void)
{
 8018cb4:	b480      	push	{r7}
 8018cb6:	af00      	add	r7, sp, #0
//    HAL_GPIO_WritePin(GPIOA,CONF_WINC_PIN_POWER_ENABLE,GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(CONF_WINC_PORT_LEVEL_SHIFTER_ENABLE,CONF_WINC_PIN_LEVEL_SHIFTER_ENABLE,GPIO_PIN_SET);
//    HAL_GPIO_WritePin(CONF_WINC_PIN_CHIP_ENABLE_PORT,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_RESET);
//    HAL_GPIO_WritePin(CONF_WINC_PIN_RESET_PORT,CONF_WINC_PIN_RESET,GPIO_PIN_RESET);

}
 8018cb8:	bf00      	nop
 8018cba:	46bd      	mov	sp, r7
 8018cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cc0:	4770      	bx	lr

08018cc2 <nm_bsp_init>:
 *	@fn		nm_bsp_init
 *	@brief	Initialize BSP
 *	@return	0 in case of success and -1 in case of failure
 */
sint8 nm_bsp_init(void)
{
 8018cc2:	b580      	push	{r7, lr}
 8018cc4:	af00      	add	r7, sp, #0
	/* Initialize chip IOs. */
	init_chip_pins();
 8018cc6:	f7ff fff5 	bl	8018cb4 <init_chip_pins>

	/* Perform chip reset. */
	nm_bsp_reset();
 8018cca:	f000 f803 	bl	8018cd4 <nm_bsp_reset>

	return M2M_SUCCESS;
 8018cce:	2300      	movs	r3, #0
}
 8018cd0:	4618      	mov	r0, r3
 8018cd2:	bd80      	pop	{r7, pc}

08018cd4 <nm_bsp_reset>:
 *	@fn		nm_bsp_reset
 *	@brief	Reset NMC1500 SoC by setting CHIP_EN and RESET_N signals low,
 *           CHIP_EN high then RESET_N high
 */
void nm_bsp_reset(void)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	af00      	add	r7, sp, #0
//    HAL_Delay(100);

    /* Set CHIP enable */
   // HAL_GPIO_WritePin(CONF_WINC_PIN_CHIP_ENABLE_PORT,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);

    HAL_Delay(1);
 8018cd8:	2001      	movs	r0, #1
 8018cda:	f7ed fc69 	bl	80065b0 <HAL_Delay>
	HAL_GPIO_WritePin(CONF_WINC_PIN_CHIP_ENABLE_PORT,CONF_WINC_PIN_CHIP_ENABLE,GPIO_PIN_SET);
 8018cde:	2201      	movs	r2, #1
 8018ce0:	2101      	movs	r1, #1
 8018ce2:	4806      	ldr	r0, [pc, #24]	; (8018cfc <nm_bsp_reset+0x28>)
 8018ce4:	f7ee fb4a 	bl	800737c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8018ce8:	2005      	movs	r0, #5
 8018cea:	f7ed fc61 	bl	80065b0 <HAL_Delay>

    /* Set RSTN 1.8V */
    HAL_GPIO_WritePin(CONF_WINC_PIN_RESET_PORT,CONF_WINC_PIN_RESET,GPIO_PIN_SET);
 8018cee:	2201      	movs	r2, #1
 8018cf0:	2102      	movs	r1, #2
 8018cf2:	4803      	ldr	r0, [pc, #12]	; (8018d00 <nm_bsp_reset+0x2c>)
 8018cf4:	f7ee fb42 	bl	800737c <HAL_GPIO_WritePin>
//    HAL_Delay(100);

}
 8018cf8:	bf00      	nop
 8018cfa:	bd80      	pop	{r7, pc}
 8018cfc:	40020800 	.word	0x40020800
 8018d00:	40020400 	.word	0x40020400

08018d04 <nm_bsp_sleep>:
 *	@brief	Sleep in units of mSec
 *	@param[IN]	u32TimeMsec
 *				Time in milliseconds
 */
void nm_bsp_sleep(uint32 u32TimeMsec)
{
 8018d04:	b580      	push	{r7, lr}
 8018d06:	b082      	sub	sp, #8
 8018d08:	af00      	add	r7, sp, #0
 8018d0a:	6078      	str	r0, [r7, #4]
    /* use FreeRTOS delay */
    HAL_Delay(u32TimeMsec);
 8018d0c:	6878      	ldr	r0, [r7, #4]
 8018d0e:	f7ed fc4f 	bl	80065b0 <HAL_Delay>
}
 8018d12:	bf00      	nop
 8018d14:	3708      	adds	r7, #8
 8018d16:	46bd      	mov	sp, r7
 8018d18:	bd80      	pop	{r7, pc}

08018d1a <nm_bsp_register_isr>:
 *	@brief	Register interrupt service routine
 *	@param[IN]	pfIsr
 *				Pointer to ISR handler
 */
void nm_bsp_register_isr(tpfNmBspIsr pfIsr)
{
 8018d1a:	b480      	push	{r7}
 8018d1c:	b089      	sub	sp, #36	; 0x24
 8018d1e:	af00      	add	r7, sp, #0
 8018d20:	6078      	str	r0, [r7, #4]
	/* Enable and set EXTI line 15_10 Interrupt to the lowest priority */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
#endif

}
 8018d22:	bf00      	nop
 8018d24:	3724      	adds	r7, #36	; 0x24
 8018d26:	46bd      	mov	sp, r7
 8018d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d2c:	4770      	bx	lr

08018d2e <nm_bsp_interrupt_ctrl>:
 *	@brief	Enable/Disable interrupts
 *	@param[IN]	u8Enable
 *				'0' disable interrupts. '1' enable interrupts
 */
void nm_bsp_interrupt_ctrl(uint8 u8Enable)
{
 8018d2e:	b580      	push	{r7, lr}
 8018d30:	b082      	sub	sp, #8
 8018d32:	af00      	add	r7, sp, #0
 8018d34:	4603      	mov	r3, r0
 8018d36:	71fb      	strb	r3, [r7, #7]
    if (1 == u8Enable)
 8018d38:	79fb      	ldrb	r3, [r7, #7]
 8018d3a:	2b01      	cmp	r3, #1
 8018d3c:	d108      	bne.n	8018d50 <nm_bsp_interrupt_ctrl+0x22>
    {
        HAL_NVIC_SetPriority((IRQn_Type)(CONF_WINC_EXTI_IRQN), 0x031, 0);
 8018d3e:	2200      	movs	r2, #0
 8018d40:	2131      	movs	r1, #49	; 0x31
 8018d42:	200a      	movs	r0, #10
 8018d44:	f7ed fd34 	bl	80067b0 <HAL_NVIC_SetPriority>
        HAL_NVIC_EnableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8018d48:	200a      	movs	r0, #10
 8018d4a:	f7ed fd4d 	bl	80067e8 <HAL_NVIC_EnableIRQ>
    }
    else
    {
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
    }
}
 8018d4e:	e002      	b.n	8018d56 <nm_bsp_interrupt_ctrl+0x28>
        HAL_NVIC_DisableIRQ((IRQn_Type)(CONF_WINC_EXTI_IRQN));
 8018d50:	200a      	movs	r0, #10
 8018d52:	f7ed fd57 	bl	8006804 <HAL_NVIC_DisableIRQ>
}
 8018d56:	bf00      	nop
 8018d58:	3708      	adds	r7, #8
 8018d5a:	46bd      	mov	sp, r7
 8018d5c:	bd80      	pop	{r7, pc}
	...

08018d60 <spi_select_slave>:
*	@fn		spi_select_slave
*	@brief	Select slave chip select: true - select, false - deselect
*	@return	None
*/
static void spi_select_slave(const uint8_t select)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b082      	sub	sp, #8
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	4603      	mov	r3, r0
 8018d68:	71fb      	strb	r3, [r7, #7]
    if (select)
 8018d6a:	79fb      	ldrb	r3, [r7, #7]
 8018d6c:	2b00      	cmp	r3, #0
 8018d6e:	d005      	beq.n	8018d7c <spi_select_slave+0x1c>
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_RESET);
 8018d70:	2200      	movs	r2, #0
 8018d72:	2140      	movs	r1, #64	; 0x40
 8018d74:	4806      	ldr	r0, [pc, #24]	; (8018d90 <spi_select_slave+0x30>)
 8018d76:	f7ee fb01 	bl	800737c <HAL_GPIO_WritePin>
    }
    else
    {
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
    }
}
 8018d7a:	e004      	b.n	8018d86 <spi_select_slave+0x26>
        HAL_GPIO_WritePin(SPI_WIFI_CS_GPIO_PORT,SPI_WIFI_CS_PIN,GPIO_PIN_SET);
 8018d7c:	2201      	movs	r2, #1
 8018d7e:	2140      	movs	r1, #64	; 0x40
 8018d80:	4803      	ldr	r0, [pc, #12]	; (8018d90 <spi_select_slave+0x30>)
 8018d82:	f7ee fafb 	bl	800737c <HAL_GPIO_WritePin>
}
 8018d86:	bf00      	nop
 8018d88:	3708      	adds	r7, #8
 8018d8a:	46bd      	mov	sp, r7
 8018d8c:	bd80      	pop	{r7, pc}
 8018d8e:	bf00      	nop
 8018d90:	40021400 	.word	0x40021400

08018d94 <spi_rw>:
	return M2M_SUCCESS;
}
#else

static sint8 spi_rw(uint8* pu8Mosi, uint8* pu8Miso, uint16 u16Sz)
{
 8018d94:	b580      	push	{r7, lr}
 8018d96:	b088      	sub	sp, #32
 8018d98:	af02      	add	r7, sp, #8
 8018d9a:	60f8      	str	r0, [r7, #12]
 8018d9c:	60b9      	str	r1, [r7, #8]
 8018d9e:	4613      	mov	r3, r2
 8018da0:	80fb      	strh	r3, [r7, #6]
   HAL_StatusTypeDef status;
   
    /* Start SPI transaction - polling method */
  	spi_select_slave(true);
 8018da2:	2001      	movs	r0, #1
 8018da4:	f7ff ffdc 	bl	8018d60 <spi_select_slave>
    
    
    /* Transmit/Recieve */
    if (pu8Mosi == NULL)
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d10b      	bne.n	8018dc6 <spi_rw+0x32>
	{
		status = HAL_SPI_TransmitReceive(&hspi5,spiDummyBuf,pu8Miso,u16Sz,1000);
 8018dae:	88fb      	ldrh	r3, [r7, #6]
 8018db0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018db4:	9200      	str	r2, [sp, #0]
 8018db6:	68ba      	ldr	r2, [r7, #8]
 8018db8:	4921      	ldr	r1, [pc, #132]	; (8018e40 <spi_rw+0xac>)
 8018dba:	4822      	ldr	r0, [pc, #136]	; (8018e44 <spi_rw+0xb0>)
 8018dbc:	f7f1 fe40 	bl	800aa40 <HAL_SPI_TransmitReceive>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	75fb      	strb	r3, [r7, #23]
 8018dc4:	e01f      	b.n	8018e06 <spi_rw+0x72>
    }
    else if(pu8Miso == NULL)
 8018dc6:	68bb      	ldr	r3, [r7, #8]
 8018dc8:	2b00      	cmp	r3, #0
 8018dca:	d111      	bne.n	8018df0 <spi_rw+0x5c>
    {
        status = HAL_SPI_TransmitReceive(&hspi5,pu8Mosi,spiDummyBuf,u16Sz,1000);
 8018dcc:	88fb      	ldrh	r3, [r7, #6]
 8018dce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018dd2:	9200      	str	r2, [sp, #0]
 8018dd4:	4a1a      	ldr	r2, [pc, #104]	; (8018e40 <spi_rw+0xac>)
 8018dd6:	68f9      	ldr	r1, [r7, #12]
 8018dd8:	481a      	ldr	r0, [pc, #104]	; (8018e44 <spi_rw+0xb0>)
 8018dda:	f7f1 fe31 	bl	800aa40 <HAL_SPI_TransmitReceive>
 8018dde:	4603      	mov	r3, r0
 8018de0:	75fb      	strb	r3, [r7, #23]
        memset(spiDummyBuf,0, u16Sz);
 8018de2:	88fb      	ldrh	r3, [r7, #6]
 8018de4:	461a      	mov	r2, r3
 8018de6:	2100      	movs	r1, #0
 8018de8:	4815      	ldr	r0, [pc, #84]	; (8018e40 <spi_rw+0xac>)
 8018dea:	f005 fac3 	bl	801e374 <memset>
 8018dee:	e00a      	b.n	8018e06 <spi_rw+0x72>
    }
    else
    {     
        status = HAL_SPI_TransmitReceive(&hspi5,pu8Mosi,pu8Miso,u16Sz,1000);
 8018df0:	88fb      	ldrh	r3, [r7, #6]
 8018df2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8018df6:	9200      	str	r2, [sp, #0]
 8018df8:	68ba      	ldr	r2, [r7, #8]
 8018dfa:	68f9      	ldr	r1, [r7, #12]
 8018dfc:	4811      	ldr	r0, [pc, #68]	; (8018e44 <spi_rw+0xb0>)
 8018dfe:	f7f1 fe1f 	bl	800aa40 <HAL_SPI_TransmitReceive>
 8018e02:	4603      	mov	r3, r0
 8018e04:	75fb      	strb	r3, [r7, #23]
    } 
    
    /* Handle Transmit/Recieve error */
    if (status != HAL_OK)
 8018e06:	7dfb      	ldrb	r3, [r7, #23]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d010      	beq.n	8018e2e <spi_rw+0x9a>
    {
        M2M_ERR("%s: HAL_SPI_TransmitReceive failed. error (%d)\n",__FUNCTION__,status);
 8018e0c:	22b2      	movs	r2, #178	; 0xb2
 8018e0e:	490e      	ldr	r1, [pc, #56]	; (8018e48 <spi_rw+0xb4>)
 8018e10:	480e      	ldr	r0, [pc, #56]	; (8018e4c <spi_rw+0xb8>)
 8018e12:	f005 fb97 	bl	801e544 <iprintf>
 8018e16:	7dfb      	ldrb	r3, [r7, #23]
 8018e18:	461a      	mov	r2, r3
 8018e1a:	490b      	ldr	r1, [pc, #44]	; (8018e48 <spi_rw+0xb4>)
 8018e1c:	480c      	ldr	r0, [pc, #48]	; (8018e50 <spi_rw+0xbc>)
 8018e1e:	f005 fb91 	bl	801e544 <iprintf>
 8018e22:	200d      	movs	r0, #13
 8018e24:	f005 fba6 	bl	801e574 <putchar>
        return status;
 8018e28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018e2c:	e003      	b.n	8018e36 <spi_rw+0xa2>
    }
    
  	spi_select_slave(false);
 8018e2e:	2000      	movs	r0, #0
 8018e30:	f7ff ff96 	bl	8018d60 <spi_select_slave>

	return M2M_SUCCESS;
 8018e34:	2300      	movs	r3, #0
}
 8018e36:	4618      	mov	r0, r3
 8018e38:	3718      	adds	r7, #24
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	bd80      	pop	{r7, pc}
 8018e3e:	bf00      	nop
 8018e40:	2001dda4 	.word	0x2001dda4
 8018e44:	2000e6b4 	.word	0x2000e6b4
 8018e48:	08029094 	.word	0x08029094
 8018e4c:	08020738 	.word	0x08020738
 8018e50:	0802074c 	.word	0x0802074c

08018e54 <nm_bus_init>:
*	@fn		nm_bus_init
*	@brief	Initialize the bus wrapper
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_bus_init(uint8 *pvinit, uint32 req_serial_number)
{
 8018e54:	b480      	push	{r7}
 8018e56:	b085      	sub	sp, #20
 8018e58:	af00      	add	r7, sp, #0
 8018e5a:	6078      	str	r0, [r7, #4]
 8018e5c:	6039      	str	r1, [r7, #0]
	sint8 result = M2M_SUCCESS;
 8018e5e:	2300      	movs	r3, #0
 8018e60:	73fb      	strb	r3, [r7, #15]
//	{
//		M2M_ERR("SPI bus Initialization error\r\n");
//	}
//
//	HAL_SPI_MspInit(&hspiWifi);
	return result;
 8018e62:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018e66:	4618      	mov	r0, r3
 8018e68:	3714      	adds	r7, #20
 8018e6a:	46bd      	mov	sp, r7
 8018e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e70:	4770      	bx	lr
	...

08018e74 <nm_bus_ioctl>:
*					Arbitrary parameter depenging on IOCTL
*	@return	M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*	@note	For SPI only, it's important to be able to send/receive at the same time
*/
sint8 nm_bus_ioctl(uint8 u8Cmd, void* pvParameter)
{
 8018e74:	b580      	push	{r7, lr}
 8018e76:	b084      	sub	sp, #16
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	4603      	mov	r3, r0
 8018e7c:	6039      	str	r1, [r7, #0]
 8018e7e:	71fb      	strb	r3, [r7, #7]
	sint8 s8Ret = 0;
 8018e80:	2300      	movs	r3, #0
 8018e82:	73fb      	strb	r3, [r7, #15]
	switch(u8Cmd)
 8018e84:	79fb      	ldrb	r3, [r7, #7]
 8018e86:	2b03      	cmp	r3, #3
 8018e88:	d10d      	bne.n	8018ea6 <nm_bus_ioctl+0x32>
	{
		case NM_BUS_IOCTL_RW: {
			tstrNmSpiRw *pstrParam = (tstrNmSpiRw *)pvParameter;
 8018e8a:	683b      	ldr	r3, [r7, #0]
 8018e8c:	60bb      	str	r3, [r7, #8]
			s8Ret = spi_rw(pstrParam->pu8InBuf, pstrParam->pu8OutBuf, pstrParam->u16Sz);
 8018e8e:	68bb      	ldr	r3, [r7, #8]
 8018e90:	6818      	ldr	r0, [r3, #0]
 8018e92:	68bb      	ldr	r3, [r7, #8]
 8018e94:	6859      	ldr	r1, [r3, #4]
 8018e96:	68bb      	ldr	r3, [r7, #8]
 8018e98:	891b      	ldrh	r3, [r3, #8]
 8018e9a:	461a      	mov	r2, r3
 8018e9c:	f7ff ff7a 	bl	8018d94 <spi_rw>
 8018ea0:	4603      	mov	r3, r0
 8018ea2:	73fb      	strb	r3, [r7, #15]
		}
		break;
 8018ea4:	e00e      	b.n	8018ec4 <nm_bus_ioctl+0x50>
		default:
			s8Ret = -1;
 8018ea6:	23ff      	movs	r3, #255	; 0xff
 8018ea8:	73fb      	strb	r3, [r7, #15]
			M2M_ERR("invalide ioclt cmd\n");
 8018eaa:	f44f 728a 	mov.w	r2, #276	; 0x114
 8018eae:	4908      	ldr	r1, [pc, #32]	; (8018ed0 <nm_bus_ioctl+0x5c>)
 8018eb0:	4808      	ldr	r0, [pc, #32]	; (8018ed4 <nm_bus_ioctl+0x60>)
 8018eb2:	f005 fb47 	bl	801e544 <iprintf>
 8018eb6:	4808      	ldr	r0, [pc, #32]	; (8018ed8 <nm_bus_ioctl+0x64>)
 8018eb8:	f005 fbe0 	bl	801e67c <puts>
 8018ebc:	200d      	movs	r0, #13
 8018ebe:	f005 fb59 	bl	801e574 <putchar>
			break;
 8018ec2:	bf00      	nop
	}

	return s8Ret;
 8018ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	3710      	adds	r7, #16
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bd80      	pop	{r7, pc}
 8018ed0:	0802909c 	.word	0x0802909c
 8018ed4:	08020738 	.word	0x08020738
 8018ed8:	0802077c 	.word	0x0802077c

08018edc <nm_bus_deinit>:
/*
*	@fn		nm_bus_deinit
*	@brief	De-initialize the bus wrapper
*/
sint8 nm_bus_deinit(void)
{
 8018edc:	b480      	push	{r7}
 8018ede:	af00      	add	r7, sp, #0
	return M2M_SUCCESS;
 8018ee0:	2300      	movs	r3, #0
}
 8018ee2:	4618      	mov	r0, r3
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eea:	4770      	bx	lr

08018eec <m2m_memcpy>:
 *
 */
#include "common/include/nm_common.h"

void m2m_memcpy(uint8 *pDst, uint8 *pSrc, uint32 sz)
{
 8018eec:	b480      	push	{r7}
 8018eee:	b085      	sub	sp, #20
 8018ef0:	af00      	add	r7, sp, #0
 8018ef2:	60f8      	str	r0, [r7, #12]
 8018ef4:	60b9      	str	r1, [r7, #8]
 8018ef6:	607a      	str	r2, [r7, #4]
    if(sz == 0) return;
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d010      	beq.n	8018f20 <m2m_memcpy+0x34>
    do
    {
        *pDst = *pSrc;
 8018efe:	68bb      	ldr	r3, [r7, #8]
 8018f00:	781a      	ldrb	r2, [r3, #0]
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	701a      	strb	r2, [r3, #0]
        pDst++;
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	3301      	adds	r3, #1
 8018f0a:	60fb      	str	r3, [r7, #12]
        pSrc++;
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	3301      	adds	r3, #1
 8018f10:	60bb      	str	r3, [r7, #8]
    } while(--sz);
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	3b01      	subs	r3, #1
 8018f16:	607b      	str	r3, [r7, #4]
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d1ef      	bne.n	8018efe <m2m_memcpy+0x12>
 8018f1e:	e000      	b.n	8018f22 <m2m_memcpy+0x36>
    if(sz == 0) return;
 8018f20:	bf00      	nop
}
 8018f22:	3714      	adds	r7, #20
 8018f24:	46bd      	mov	sp, r7
 8018f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f2a:	4770      	bx	lr

08018f2c <m2m_memset>:

    return cs;
}

void m2m_memset(uint8 *pBuf, uint8 val, uint32 sz)
{
 8018f2c:	b480      	push	{r7}
 8018f2e:	b085      	sub	sp, #20
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	60f8      	str	r0, [r7, #12]
 8018f34:	460b      	mov	r3, r1
 8018f36:	607a      	str	r2, [r7, #4]
 8018f38:	72fb      	strb	r3, [r7, #11]
    if(sz == 0) return;
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d00c      	beq.n	8018f5a <m2m_memset+0x2e>
    do
    {
        *pBuf = val;
 8018f40:	68fb      	ldr	r3, [r7, #12]
 8018f42:	7afa      	ldrb	r2, [r7, #11]
 8018f44:	701a      	strb	r2, [r3, #0]
        pBuf++;
 8018f46:	68fb      	ldr	r3, [r7, #12]
 8018f48:	3301      	adds	r3, #1
 8018f4a:	60fb      	str	r3, [r7, #12]
    } while(--sz);
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	3b01      	subs	r3, #1
 8018f50:	607b      	str	r3, [r7, #4]
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d1f3      	bne.n	8018f40 <m2m_memset+0x14>
 8018f58:	e000      	b.n	8018f5c <m2m_memset+0x30>
    if(sz == 0) return;
 8018f5a:	bf00      	nop
}
 8018f5c:	3714      	adds	r7, #20
 8018f5e:	46bd      	mov	sp, r7
 8018f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f64:	4770      	bx	lr

08018f66 <m2m_strlen>:

uint16 m2m_strlen(const uint8 *pcStr)
{
 8018f66:	b480      	push	{r7}
 8018f68:	b085      	sub	sp, #20
 8018f6a:	af00      	add	r7, sp, #0
 8018f6c:	6078      	str	r0, [r7, #4]
    uint16  u16StrLen = 0;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	81fb      	strh	r3, [r7, #14]
    while(*pcStr)
 8018f72:	e005      	b.n	8018f80 <m2m_strlen+0x1a>
    {
        u16StrLen ++;
 8018f74:	89fb      	ldrh	r3, [r7, #14]
 8018f76:	3301      	adds	r3, #1
 8018f78:	81fb      	strh	r3, [r7, #14]
        pcStr++;
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	3301      	adds	r3, #1
 8018f7e:	607b      	str	r3, [r7, #4]
    while(*pcStr)
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	781b      	ldrb	r3, [r3, #0]
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d1f5      	bne.n	8018f74 <m2m_strlen+0xe>
    }
    return u16StrLen;
 8018f88:	89fb      	ldrh	r3, [r7, #14]
}
 8018f8a:	4618      	mov	r0, r3
 8018f8c:	3714      	adds	r7, #20
 8018f8e:	46bd      	mov	sp, r7
 8018f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f94:	4770      	bx	lr

08018f96 <hexchar_2_val>:
    return s8Result;
}

/* Convert hexchar to value 0-15 */
static uint8 hexchar_2_val(uint8 ch)
{
 8018f96:	b480      	push	{r7}
 8018f98:	b083      	sub	sp, #12
 8018f9a:	af00      	add	r7, sp, #0
 8018f9c:	4603      	mov	r3, r0
 8018f9e:	71fb      	strb	r3, [r7, #7]
    ch -= 0x30;
 8018fa0:	79fb      	ldrb	r3, [r7, #7]
 8018fa2:	3b30      	subs	r3, #48	; 0x30
 8018fa4:	71fb      	strb	r3, [r7, #7]
    if(ch <= 9)
 8018fa6:	79fb      	ldrb	r3, [r7, #7]
 8018fa8:	2b09      	cmp	r3, #9
 8018faa:	d801      	bhi.n	8018fb0 <hexchar_2_val+0x1a>
        return ch;
 8018fac:	79fb      	ldrb	r3, [r7, #7]
 8018fae:	e00e      	b.n	8018fce <hexchar_2_val+0x38>
    ch |= 0x20;
 8018fb0:	79fb      	ldrb	r3, [r7, #7]
 8018fb2:	f043 0320 	orr.w	r3, r3, #32
 8018fb6:	71fb      	strb	r3, [r7, #7]
    ch -= 0x31;
 8018fb8:	79fb      	ldrb	r3, [r7, #7]
 8018fba:	3b31      	subs	r3, #49	; 0x31
 8018fbc:	71fb      	strb	r3, [r7, #7]
    if(ch <= 5)
 8018fbe:	79fb      	ldrb	r3, [r7, #7]
 8018fc0:	2b05      	cmp	r3, #5
 8018fc2:	d803      	bhi.n	8018fcc <hexchar_2_val+0x36>
        return ch + 10;
 8018fc4:	79fb      	ldrb	r3, [r7, #7]
 8018fc6:	330a      	adds	r3, #10
 8018fc8:	b2db      	uxtb	r3, r3
 8018fca:	e000      	b.n	8018fce <hexchar_2_val+0x38>
    return 0xFF;
 8018fcc:	23ff      	movs	r3, #255	; 0xff
}
 8018fce:	4618      	mov	r0, r3
 8018fd0:	370c      	adds	r7, #12
 8018fd2:	46bd      	mov	sp, r7
 8018fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fd8:	4770      	bx	lr

08018fda <hexstr_2_bytes>:

/* Convert hexstring to bytes */
sint8 hexstr_2_bytes(uint8 *pu8Out, uint8 *pu8In, uint8 u8SizeOut)
{
 8018fda:	b580      	push	{r7, lr}
 8018fdc:	b086      	sub	sp, #24
 8018fde:	af00      	add	r7, sp, #0
 8018fe0:	60f8      	str	r0, [r7, #12]
 8018fe2:	60b9      	str	r1, [r7, #8]
 8018fe4:	4613      	mov	r3, r2
 8018fe6:	71fb      	strb	r3, [r7, #7]
    while(u8SizeOut--)
 8018fe8:	e02c      	b.n	8019044 <hexstr_2_bytes+0x6a>
    {
        uint8   u8Out = hexchar_2_val(*pu8In++);
 8018fea:	68bb      	ldr	r3, [r7, #8]
 8018fec:	1c5a      	adds	r2, r3, #1
 8018fee:	60ba      	str	r2, [r7, #8]
 8018ff0:	781b      	ldrb	r3, [r3, #0]
 8018ff2:	4618      	mov	r0, r3
 8018ff4:	f7ff ffcf 	bl	8018f96 <hexchar_2_val>
 8018ff8:	4603      	mov	r3, r0
 8018ffa:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 8018ffc:	7dfb      	ldrb	r3, [r7, #23]
 8018ffe:	2b0f      	cmp	r3, #15
 8019000:	d902      	bls.n	8019008 <hexstr_2_bytes+0x2e>
            return M2M_ERR_INVALID_ARG;
 8019002:	f06f 030e 	mvn.w	r3, #14
 8019006:	e023      	b.n	8019050 <hexstr_2_bytes+0x76>
        *pu8Out = u8Out * 0x10;
 8019008:	7dfb      	ldrb	r3, [r7, #23]
 801900a:	011b      	lsls	r3, r3, #4
 801900c:	b2da      	uxtb	r2, r3
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	701a      	strb	r2, [r3, #0]
        u8Out = hexchar_2_val(*pu8In++);
 8019012:	68bb      	ldr	r3, [r7, #8]
 8019014:	1c5a      	adds	r2, r3, #1
 8019016:	60ba      	str	r2, [r7, #8]
 8019018:	781b      	ldrb	r3, [r3, #0]
 801901a:	4618      	mov	r0, r3
 801901c:	f7ff ffbb 	bl	8018f96 <hexchar_2_val>
 8019020:	4603      	mov	r3, r0
 8019022:	75fb      	strb	r3, [r7, #23]
        if(u8Out > 0xF)
 8019024:	7dfb      	ldrb	r3, [r7, #23]
 8019026:	2b0f      	cmp	r3, #15
 8019028:	d902      	bls.n	8019030 <hexstr_2_bytes+0x56>
            return M2M_ERR_INVALID_ARG;
 801902a:	f06f 030e 	mvn.w	r3, #14
 801902e:	e00f      	b.n	8019050 <hexstr_2_bytes+0x76>
        *pu8Out += u8Out;
 8019030:	68fb      	ldr	r3, [r7, #12]
 8019032:	781a      	ldrb	r2, [r3, #0]
 8019034:	7dfb      	ldrb	r3, [r7, #23]
 8019036:	4413      	add	r3, r2
 8019038:	b2da      	uxtb	r2, r3
 801903a:	68fb      	ldr	r3, [r7, #12]
 801903c:	701a      	strb	r2, [r3, #0]
        pu8Out++;
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	3301      	adds	r3, #1
 8019042:	60fb      	str	r3, [r7, #12]
    while(u8SizeOut--)
 8019044:	79fb      	ldrb	r3, [r7, #7]
 8019046:	1e5a      	subs	r2, r3, #1
 8019048:	71fa      	strb	r2, [r7, #7]
 801904a:	2b00      	cmp	r3, #0
 801904c:	d1cd      	bne.n	8018fea <hexstr_2_bytes+0x10>
    }
    return M2M_SUCCESS;
 801904e:	2300      	movs	r3, #0
}
 8019050:	4618      	mov	r0, r3
 8019052:	3718      	adds	r7, #24
 8019054:	46bd      	mov	sp, r7
 8019056:	bd80      	pop	{r7, pc}

08019058 <isr>:
static uint16 gau16HifBlacklist[] = {NEW_HIF_LIST};
#define HIF_BLACKLIST_SZ (sizeof(gau16HifBlacklist)/sizeof(gau16HifBlacklist[0]))
static uint8 gu8HifBlOffset = 0;

/*static */void isr(void)
{
 8019058:	b480      	push	{r7}
 801905a:	af00      	add	r7, sp, #0
    gstrHifCxt.u8Interrupt++;
 801905c:	4b05      	ldr	r3, [pc, #20]	; (8019074 <isr+0x1c>)
 801905e:	78db      	ldrb	r3, [r3, #3]
 8019060:	b2db      	uxtb	r3, r3
 8019062:	3301      	adds	r3, #1
 8019064:	b2da      	uxtb	r2, r3
 8019066:	4b03      	ldr	r3, [pc, #12]	; (8019074 <isr+0x1c>)
 8019068:	70da      	strb	r2, [r3, #3]
    nm_bsp_interrupt_ctrl(0);
#endif
#ifdef ETH_MODE
	os_hook_isr();
#endif
}
 801906a:	bf00      	nop
 801906c:	46bd      	mov	sp, r7
 801906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019072:	4770      	bx	lr
 8019074:	2001ded0 	.word	0x2001ded0

08019078 <hif_set_rx_done>:

static sint8 hif_set_rx_done(void)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b082      	sub	sp, #8
 801907c:	af00      	add	r7, sp, #0
    uint32 reg;
    sint8 ret = M2M_SUCCESS;
 801907e:	2300      	movs	r3, #0
 8019080:	71fb      	strb	r3, [r7, #7]
    gstrHifCxt.u8HifRXDone = 0;
 8019082:	4b1e      	ldr	r3, [pc, #120]	; (80190fc <hif_set_rx_done+0x84>)
 8019084:	2200      	movs	r2, #0
 8019086:	709a      	strb	r2, [r3, #2]
#ifdef NM_EDGE_INTERRUPT
    nm_bsp_interrupt_ctrl(1);
 8019088:	2001      	movs	r0, #1
 801908a:	f7ff fe50 	bl	8018d2e <nm_bsp_interrupt_ctrl>
#endif
    if(ISNMC3400(nmi_get_chipid())) {
 801908e:	f002 f841 	bl	801b114 <nmi_get_chipid>
 8019092:	4602      	mov	r2, r0
 8019094:	4b1a      	ldr	r3, [pc, #104]	; (8019100 <hif_set_rx_done+0x88>)
 8019096:	4013      	ands	r3, r2
 8019098:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801909c:	d10a      	bne.n	80190b4 <hif_set_rx_done+0x3c>
        ret = nm_write_reg(INTERRUPT_CORTUS_0_3000D0, 1);
 801909e:	2101      	movs	r1, #1
 80190a0:	f241 00a8 	movw	r0, #4264	; 0x10a8
 80190a4:	f002 fc52 	bl	801b94c <nm_write_reg>
 80190a8:	4603      	mov	r3, r0
 80190aa:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 80190ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	e01c      	b.n	80190ee <hif_set_rx_done+0x76>
    } else  {
        ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 80190b4:	463b      	mov	r3, r7
 80190b6:	4619      	mov	r1, r3
 80190b8:	f241 0070 	movw	r0, #4208	; 0x1070
 80190bc:	f002 fc38 	bl	801b930 <nm_read_reg_with_ret>
 80190c0:	4603      	mov	r3, r0
 80190c2:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 80190c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190c8:	2b00      	cmp	r3, #0
 80190ca:	d10f      	bne.n	80190ec <hif_set_rx_done+0x74>

        /* Set RX Done */
        reg |= NBIT1;
 80190cc:	683b      	ldr	r3, [r7, #0]
 80190ce:	f043 0302 	orr.w	r3, r3, #2
 80190d2:	603b      	str	r3, [r7, #0]
        ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0, reg);
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	4619      	mov	r1, r3
 80190d8:	f241 0070 	movw	r0, #4208	; 0x1070
 80190dc:	f002 fc36 	bl	801b94c <nm_write_reg>
 80190e0:	4603      	mov	r3, r0
 80190e2:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 80190e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80190e8:	2b00      	cmp	r3, #0
    }

#ifdef NM_LEVEL_INTERRUPT
    nm_bsp_interrupt_ctrl(1);
#endif
ERR1:
 80190ea:	e000      	b.n	80190ee <hif_set_rx_done+0x76>
        if(ret != M2M_SUCCESS)goto ERR1;
 80190ec:	bf00      	nop
    return ret;
 80190ee:	f997 3007 	ldrsb.w	r3, [r7, #7]

}
 80190f2:	4618      	mov	r0, r3
 80190f4:	3708      	adds	r7, #8
 80190f6:	46bd      	mov	sp, r7
 80190f8:	bd80      	pop	{r7, pc}
 80190fa:	bf00      	nop
 80190fc:	2001ded0 	.word	0x2001ded0
 8019100:	fff0f000 	.word	0xfff0f000

08019104 <m2m_hif_cb>:
 *                  HIF data length.
 *  @param[in]  u32Addr
 *                  HIF address.
 */
static void m2m_hif_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8019104:	b480      	push	{r7}
 8019106:	b083      	sub	sp, #12
 8019108:	af00      	add	r7, sp, #0
 801910a:	4603      	mov	r3, r0
 801910c:	603a      	str	r2, [r7, #0]
 801910e:	71fb      	strb	r3, [r7, #7]
 8019110:	460b      	mov	r3, r1
 8019112:	80bb      	strh	r3, [r7, #4]

}
 8019114:	bf00      	nop
 8019116:	370c      	adds	r7, #12
 8019118:	46bd      	mov	sp, r7
 801911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801911e:	4770      	bx	lr

08019120 <hif_chip_wake>:
 *  @fn         NMI_API sint8 hif_chip_wake(void);
 *  @brief      To Wakeup the chip.
 *  @return     The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_chip_wake(void)
{
 8019120:	b580      	push	{r7, lr}
 8019122:	b082      	sub	sp, #8
 8019124:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 8019126:	2300      	movs	r3, #0
 8019128:	71fb      	strb	r3, [r7, #7]
    if(gstrHifCxt.u8HifRXDone)
 801912a:	4b14      	ldr	r3, [pc, #80]	; (801917c <hif_chip_wake+0x5c>)
 801912c:	789b      	ldrb	r3, [r3, #2]
 801912e:	b2db      	uxtb	r3, r3
 8019130:	2b00      	cmp	r3, #0
 8019132:	d002      	beq.n	801913a <hif_chip_wake+0x1a>
    {
        /* chip already wake for the rx not done no need to send wake request */
        return ret;
 8019134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019138:	e01c      	b.n	8019174 <hif_chip_wake+0x54>
    }
    if(gstrHifCxt.u8ChipSleep == 0)
 801913a:	4b10      	ldr	r3, [pc, #64]	; (801917c <hif_chip_wake+0x5c>)
 801913c:	785b      	ldrb	r3, [r3, #1]
 801913e:	b2db      	uxtb	r3, r3
 8019140:	2b00      	cmp	r3, #0
 8019142:	d10c      	bne.n	801915e <hif_chip_wake+0x3e>
    {
        if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 8019144:	4b0d      	ldr	r3, [pc, #52]	; (801917c <hif_chip_wake+0x5c>)
 8019146:	781b      	ldrb	r3, [r3, #0]
 8019148:	b2db      	uxtb	r3, r3
 801914a:	2b00      	cmp	r3, #0
 801914c:	d007      	beq.n	801915e <hif_chip_wake+0x3e>
        {
            ret = chip_wake();
 801914e:	f002 f8e5 	bl	801b31c <chip_wake>
 8019152:	4603      	mov	r3, r0
 8019154:	71fb      	strb	r3, [r7, #7]
            if(ret != M2M_SUCCESS)goto ERR1;
 8019156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801915a:	2b00      	cmp	r3, #0
 801915c:	d107      	bne.n	801916e <hif_chip_wake+0x4e>
        }
    }
    gstrHifCxt.u8ChipSleep++;
 801915e:	4b07      	ldr	r3, [pc, #28]	; (801917c <hif_chip_wake+0x5c>)
 8019160:	785b      	ldrb	r3, [r3, #1]
 8019162:	b2db      	uxtb	r3, r3
 8019164:	3301      	adds	r3, #1
 8019166:	b2da      	uxtb	r2, r3
 8019168:	4b04      	ldr	r3, [pc, #16]	; (801917c <hif_chip_wake+0x5c>)
 801916a:	705a      	strb	r2, [r3, #1]
 801916c:	e000      	b.n	8019170 <hif_chip_wake+0x50>
            if(ret != M2M_SUCCESS)goto ERR1;
 801916e:	bf00      	nop
ERR1:
    return ret;
 8019170:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019174:	4618      	mov	r0, r3
 8019176:	3708      	adds	r7, #8
 8019178:	46bd      	mov	sp, r7
 801917a:	bd80      	pop	{r7, pc}
 801917c:	2001ded0 	.word	0x2001ded0

08019180 <hif_set_sleep_mode>:
@return
    The function SHALL return 0 for success and a negative value otherwise.
*/

void hif_set_sleep_mode(uint8 u8Pstype)
{
 8019180:	b480      	push	{r7}
 8019182:	b083      	sub	sp, #12
 8019184:	af00      	add	r7, sp, #0
 8019186:	4603      	mov	r3, r0
 8019188:	71fb      	strb	r3, [r7, #7]
    gstrHifCxt.u8ChipMode = u8Pstype;
 801918a:	4a04      	ldr	r2, [pc, #16]	; (801919c <hif_set_sleep_mode+0x1c>)
 801918c:	79fb      	ldrb	r3, [r7, #7]
 801918e:	7013      	strb	r3, [r2, #0]
}
 8019190:	bf00      	nop
 8019192:	370c      	adds	r7, #12
 8019194:	46bd      	mov	sp, r7
 8019196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919a:	4770      	bx	lr
 801919c:	2001ded0 	.word	0x2001ded0

080191a0 <hif_chip_sleep_sc>:
 *  @fn         NMI_API sint8 hif_chip_sleep_sc(void);
 *  @brief      To clear the chip sleep but keep the chip sleep
 *  @return     The function shall return ZERO for successful operation and a negative value otherwise.
 */
static sint8 hif_chip_sleep_sc(void)
{
 80191a0:	b480      	push	{r7}
 80191a2:	af00      	add	r7, sp, #0
    if(gstrHifCxt.u8ChipSleep >= 1)
 80191a4:	4b08      	ldr	r3, [pc, #32]	; (80191c8 <hif_chip_sleep_sc+0x28>)
 80191a6:	785b      	ldrb	r3, [r3, #1]
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	2b00      	cmp	r3, #0
 80191ac:	d006      	beq.n	80191bc <hif_chip_sleep_sc+0x1c>
    {
        gstrHifCxt.u8ChipSleep--;
 80191ae:	4b06      	ldr	r3, [pc, #24]	; (80191c8 <hif_chip_sleep_sc+0x28>)
 80191b0:	785b      	ldrb	r3, [r3, #1]
 80191b2:	b2db      	uxtb	r3, r3
 80191b4:	3b01      	subs	r3, #1
 80191b6:	b2da      	uxtb	r2, r3
 80191b8:	4b03      	ldr	r3, [pc, #12]	; (80191c8 <hif_chip_sleep_sc+0x28>)
 80191ba:	705a      	strb	r2, [r3, #1]
    }
    return M2M_SUCCESS;
 80191bc:	2300      	movs	r3, #0
}
 80191be:	4618      	mov	r0, r3
 80191c0:	46bd      	mov	sp, r7
 80191c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191c6:	4770      	bx	lr
 80191c8:	2001ded0 	.word	0x2001ded0

080191cc <hif_chip_sleep>:
 *  @fn         NMI_API sint8 hif_chip_sleep(void);
 *  @brief      To make the chip sleep.
 *  @return     The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_chip_sleep(void)
{
 80191cc:	b580      	push	{r7, lr}
 80191ce:	b082      	sub	sp, #8
 80191d0:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 80191d2:	2300      	movs	r3, #0
 80191d4:	71fb      	strb	r3, [r7, #7]

    if(gstrHifCxt.u8ChipSleep >= 1)
 80191d6:	4b10      	ldr	r3, [pc, #64]	; (8019218 <hif_chip_sleep+0x4c>)
 80191d8:	785b      	ldrb	r3, [r3, #1]
 80191da:	b2db      	uxtb	r3, r3
 80191dc:	2b00      	cmp	r3, #0
 80191de:	d006      	beq.n	80191ee <hif_chip_sleep+0x22>
    {
        gstrHifCxt.u8ChipSleep--;
 80191e0:	4b0d      	ldr	r3, [pc, #52]	; (8019218 <hif_chip_sleep+0x4c>)
 80191e2:	785b      	ldrb	r3, [r3, #1]
 80191e4:	b2db      	uxtb	r3, r3
 80191e6:	3b01      	subs	r3, #1
 80191e8:	b2da      	uxtb	r2, r3
 80191ea:	4b0b      	ldr	r3, [pc, #44]	; (8019218 <hif_chip_sleep+0x4c>)
 80191ec:	705a      	strb	r2, [r3, #1]
    }

    if(gstrHifCxt.u8ChipSleep == 0)
 80191ee:	4b0a      	ldr	r3, [pc, #40]	; (8019218 <hif_chip_sleep+0x4c>)
 80191f0:	785b      	ldrb	r3, [r3, #1]
 80191f2:	b2db      	uxtb	r3, r3
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d108      	bne.n	801920a <hif_chip_sleep+0x3e>
    {
        if(gstrHifCxt.u8ChipMode != M2M_NO_PS)
 80191f8:	4b07      	ldr	r3, [pc, #28]	; (8019218 <hif_chip_sleep+0x4c>)
 80191fa:	781b      	ldrb	r3, [r3, #0]
 80191fc:	b2db      	uxtb	r3, r3
 80191fe:	2b00      	cmp	r3, #0
 8019200:	d003      	beq.n	801920a <hif_chip_sleep+0x3e>
            ret = chip_sleep();
 8019202:	f002 f827 	bl	801b254 <chip_sleep>
 8019206:	4603      	mov	r3, r0
 8019208:	71fb      	strb	r3, [r7, #7]
    }
//ERR1:
    return ret;
 801920a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801920e:	4618      	mov	r0, r3
 8019210:	3708      	adds	r7, #8
 8019212:	46bd      	mov	sp, r7
 8019214:	bd80      	pop	{r7, pc}
 8019216:	bf00      	nop
 8019218:	2001ded0 	.word	0x2001ded0

0801921c <hif_init>:
 *  @param[in]  arg
 *                  Pointer to the arguments.
 *  @return     The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_init(void *arg)
{
 801921c:	b580      	push	{r7, lr}
 801921e:	b084      	sub	sp, #16
 8019220:	af00      	add	r7, sp, #0
 8019222:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 8019224:	2300      	movs	r3, #0
 8019226:	73fb      	strb	r3, [r7, #15]
    m2m_memset((uint8*)&gstrHifCxt, 0, sizeof(tstrHifContext));
 8019228:	2228      	movs	r2, #40	; 0x28
 801922a:	2100      	movs	r1, #0
 801922c:	4809      	ldr	r0, [pc, #36]	; (8019254 <hif_init+0x38>)
 801922e:	f7ff fe7d 	bl	8018f2c <m2m_memset>
    nm_bsp_register_isr(isr);
 8019232:	4809      	ldr	r0, [pc, #36]	; (8019258 <hif_init+0x3c>)
 8019234:	f7ff fd71 	bl	8018d1a <nm_bsp_register_isr>

    hif_register_cb(M2M_REQ_GROUP_HIF, m2m_hif_cb);
 8019238:	4908      	ldr	r1, [pc, #32]	; (801925c <hif_init+0x40>)
 801923a:	2003      	movs	r0, #3
 801923c:	f000 fde8 	bl	8019e10 <hif_register_cb>
    ret = hif_chip_sleep();
 8019240:	f7ff ffc4 	bl	80191cc <hif_chip_sleep>
 8019244:	4603      	mov	r3, r0
 8019246:	73fb      	strb	r3, [r7, #15]

    return ret;
 8019248:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801924c:	4618      	mov	r0, r3
 801924e:	3710      	adds	r7, #16
 8019250:	46bd      	mov	sp, r7
 8019252:	bd80      	pop	{r7, pc}
 8019254:	2001ded0 	.word	0x2001ded0
 8019258:	08019059 	.word	0x08019059
 801925c:	08019105 	.word	0x08019105

08019260 <hif_check_compatibility>:
 *  @param [in] u16HifInfo
 *                  HIF info of image to be checked.
 *  @return     The function shall return ZERO for compatible image and a negative value otherwise.
 */
sint8 hif_check_compatibility(uint16 u16HifInfo)
{
 8019260:	b480      	push	{r7}
 8019262:	b085      	sub	sp, #20
 8019264:	af00      	add	r7, sp, #0
 8019266:	4603      	mov	r3, r0
 8019268:	80fb      	strh	r3, [r7, #6]
    sint8 ret = M2M_ERR_FW_VER_MISMATCH;
 801926a:	23f3      	movs	r3, #243	; 0xf3
 801926c:	73fb      	strb	r3, [r7, #15]
    if((M2M_GET_HIF_BLOCK(u16HifInfo) == M2M_HIF_BLOCK_VALUE) && (M2M_GET_HIF_MAJOR(u16HifInfo) == M2M_HIF_MAJOR_VALUE))
 801926e:	88fb      	ldrh	r3, [r7, #6]
 8019270:	0b9b      	lsrs	r3, r3, #14
 8019272:	b29b      	uxth	r3, r3
 8019274:	b2db      	uxtb	r3, r3
 8019276:	f003 0303 	and.w	r3, r3, #3
 801927a:	2b02      	cmp	r3, #2
 801927c:	d109      	bne.n	8019292 <hif_check_compatibility+0x32>
 801927e:	88fb      	ldrh	r3, [r7, #6]
 8019280:	0a1b      	lsrs	r3, r3, #8
 8019282:	b29b      	uxth	r3, r3
 8019284:	b2db      	uxtb	r3, r3
 8019286:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801928a:	2b01      	cmp	r3, #1
 801928c:	d101      	bne.n	8019292 <hif_check_compatibility+0x32>
    {
        ret = M2M_SUCCESS;
 801928e:	2300      	movs	r3, #0
 8019290:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 8019292:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019296:	4618      	mov	r0, r3
 8019298:	3714      	adds	r7, #20
 801929a:	46bd      	mov	sp, r7
 801929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192a0:	4770      	bx	lr
	...

080192a4 <hif_enable_access>:
 *              To enable access to HIF layer, based on HIF level of Firmware.
 *              This function reads HIF level directly from a register written by Firmware.
 *  @return     The function shall return ZERO for full match operation and a negative value if operation is restricted.
 */
sint8 hif_enable_access(void)
{
 80192a4:	b580      	push	{r7, lr}
 80192a6:	b082      	sub	sp, #8
 80192a8:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 80192aa:	2300      	movs	r3, #0
 80192ac:	71fb      	strb	r3, [r7, #7]
    uint16 fw_hif_info = 0;
 80192ae:	2300      	movs	r3, #0
 80192b0:	80bb      	strh	r3, [r7, #4]

    ret = nm_get_hif_info(&fw_hif_info, NULL);
 80192b2:	1d3b      	adds	r3, r7, #4
 80192b4:	2100      	movs	r1, #0
 80192b6:	4618      	mov	r0, r3
 80192b8:	f002 fc0e 	bl	801bad8 <nm_get_hif_info>
 80192bc:	4603      	mov	r3, r0
 80192be:	71fb      	strb	r3, [r7, #7]
    if(ret == M2M_SUCCESS)
 80192c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192c4:	2b00      	cmp	r3, #0
 80192c6:	d142      	bne.n	801934e <hif_enable_access+0xaa>
    {
        ret = hif_check_compatibility(fw_hif_info);
 80192c8:	88bb      	ldrh	r3, [r7, #4]
 80192ca:	4618      	mov	r0, r3
 80192cc:	f7ff ffc8 	bl	8019260 <hif_check_compatibility>
 80192d0:	4603      	mov	r3, r0
 80192d2:	71fb      	strb	r3, [r7, #7]
        if(ret == M2M_SUCCESS)
 80192d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d129      	bne.n	8019330 <hif_enable_access+0x8c>
        {
            switch(M2M_GET_HIF_MINOR(fw_hif_info))
 80192dc:	88bb      	ldrh	r3, [r7, #4]
 80192de:	b2db      	uxtb	r3, r3
 80192e0:	2b04      	cmp	r3, #4
 80192e2:	d821      	bhi.n	8019328 <hif_enable_access+0x84>
 80192e4:	a201      	add	r2, pc, #4	; (adr r2, 80192ec <hif_enable_access+0x48>)
 80192e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80192ea:	bf00      	nop
 80192ec:	08019301 	.word	0x08019301
 80192f0:	08019309 	.word	0x08019309
 80192f4:	08019311 	.word	0x08019311
 80192f8:	08019319 	.word	0x08019319
 80192fc:	08019321 	.word	0x08019321
            {
            case 0:
                gu8HifBlOffset = 1;
 8019300:	4b16      	ldr	r3, [pc, #88]	; (801935c <hif_enable_access+0xb8>)
 8019302:	2201      	movs	r2, #1
 8019304:	701a      	strb	r2, [r3, #0]
                break;
 8019306:	e022      	b.n	801934e <hif_enable_access+0xaa>
            case 1:
                gu8HifBlOffset = 2;
 8019308:	4b14      	ldr	r3, [pc, #80]	; (801935c <hif_enable_access+0xb8>)
 801930a:	2202      	movs	r2, #2
 801930c:	701a      	strb	r2, [r3, #0]
                break;
 801930e:	e01e      	b.n	801934e <hif_enable_access+0xaa>
            case 2:
                gu8HifBlOffset = 2;
 8019310:	4b12      	ldr	r3, [pc, #72]	; (801935c <hif_enable_access+0xb8>)
 8019312:	2202      	movs	r2, #2
 8019314:	701a      	strb	r2, [r3, #0]
                break;
 8019316:	e01a      	b.n	801934e <hif_enable_access+0xaa>
            case 3:
                gu8HifBlOffset = 3;
 8019318:	4b10      	ldr	r3, [pc, #64]	; (801935c <hif_enable_access+0xb8>)
 801931a:	2203      	movs	r2, #3
 801931c:	701a      	strb	r2, [r3, #0]
                break;
 801931e:	e016      	b.n	801934e <hif_enable_access+0xaa>
            case 4:
                gu8HifBlOffset = 9;
 8019320:	4b0e      	ldr	r3, [pc, #56]	; (801935c <hif_enable_access+0xb8>)
 8019322:	2209      	movs	r2, #9
 8019324:	701a      	strb	r2, [r3, #0]
                break;
 8019326:	e012      	b.n	801934e <hif_enable_access+0xaa>
            // Additional case to be added each time hif minor increments.
            // All additional cases to be removed in the event of a hif major increment.
            // Default catches all cases in which hif minor is greater in Firmware than in Driver.
            default:
                gu8HifBlOffset = HIF_BLACKLIST_SZ;
 8019328:	4b0c      	ldr	r3, [pc, #48]	; (801935c <hif_enable_access+0xb8>)
 801932a:	2209      	movs	r2, #9
 801932c:	701a      	strb	r2, [r3, #0]
                break;
 801932e:	e00e      	b.n	801934e <hif_enable_access+0xaa>
            }
        }
        else
        {
            gu8HifBlOffset = 0;
 8019330:	4b0a      	ldr	r3, [pc, #40]	; (801935c <hif_enable_access+0xb8>)
 8019332:	2200      	movs	r2, #0
 8019334:	701a      	strb	r2, [r3, #0]
            M2M_ERR("HIF access limited to OTA Switch/Rollback only\n");
 8019336:	f44f 72c1 	mov.w	r2, #386	; 0x182
 801933a:	4909      	ldr	r1, [pc, #36]	; (8019360 <hif_enable_access+0xbc>)
 801933c:	4809      	ldr	r0, [pc, #36]	; (8019364 <hif_enable_access+0xc0>)
 801933e:	f005 f901 	bl	801e544 <iprintf>
 8019342:	4809      	ldr	r0, [pc, #36]	; (8019368 <hif_enable_access+0xc4>)
 8019344:	f005 f99a 	bl	801e67c <puts>
 8019348:	200d      	movs	r0, #13
 801934a:	f005 f913 	bl	801e574 <putchar>
        }
    }
    return ret;
 801934e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019352:	4618      	mov	r0, r3
 8019354:	3708      	adds	r7, #8
 8019356:	46bd      	mov	sp, r7
 8019358:	bd80      	pop	{r7, pc}
 801935a:	bf00      	nop
 801935c:	2001def8 	.word	0x2001def8
 8019360:	080290ac 	.word	0x080290ac
 8019364:	08020790 	.word	0x08020790
 8019368:	080207a4 	.word	0x080207a4

0801936c <hif_check_code>:
 *  @param[in]  u8Opcode
 *                  Operation ID.
 *  @return     The function shall return @ref M2M_SUCCESS for success and a negative value otherwise.
 */
sint8 hif_check_code(uint8 u8Gid, uint8 u8OpCode)
{
 801936c:	b580      	push	{r7, lr}
 801936e:	b084      	sub	sp, #16
 8019370:	af00      	add	r7, sp, #0
 8019372:	4603      	mov	r3, r0
 8019374:	460a      	mov	r2, r1
 8019376:	71fb      	strb	r3, [r7, #7]
 8019378:	4613      	mov	r3, r2
 801937a:	71bb      	strb	r3, [r7, #6]
    uint8 u8BlId;
    uint16 u16HifCode = ((uint16)u8Gid<<8) | u8OpCode;
 801937c:	79fb      	ldrb	r3, [r7, #7]
 801937e:	021b      	lsls	r3, r3, #8
 8019380:	b21a      	sxth	r2, r3
 8019382:	79bb      	ldrb	r3, [r7, #6]
 8019384:	b21b      	sxth	r3, r3
 8019386:	4313      	orrs	r3, r2
 8019388:	b21b      	sxth	r3, r3
 801938a:	81bb      	strh	r3, [r7, #12]
    if((u16HifCode == HIFCODE_OTA_RB) || (u16HifCode == HIFCODE_OTA_SW))
 801938c:	89bb      	ldrh	r3, [r7, #12]
 801938e:	f240 4269 	movw	r2, #1129	; 0x469
 8019392:	4293      	cmp	r3, r2
 8019394:	d003      	beq.n	801939e <hif_check_code+0x32>
 8019396:	89bb      	ldrh	r3, [r7, #12]
 8019398:	f5b3 6f8d 	cmp.w	r3, #1128	; 0x468
 801939c:	d101      	bne.n	80193a2 <hif_check_code+0x36>
    {
        return M2M_SUCCESS;
 801939e:	2300      	movs	r3, #0
 80193a0:	e033      	b.n	801940a <hif_check_code+0x9e>
    }
    if(gu8HifBlOffset == 0)
 80193a2:	4b1c      	ldr	r3, [pc, #112]	; (8019414 <hif_check_code+0xa8>)
 80193a4:	781b      	ldrb	r3, [r3, #0]
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d10e      	bne.n	80193c8 <hif_check_code+0x5c>
    {
        M2M_ERR("HIF OTA rb/sw only\n");
 80193aa:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80193ae:	491a      	ldr	r1, [pc, #104]	; (8019418 <hif_check_code+0xac>)
 80193b0:	481a      	ldr	r0, [pc, #104]	; (801941c <hif_check_code+0xb0>)
 80193b2:	f005 f8c7 	bl	801e544 <iprintf>
 80193b6:	481a      	ldr	r0, [pc, #104]	; (8019420 <hif_check_code+0xb4>)
 80193b8:	f005 f960 	bl	801e67c <puts>
 80193bc:	200d      	movs	r0, #13
 80193be:	f005 f8d9 	bl	801e574 <putchar>
        return M2M_ERR_SEND;
 80193c2:	f04f 33ff 	mov.w	r3, #4294967295
 80193c6:	e020      	b.n	801940a <hif_check_code+0x9e>
    }
    for(u8BlId = gu8HifBlOffset; u8BlId < HIF_BLACKLIST_SZ; u8BlId++)
 80193c8:	4b12      	ldr	r3, [pc, #72]	; (8019414 <hif_check_code+0xa8>)
 80193ca:	781b      	ldrb	r3, [r3, #0]
 80193cc:	73fb      	strb	r3, [r7, #15]
 80193ce:	e018      	b.n	8019402 <hif_check_code+0x96>
    {
        if(u16HifCode == gau16HifBlacklist[u8BlId])
 80193d0:	7bfb      	ldrb	r3, [r7, #15]
 80193d2:	4a14      	ldr	r2, [pc, #80]	; (8019424 <hif_check_code+0xb8>)
 80193d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80193d8:	89ba      	ldrh	r2, [r7, #12]
 80193da:	429a      	cmp	r2, r3
 80193dc:	d10e      	bne.n	80193fc <hif_check_code+0x90>
        {
            M2M_ERR("HIF message unsupported\n");
 80193de:	f240 12a3 	movw	r2, #419	; 0x1a3
 80193e2:	490d      	ldr	r1, [pc, #52]	; (8019418 <hif_check_code+0xac>)
 80193e4:	480d      	ldr	r0, [pc, #52]	; (801941c <hif_check_code+0xb0>)
 80193e6:	f005 f8ad 	bl	801e544 <iprintf>
 80193ea:	480f      	ldr	r0, [pc, #60]	; (8019428 <hif_check_code+0xbc>)
 80193ec:	f005 f946 	bl	801e67c <puts>
 80193f0:	200d      	movs	r0, #13
 80193f2:	f005 f8bf 	bl	801e574 <putchar>
            return M2M_ERR_SEND;
 80193f6:	f04f 33ff 	mov.w	r3, #4294967295
 80193fa:	e006      	b.n	801940a <hif_check_code+0x9e>
    for(u8BlId = gu8HifBlOffset; u8BlId < HIF_BLACKLIST_SZ; u8BlId++)
 80193fc:	7bfb      	ldrb	r3, [r7, #15]
 80193fe:	3301      	adds	r3, #1
 8019400:	73fb      	strb	r3, [r7, #15]
 8019402:	7bfb      	ldrb	r3, [r7, #15]
 8019404:	2b08      	cmp	r3, #8
 8019406:	d9e3      	bls.n	80193d0 <hif_check_code+0x64>
        }
    }
    return M2M_SUCCESS;
 8019408:	2300      	movs	r3, #0
}
 801940a:	4618      	mov	r0, r3
 801940c:	3710      	adds	r7, #16
 801940e:	46bd      	mov	sp, r7
 8019410:	bd80      	pop	{r7, pc}
 8019412:	bf00      	nop
 8019414:	2001def8 	.word	0x2001def8
 8019418:	080290c0 	.word	0x080290c0
 801941c:	08020790 	.word	0x08020790
 8019420:	080207d4 	.word	0x080207d4
 8019424:	20000034 	.word	0x20000034
 8019428:	080207e8 	.word	0x080207e8

0801942c <hif_send>:
 *                  Packet buffer size (including the HIF header).
 *   @return    The function shall return @ref M2M_SUCCESS for successful operation and a negative value otherwise.
 */
sint8 hif_send(uint8 u8Gid, uint8 u8Opcode, uint8 *pu8CtrlBuf, uint16 u16CtrlBufSize,
               uint8 *pu8DataBuf, uint16 u16DataSize, uint16 u16DataOffset)
{
 801942c:	b580      	push	{r7, lr}
 801942e:	b08a      	sub	sp, #40	; 0x28
 8019430:	af00      	add	r7, sp, #0
 8019432:	603a      	str	r2, [r7, #0]
 8019434:	461a      	mov	r2, r3
 8019436:	4603      	mov	r3, r0
 8019438:	71fb      	strb	r3, [r7, #7]
 801943a:	460b      	mov	r3, r1
 801943c:	71bb      	strb	r3, [r7, #6]
 801943e:	4613      	mov	r3, r2
 8019440:	80bb      	strh	r3, [r7, #4]
    sint8       ret = M2M_ERR_SEND;
 8019442:	23ff      	movs	r3, #255	; 0xff
 8019444:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    tstrHifHdr  strHif;
    uint32      u32CtrlDataGap = u16DataOffset;
 8019448:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801944a:	623b      	str	r3, [r7, #32]

    strHif.u8Opcode     = u8Opcode&(~NBIT7);
 801944c:	79bb      	ldrb	r3, [r7, #6]
 801944e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019452:	b2db      	uxtb	r3, r3
 8019454:	777b      	strb	r3, [r7, #29]
    strHif.u8Gid        = u8Gid;
 8019456:	79fb      	ldrb	r3, [r7, #7]
 8019458:	773b      	strb	r3, [r7, #28]
    strHif.u16Length    = M2M_HIF_HDR_OFFSET;
 801945a:	2308      	movs	r3, #8
 801945c:	83fb      	strh	r3, [r7, #30]

    if(pu8CtrlBuf != NULL)
 801945e:	683b      	ldr	r3, [r7, #0]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d01e      	beq.n	80194a2 <hif_send+0x76>
    {
        if(u16CtrlBufSize > M2M_HIF_MAX_PACKET_SIZE-M2M_HIF_HDR_OFFSET)
 8019464:	88bb      	ldrh	r3, [r7, #4]
 8019466:	f240 6234 	movw	r2, #1588	; 0x634
 801946a:	4293      	cmp	r3, r2
 801946c:	d910      	bls.n	8019490 <hif_send+0x64>
        {
            M2M_ERR("HIF %s (%dB) exceeds max (%dB)\n", "Ctrl", u16CtrlBufSize, M2M_HIF_MAX_PACKET_SIZE-M2M_HIF_HDR_OFFSET);
 801946e:	f44f 72e7 	mov.w	r2, #462	; 0x1ce
 8019472:	49b2      	ldr	r1, [pc, #712]	; (801973c <hif_send+0x310>)
 8019474:	48b2      	ldr	r0, [pc, #712]	; (8019740 <hif_send+0x314>)
 8019476:	f005 f865 	bl	801e544 <iprintf>
 801947a:	88ba      	ldrh	r2, [r7, #4]
 801947c:	f240 6334 	movw	r3, #1588	; 0x634
 8019480:	49b0      	ldr	r1, [pc, #704]	; (8019744 <hif_send+0x318>)
 8019482:	48b1      	ldr	r0, [pc, #708]	; (8019748 <hif_send+0x31c>)
 8019484:	f005 f85e 	bl	801e544 <iprintf>
 8019488:	200d      	movs	r0, #13
 801948a:	f005 f873 	bl	801e574 <putchar>
            goto ERR2;
 801948e:	e1b5      	b.n	80197fc <hif_send+0x3d0>
        }
        strHif.u16Length += u16CtrlBufSize;
 8019490:	8bfa      	ldrh	r2, [r7, #30]
 8019492:	88bb      	ldrh	r3, [r7, #4]
 8019494:	4413      	add	r3, r2
 8019496:	b29b      	uxth	r3, r3
 8019498:	83fb      	strh	r3, [r7, #30]
        u32CtrlDataGap -= u16CtrlBufSize;
 801949a:	88bb      	ldrh	r3, [r7, #4]
 801949c:	6a3a      	ldr	r2, [r7, #32]
 801949e:	1ad3      	subs	r3, r2, r3
 80194a0:	623b      	str	r3, [r7, #32]
    }
    if(pu8DataBuf != NULL)
 80194a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d022      	beq.n	80194ee <hif_send+0xc2>
    {
        if((uint32)u16DataOffset + u16DataSize > M2M_HIF_MAX_PACKET_SIZE-M2M_HIF_HDR_OFFSET)
 80194a8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80194aa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80194ac:	4413      	add	r3, r2
 80194ae:	f240 6234 	movw	r2, #1588	; 0x634
 80194b2:	4293      	cmp	r3, r2
 80194b4:	d912      	bls.n	80194dc <hif_send+0xb0>
        {
            M2M_ERR("HIF %s (%luB) exceeds max (%luB)\n", "Data", (uint32)u16DataOffset + u16DataSize, (uint32)M2M_HIF_MAX_PACKET_SIZE-M2M_HIF_HDR_OFFSET);
 80194b6:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 80194ba:	49a0      	ldr	r1, [pc, #640]	; (801973c <hif_send+0x310>)
 80194bc:	48a0      	ldr	r0, [pc, #640]	; (8019740 <hif_send+0x314>)
 80194be:	f005 f841 	bl	801e544 <iprintf>
 80194c2:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80194c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80194c6:	441a      	add	r2, r3
 80194c8:	f240 6334 	movw	r3, #1588	; 0x634
 80194cc:	499f      	ldr	r1, [pc, #636]	; (801974c <hif_send+0x320>)
 80194ce:	48a0      	ldr	r0, [pc, #640]	; (8019750 <hif_send+0x324>)
 80194d0:	f005 f838 	bl	801e544 <iprintf>
 80194d4:	200d      	movs	r0, #13
 80194d6:	f005 f84d 	bl	801e574 <putchar>
            goto ERR2;
 80194da:	e18f      	b.n	80197fc <hif_send+0x3d0>
        }
        strHif.u16Length += u32CtrlDataGap + u16DataSize;
 80194dc:	8bfa      	ldrh	r2, [r7, #30]
 80194de:	6a3b      	ldr	r3, [r7, #32]
 80194e0:	b299      	uxth	r1, r3
 80194e2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80194e4:	440b      	add	r3, r1
 80194e6:	b29b      	uxth	r3, r3
 80194e8:	4413      	add	r3, r2
 80194ea:	b29b      	uxth	r3, r3
 80194ec:	83fb      	strh	r3, [r7, #30]
    }

    ret = hif_check_code(strHif.u8Gid, strHif.u8Opcode);
 80194ee:	7f3b      	ldrb	r3, [r7, #28]
 80194f0:	7f7a      	ldrb	r2, [r7, #29]
 80194f2:	4611      	mov	r1, r2
 80194f4:	4618      	mov	r0, r3
 80194f6:	f7ff ff39 	bl	801936c <hif_check_code>
 80194fa:	4603      	mov	r3, r0
 80194fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if(ret != M2M_SUCCESS)
 8019500:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019504:	2b00      	cmp	r3, #0
 8019506:	f040 8178 	bne.w	80197fa <hif_send+0x3ce>
    {
        goto ERR2;
    }

    if(strHif.u16Length <= M2M_HIF_MAX_PACKET_SIZE)
 801950a:	8bfb      	ldrh	r3, [r7, #30]
 801950c:	f240 623c 	movw	r2, #1596	; 0x63c
 8019510:	4293      	cmp	r3, r2
 8019512:	f200 8146 	bhi.w	80197a2 <hif_send+0x376>
    {
        ret = hif_chip_wake();
 8019516:	f7ff fe03 	bl	8019120 <hif_chip_wake>
 801951a:	4603      	mov	r3, r0
 801951c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if(ret == M2M_SUCCESS)
 8019520:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019524:	2b00      	cmp	r3, #0
 8019526:	f040 812f 	bne.w	8019788 <hif_send+0x35c>
        {
            volatile uint32 reg, dma_addr = 0;
 801952a:	2300      	movs	r3, #0
 801952c:	617b      	str	r3, [r7, #20]
            volatile uint16 cnt = 0;
 801952e:	2300      	movs	r3, #0
 8019530:	827b      	strh	r3, [r7, #18]

            reg = 0UL;
 8019532:	2300      	movs	r3, #0
 8019534:	61bb      	str	r3, [r7, #24]
            reg |= (uint32)u8Gid;
 8019536:	79fa      	ldrb	r2, [r7, #7]
 8019538:	69bb      	ldr	r3, [r7, #24]
 801953a:	4313      	orrs	r3, r2
 801953c:	61bb      	str	r3, [r7, #24]
            reg |= ((uint32)u8Opcode<<8);
 801953e:	79bb      	ldrb	r3, [r7, #6]
 8019540:	021a      	lsls	r2, r3, #8
 8019542:	69bb      	ldr	r3, [r7, #24]
 8019544:	4313      	orrs	r3, r2
 8019546:	61bb      	str	r3, [r7, #24]
            reg |= ((uint32)strHif.u16Length<<16);
 8019548:	8bfb      	ldrh	r3, [r7, #30]
 801954a:	041a      	lsls	r2, r3, #16
 801954c:	69bb      	ldr	r3, [r7, #24]
 801954e:	4313      	orrs	r3, r2
 8019550:	61bb      	str	r3, [r7, #24]
            ret = nm_write_reg(NMI_STATE_REG, reg);
 8019552:	69bb      	ldr	r3, [r7, #24]
 8019554:	4619      	mov	r1, r3
 8019556:	f241 008c 	movw	r0, #4236	; 0x108c
 801955a:	f002 f9f7 	bl	801b94c <nm_write_reg>
 801955e:	4603      	mov	r3, r0
 8019560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if(M2M_SUCCESS != ret) goto ERR1;
 8019564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019568:	2b00      	cmp	r3, #0
 801956a:	f040 8136 	bne.w	80197da <hif_send+0x3ae>

            reg = 0UL;
 801956e:	2300      	movs	r3, #0
 8019570:	61bb      	str	r3, [r7, #24]
            reg |= NBIT1;
 8019572:	69bb      	ldr	r3, [r7, #24]
 8019574:	f043 0302 	orr.w	r3, r3, #2
 8019578:	61bb      	str	r3, [r7, #24]
            ret = nm_write_reg(WIFI_HOST_RCV_CTRL_2, reg);
 801957a:	69bb      	ldr	r3, [r7, #24]
 801957c:	4619      	mov	r1, r3
 801957e:	f241 0078 	movw	r0, #4216	; 0x1078
 8019582:	f002 f9e3 	bl	801b94c <nm_write_reg>
 8019586:	4603      	mov	r3, r0
 8019588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            if(M2M_SUCCESS != ret) goto ERR1;
 801958c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019590:	2b00      	cmp	r3, #0
 8019592:	f040 8124 	bne.w	80197de <hif_send+0x3b2>


            if(ISNMC3400(nmi_get_chipid())) {
 8019596:	f001 fdbd 	bl	801b114 <nmi_get_chipid>
 801959a:	4602      	mov	r2, r0
 801959c:	4b6d      	ldr	r3, [pc, #436]	; (8019754 <hif_send+0x328>)
 801959e:	4013      	ands	r3, r2
 80195a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80195a4:	d10c      	bne.n	80195c0 <hif_send+0x194>

                ret = nm_write_reg(INTERRUPT_CORTUS_1_3000D0, 1);
 80195a6:	2101      	movs	r1, #1
 80195a8:	f241 00ac 	movw	r0, #4268	; 0x10ac
 80195ac:	f002 f9ce 	bl	801b94c <nm_write_reg>
 80195b0:	4603      	mov	r3, r0
 80195b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if(M2M_SUCCESS != ret) goto ERR1;
 80195b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80195ba:	2b00      	cmp	r3, #0
 80195bc:	f040 8111 	bne.w	80197e2 <hif_send+0x3b6>
            }

            dma_addr = 0;
 80195c0:	2300      	movs	r3, #0
 80195c2:	617b      	str	r3, [r7, #20]

            for(cnt = 0; cnt < 1000*5; cnt ++)
 80195c4:	2300      	movs	r3, #0
 80195c6:	827b      	strh	r3, [r7, #18]
 80195c8:	e03d      	b.n	8019646 <hif_send+0x21a>
            {
                ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_2, (uint32 *)&reg);
 80195ca:	f107 0318 	add.w	r3, r7, #24
 80195ce:	4619      	mov	r1, r3
 80195d0:	f241 0078 	movw	r0, #4216	; 0x1078
 80195d4:	f002 f9ac 	bl	801b930 <nm_read_reg_with_ret>
 80195d8:	4603      	mov	r3, r0
 80195da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if(ret != M2M_SUCCESS) break;
 80195de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d136      	bne.n	8019654 <hif_send+0x228>
                /*
                 * If it takes too long to get a response, the slow down to
                 * avoid back-to-back register read operations.
                 */
                if(cnt >= 1000) {
 80195e6:	8a7b      	ldrh	r3, [r7, #18]
 80195e8:	b29b      	uxth	r3, r3
 80195ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80195ee:	d310      	bcc.n	8019612 <hif_send+0x1e6>
                    if(cnt == 1000) {
 80195f0:	8a7b      	ldrh	r3, [r7, #18]
 80195f2:	b29b      	uxth	r3, r3
 80195f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80195f8:	d108      	bne.n	801960c <hif_send+0x1e0>
                        M2M_INFO("Slowing down...\n");
 80195fa:	4857      	ldr	r0, [pc, #348]	; (8019758 <hif_send+0x32c>)
 80195fc:	f004 ffa2 	bl	801e544 <iprintf>
 8019600:	4856      	ldr	r0, [pc, #344]	; (801975c <hif_send+0x330>)
 8019602:	f005 f83b 	bl	801e67c <puts>
 8019606:	200d      	movs	r0, #13
 8019608:	f004 ffb4 	bl	801e574 <putchar>
                    }
                    nm_bsp_sleep(5);
 801960c:	2005      	movs	r0, #5
 801960e:	f7ff fb79 	bl	8018d04 <nm_bsp_sleep>
                }
                if(!(reg & NBIT1))
 8019612:	69bb      	ldr	r3, [r7, #24]
 8019614:	f003 0302 	and.w	r3, r3, #2
 8019618:	2b00      	cmp	r3, #0
 801961a:	d10f      	bne.n	801963c <hif_send+0x210>
                {
                    ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_4, (uint32 *)&dma_addr);
 801961c:	f107 0314 	add.w	r3, r7, #20
 8019620:	4619      	mov	r1, r3
 8019622:	484f      	ldr	r0, [pc, #316]	; (8019760 <hif_send+0x334>)
 8019624:	f002 f984 	bl	801b930 <nm_read_reg_with_ret>
 8019628:	4603      	mov	r3, r0
 801962a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if(ret != M2M_SUCCESS) {
 801962e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019632:	2b00      	cmp	r3, #0
 8019634:	d010      	beq.n	8019658 <hif_send+0x22c>
                        /*in case of read error clear the DMA address and return error*/
                        dma_addr = 0;
 8019636:	2300      	movs	r3, #0
 8019638:	617b      	str	r3, [r7, #20]
                        goto ERR1;
 801963a:	e0db      	b.n	80197f4 <hif_send+0x3c8>
            for(cnt = 0; cnt < 1000*5; cnt ++)
 801963c:	8a7b      	ldrh	r3, [r7, #18]
 801963e:	b29b      	uxth	r3, r3
 8019640:	3301      	adds	r3, #1
 8019642:	b29b      	uxth	r3, r3
 8019644:	827b      	strh	r3, [r7, #18]
 8019646:	8a7b      	ldrh	r3, [r7, #18]
 8019648:	b29b      	uxth	r3, r3
 801964a:	f241 3287 	movw	r2, #4999	; 0x1387
 801964e:	4293      	cmp	r3, r2
 8019650:	d9bb      	bls.n	80195ca <hif_send+0x19e>
 8019652:	e002      	b.n	801965a <hif_send+0x22e>
                if(ret != M2M_SUCCESS) break;
 8019654:	bf00      	nop
 8019656:	e000      	b.n	801965a <hif_send+0x22e>
                    }
                    /*in case of success break */
                    break;
 8019658:	bf00      	nop
                }
            }

            if(dma_addr != 0)
 801965a:	697b      	ldr	r3, [r7, #20]
 801965c:	2b00      	cmp	r3, #0
 801965e:	f000 8081 	beq.w	8019764 <hif_send+0x338>
            {
                volatile uint32 u32CurrAddr;
                u32CurrAddr = dma_addr;
 8019662:	697b      	ldr	r3, [r7, #20]
 8019664:	60fb      	str	r3, [r7, #12]
                strHif.u16Length=NM_BSP_B_L_16(strHif.u16Length);
 8019666:	8bfb      	ldrh	r3, [r7, #30]
 8019668:	83fb      	strh	r3, [r7, #30]
                M2M_DBG("Writing into %lx %ld\n", dma_addr, strHif.u16Length);
                ret = nm_write_block(u32CurrAddr, (uint8 *)&strHif, M2M_HIF_HDR_OFFSET);
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	f107 011c 	add.w	r1, r7, #28
 8019670:	2208      	movs	r2, #8
 8019672:	4618      	mov	r0, r3
 8019674:	f002 f9e6 	bl	801ba44 <nm_write_block>
 8019678:	4603      	mov	r3, r0
 801967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if(M2M_SUCCESS != ret) goto ERR1;
 801967e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019682:	2b00      	cmp	r3, #0
 8019684:	f040 80af 	bne.w	80197e6 <hif_send+0x3ba>
                u32CurrAddr += M2M_HIF_HDR_OFFSET;
 8019688:	68fb      	ldr	r3, [r7, #12]
 801968a:	3308      	adds	r3, #8
 801968c:	60fb      	str	r3, [r7, #12]
                if(pu8CtrlBuf != NULL)
 801968e:	683b      	ldr	r3, [r7, #0]
 8019690:	2b00      	cmp	r3, #0
 8019692:	d011      	beq.n	80196b8 <hif_send+0x28c>
                {
                    ret = nm_write_block(u32CurrAddr, pu8CtrlBuf, u16CtrlBufSize);
 8019694:	68fb      	ldr	r3, [r7, #12]
 8019696:	88ba      	ldrh	r2, [r7, #4]
 8019698:	6839      	ldr	r1, [r7, #0]
 801969a:	4618      	mov	r0, r3
 801969c:	f002 f9d2 	bl	801ba44 <nm_write_block>
 80196a0:	4603      	mov	r3, r0
 80196a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if(M2M_SUCCESS != ret) goto ERR1;
 80196a6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80196aa:	2b00      	cmp	r3, #0
 80196ac:	f040 809d 	bne.w	80197ea <hif_send+0x3be>
                    u32CurrAddr += u16CtrlBufSize;
 80196b0:	88ba      	ldrh	r2, [r7, #4]
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	4413      	add	r3, r2
 80196b6:	60fb      	str	r3, [r7, #12]
                }
                if(pu8DataBuf != NULL)
 80196b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d015      	beq.n	80196ea <hif_send+0x2be>
                {
                    u32CurrAddr += u32CtrlDataGap;
 80196be:	68fa      	ldr	r2, [r7, #12]
 80196c0:	6a3b      	ldr	r3, [r7, #32]
 80196c2:	4413      	add	r3, r2
 80196c4:	60fb      	str	r3, [r7, #12]
                    ret = nm_write_block(u32CurrAddr, pu8DataBuf, u16DataSize);
 80196c6:	68fb      	ldr	r3, [r7, #12]
 80196c8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80196ca:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80196cc:	4618      	mov	r0, r3
 80196ce:	f002 f9b9 	bl	801ba44 <nm_write_block>
 80196d2:	4603      	mov	r3, r0
 80196d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if(M2M_SUCCESS != ret) goto ERR1;
 80196d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80196dc:	2b00      	cmp	r3, #0
 80196de:	f040 8086 	bne.w	80197ee <hif_send+0x3c2>
                    u32CurrAddr += u16DataSize;
 80196e2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80196e4:	68fb      	ldr	r3, [r7, #12]
 80196e6:	4413      	add	r3, r2
 80196e8:	60fb      	str	r3, [r7, #12]
                }

                reg = dma_addr << 2;
 80196ea:	697b      	ldr	r3, [r7, #20]
 80196ec:	009b      	lsls	r3, r3, #2
 80196ee:	61bb      	str	r3, [r7, #24]

                /* Following line of code is to generate the interrupt which is not strictly needed for 3400,
                 * but has no noticeable side effects
                 */
                reg |= NBIT1;
 80196f0:	69bb      	ldr	r3, [r7, #24]
 80196f2:	f043 0302 	orr.w	r3, r3, #2
 80196f6:	61bb      	str	r3, [r7, #24]
                ret = nm_write_reg(WIFI_HOST_RCV_CTRL_3, reg);
 80196f8:	69bb      	ldr	r3, [r7, #24]
 80196fa:	4619      	mov	r1, r3
 80196fc:	f241 006c 	movw	r0, #4204	; 0x106c
 8019700:	f002 f924 	bl	801b94c <nm_write_reg>
 8019704:	4603      	mov	r3, r0
 8019706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                if(M2M_SUCCESS != ret) goto ERR1;
 801970a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801970e:	2b00      	cmp	r3, #0
 8019710:	d16f      	bne.n	80197f2 <hif_send+0x3c6>

                if(ISNMC3400(nmi_get_chipid())) {
 8019712:	f001 fcff 	bl	801b114 <nmi_get_chipid>
 8019716:	4602      	mov	r2, r0
 8019718:	4b0e      	ldr	r3, [pc, #56]	; (8019754 <hif_send+0x328>)
 801971a:	4013      	ands	r3, r2
 801971c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8019720:	d153      	bne.n	80197ca <hif_send+0x39e>
                    ret = nm_write_reg(INTERRUPT_CORTUS_2_3000D0, 1);
 8019722:	2101      	movs	r1, #1
 8019724:	f241 00b0 	movw	r0, #4272	; 0x10b0
 8019728:	f002 f910 	bl	801b94c <nm_write_reg>
 801972c:	4603      	mov	r3, r0
 801972e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    if(M2M_SUCCESS != ret) goto ERR1;
 8019732:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8019736:	2b00      	cmp	r3, #0
 8019738:	d047      	beq.n	80197ca <hif_send+0x39e>
 801973a:	e05b      	b.n	80197f4 <hif_send+0x3c8>
 801973c:	080290d0 	.word	0x080290d0
 8019740:	08020790 	.word	0x08020790
 8019744:	08020800 	.word	0x08020800
 8019748:	08020808 	.word	0x08020808
 801974c:	08020828 	.word	0x08020828
 8019750:	08020830 	.word	0x08020830
 8019754:	fff0f000 	.word	0xfff0f000
 8019758:	08020854 	.word	0x08020854
 801975c:	08020860 	.word	0x08020860
 8019760:	00150400 	.word	0x00150400
                }
            }
            else
            {
                ret = hif_chip_sleep();
 8019764:	f7ff fd32 	bl	80191cc <hif_chip_sleep>
 8019768:	4603      	mov	r3, r0
 801976a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                M2M_INFO("Failed to alloc rx size\n");
 801976e:	4826      	ldr	r0, [pc, #152]	; (8019808 <hif_send+0x3dc>)
 8019770:	f004 fee8 	bl	801e544 <iprintf>
 8019774:	4825      	ldr	r0, [pc, #148]	; (801980c <hif_send+0x3e0>)
 8019776:	f004 ff81 	bl	801e67c <puts>
 801977a:	200d      	movs	r0, #13
 801977c:	f004 fefa 	bl	801e574 <putchar>
                ret =  M2M_ERR_MEM_ALLOC;
 8019780:	23fd      	movs	r3, #253	; 0xfd
 8019782:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                goto ERR2;
 8019786:	e039      	b.n	80197fc <hif_send+0x3d0>
            }
        }
        else
        {
            M2M_ERR("(HIF)Failed to wakeup the chip\n");
 8019788:	f240 224b 	movw	r2, #587	; 0x24b
 801978c:	4920      	ldr	r1, [pc, #128]	; (8019810 <hif_send+0x3e4>)
 801978e:	4821      	ldr	r0, [pc, #132]	; (8019814 <hif_send+0x3e8>)
 8019790:	f004 fed8 	bl	801e544 <iprintf>
 8019794:	4820      	ldr	r0, [pc, #128]	; (8019818 <hif_send+0x3ec>)
 8019796:	f004 ff71 	bl	801e67c <puts>
 801979a:	200d      	movs	r0, #13
 801979c:	f004 feea 	bl	801e574 <putchar>
            goto ERR2;
 80197a0:	e02c      	b.n	80197fc <hif_send+0x3d0>
        }
    }
    else
    {
        M2M_ERR("HIF message length (%d) exceeds max length (%d)\n", strHif.u16Length, M2M_HIF_MAX_PACKET_SIZE);
 80197a2:	f240 2251 	movw	r2, #593	; 0x251
 80197a6:	491a      	ldr	r1, [pc, #104]	; (8019810 <hif_send+0x3e4>)
 80197a8:	481a      	ldr	r0, [pc, #104]	; (8019814 <hif_send+0x3e8>)
 80197aa:	f004 fecb 	bl	801e544 <iprintf>
 80197ae:	8bfb      	ldrh	r3, [r7, #30]
 80197b0:	f240 623c 	movw	r2, #1596	; 0x63c
 80197b4:	4619      	mov	r1, r3
 80197b6:	4819      	ldr	r0, [pc, #100]	; (801981c <hif_send+0x3f0>)
 80197b8:	f004 fec4 	bl	801e544 <iprintf>
 80197bc:	200d      	movs	r0, #13
 80197be:	f004 fed9 	bl	801e574 <putchar>
        ret = M2M_ERR_SEND;
 80197c2:	23ff      	movs	r3, #255	; 0xff
 80197c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto ERR2;
 80197c8:	e018      	b.n	80197fc <hif_send+0x3d0>
    }
    /*actual sleep ret = M2M_SUCCESS*/
    ret = hif_chip_sleep();
 80197ca:	f7ff fcff 	bl	80191cc <hif_chip_sleep>
 80197ce:	4603      	mov	r3, r0
 80197d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    return ret;
 80197d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80197d8:	e012      	b.n	8019800 <hif_send+0x3d4>
            if(M2M_SUCCESS != ret) goto ERR1;
 80197da:	bf00      	nop
 80197dc:	e00a      	b.n	80197f4 <hif_send+0x3c8>
            if(M2M_SUCCESS != ret) goto ERR1;
 80197de:	bf00      	nop
 80197e0:	e008      	b.n	80197f4 <hif_send+0x3c8>
                if(M2M_SUCCESS != ret) goto ERR1;
 80197e2:	bf00      	nop
 80197e4:	e006      	b.n	80197f4 <hif_send+0x3c8>
                if(M2M_SUCCESS != ret) goto ERR1;
 80197e6:	bf00      	nop
 80197e8:	e004      	b.n	80197f4 <hif_send+0x3c8>
                    if(M2M_SUCCESS != ret) goto ERR1;
 80197ea:	bf00      	nop
 80197ec:	e002      	b.n	80197f4 <hif_send+0x3c8>
                    if(M2M_SUCCESS != ret) goto ERR1;
 80197ee:	bf00      	nop
 80197f0:	e000      	b.n	80197f4 <hif_send+0x3c8>
                if(M2M_SUCCESS != ret) goto ERR1;
 80197f2:	bf00      	nop
ERR1:
    /*reset the count but no actual sleep as it already bus error*/
    hif_chip_sleep_sc();
 80197f4:	f7ff fcd4 	bl	80191a0 <hif_chip_sleep_sc>
 80197f8:	e000      	b.n	80197fc <hif_send+0x3d0>
        goto ERR2;
 80197fa:	bf00      	nop
ERR2:
    /*logical error*/
    return ret;
 80197fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8019800:	4618      	mov	r0, r3
 8019802:	3728      	adds	r7, #40	; 0x28
 8019804:	46bd      	mov	sp, r7
 8019806:	bd80      	pop	{r7, pc}
 8019808:	08020854 	.word	0x08020854
 801980c:	08020870 	.word	0x08020870
 8019810:	080290d0 	.word	0x080290d0
 8019814:	08020790 	.word	0x08020790
 8019818:	08020888 	.word	0x08020888
 801981c:	080208a8 	.word	0x080208a8

08019820 <hif_isr>:
 *  @fn         hif_isr
 *  @brief      Host interface interrupt service routine
 *  @return     @ref M2M_SUCCESS in case of success or a negative vale otherwise
 */
static sint8 hif_isr(void)
{
 8019820:	b580      	push	{r7, lr}
 8019822:	b086      	sub	sp, #24
 8019824:	af02      	add	r7, sp, #8
    sint8 ret = M2M_SUCCESS;
 8019826:	2300      	movs	r3, #0
 8019828:	73fb      	strb	r3, [r7, #15]
    uint32 reg;
    volatile tstrHifHdr strHif;

    ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 801982a:	f107 0308 	add.w	r3, r7, #8
 801982e:	4619      	mov	r1, r3
 8019830:	f241 0070 	movw	r0, #4208	; 0x1070
 8019834:	f002 f87c 	bl	801b930 <nm_read_reg_with_ret>
 8019838:	4603      	mov	r3, r0
 801983a:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS == ret)
 801983c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019840:	2b00      	cmp	r3, #0
 8019842:	f040 81bb 	bne.w	8019bbc <hif_isr+0x39c>
    {
        if(reg & 0x1)   /* New interrupt has been received */
 8019846:	68bb      	ldr	r3, [r7, #8]
 8019848:	f003 0301 	and.w	r3, r3, #1
 801984c:	2b00      	cmp	r3, #0
 801984e:	f000 81a6 	beq.w	8019b9e <hif_isr+0x37e>
        {
            uint16 size;

            /*Clearing RX interrupt*/
            ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8019852:	f107 0308 	add.w	r3, r7, #8
 8019856:	4619      	mov	r1, r3
 8019858:	f241 0070 	movw	r0, #4208	; 0x1070
 801985c:	f002 f868 	bl	801b930 <nm_read_reg_with_ret>
 8019860:	4603      	mov	r3, r0
 8019862:	73fb      	strb	r3, [r7, #15]
            if(ret != M2M_SUCCESS)goto ERR1;
 8019864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019868:	2b00      	cmp	r3, #0
 801986a:	f040 81b4 	bne.w	8019bd6 <hif_isr+0x3b6>
            reg &= ~NBIT0;
 801986e:	68bb      	ldr	r3, [r7, #8]
 8019870:	f023 0301 	bic.w	r3, r3, #1
 8019874:	60bb      	str	r3, [r7, #8]
            ret = nm_write_reg(WIFI_HOST_RCV_CTRL_0, reg);
 8019876:	68bb      	ldr	r3, [r7, #8]
 8019878:	4619      	mov	r1, r3
 801987a:	f241 0070 	movw	r0, #4208	; 0x1070
 801987e:	f002 f865 	bl	801b94c <nm_write_reg>
 8019882:	4603      	mov	r3, r0
 8019884:	73fb      	strb	r3, [r7, #15]
            if(ret != M2M_SUCCESS)goto ERR1;
 8019886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801988a:	2b00      	cmp	r3, #0
 801988c:	f040 81a5 	bne.w	8019bda <hif_isr+0x3ba>
            /* read the rx size */
            ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_0, &reg);
 8019890:	f107 0308 	add.w	r3, r7, #8
 8019894:	4619      	mov	r1, r3
 8019896:	f241 0070 	movw	r0, #4208	; 0x1070
 801989a:	f002 f849 	bl	801b930 <nm_read_reg_with_ret>
 801989e:	4603      	mov	r3, r0
 80198a0:	73fb      	strb	r3, [r7, #15]
            if(M2M_SUCCESS != ret)
 80198a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d00c      	beq.n	80198c4 <hif_isr+0xa4>
            {
                M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_0 bus fail\n");
 80198aa:	f240 227b 	movw	r2, #635	; 0x27b
 80198ae:	49a6      	ldr	r1, [pc, #664]	; (8019b48 <hif_isr+0x328>)
 80198b0:	48a6      	ldr	r0, [pc, #664]	; (8019b4c <hif_isr+0x32c>)
 80198b2:	f004 fe47 	bl	801e544 <iprintf>
 80198b6:	48a6      	ldr	r0, [pc, #664]	; (8019b50 <hif_isr+0x330>)
 80198b8:	f004 fee0 	bl	801e67c <puts>
 80198bc:	200d      	movs	r0, #13
 80198be:	f004 fe59 	bl	801e574 <putchar>
                goto ERR1;
 80198c2:	e18b      	b.n	8019bdc <hif_isr+0x3bc>
            }
            gstrHifCxt.u8HifRXDone = 1;
 80198c4:	4ba3      	ldr	r3, [pc, #652]	; (8019b54 <hif_isr+0x334>)
 80198c6:	2201      	movs	r2, #1
 80198c8:	709a      	strb	r2, [r3, #2]
            size = (uint16)((reg >> 2) & 0xfff);
 80198ca:	68bb      	ldr	r3, [r7, #8]
 80198cc:	089b      	lsrs	r3, r3, #2
 80198ce:	b29b      	uxth	r3, r3
 80198d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80198d4:	81bb      	strh	r3, [r7, #12]
            if(size > 0) {
 80198d6:	89bb      	ldrh	r3, [r7, #12]
 80198d8:	2b00      	cmp	r3, #0
 80198da:	f000 8151 	beq.w	8019b80 <hif_isr+0x360>
                uint32 address = 0;
 80198de:	2300      	movs	r3, #0
 80198e0:	603b      	str	r3, [r7, #0]
                /**
                start bus transfer
                **/
                ret = nm_read_reg_with_ret(WIFI_HOST_RCV_CTRL_1, &address);
 80198e2:	463b      	mov	r3, r7
 80198e4:	4619      	mov	r1, r3
 80198e6:	f241 0084 	movw	r0, #4228	; 0x1084
 80198ea:	f002 f821 	bl	801b930 <nm_read_reg_with_ret>
 80198ee:	4603      	mov	r3, r0
 80198f0:	73fb      	strb	r3, [r7, #15]
                if(M2M_SUCCESS != ret)
 80198f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d00c      	beq.n	8019914 <hif_isr+0xf4>
                {
                    M2M_ERR("(hif) WIFI_HOST_RCV_CTRL_1 bus fail\n");
 80198fa:	f44f 7222 	mov.w	r2, #648	; 0x288
 80198fe:	4992      	ldr	r1, [pc, #584]	; (8019b48 <hif_isr+0x328>)
 8019900:	4892      	ldr	r0, [pc, #584]	; (8019b4c <hif_isr+0x32c>)
 8019902:	f004 fe1f 	bl	801e544 <iprintf>
 8019906:	4894      	ldr	r0, [pc, #592]	; (8019b58 <hif_isr+0x338>)
 8019908:	f004 feb8 	bl	801e67c <puts>
 801990c:	200d      	movs	r0, #13
 801990e:	f004 fe31 	bl	801e574 <putchar>
                    goto ERR1;
 8019912:	e163      	b.n	8019bdc <hif_isr+0x3bc>
                }
                gstrHifCxt.u32RxAddr = address;
 8019914:	683b      	ldr	r3, [r7, #0]
 8019916:	4a8f      	ldr	r2, [pc, #572]	; (8019b54 <hif_isr+0x334>)
 8019918:	6093      	str	r3, [r2, #8]
                gstrHifCxt.u32RxSize = size;
 801991a:	89bb      	ldrh	r3, [r7, #12]
 801991c:	4a8d      	ldr	r2, [pc, #564]	; (8019b54 <hif_isr+0x334>)
 801991e:	60d3      	str	r3, [r2, #12]
                ret = nm_read_block(address, (uint8 *)&strHif, sizeof(tstrHifHdr));
 8019920:	683b      	ldr	r3, [r7, #0]
 8019922:	1d39      	adds	r1, r7, #4
 8019924:	2204      	movs	r2, #4
 8019926:	4618      	mov	r0, r3
 8019928:	f002 f830 	bl	801b98c <nm_read_block>
 801992c:	4603      	mov	r3, r0
 801992e:	73fb      	strb	r3, [r7, #15]
                strHif.u16Length = NM_BSP_B_L_16(strHif.u16Length);
 8019930:	88fb      	ldrh	r3, [r7, #6]
 8019932:	b29b      	uxth	r3, r3
 8019934:	80fb      	strh	r3, [r7, #6]
                if(M2M_SUCCESS != ret)
 8019936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d00c      	beq.n	8019958 <hif_isr+0x138>
                {
                    M2M_ERR("(hif) address bus fail\n");
 801993e:	f240 2291 	movw	r2, #657	; 0x291
 8019942:	4981      	ldr	r1, [pc, #516]	; (8019b48 <hif_isr+0x328>)
 8019944:	4881      	ldr	r0, [pc, #516]	; (8019b4c <hif_isr+0x32c>)
 8019946:	f004 fdfd 	bl	801e544 <iprintf>
 801994a:	4884      	ldr	r0, [pc, #528]	; (8019b5c <hif_isr+0x33c>)
 801994c:	f004 fe96 	bl	801e67c <puts>
 8019950:	200d      	movs	r0, #13
 8019952:	f004 fe0f 	bl	801e574 <putchar>
                    goto ERR1;
 8019956:	e141      	b.n	8019bdc <hif_isr+0x3bc>
                }
                if(strHif.u16Length != size)
 8019958:	88fb      	ldrh	r3, [r7, #6]
 801995a:	b29b      	uxth	r3, r3
 801995c:	89ba      	ldrh	r2, [r7, #12]
 801995e:	429a      	cmp	r2, r3
 8019960:	d01f      	beq.n	80199a2 <hif_isr+0x182>
                {
                    if((size - strHif.u16Length) > 4)
 8019962:	89bb      	ldrh	r3, [r7, #12]
 8019964:	88fa      	ldrh	r2, [r7, #6]
 8019966:	b292      	uxth	r2, r2
 8019968:	1a9b      	subs	r3, r3, r2
 801996a:	2b04      	cmp	r3, #4
 801996c:	dd19      	ble.n	80199a2 <hif_isr+0x182>
                    {
                        M2M_ERR("(hif) Corrupted packet Size = %u <L = %u, G = %u, OP = %02X>\n",
 801996e:	f44f 7226 	mov.w	r2, #664	; 0x298
 8019972:	4975      	ldr	r1, [pc, #468]	; (8019b48 <hif_isr+0x328>)
 8019974:	4875      	ldr	r0, [pc, #468]	; (8019b4c <hif_isr+0x32c>)
 8019976:	f004 fde5 	bl	801e544 <iprintf>
 801997a:	89b9      	ldrh	r1, [r7, #12]
 801997c:	88fb      	ldrh	r3, [r7, #6]
 801997e:	b29b      	uxth	r3, r3
 8019980:	461a      	mov	r2, r3
 8019982:	793b      	ldrb	r3, [r7, #4]
 8019984:	b2db      	uxtb	r3, r3
 8019986:	4618      	mov	r0, r3
 8019988:	797b      	ldrb	r3, [r7, #5]
 801998a:	b2db      	uxtb	r3, r3
 801998c:	9300      	str	r3, [sp, #0]
 801998e:	4603      	mov	r3, r0
 8019990:	4873      	ldr	r0, [pc, #460]	; (8019b60 <hif_isr+0x340>)
 8019992:	f004 fdd7 	bl	801e544 <iprintf>
 8019996:	200d      	movs	r0, #13
 8019998:	f004 fdec 	bl	801e574 <putchar>
                                size, strHif.u16Length, strHif.u8Gid, strHif.u8Opcode);
                        ret = M2M_ERR_BUS_FAIL;
 801999c:	23fa      	movs	r3, #250	; 0xfa
 801999e:	73fb      	strb	r3, [r7, #15]
                        goto ERR1;
 80199a0:	e11c      	b.n	8019bdc <hif_isr+0x3bc>
                    }
                }

                if(M2M_REQ_GROUP_WIFI == strHif.u8Gid)
 80199a2:	793b      	ldrb	r3, [r7, #4]
 80199a4:	b2db      	uxtb	r3, r3
 80199a6:	2b01      	cmp	r3, #1
 80199a8:	d11c      	bne.n	80199e4 <hif_isr+0x1c4>
                {
                    if(gstrHifCxt.pfWifiCb)
 80199aa:	4b6a      	ldr	r3, [pc, #424]	; (8019b54 <hif_isr+0x334>)
 80199ac:	691b      	ldr	r3, [r3, #16]
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d00b      	beq.n	80199ca <hif_isr+0x1aa>
                        gstrHifCxt.pfWifiCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80199b2:	4b68      	ldr	r3, [pc, #416]	; (8019b54 <hif_isr+0x334>)
 80199b4:	691b      	ldr	r3, [r3, #16]
 80199b6:	797a      	ldrb	r2, [r7, #5]
 80199b8:	b2d0      	uxtb	r0, r2
 80199ba:	88fa      	ldrh	r2, [r7, #6]
 80199bc:	b292      	uxth	r2, r2
 80199be:	3a08      	subs	r2, #8
 80199c0:	b291      	uxth	r1, r2
 80199c2:	683a      	ldr	r2, [r7, #0]
 80199c4:	3208      	adds	r2, #8
 80199c6:	4798      	blx	r3
 80199c8:	e09f      	b.n	8019b0a <hif_isr+0x2ea>
                    else
                        M2M_ERR("WIFI callback is not registered\n");
 80199ca:	f44f 7229 	mov.w	r2, #676	; 0x2a4
 80199ce:	495e      	ldr	r1, [pc, #376]	; (8019b48 <hif_isr+0x328>)
 80199d0:	485e      	ldr	r0, [pc, #376]	; (8019b4c <hif_isr+0x32c>)
 80199d2:	f004 fdb7 	bl	801e544 <iprintf>
 80199d6:	4863      	ldr	r0, [pc, #396]	; (8019b64 <hif_isr+0x344>)
 80199d8:	f004 fe50 	bl	801e67c <puts>
 80199dc:	200d      	movs	r0, #13
 80199de:	f004 fdc9 	bl	801e574 <putchar>
 80199e2:	e092      	b.n	8019b0a <hif_isr+0x2ea>
                }
                else if(M2M_REQ_GROUP_IP == strHif.u8Gid)
 80199e4:	793b      	ldrb	r3, [r7, #4]
 80199e6:	b2db      	uxtb	r3, r3
 80199e8:	2b02      	cmp	r3, #2
 80199ea:	d11c      	bne.n	8019a26 <hif_isr+0x206>
                {
                    if(gstrHifCxt.pfIpCb)
 80199ec:	4b59      	ldr	r3, [pc, #356]	; (8019b54 <hif_isr+0x334>)
 80199ee:	695b      	ldr	r3, [r3, #20]
 80199f0:	2b00      	cmp	r3, #0
 80199f2:	d00b      	beq.n	8019a0c <hif_isr+0x1ec>
                        gstrHifCxt.pfIpCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 80199f4:	4b57      	ldr	r3, [pc, #348]	; (8019b54 <hif_isr+0x334>)
 80199f6:	695b      	ldr	r3, [r3, #20]
 80199f8:	797a      	ldrb	r2, [r7, #5]
 80199fa:	b2d0      	uxtb	r0, r2
 80199fc:	88fa      	ldrh	r2, [r7, #6]
 80199fe:	b292      	uxth	r2, r2
 8019a00:	3a08      	subs	r2, #8
 8019a02:	b291      	uxth	r1, r2
 8019a04:	683a      	ldr	r2, [r7, #0]
 8019a06:	3208      	adds	r2, #8
 8019a08:	4798      	blx	r3
 8019a0a:	e07e      	b.n	8019b0a <hif_isr+0x2ea>
                    else
                        M2M_ERR("Socket callback is not registered\n");
 8019a0c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019a10:	494d      	ldr	r1, [pc, #308]	; (8019b48 <hif_isr+0x328>)
 8019a12:	484e      	ldr	r0, [pc, #312]	; (8019b4c <hif_isr+0x32c>)
 8019a14:	f004 fd96 	bl	801e544 <iprintf>
 8019a18:	4853      	ldr	r0, [pc, #332]	; (8019b68 <hif_isr+0x348>)
 8019a1a:	f004 fe2f 	bl	801e67c <puts>
 8019a1e:	200d      	movs	r0, #13
 8019a20:	f004 fda8 	bl	801e574 <putchar>
 8019a24:	e071      	b.n	8019b0a <hif_isr+0x2ea>
                }
                else if(M2M_REQ_GROUP_OTA == strHif.u8Gid)
 8019a26:	793b      	ldrb	r3, [r7, #4]
 8019a28:	b2db      	uxtb	r3, r3
 8019a2a:	2b04      	cmp	r3, #4
 8019a2c:	d11c      	bne.n	8019a68 <hif_isr+0x248>
                {
                    if(gstrHifCxt.pfOtaCb)
 8019a2e:	4b49      	ldr	r3, [pc, #292]	; (8019b54 <hif_isr+0x334>)
 8019a30:	699b      	ldr	r3, [r3, #24]
 8019a32:	2b00      	cmp	r3, #0
 8019a34:	d00b      	beq.n	8019a4e <hif_isr+0x22e>
                        gstrHifCxt.pfOtaCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8019a36:	4b47      	ldr	r3, [pc, #284]	; (8019b54 <hif_isr+0x334>)
 8019a38:	699b      	ldr	r3, [r3, #24]
 8019a3a:	797a      	ldrb	r2, [r7, #5]
 8019a3c:	b2d0      	uxtb	r0, r2
 8019a3e:	88fa      	ldrh	r2, [r7, #6]
 8019a40:	b292      	uxth	r2, r2
 8019a42:	3a08      	subs	r2, #8
 8019a44:	b291      	uxth	r1, r2
 8019a46:	683a      	ldr	r2, [r7, #0]
 8019a48:	3208      	adds	r2, #8
 8019a4a:	4798      	blx	r3
 8019a4c:	e05d      	b.n	8019b0a <hif_isr+0x2ea>
                    else
                        M2M_ERR("OTA callback is not registered\n");
 8019a4e:	f240 22b2 	movw	r2, #690	; 0x2b2
 8019a52:	493d      	ldr	r1, [pc, #244]	; (8019b48 <hif_isr+0x328>)
 8019a54:	483d      	ldr	r0, [pc, #244]	; (8019b4c <hif_isr+0x32c>)
 8019a56:	f004 fd75 	bl	801e544 <iprintf>
 8019a5a:	4844      	ldr	r0, [pc, #272]	; (8019b6c <hif_isr+0x34c>)
 8019a5c:	f004 fe0e 	bl	801e67c <puts>
 8019a60:	200d      	movs	r0, #13
 8019a62:	f004 fd87 	bl	801e574 <putchar>
 8019a66:	e050      	b.n	8019b0a <hif_isr+0x2ea>
                }
                else if(M2M_REQ_GROUP_SIGMA == strHif.u8Gid)
 8019a68:	793b      	ldrb	r3, [r7, #4]
 8019a6a:	b2db      	uxtb	r3, r3
 8019a6c:	2b06      	cmp	r3, #6
 8019a6e:	d11c      	bne.n	8019aaa <hif_isr+0x28a>
                {
                    if(gstrHifCxt.pfSigmaCb)
 8019a70:	4b38      	ldr	r3, [pc, #224]	; (8019b54 <hif_isr+0x334>)
 8019a72:	69db      	ldr	r3, [r3, #28]
 8019a74:	2b00      	cmp	r3, #0
 8019a76:	d00b      	beq.n	8019a90 <hif_isr+0x270>
                        gstrHifCxt.pfSigmaCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8019a78:	4b36      	ldr	r3, [pc, #216]	; (8019b54 <hif_isr+0x334>)
 8019a7a:	69db      	ldr	r3, [r3, #28]
 8019a7c:	797a      	ldrb	r2, [r7, #5]
 8019a7e:	b2d0      	uxtb	r0, r2
 8019a80:	88fa      	ldrh	r2, [r7, #6]
 8019a82:	b292      	uxth	r2, r2
 8019a84:	3a08      	subs	r2, #8
 8019a86:	b291      	uxth	r1, r2
 8019a88:	683a      	ldr	r2, [r7, #0]
 8019a8a:	3208      	adds	r2, #8
 8019a8c:	4798      	blx	r3
 8019a8e:	e03c      	b.n	8019b0a <hif_isr+0x2ea>
                    else
                        M2M_ERR("Sigma callback is not registered\n");
 8019a90:	f240 22b9 	movw	r2, #697	; 0x2b9
 8019a94:	492c      	ldr	r1, [pc, #176]	; (8019b48 <hif_isr+0x328>)
 8019a96:	482d      	ldr	r0, [pc, #180]	; (8019b4c <hif_isr+0x32c>)
 8019a98:	f004 fd54 	bl	801e544 <iprintf>
 8019a9c:	4834      	ldr	r0, [pc, #208]	; (8019b70 <hif_isr+0x350>)
 8019a9e:	f004 fded 	bl	801e67c <puts>
 8019aa2:	200d      	movs	r0, #13
 8019aa4:	f004 fd66 	bl	801e574 <putchar>
 8019aa8:	e02f      	b.n	8019b0a <hif_isr+0x2ea>
                }
                else if(M2M_REQ_GROUP_SSL == strHif.u8Gid)
 8019aaa:	793b      	ldrb	r3, [r7, #4]
 8019aac:	b2db      	uxtb	r3, r3
 8019aae:	2b05      	cmp	r3, #5
 8019ab0:	d11c      	bne.n	8019aec <hif_isr+0x2cc>
                {
                    if(gstrHifCxt.pfSslCb)
 8019ab2:	4b28      	ldr	r3, [pc, #160]	; (8019b54 <hif_isr+0x334>)
 8019ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019ab6:	2b00      	cmp	r3, #0
 8019ab8:	d00b      	beq.n	8019ad2 <hif_isr+0x2b2>
                        gstrHifCxt.pfSslCb(strHif.u8Opcode, strHif.u16Length - M2M_HIF_HDR_OFFSET, address + M2M_HIF_HDR_OFFSET);
 8019aba:	4b26      	ldr	r3, [pc, #152]	; (8019b54 <hif_isr+0x334>)
 8019abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019abe:	797a      	ldrb	r2, [r7, #5]
 8019ac0:	b2d0      	uxtb	r0, r2
 8019ac2:	88fa      	ldrh	r2, [r7, #6]
 8019ac4:	b292      	uxth	r2, r2
 8019ac6:	3a08      	subs	r2, #8
 8019ac8:	b291      	uxth	r1, r2
 8019aca:	683a      	ldr	r2, [r7, #0]
 8019acc:	3208      	adds	r2, #8
 8019ace:	4798      	blx	r3
 8019ad0:	e01b      	b.n	8019b0a <hif_isr+0x2ea>
                    else
                        M2M_ERR("SSL callback is not registered\n");
 8019ad2:	f44f 7230 	mov.w	r2, #704	; 0x2c0
 8019ad6:	491c      	ldr	r1, [pc, #112]	; (8019b48 <hif_isr+0x328>)
 8019ad8:	481c      	ldr	r0, [pc, #112]	; (8019b4c <hif_isr+0x32c>)
 8019ada:	f004 fd33 	bl	801e544 <iprintf>
 8019ade:	4825      	ldr	r0, [pc, #148]	; (8019b74 <hif_isr+0x354>)
 8019ae0:	f004 fdcc 	bl	801e67c <puts>
 8019ae4:	200d      	movs	r0, #13
 8019ae6:	f004 fd45 	bl	801e574 <putchar>
 8019aea:	e00e      	b.n	8019b0a <hif_isr+0x2ea>
                }
                else
                {
                    M2M_ERR("(hif) invalid group ID\n");
 8019aec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019af0:	4915      	ldr	r1, [pc, #84]	; (8019b48 <hif_isr+0x328>)
 8019af2:	4816      	ldr	r0, [pc, #88]	; (8019b4c <hif_isr+0x32c>)
 8019af4:	f004 fd26 	bl	801e544 <iprintf>
 8019af8:	481f      	ldr	r0, [pc, #124]	; (8019b78 <hif_isr+0x358>)
 8019afa:	f004 fdbf 	bl	801e67c <puts>
 8019afe:	200d      	movs	r0, #13
 8019b00:	f004 fd38 	bl	801e574 <putchar>
                    ret = M2M_ERR_BUS_FAIL;
 8019b04:	23fa      	movs	r3, #250	; 0xfa
 8019b06:	73fb      	strb	r3, [r7, #15]
                    goto ERR1;
 8019b08:	e068      	b.n	8019bdc <hif_isr+0x3bc>
                }
                if(gstrHifCxt.u8HifRXDone)
 8019b0a:	4b12      	ldr	r3, [pc, #72]	; (8019b54 <hif_isr+0x334>)
 8019b0c:	789b      	ldrb	r3, [r3, #2]
 8019b0e:	b2db      	uxtb	r3, r3
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d063      	beq.n	8019bdc <hif_isr+0x3bc>
                {
                    M2M_ERR("(hif) host app didn't set RX Done <%u><%X>\n", strHif.u8Gid, strHif.u8Opcode);
 8019b14:	f240 22ca 	movw	r2, #714	; 0x2ca
 8019b18:	490b      	ldr	r1, [pc, #44]	; (8019b48 <hif_isr+0x328>)
 8019b1a:	480c      	ldr	r0, [pc, #48]	; (8019b4c <hif_isr+0x32c>)
 8019b1c:	f004 fd12 	bl	801e544 <iprintf>
 8019b20:	793b      	ldrb	r3, [r7, #4]
 8019b22:	b2db      	uxtb	r3, r3
 8019b24:	4619      	mov	r1, r3
 8019b26:	797b      	ldrb	r3, [r7, #5]
 8019b28:	b2db      	uxtb	r3, r3
 8019b2a:	461a      	mov	r2, r3
 8019b2c:	4813      	ldr	r0, [pc, #76]	; (8019b7c <hif_isr+0x35c>)
 8019b2e:	f004 fd09 	bl	801e544 <iprintf>
 8019b32:	200d      	movs	r0, #13
 8019b34:	f004 fd1e 	bl	801e574 <putchar>
                    ret = hif_set_rx_done();
 8019b38:	f7ff fa9e 	bl	8019078 <hif_set_rx_done>
 8019b3c:	4603      	mov	r3, r0
 8019b3e:	73fb      	strb	r3, [r7, #15]
                    if(ret != M2M_SUCCESS) goto ERR1;
 8019b40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019b44:	2b00      	cmp	r3, #0
 8019b46:	e049      	b.n	8019bdc <hif_isr+0x3bc>
 8019b48:	080290dc 	.word	0x080290dc
 8019b4c:	08020790 	.word	0x08020790
 8019b50:	080208dc 	.word	0x080208dc
 8019b54:	2001ded0 	.word	0x2001ded0
 8019b58:	08020900 	.word	0x08020900
 8019b5c:	08020924 	.word	0x08020924
 8019b60:	0802093c 	.word	0x0802093c
 8019b64:	0802097c 	.word	0x0802097c
 8019b68:	0802099c 	.word	0x0802099c
 8019b6c:	080209c0 	.word	0x080209c0
 8019b70:	080209e0 	.word	0x080209e0
 8019b74:	08020a04 	.word	0x08020a04
 8019b78:	08020a24 	.word	0x08020a24
 8019b7c:	08020a3c 	.word	0x08020a3c
                }
            }
            else
            {
                ret = M2M_ERR_RCV;
 8019b80:	23fe      	movs	r3, #254	; 0xfe
 8019b82:	73fb      	strb	r3, [r7, #15]
                M2M_ERR("(hif) Wrong Size\n");
 8019b84:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019b88:	4917      	ldr	r1, [pc, #92]	; (8019be8 <hif_isr+0x3c8>)
 8019b8a:	4818      	ldr	r0, [pc, #96]	; (8019bec <hif_isr+0x3cc>)
 8019b8c:	f004 fcda 	bl	801e544 <iprintf>
 8019b90:	4817      	ldr	r0, [pc, #92]	; (8019bf0 <hif_isr+0x3d0>)
 8019b92:	f004 fd73 	bl	801e67c <puts>
 8019b96:	200d      	movs	r0, #13
 8019b98:	f004 fcec 	bl	801e574 <putchar>
                goto ERR1;
 8019b9c:	e01e      	b.n	8019bdc <hif_isr+0x3bc>
            }
        }
        else
        {
#ifndef WIN32
            M2M_ERR("(hif) False interrupt %lx", reg);
 8019b9e:	f240 22d9 	movw	r2, #729	; 0x2d9
 8019ba2:	4911      	ldr	r1, [pc, #68]	; (8019be8 <hif_isr+0x3c8>)
 8019ba4:	4811      	ldr	r0, [pc, #68]	; (8019bec <hif_isr+0x3cc>)
 8019ba6:	f004 fccd 	bl	801e544 <iprintf>
 8019baa:	68bb      	ldr	r3, [r7, #8]
 8019bac:	4619      	mov	r1, r3
 8019bae:	4811      	ldr	r0, [pc, #68]	; (8019bf4 <hif_isr+0x3d4>)
 8019bb0:	f004 fcc8 	bl	801e544 <iprintf>
 8019bb4:	200d      	movs	r0, #13
 8019bb6:	f004 fcdd 	bl	801e574 <putchar>
            goto ERR1;
 8019bba:	e00f      	b.n	8019bdc <hif_isr+0x3bc>
#endif
        }
    }
    else
    {
        M2M_ERR("(hif) Failed to Read interrupt reg\n");
 8019bbc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8019bc0:	4909      	ldr	r1, [pc, #36]	; (8019be8 <hif_isr+0x3c8>)
 8019bc2:	480a      	ldr	r0, [pc, #40]	; (8019bec <hif_isr+0x3cc>)
 8019bc4:	f004 fcbe 	bl	801e544 <iprintf>
 8019bc8:	480b      	ldr	r0, [pc, #44]	; (8019bf8 <hif_isr+0x3d8>)
 8019bca:	f004 fd57 	bl	801e67c <puts>
 8019bce:	200d      	movs	r0, #13
 8019bd0:	f004 fcd0 	bl	801e574 <putchar>
 8019bd4:	e002      	b.n	8019bdc <hif_isr+0x3bc>
            if(ret != M2M_SUCCESS)goto ERR1;
 8019bd6:	bf00      	nop
 8019bd8:	e000      	b.n	8019bdc <hif_isr+0x3bc>
            if(ret != M2M_SUCCESS)goto ERR1;
 8019bda:	bf00      	nop
    }

ERR1:
    return ret;
 8019bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019be0:	4618      	mov	r0, r3
 8019be2:	3710      	adds	r7, #16
 8019be4:	46bd      	mov	sp, r7
 8019be6:	bd80      	pop	{r7, pc}
 8019be8:	080290dc 	.word	0x080290dc
 8019bec:	08020790 	.word	0x08020790
 8019bf0:	08020a68 	.word	0x08020a68
 8019bf4:	08020a7c 	.word	0x08020a7c
 8019bf8:	08020a98 	.word	0x08020a98

08019bfc <hif_handle_isr>:
{
    gstrHifCxt.u8Yield = 1;
}

sint8 hif_handle_isr(void)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b082      	sub	sp, #8
 8019c00:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 8019c02:	2300      	movs	r3, #0
 8019c04:	71fb      	strb	r3, [r7, #7]

    gstrHifCxt.u8Yield = 0;
 8019c06:	4b29      	ldr	r3, [pc, #164]	; (8019cac <hif_handle_isr+0xb0>)
 8019c08:	2200      	movs	r2, #0
 8019c0a:	711a      	strb	r2, [r3, #4]
    while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 8019c0c:	e03e      	b.n	8019c8c <hif_handle_isr+0x90>
         * during which the ISR could fire again.
         * If LEVEL interrupt is used instead of EDGE then the atomicity isn't needed since the interrupt
         * is turned off in the ISR and back on again only after the interrupt has been serviced in hif_isr(). */

#ifndef NM_LEVEL_INTERRUPT
        nm_bsp_interrupt_ctrl(0);
 8019c0e:	2000      	movs	r0, #0
 8019c10:	f7ff f88d 	bl	8018d2e <nm_bsp_interrupt_ctrl>
#endif
        gstrHifCxt.u8Interrupt--;
 8019c14:	4b25      	ldr	r3, [pc, #148]	; (8019cac <hif_handle_isr+0xb0>)
 8019c16:	78db      	ldrb	r3, [r3, #3]
 8019c18:	b2db      	uxtb	r3, r3
 8019c1a:	3b01      	subs	r3, #1
 8019c1c:	b2da      	uxtb	r2, r3
 8019c1e:	4b23      	ldr	r3, [pc, #140]	; (8019cac <hif_handle_isr+0xb0>)
 8019c20:	70da      	strb	r2, [r3, #3]
#ifndef NM_LEVEL_INTERRUPT
        nm_bsp_interrupt_ctrl(1);
 8019c22:	2001      	movs	r0, #1
 8019c24:	f7ff f883 	bl	8018d2e <nm_bsp_interrupt_ctrl>
#endif

        uint8 retries = 5;
 8019c28:	2305      	movs	r3, #5
 8019c2a:	71bb      	strb	r3, [r7, #6]
        while(1)
        {
            ret = hif_isr();
 8019c2c:	f7ff fdf8 	bl	8019820 <hif_isr>
 8019c30:	4603      	mov	r3, r0
 8019c32:	71fb      	strb	r3, [r7, #7]
            if(ret == M2M_SUCCESS) {
 8019c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d100      	bne.n	8019c3e <hif_handle_isr+0x42>
                /*we will try forever until we get that interrupt*/
                /*Fail return errors here due to bus errors (reading expected values)*/
                break;
 8019c3c:	e026      	b.n	8019c8c <hif_handle_isr+0x90>
            } else {
                retries--;
 8019c3e:	79bb      	ldrb	r3, [r7, #6]
 8019c40:	3b01      	subs	r3, #1
 8019c42:	71bb      	strb	r3, [r7, #6]
                if(!retries)
 8019c44:	79bb      	ldrb	r3, [r7, #6]
 8019c46:	2b00      	cmp	r3, #0
 8019c48:	d10f      	bne.n	8019c6a <hif_handle_isr+0x6e>
                {
                    M2M_ERR("(HIF) Failed to handle interrupt %d, aborting due to too many retries\n", ret);
 8019c4a:	f240 3211 	movw	r2, #785	; 0x311
 8019c4e:	4918      	ldr	r1, [pc, #96]	; (8019cb0 <hif_handle_isr+0xb4>)
 8019c50:	4818      	ldr	r0, [pc, #96]	; (8019cb4 <hif_handle_isr+0xb8>)
 8019c52:	f004 fc77 	bl	801e544 <iprintf>
 8019c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c5a:	4619      	mov	r1, r3
 8019c5c:	4816      	ldr	r0, [pc, #88]	; (8019cb8 <hif_handle_isr+0xbc>)
 8019c5e:	f004 fc71 	bl	801e544 <iprintf>
 8019c62:	200d      	movs	r0, #13
 8019c64:	f004 fc86 	bl	801e574 <putchar>
                    break;
 8019c68:	e010      	b.n	8019c8c <hif_handle_isr+0x90>
                }
                else
                    M2M_ERR("(HIF) Failed to handle interrupt %d try again... (%u)\n", ret, retries);
 8019c6a:	f240 3215 	movw	r2, #789	; 0x315
 8019c6e:	4910      	ldr	r1, [pc, #64]	; (8019cb0 <hif_handle_isr+0xb4>)
 8019c70:	4810      	ldr	r0, [pc, #64]	; (8019cb4 <hif_handle_isr+0xb8>)
 8019c72:	f004 fc67 	bl	801e544 <iprintf>
 8019c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019c7a:	79ba      	ldrb	r2, [r7, #6]
 8019c7c:	4619      	mov	r1, r3
 8019c7e:	480f      	ldr	r0, [pc, #60]	; (8019cbc <hif_handle_isr+0xc0>)
 8019c80:	f004 fc60 	bl	801e544 <iprintf>
 8019c84:	200d      	movs	r0, #13
 8019c86:	f004 fc75 	bl	801e574 <putchar>
            ret = hif_isr();
 8019c8a:	e7cf      	b.n	8019c2c <hif_handle_isr+0x30>
    while(gstrHifCxt.u8Interrupt && !gstrHifCxt.u8Yield)
 8019c8c:	4b07      	ldr	r3, [pc, #28]	; (8019cac <hif_handle_isr+0xb0>)
 8019c8e:	78db      	ldrb	r3, [r3, #3]
 8019c90:	b2db      	uxtb	r3, r3
 8019c92:	2b00      	cmp	r3, #0
 8019c94:	d004      	beq.n	8019ca0 <hif_handle_isr+0xa4>
 8019c96:	4b05      	ldr	r3, [pc, #20]	; (8019cac <hif_handle_isr+0xb0>)
 8019c98:	791b      	ldrb	r3, [r3, #4]
 8019c9a:	b2db      	uxtb	r3, r3
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d0b6      	beq.n	8019c0e <hif_handle_isr+0x12>
            }
        }
    }

    return ret;
 8019ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8019ca4:	4618      	mov	r0, r3
 8019ca6:	3708      	adds	r7, #8
 8019ca8:	46bd      	mov	sp, r7
 8019caa:	bd80      	pop	{r7, pc}
 8019cac:	2001ded0 	.word	0x2001ded0
 8019cb0:	080290e4 	.word	0x080290e4
 8019cb4:	08020790 	.word	0x08020790
 8019cb8:	08020abc 	.word	0x08020abc
 8019cbc:	08020b04 	.word	0x08020b04

08019cc0 <hif_receive>:
 *  @param[in]  isDone
 *                  If you don't need any more packets send True otherwise send false
 *   @return    The function shall return ZERO for successful operation and a negative value otherwise.
 */
sint8 hif_receive(uint32 u32Addr, uint8 *pu8Buf, uint16 u16Sz, uint8 isDone)
{
 8019cc0:	b580      	push	{r7, lr}
 8019cc2:	b086      	sub	sp, #24
 8019cc4:	af00      	add	r7, sp, #0
 8019cc6:	60f8      	str	r0, [r7, #12]
 8019cc8:	60b9      	str	r1, [r7, #8]
 8019cca:	4611      	mov	r1, r2
 8019ccc:	461a      	mov	r2, r3
 8019cce:	460b      	mov	r3, r1
 8019cd0:	80fb      	strh	r3, [r7, #6]
 8019cd2:	4613      	mov	r3, r2
 8019cd4:	717b      	strb	r3, [r7, #5]
    sint8 ret = M2M_SUCCESS;
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	75fb      	strb	r3, [r7, #23]

    if((u32Addr == 0) || (pu8Buf == NULL) || (u16Sz == 0))
 8019cda:	68fb      	ldr	r3, [r7, #12]
 8019cdc:	2b00      	cmp	r3, #0
 8019cde:	d005      	beq.n	8019cec <hif_receive+0x2c>
 8019ce0:	68bb      	ldr	r3, [r7, #8]
 8019ce2:	2b00      	cmp	r3, #0
 8019ce4:	d002      	beq.n	8019cec <hif_receive+0x2c>
 8019ce6:	88fb      	ldrh	r3, [r7, #6]
 8019ce8:	2b00      	cmp	r3, #0
 8019cea:	d116      	bne.n	8019d1a <hif_receive+0x5a>
    {
        if(isDone)
 8019cec:	797b      	ldrb	r3, [r7, #5]
 8019cee:	2b00      	cmp	r3, #0
 8019cf0:	d004      	beq.n	8019cfc <hif_receive+0x3c>
        {
            ret = hif_set_rx_done();
 8019cf2:	f7ff f9c1 	bl	8019078 <hif_set_rx_done>
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	75fb      	strb	r3, [r7, #23]
        else
        {
            ret = M2M_ERR_FAIL;
            M2M_ERR(" hif_receive: Invalid argument\n");
        }
        goto ERR1;
 8019cfa:	e077      	b.n	8019dec <hif_receive+0x12c>
            ret = M2M_ERR_FAIL;
 8019cfc:	23f4      	movs	r3, #244	; 0xf4
 8019cfe:	75fb      	strb	r3, [r7, #23]
            M2M_ERR(" hif_receive: Invalid argument\n");
 8019d00:	f240 3237 	movw	r2, #823	; 0x337
 8019d04:	493c      	ldr	r1, [pc, #240]	; (8019df8 <hif_receive+0x138>)
 8019d06:	483d      	ldr	r0, [pc, #244]	; (8019dfc <hif_receive+0x13c>)
 8019d08:	f004 fc1c 	bl	801e544 <iprintf>
 8019d0c:	483c      	ldr	r0, [pc, #240]	; (8019e00 <hif_receive+0x140>)
 8019d0e:	f004 fcb5 	bl	801e67c <puts>
 8019d12:	200d      	movs	r0, #13
 8019d14:	f004 fc2e 	bl	801e574 <putchar>
        goto ERR1;
 8019d18:	e068      	b.n	8019dec <hif_receive+0x12c>
    }

    if(u16Sz > gstrHifCxt.u32RxSize)
 8019d1a:	88fa      	ldrh	r2, [r7, #6]
 8019d1c:	4b39      	ldr	r3, [pc, #228]	; (8019e04 <hif_receive+0x144>)
 8019d1e:	68db      	ldr	r3, [r3, #12]
 8019d20:	429a      	cmp	r2, r3
 8019d22:	d912      	bls.n	8019d4a <hif_receive+0x8a>
    {
        ret = M2M_ERR_FAIL;
 8019d24:	23f4      	movs	r3, #244	; 0xf4
 8019d26:	75fb      	strb	r3, [r7, #23]
        M2M_ERR("APP Requested Size is larger than the received buffer size <%d> <%lu>\n", u16Sz, gstrHifCxt.u32RxSize);
 8019d28:	f240 323f 	movw	r2, #831	; 0x33f
 8019d2c:	4932      	ldr	r1, [pc, #200]	; (8019df8 <hif_receive+0x138>)
 8019d2e:	4833      	ldr	r0, [pc, #204]	; (8019dfc <hif_receive+0x13c>)
 8019d30:	f004 fc08 	bl	801e544 <iprintf>
 8019d34:	88fb      	ldrh	r3, [r7, #6]
 8019d36:	4a33      	ldr	r2, [pc, #204]	; (8019e04 <hif_receive+0x144>)
 8019d38:	68d2      	ldr	r2, [r2, #12]
 8019d3a:	4619      	mov	r1, r3
 8019d3c:	4832      	ldr	r0, [pc, #200]	; (8019e08 <hif_receive+0x148>)
 8019d3e:	f004 fc01 	bl	801e544 <iprintf>
 8019d42:	200d      	movs	r0, #13
 8019d44:	f004 fc16 	bl	801e574 <putchar>
        goto ERR1;
 8019d48:	e050      	b.n	8019dec <hif_receive+0x12c>
    }
    if((u32Addr < gstrHifCxt.u32RxAddr)||((u32Addr + u16Sz)>(gstrHifCxt.u32RxAddr+gstrHifCxt.u32RxSize)))
 8019d4a:	4b2e      	ldr	r3, [pc, #184]	; (8019e04 <hif_receive+0x144>)
 8019d4c:	689b      	ldr	r3, [r3, #8]
 8019d4e:	68fa      	ldr	r2, [r7, #12]
 8019d50:	429a      	cmp	r2, r3
 8019d52:	d309      	bcc.n	8019d68 <hif_receive+0xa8>
 8019d54:	88fa      	ldrh	r2, [r7, #6]
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	441a      	add	r2, r3
 8019d5a:	4b2a      	ldr	r3, [pc, #168]	; (8019e04 <hif_receive+0x144>)
 8019d5c:	6899      	ldr	r1, [r3, #8]
 8019d5e:	4b29      	ldr	r3, [pc, #164]	; (8019e04 <hif_receive+0x144>)
 8019d60:	68db      	ldr	r3, [r3, #12]
 8019d62:	440b      	add	r3, r1
 8019d64:	429a      	cmp	r2, r3
 8019d66:	d90e      	bls.n	8019d86 <hif_receive+0xc6>
    {
        ret = M2M_ERR_FAIL;
 8019d68:	23f4      	movs	r3, #244	; 0xf4
 8019d6a:	75fb      	strb	r3, [r7, #23]
        M2M_ERR("APP Requested Address beyond the received buffer address and length\n");
 8019d6c:	f240 3245 	movw	r2, #837	; 0x345
 8019d70:	4921      	ldr	r1, [pc, #132]	; (8019df8 <hif_receive+0x138>)
 8019d72:	4822      	ldr	r0, [pc, #136]	; (8019dfc <hif_receive+0x13c>)
 8019d74:	f004 fbe6 	bl	801e544 <iprintf>
 8019d78:	4824      	ldr	r0, [pc, #144]	; (8019e0c <hif_receive+0x14c>)
 8019d7a:	f004 fc7f 	bl	801e67c <puts>
 8019d7e:	200d      	movs	r0, #13
 8019d80:	f004 fbf8 	bl	801e574 <putchar>
        goto ERR1;
 8019d84:	e032      	b.n	8019dec <hif_receive+0x12c>
    }

    /* Receive the payload */
    ret = nm_read_block(u32Addr, pu8Buf, u16Sz);
 8019d86:	88fb      	ldrh	r3, [r7, #6]
 8019d88:	461a      	mov	r2, r3
 8019d8a:	68b9      	ldr	r1, [r7, #8]
 8019d8c:	68f8      	ldr	r0, [r7, #12]
 8019d8e:	f001 fdfd 	bl	801b98c <nm_read_block>
 8019d92:	4603      	mov	r3, r0
 8019d94:	75fb      	strb	r3, [r7, #23]
    if(ret != M2M_SUCCESS)goto ERR1;
 8019d96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d123      	bne.n	8019de6 <hif_receive+0x126>

    /* check if this is the last packet */
    if(isDone || (((gstrHifCxt.u32RxAddr+gstrHifCxt.u32RxSize) - (u32Addr+u16Sz)) <= 0) ||
 8019d9e:	797b      	ldrb	r3, [r7, #5]
 8019da0:	2b00      	cmp	r3, #0
 8019da2:	d11b      	bne.n	8019ddc <hif_receive+0x11c>
 8019da4:	4b17      	ldr	r3, [pc, #92]	; (8019e04 <hif_receive+0x144>)
 8019da6:	689a      	ldr	r2, [r3, #8]
 8019da8:	4b16      	ldr	r3, [pc, #88]	; (8019e04 <hif_receive+0x144>)
 8019daa:	68db      	ldr	r3, [r3, #12]
 8019dac:	441a      	add	r2, r3
 8019dae:	88f9      	ldrh	r1, [r7, #6]
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	440b      	add	r3, r1
 8019db4:	429a      	cmp	r2, r3
 8019db6:	d011      	beq.n	8019ddc <hif_receive+0x11c>
            ((4 - ((u32Addr+u16Sz) & 3)) == ((gstrHifCxt.u32RxAddr+gstrHifCxt.u32RxSize) - (u32Addr+u16Sz))))   /* Length in the RCV CTRL 0 register is rounded off to 4 by the firmware,
 8019db8:	88fa      	ldrh	r2, [r7, #6]
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	4413      	add	r3, r2
 8019dbe:	f003 0303 	and.w	r3, r3, #3
 8019dc2:	f1c3 0204 	rsb	r2, r3, #4
 8019dc6:	4b0f      	ldr	r3, [pc, #60]	; (8019e04 <hif_receive+0x144>)
 8019dc8:	6899      	ldr	r1, [r3, #8]
 8019dca:	4b0e      	ldr	r3, [pc, #56]	; (8019e04 <hif_receive+0x144>)
 8019dcc:	68db      	ldr	r3, [r3, #12]
 8019dce:	4419      	add	r1, r3
 8019dd0:	88f8      	ldrh	r0, [r7, #6]
 8019dd2:	68fb      	ldr	r3, [r7, #12]
 8019dd4:	4403      	add	r3, r0
 8019dd6:	1acb      	subs	r3, r1, r3
    if(isDone || (((gstrHifCxt.u32RxAddr+gstrHifCxt.u32RxSize) - (u32Addr+u16Sz)) <= 0) ||
 8019dd8:	429a      	cmp	r2, r3
 8019dda:	d106      	bne.n	8019dea <hif_receive+0x12a>
                                                                                   but length inside the HIF header is not, Hence consider done if number
                                                                                   of rounding bytes equal to length left to read */
    {
        /* set RX done */
        ret = hif_set_rx_done();
 8019ddc:	f7ff f94c 	bl	8019078 <hif_set_rx_done>
 8019de0:	4603      	mov	r3, r0
 8019de2:	75fb      	strb	r3, [r7, #23]
 8019de4:	e002      	b.n	8019dec <hif_receive+0x12c>
    if(ret != M2M_SUCCESS)goto ERR1;
 8019de6:	bf00      	nop
 8019de8:	e000      	b.n	8019dec <hif_receive+0x12c>
    }
ERR1:
 8019dea:	bf00      	nop
    return ret;
 8019dec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019df0:	4618      	mov	r0, r3
 8019df2:	3718      	adds	r7, #24
 8019df4:	46bd      	mov	sp, r7
 8019df6:	bd80      	pop	{r7, pc}
 8019df8:	080290f4 	.word	0x080290f4
 8019dfc:	08020790 	.word	0x08020790
 8019e00:	08020b3c 	.word	0x08020b3c
 8019e04:	2001ded0 	.word	0x2001ded0
 8019e08:	08020b5c 	.word	0x08020b5c
 8019e0c:	08020ba4 	.word	0x08020ba4

08019e10 <hif_register_cb>:
 *                  function to be set
 *   @return    The function shall return ZERO for successful operation and a negative value otherwise.
 */

sint8 hif_register_cb(uint8 u8Grp, tpfHifCallBack fn)
{
 8019e10:	b580      	push	{r7, lr}
 8019e12:	b084      	sub	sp, #16
 8019e14:	af00      	add	r7, sp, #0
 8019e16:	4603      	mov	r3, r0
 8019e18:	6039      	str	r1, [r7, #0]
 8019e1a:	71fb      	strb	r3, [r7, #7]
    sint8 ret = M2M_SUCCESS;
 8019e1c:	2300      	movs	r3, #0
 8019e1e:	73fb      	strb	r3, [r7, #15]
    switch(u8Grp)
 8019e20:	79fb      	ldrb	r3, [r7, #7]
 8019e22:	3b01      	subs	r3, #1
 8019e24:	2b05      	cmp	r3, #5
 8019e26:	d827      	bhi.n	8019e78 <hif_register_cb+0x68>
 8019e28:	a201      	add	r2, pc, #4	; (adr r2, 8019e30 <hif_register_cb+0x20>)
 8019e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019e2e:	bf00      	nop
 8019e30:	08019e51 	.word	0x08019e51
 8019e34:	08019e49 	.word	0x08019e49
 8019e38:	08019e61 	.word	0x08019e61
 8019e3c:	08019e59 	.word	0x08019e59
 8019e40:	08019e71 	.word	0x08019e71
 8019e44:	08019e69 	.word	0x08019e69
    {
        case M2M_REQ_GROUP_IP:
            gstrHifCxt.pfIpCb = fn;
 8019e48:	4a17      	ldr	r2, [pc, #92]	; (8019ea8 <hif_register_cb+0x98>)
 8019e4a:	683b      	ldr	r3, [r7, #0]
 8019e4c:	6153      	str	r3, [r2, #20]
            break;
 8019e4e:	e024      	b.n	8019e9a <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_WIFI:
            gstrHifCxt.pfWifiCb = fn;
 8019e50:	4a15      	ldr	r2, [pc, #84]	; (8019ea8 <hif_register_cb+0x98>)
 8019e52:	683b      	ldr	r3, [r7, #0]
 8019e54:	6113      	str	r3, [r2, #16]
            break;
 8019e56:	e020      	b.n	8019e9a <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_OTA:
            gstrHifCxt.pfOtaCb = fn;
 8019e58:	4a13      	ldr	r2, [pc, #76]	; (8019ea8 <hif_register_cb+0x98>)
 8019e5a:	683b      	ldr	r3, [r7, #0]
 8019e5c:	6193      	str	r3, [r2, #24]
            break;
 8019e5e:	e01c      	b.n	8019e9a <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_HIF:
            gstrHifCxt.pfHifCb = fn;
 8019e60:	4a11      	ldr	r2, [pc, #68]	; (8019ea8 <hif_register_cb+0x98>)
 8019e62:	683b      	ldr	r3, [r7, #0]
 8019e64:	6213      	str	r3, [r2, #32]
            break;
 8019e66:	e018      	b.n	8019e9a <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_SIGMA:
            gstrHifCxt.pfSigmaCb = fn;
 8019e68:	4a0f      	ldr	r2, [pc, #60]	; (8019ea8 <hif_register_cb+0x98>)
 8019e6a:	683b      	ldr	r3, [r7, #0]
 8019e6c:	61d3      	str	r3, [r2, #28]
            break;
 8019e6e:	e014      	b.n	8019e9a <hif_register_cb+0x8a>
        case M2M_REQ_GROUP_SSL:
            gstrHifCxt.pfSslCb = fn;
 8019e70:	4a0d      	ldr	r2, [pc, #52]	; (8019ea8 <hif_register_cb+0x98>)
 8019e72:	683b      	ldr	r3, [r7, #0]
 8019e74:	6253      	str	r3, [r2, #36]	; 0x24
            break;
 8019e76:	e010      	b.n	8019e9a <hif_register_cb+0x8a>
        default:
            M2M_ERR("GRp ? %d\n", u8Grp);
 8019e78:	f44f 725f 	mov.w	r2, #892	; 0x37c
 8019e7c:	490b      	ldr	r1, [pc, #44]	; (8019eac <hif_register_cb+0x9c>)
 8019e7e:	480c      	ldr	r0, [pc, #48]	; (8019eb0 <hif_register_cb+0xa0>)
 8019e80:	f004 fb60 	bl	801e544 <iprintf>
 8019e84:	79fb      	ldrb	r3, [r7, #7]
 8019e86:	4619      	mov	r1, r3
 8019e88:	480a      	ldr	r0, [pc, #40]	; (8019eb4 <hif_register_cb+0xa4>)
 8019e8a:	f004 fb5b 	bl	801e544 <iprintf>
 8019e8e:	200d      	movs	r0, #13
 8019e90:	f004 fb70 	bl	801e574 <putchar>
            ret = M2M_ERR_FAIL;
 8019e94:	23f4      	movs	r3, #244	; 0xf4
 8019e96:	73fb      	strb	r3, [r7, #15]
            break;
 8019e98:	bf00      	nop
    }
    return ret;
 8019e9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	3710      	adds	r7, #16
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	bd80      	pop	{r7, pc}
 8019ea6:	bf00      	nop
 8019ea8:	2001ded0 	.word	0x2001ded0
 8019eac:	08029100 	.word	0x08029100
 8019eb0:	08020790 	.word	0x08020790
 8019eb4:	08020be8 	.word	0x08020be8

08019eb8 <m2m_periph_pullup_ctrl>:
    return M2M_ERR_INVALID_REQ;
}
#endif

sint8 m2m_periph_pullup_ctrl(uint32 pinmask, uint8 enable)
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b082      	sub	sp, #8
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
 8019ec0:	460b      	mov	r3, r1
 8019ec2:	70fb      	strb	r3, [r7, #3]
    return pullup_ctrl(pinmask, enable);
 8019ec4:	78fb      	ldrb	r3, [r7, #3]
 8019ec6:	4619      	mov	r1, r3
 8019ec8:	6878      	ldr	r0, [r7, #4]
 8019eca:	f001 fc07 	bl	801b6dc <pullup_ctrl>
 8019ece:	4603      	mov	r3, r0
}
 8019ed0:	4618      	mov	r0, r3
 8019ed2:	3708      	adds	r7, #8
 8019ed4:	46bd      	mov	sp, r7
 8019ed6:	bd80      	pop	{r7, pc}

08019ed8 <m2m_wifi_cb>:
*                   HIF address.
*   @param [in] grp
*                   HIF group type.
*/
static void m2m_wifi_cb(uint8 u8OpCode, uint16 u16DataSize, uint32 u32Addr)
{
 8019ed8:	b580      	push	{r7, lr}
 8019eda:	b0b2      	sub	sp, #200	; 0xc8
 8019edc:	af02      	add	r7, sp, #8
 8019ede:	4603      	mov	r3, r0
 8019ee0:	603a      	str	r2, [r7, #0]
 8019ee2:	71fb      	strb	r3, [r7, #7]
 8019ee4:	460b      	mov	r3, r1
 8019ee6:	80bb      	strh	r3, [r7, #4]
    uint8 rx_buf[8];
    if(u8OpCode == M2M_WIFI_RESP_CON_STATE_CHANGED)
 8019ee8:	79fb      	ldrb	r3, [r7, #7]
 8019eea:	2b2c      	cmp	r3, #44	; 0x2c
 8019eec:	d117      	bne.n	8019f1e <m2m_wifi_cb+0x46>
    {
        tstrM2mWifiStateChanged strState;
        if(hif_receive(u32Addr, (uint8 *) &strState, sizeof(tstrM2mWifiStateChanged), 0) == M2M_SUCCESS)
 8019eee:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8019ef2:	2300      	movs	r3, #0
 8019ef4:	2204      	movs	r2, #4
 8019ef6:	6838      	ldr	r0, [r7, #0]
 8019ef8:	f7ff fee2 	bl	8019cc0 <hif_receive>
 8019efc:	4603      	mov	r3, r0
 8019efe:	2b00      	cmp	r3, #0
 8019f00:	f040 8217 	bne.w	801a332 <m2m_wifi_cb+0x45a>
        {
            if(gpfAppWifiCb)
 8019f04:	4baf      	ldr	r3, [pc, #700]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019f06:	681b      	ldr	r3, [r3, #0]
 8019f08:	2b00      	cmp	r3, #0
 8019f0a:	f000 8212 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_CON_STATE_CHANGED, &strState);
 8019f0e:	4bad      	ldr	r3, [pc, #692]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019f10:	681b      	ldr	r3, [r3, #0]
 8019f12:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8019f16:	4611      	mov	r1, r2
 8019f18:	202c      	movs	r0, #44	; 0x2c
 8019f1a:	4798      	blx	r3
#endif
    else
    {
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
    }
}
 8019f1c:	e209      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_GET_SYS_TIME)
 8019f1e:	79fb      	ldrb	r3, [r7, #7]
 8019f20:	2b1d      	cmp	r3, #29
 8019f22:	d117      	bne.n	8019f54 <m2m_wifi_cb+0x7c>
        if(hif_receive(u32Addr, (uint8 *) &strSysTime, sizeof(tstrSystemTime), 0) == M2M_SUCCESS)
 8019f24:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8019f28:	2300      	movs	r3, #0
 8019f2a:	2208      	movs	r2, #8
 8019f2c:	6838      	ldr	r0, [r7, #0]
 8019f2e:	f7ff fec7 	bl	8019cc0 <hif_receive>
 8019f32:	4603      	mov	r3, r0
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	f040 81fc 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 8019f3a:	4ba2      	ldr	r3, [pc, #648]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	f000 81f7 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_GET_SYS_TIME, &strSysTime);
 8019f44:	4b9f      	ldr	r3, [pc, #636]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019f46:	681b      	ldr	r3, [r3, #0]
 8019f48:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8019f4c:	4611      	mov	r1, r2
 8019f4e:	201d      	movs	r0, #29
 8019f50:	4798      	blx	r3
}
 8019f52:	e1ee      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_CONN_INFO)
 8019f54:	79fb      	ldrb	r3, [r7, #7]
 8019f56:	2b08      	cmp	r3, #8
 8019f58:	d117      	bne.n	8019f8a <m2m_wifi_cb+0xb2>
        if(hif_receive(u32Addr, (uint8 *)&strConnInfo, sizeof(tstrM2MConnInfo), 1) == M2M_SUCCESS)
 8019f5a:	f107 010c 	add.w	r1, r7, #12
 8019f5e:	2301      	movs	r3, #1
 8019f60:	2230      	movs	r2, #48	; 0x30
 8019f62:	6838      	ldr	r0, [r7, #0]
 8019f64:	f7ff feac 	bl	8019cc0 <hif_receive>
 8019f68:	4603      	mov	r3, r0
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	f040 81e1 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 8019f70:	4b94      	ldr	r3, [pc, #592]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	2b00      	cmp	r3, #0
 8019f76:	f000 81dc 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_CONN_INFO, &strConnInfo);
 8019f7a:	4b92      	ldr	r3, [pc, #584]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	f107 020c 	add.w	r2, r7, #12
 8019f82:	4611      	mov	r1, r2
 8019f84:	2008      	movs	r0, #8
 8019f86:	4798      	blx	r3
}
 8019f88:	e1d3      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_MEMORY_RECOVER)
 8019f8a:	79fb      	ldrb	r3, [r7, #7]
 8019f8c:	2b10      	cmp	r3, #16
 8019f8e:	f000 81d0 	beq.w	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_REQ_DHCP_CONF)
 8019f92:	79fb      	ldrb	r3, [r7, #7]
 8019f94:	2b32      	cmp	r3, #50	; 0x32
 8019f96:	d117      	bne.n	8019fc8 <m2m_wifi_cb+0xf0>
        if(hif_receive(u32Addr, (uint8 *)&strIpConfig, sizeof(tstrM2MIPConfig), 0) == M2M_SUCCESS)
 8019f98:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	2214      	movs	r2, #20
 8019fa0:	6838      	ldr	r0, [r7, #0]
 8019fa2:	f7ff fe8d 	bl	8019cc0 <hif_receive>
 8019fa6:	4603      	mov	r3, r0
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	f040 81c2 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 8019fae:	4b85      	ldr	r3, [pc, #532]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019fb0:	681b      	ldr	r3, [r3, #0]
 8019fb2:	2b00      	cmp	r3, #0
 8019fb4:	f000 81bd 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_REQ_DHCP_CONF, (uint8 *)&strIpConfig);
 8019fb8:	4b82      	ldr	r3, [pc, #520]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019fba:	681b      	ldr	r3, [r3, #0]
 8019fbc:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8019fc0:	4611      	mov	r1, r2
 8019fc2:	2032      	movs	r0, #50	; 0x32
 8019fc4:	4798      	blx	r3
}
 8019fc6:	e1b4      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_REQ_WPS)
 8019fc8:	79fb      	ldrb	r3, [r7, #7]
 8019fca:	2b2f      	cmp	r3, #47	; 0x2f
 8019fcc:	d11e      	bne.n	801a00c <m2m_wifi_cb+0x134>
        m2m_memset((uint8 *)&strWps, 0, sizeof(tstrM2MWPSInfo));
 8019fce:	f107 030c 	add.w	r3, r7, #12
 8019fd2:	2268      	movs	r2, #104	; 0x68
 8019fd4:	2100      	movs	r1, #0
 8019fd6:	4618      	mov	r0, r3
 8019fd8:	f7fe ffa8 	bl	8018f2c <m2m_memset>
        if(hif_receive(u32Addr, (uint8 *)&strWps, sizeof(tstrM2MWPSInfo), 0) == M2M_SUCCESS)
 8019fdc:	f107 010c 	add.w	r1, r7, #12
 8019fe0:	2300      	movs	r3, #0
 8019fe2:	2268      	movs	r2, #104	; 0x68
 8019fe4:	6838      	ldr	r0, [r7, #0]
 8019fe6:	f7ff fe6b 	bl	8019cc0 <hif_receive>
 8019fea:	4603      	mov	r3, r0
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	f040 81a0 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 8019ff2:	4b74      	ldr	r3, [pc, #464]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019ff4:	681b      	ldr	r3, [r3, #0]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	f000 819b 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_REQ_WPS, &strWps);
 8019ffc:	4b71      	ldr	r3, [pc, #452]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	f107 020c 	add.w	r2, r7, #12
 801a004:	4611      	mov	r1, r2
 801a006:	202f      	movs	r0, #47	; 0x2f
 801a008:	4798      	blx	r3
}
 801a00a:	e192      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_IP_CONFLICT)
 801a00c:	79fb      	ldrb	r3, [r7, #7]
 801a00e:	2b34      	cmp	r3, #52	; 0x34
 801a010:	d132      	bne.n	801a078 <m2m_wifi_cb+0x1a0>
        if(hif_receive(u32Addr, (uint8 *)&u32ConflictedIP, sizeof(u32ConflictedIP), 0) == M2M_SUCCESS)
 801a012:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 801a016:	2300      	movs	r3, #0
 801a018:	2204      	movs	r2, #4
 801a01a:	6838      	ldr	r0, [r7, #0]
 801a01c:	f7ff fe50 	bl	8019cc0 <hif_receive>
 801a020:	4603      	mov	r3, r0
 801a022:	2b00      	cmp	r3, #0
 801a024:	f040 8185 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            M2M_INFO("Conflicted IP \" %u.%u.%u.%u \" \n",
 801a028:	4867      	ldr	r0, [pc, #412]	; (801a1c8 <m2m_wifi_cb+0x2f0>)
 801a02a:	f004 fa8b 	bl	801e544 <iprintf>
 801a02e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a032:	0e1b      	lsrs	r3, r3, #24
 801a034:	b2db      	uxtb	r3, r3
 801a036:	4619      	mov	r1, r3
 801a038:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a03c:	0c1b      	lsrs	r3, r3, #16
 801a03e:	b2db      	uxtb	r3, r3
 801a040:	461a      	mov	r2, r3
 801a042:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a046:	0a1b      	lsrs	r3, r3, #8
 801a048:	b2db      	uxtb	r3, r3
 801a04a:	4618      	mov	r0, r3
 801a04c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801a050:	b2db      	uxtb	r3, r3
 801a052:	9300      	str	r3, [sp, #0]
 801a054:	4603      	mov	r3, r0
 801a056:	485d      	ldr	r0, [pc, #372]	; (801a1cc <m2m_wifi_cb+0x2f4>)
 801a058:	f004 fa74 	bl	801e544 <iprintf>
 801a05c:	200d      	movs	r0, #13
 801a05e:	f004 fa89 	bl	801e574 <putchar>
            if(gpfAppWifiCb)
 801a062:	4b58      	ldr	r3, [pc, #352]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a064:	681b      	ldr	r3, [r3, #0]
 801a066:	2b00      	cmp	r3, #0
 801a068:	f000 8163 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_IP_CONFLICT, NULL);
 801a06c:	4b55      	ldr	r3, [pc, #340]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a06e:	681b      	ldr	r3, [r3, #0]
 801a070:	2100      	movs	r1, #0
 801a072:	2034      	movs	r0, #52	; 0x34
 801a074:	4798      	blx	r3
}
 801a076:	e15c      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_DONE)
 801a078:	79fb      	ldrb	r3, [r7, #7]
 801a07a:	2b13      	cmp	r3, #19
 801a07c:	d11b      	bne.n	801a0b6 <m2m_wifi_cb+0x1de>
        if(hif_receive(u32Addr, (uint8 *)&strState, sizeof(tstrM2mScanDone), 0) == M2M_SUCCESS)
 801a07e:	f107 0188 	add.w	r1, r7, #136	; 0x88
 801a082:	2300      	movs	r3, #0
 801a084:	2204      	movs	r2, #4
 801a086:	6838      	ldr	r0, [r7, #0]
 801a088:	f7ff fe1a 	bl	8019cc0 <hif_receive>
 801a08c:	4603      	mov	r3, r0
 801a08e:	2b00      	cmp	r3, #0
 801a090:	f040 814f 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            gu8ChNum = strState.u8NumofCh;
 801a094:	f897 2088 	ldrb.w	r2, [r7, #136]	; 0x88
 801a098:	4b4d      	ldr	r3, [pc, #308]	; (801a1d0 <m2m_wifi_cb+0x2f8>)
 801a09a:	701a      	strb	r2, [r3, #0]
            if(gpfAppWifiCb)
 801a09c:	4b49      	ldr	r3, [pc, #292]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	f000 8146 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_DONE, &strState);
 801a0a6:	4b47      	ldr	r3, [pc, #284]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 801a0ae:	4611      	mov	r1, r2
 801a0b0:	2013      	movs	r0, #19
 801a0b2:	4798      	blx	r3
}
 801a0b4:	e13d      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_SCAN_RESULT)
 801a0b6:	79fb      	ldrb	r3, [r7, #7]
 801a0b8:	2b15      	cmp	r3, #21
 801a0ba:	d117      	bne.n	801a0ec <m2m_wifi_cb+0x214>
        if(hif_receive(u32Addr, (uint8 *)&strScanResult, sizeof(tstrM2mWifiscanResult), 0) == M2M_SUCCESS)
 801a0bc:	f107 010c 	add.w	r1, r7, #12
 801a0c0:	2300      	movs	r3, #0
 801a0c2:	222c      	movs	r2, #44	; 0x2c
 801a0c4:	6838      	ldr	r0, [r7, #0]
 801a0c6:	f7ff fdfb 	bl	8019cc0 <hif_receive>
 801a0ca:	4603      	mov	r3, r0
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	f040 8130 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a0d2:	4b3c      	ldr	r3, [pc, #240]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	2b00      	cmp	r3, #0
 801a0d8:	f000 812b 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_SCAN_RESULT, &strScanResult);
 801a0dc:	4b39      	ldr	r3, [pc, #228]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	f107 020c 	add.w	r2, r7, #12
 801a0e4:	4611      	mov	r1, r2
 801a0e6:	2015      	movs	r0, #21
 801a0e8:	4798      	blx	r3
}
 801a0ea:	e122      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_CURRENT_RSSI)
 801a0ec:	79fb      	ldrb	r3, [r7, #7]
 801a0ee:	2b04      	cmp	r3, #4
 801a0f0:	d117      	bne.n	801a122 <m2m_wifi_cb+0x24a>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 801a0f2:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 801a0f6:	2300      	movs	r3, #0
 801a0f8:	2204      	movs	r2, #4
 801a0fa:	6838      	ldr	r0, [r7, #0]
 801a0fc:	f7ff fde0 	bl	8019cc0 <hif_receive>
 801a100:	4603      	mov	r3, r0
 801a102:	2b00      	cmp	r3, #0
 801a104:	f040 8115 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a108:	4b2e      	ldr	r3, [pc, #184]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a10a:	681b      	ldr	r3, [r3, #0]
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	f000 8110 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_CURRENT_RSSI, rx_buf);
 801a112:	4b2c      	ldr	r3, [pc, #176]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a114:	681b      	ldr	r3, [r3, #0]
 801a116:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801a11a:	4611      	mov	r1, r2
 801a11c:	2004      	movs	r0, #4
 801a11e:	4798      	blx	r3
}
 801a120:	e107      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_CLIENT_INFO)
 801a122:	79fb      	ldrb	r3, [r7, #7]
 801a124:	2b65      	cmp	r3, #101	; 0x65
 801a126:	d117      	bne.n	801a158 <m2m_wifi_cb+0x280>
        if(hif_receive(u32Addr, rx_buf, 4, 0) == M2M_SUCCESS)
 801a128:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 801a12c:	2300      	movs	r3, #0
 801a12e:	2204      	movs	r2, #4
 801a130:	6838      	ldr	r0, [r7, #0]
 801a132:	f7ff fdc5 	bl	8019cc0 <hif_receive>
 801a136:	4603      	mov	r3, r0
 801a138:	2b00      	cmp	r3, #0
 801a13a:	f040 80fa 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a13e:	4b21      	ldr	r3, [pc, #132]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a140:	681b      	ldr	r3, [r3, #0]
 801a142:	2b00      	cmp	r3, #0
 801a144:	f000 80f5 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_CLIENT_INFO, rx_buf);
 801a148:	4b1e      	ldr	r3, [pc, #120]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a14a:	681b      	ldr	r3, [r3, #0]
 801a14c:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 801a150:	4611      	mov	r1, r2
 801a152:	2065      	movs	r0, #101	; 0x65
 801a154:	4798      	blx	r3
}
 801a156:	e0ec      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_PROVISION_INFO)
 801a158:	79fb      	ldrb	r3, [r7, #7]
 801a15a:	2b0b      	cmp	r3, #11
 801a15c:	d117      	bne.n	801a18e <m2m_wifi_cb+0x2b6>
        if(hif_receive(u32Addr, (uint8 *)&strProvInfo, sizeof(tstrM2MProvisionInfo), 1) == M2M_SUCCESS)
 801a15e:	f107 010c 	add.w	r1, r7, #12
 801a162:	2301      	movs	r3, #1
 801a164:	2264      	movs	r2, #100	; 0x64
 801a166:	6838      	ldr	r0, [r7, #0]
 801a168:	f7ff fdaa 	bl	8019cc0 <hif_receive>
 801a16c:	4603      	mov	r3, r0
 801a16e:	2b00      	cmp	r3, #0
 801a170:	f040 80df 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a174:	4b13      	ldr	r3, [pc, #76]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	2b00      	cmp	r3, #0
 801a17a:	f000 80da 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_PROVISION_INFO, &strProvInfo);
 801a17e:	4b11      	ldr	r3, [pc, #68]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	f107 020c 	add.w	r2, r7, #12
 801a186:	4611      	mov	r1, r2
 801a188:	200b      	movs	r0, #11
 801a18a:	4798      	blx	r3
}
 801a18c:	e0d1      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_DEFAULT_CONNECT)
 801a18e:	79fb      	ldrb	r3, [r7, #7]
 801a190:	2b2a      	cmp	r3, #42	; 0x2a
 801a192:	d11f      	bne.n	801a1d4 <m2m_wifi_cb+0x2fc>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MDefaultConnResp), 1) == M2M_SUCCESS)
 801a194:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801a198:	2301      	movs	r3, #1
 801a19a:	2204      	movs	r2, #4
 801a19c:	6838      	ldr	r0, [r7, #0]
 801a19e:	f7ff fd8f 	bl	8019cc0 <hif_receive>
 801a1a2:	4603      	mov	r3, r0
 801a1a4:	2b00      	cmp	r3, #0
 801a1a6:	f040 80c4 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a1aa:	4b06      	ldr	r3, [pc, #24]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	2b00      	cmp	r3, #0
 801a1b0:	f000 80bf 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_DEFAULT_CONNECT, &strResp);
 801a1b4:	4b03      	ldr	r3, [pc, #12]	; (801a1c4 <m2m_wifi_cb+0x2ec>)
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 801a1bc:	4611      	mov	r1, r2
 801a1be:	202a      	movs	r0, #42	; 0x2a
 801a1c0:	4798      	blx	r3
}
 801a1c2:	e0b6      	b.n	801a332 <m2m_wifi_cb+0x45a>
 801a1c4:	2001defc 	.word	0x2001defc
 801a1c8:	08020bf4 	.word	0x08020bf4
 801a1cc:	08020c00 	.word	0x08020c00
 801a1d0:	2001def9 	.word	0x2001def9
    else if(u8OpCode == M2M_WIFI_REQRSP_DELETE_APID)
 801a1d4:	79fb      	ldrb	r3, [r7, #7]
 801a1d6:	2b69      	cmp	r3, #105	; 0x69
 801a1d8:	d117      	bne.n	801a20a <m2m_wifi_cb+0x332>
        if(hif_receive(u32Addr, (uint8 *)&strResp, sizeof(tstrM2MGenericResp), 0) == M2M_SUCCESS)
 801a1da:	f107 0180 	add.w	r1, r7, #128	; 0x80
 801a1de:	2300      	movs	r3, #0
 801a1e0:	2204      	movs	r2, #4
 801a1e2:	6838      	ldr	r0, [r7, #0]
 801a1e4:	f7ff fd6c 	bl	8019cc0 <hif_receive>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	f040 80a1 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a1f0:	4b52      	ldr	r3, [pc, #328]	; (801a33c <m2m_wifi_cb+0x464>)
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	f000 809c 	beq.w	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_REQRSP_DELETE_APID, &strResp);
 801a1fa:	4b50      	ldr	r3, [pc, #320]	; (801a33c <m2m_wifi_cb+0x464>)
 801a1fc:	681b      	ldr	r3, [r3, #0]
 801a1fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801a202:	4611      	mov	r1, r2
 801a204:	2069      	movs	r0, #105	; 0x69
 801a206:	4798      	blx	r3
}
 801a208:	e093      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_BLE_API_RECV)
 801a20a:	79fb      	ldrb	r3, [r7, #7]
 801a20c:	2b22      	cmp	r3, #34	; 0x22
 801a20e:	d144      	bne.n	801a29a <m2m_wifi_cb+0x3c2>
        if(hif_receive(u32Addr, rx_buf, 2, 0) == M2M_SUCCESS)
 801a210:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 801a214:	2300      	movs	r3, #0
 801a216:	2202      	movs	r2, #2
 801a218:	6838      	ldr	r0, [r7, #0]
 801a21a:	f7ff fd51 	bl	8019cc0 <hif_receive>
 801a21e:	4603      	mov	r3, r0
 801a220:	2b00      	cmp	r3, #0
 801a222:	f040 8086 	bne.w	801a332 <m2m_wifi_cb+0x45a>
            uint16 u16BleMsgLen = (rx_buf[1] << 8) + rx_buf[0];
 801a226:	f897 30b1 	ldrb.w	r3, [r7, #177]	; 0xb1
 801a22a:	b29b      	uxth	r3, r3
 801a22c:	021b      	lsls	r3, r3, #8
 801a22e:	b29a      	uxth	r2, r3
 801a230:	f897 30b0 	ldrb.w	r3, [r7, #176]	; 0xb0
 801a234:	b29b      	uxth	r3, r3
 801a236:	4413      	add	r3, r2
 801a238:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
            tstrM2mBleApiMsg *bleRx = (tstrM2mBleApiMsg *)malloc(u16BleMsgLen + sizeof(tstrM2mBleApiMsg));
 801a23c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801a240:	3302      	adds	r3, #2
 801a242:	4618      	mov	r0, r3
 801a244:	f004 f85e 	bl	801e304 <malloc>
 801a248:	4603      	mov	r3, r0
 801a24a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
            if(bleRx != NULL)
 801a24e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a252:	2b00      	cmp	r3, #0
 801a254:	d06d      	beq.n	801a332 <m2m_wifi_cb+0x45a>
                bleRx->u16Len = u16BleMsgLen;
 801a256:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a25a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801a25e:	801a      	strh	r2, [r3, #0]
                if(hif_receive(u32Addr+2, bleRx->data, bleRx->u16Len, 1)== M2M_SUCCESS)
 801a260:	683b      	ldr	r3, [r7, #0]
 801a262:	1c98      	adds	r0, r3, #2
 801a264:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a268:	1c99      	adds	r1, r3, #2
 801a26a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801a26e:	881a      	ldrh	r2, [r3, #0]
 801a270:	2301      	movs	r3, #1
 801a272:	f7ff fd25 	bl	8019cc0 <hif_receive>
 801a276:	4603      	mov	r3, r0
 801a278:	2b00      	cmp	r3, #0
 801a27a:	d109      	bne.n	801a290 <m2m_wifi_cb+0x3b8>
                    if(gpfAppWifiCb)
 801a27c:	4b2f      	ldr	r3, [pc, #188]	; (801a33c <m2m_wifi_cb+0x464>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	2b00      	cmp	r3, #0
 801a282:	d005      	beq.n	801a290 <m2m_wifi_cb+0x3b8>
                        gpfAppWifiCb(M2M_WIFI_RESP_BLE_API_RECV, bleRx);
 801a284:	4b2d      	ldr	r3, [pc, #180]	; (801a33c <m2m_wifi_cb+0x464>)
 801a286:	681b      	ldr	r3, [r3, #0]
 801a288:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801a28c:	2022      	movs	r0, #34	; 0x22
 801a28e:	4798      	blx	r3
                free(bleRx);
 801a290:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801a294:	f004 f83e 	bl	801e314 <free>
}
 801a298:	e04b      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_GET_PRNG)
 801a29a:	79fb      	ldrb	r3, [r7, #7]
 801a29c:	2b3c      	cmp	r3, #60	; 0x3c
 801a29e:	d121      	bne.n	801a2e4 <m2m_wifi_cb+0x40c>
        if(hif_receive(u32Addr, (uint8 *)&strPrng, sizeof(tstrPrng), 0) == M2M_SUCCESS)
 801a2a0:	f107 0178 	add.w	r1, r7, #120	; 0x78
 801a2a4:	2300      	movs	r3, #0
 801a2a6:	2208      	movs	r2, #8
 801a2a8:	6838      	ldr	r0, [r7, #0]
 801a2aa:	f7ff fd09 	bl	8019cc0 <hif_receive>
 801a2ae:	4603      	mov	r3, r0
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d13e      	bne.n	801a332 <m2m_wifi_cb+0x45a>
            if(hif_receive(u32Addr + sizeof(tstrPrng), strPrng.pu8RngBuff, strPrng.u16PrngSize, 1) == M2M_SUCCESS)
 801a2b4:	683b      	ldr	r3, [r7, #0]
 801a2b6:	f103 0008 	add.w	r0, r3, #8
 801a2ba:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801a2bc:	f8b7 207c 	ldrh.w	r2, [r7, #124]	; 0x7c
 801a2c0:	2301      	movs	r3, #1
 801a2c2:	f7ff fcfd 	bl	8019cc0 <hif_receive>
 801a2c6:	4603      	mov	r3, r0
 801a2c8:	2b00      	cmp	r3, #0
 801a2ca:	d132      	bne.n	801a332 <m2m_wifi_cb+0x45a>
                if(gpfAppWifiCb) {
 801a2cc:	4b1b      	ldr	r3, [pc, #108]	; (801a33c <m2m_wifi_cb+0x464>)
 801a2ce:	681b      	ldr	r3, [r3, #0]
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d02e      	beq.n	801a332 <m2m_wifi_cb+0x45a>
                    gpfAppWifiCb(M2M_WIFI_RESP_GET_PRNG, &strPrng);
 801a2d4:	4b19      	ldr	r3, [pc, #100]	; (801a33c <m2m_wifi_cb+0x464>)
 801a2d6:	681b      	ldr	r3, [r3, #0]
 801a2d8:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801a2dc:	4611      	mov	r1, r2
 801a2de:	203c      	movs	r0, #60	; 0x3c
 801a2e0:	4798      	blx	r3
}
 801a2e2:	e026      	b.n	801a332 <m2m_wifi_cb+0x45a>
    else if(u8OpCode == M2M_WIFI_RESP_SET_GAIN_TABLE)
 801a2e4:	79fb      	ldrb	r3, [r7, #7]
 801a2e6:	2b24      	cmp	r3, #36	; 0x24
 801a2e8:	d115      	bne.n	801a316 <m2m_wifi_cb+0x43e>
        if(hif_receive(u32Addr, (uint8 *) &strGainRsp, sizeof(tstrM2MGainTableRsp), 0) == M2M_SUCCESS)
 801a2ea:	f107 0174 	add.w	r1, r7, #116	; 0x74
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	2204      	movs	r2, #4
 801a2f2:	6838      	ldr	r0, [r7, #0]
 801a2f4:	f7ff fce4 	bl	8019cc0 <hif_receive>
 801a2f8:	4603      	mov	r3, r0
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	d119      	bne.n	801a332 <m2m_wifi_cb+0x45a>
            if(gpfAppWifiCb)
 801a2fe:	4b0f      	ldr	r3, [pc, #60]	; (801a33c <m2m_wifi_cb+0x464>)
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	2b00      	cmp	r3, #0
 801a304:	d015      	beq.n	801a332 <m2m_wifi_cb+0x45a>
                gpfAppWifiCb(M2M_WIFI_RESP_SET_GAIN_TABLE, &strGainRsp);
 801a306:	4b0d      	ldr	r3, [pc, #52]	; (801a33c <m2m_wifi_cb+0x464>)
 801a308:	681b      	ldr	r3, [r3, #0]
 801a30a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801a30e:	4611      	mov	r1, r2
 801a310:	2024      	movs	r0, #36	; 0x24
 801a312:	4798      	blx	r3
}
 801a314:	e00d      	b.n	801a332 <m2m_wifi_cb+0x45a>
        M2M_ERR("REQ Not defined %d\n", u8OpCode);
 801a316:	f240 122f 	movw	r2, #303	; 0x12f
 801a31a:	4909      	ldr	r1, [pc, #36]	; (801a340 <m2m_wifi_cb+0x468>)
 801a31c:	4809      	ldr	r0, [pc, #36]	; (801a344 <m2m_wifi_cb+0x46c>)
 801a31e:	f004 f911 	bl	801e544 <iprintf>
 801a322:	79fb      	ldrb	r3, [r7, #7]
 801a324:	4619      	mov	r1, r3
 801a326:	4808      	ldr	r0, [pc, #32]	; (801a348 <m2m_wifi_cb+0x470>)
 801a328:	f004 f90c 	bl	801e544 <iprintf>
 801a32c:	200d      	movs	r0, #13
 801a32e:	f004 f921 	bl	801e574 <putchar>
}
 801a332:	bf00      	nop
 801a334:	37c0      	adds	r7, #192	; 0xc0
 801a336:	46bd      	mov	sp, r7
 801a338:	bd80      	pop	{r7, pc}
 801a33a:	bf00      	nop
 801a33c:	2001defc 	.word	0x2001defc
 801a340:	08029110 	.word	0x08029110
 801a344:	08020c20 	.word	0x08020c20
 801a348:	08020c34 	.word	0x08020c34

0801a34c <m2m_wifi_ble_set_gain_table>:
    }
    return s8Ret;
}

NMI_API sint8 m2m_wifi_ble_set_gain_table(uint8 table_idx)
{
 801a34c:	b580      	push	{r7, lr}
 801a34e:	b088      	sub	sp, #32
 801a350:	af04      	add	r7, sp, #16
 801a352:	4603      	mov	r3, r0
 801a354:	71fb      	strb	r3, [r7, #7]
    sint8 s8Ret = M2M_ERR_FAIL;
 801a356:	23f4      	movs	r3, #244	; 0xf4
 801a358:	73fb      	strb	r3, [r7, #15]
    tstrM2MGainTable strGainTable = {0};
 801a35a:	2300      	movs	r3, #0
 801a35c:	60bb      	str	r3, [r7, #8]

    strGainTable.u8GainTable = table_idx;
 801a35e:	79fb      	ldrb	r3, [r7, #7]
 801a360:	723b      	strb	r3, [r7, #8]

    s8Ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_GAIN_TABLE, (uint8 *)&strGainTable, sizeof(tstrM2MGainTable), NULL, 0, 0);
 801a362:	f107 0208 	add.w	r2, r7, #8
 801a366:	2300      	movs	r3, #0
 801a368:	9302      	str	r3, [sp, #8]
 801a36a:	2300      	movs	r3, #0
 801a36c:	9301      	str	r3, [sp, #4]
 801a36e:	2300      	movs	r3, #0
 801a370:	9300      	str	r3, [sp, #0]
 801a372:	2304      	movs	r3, #4
 801a374:	2123      	movs	r1, #35	; 0x23
 801a376:	2001      	movs	r0, #1
 801a378:	f7ff f858 	bl	801942c <hif_send>
 801a37c:	4603      	mov	r3, r0
 801a37e:	73fb      	strb	r3, [r7, #15]
    return s8Ret;
 801a380:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a384:	4618      	mov	r0, r3
 801a386:	3710      	adds	r7, #16
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}

0801a38c <m2m_wifi_init_hold>:

sint8 m2m_wifi_init_hold(void)
{
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b082      	sub	sp, #8
 801a390:	af00      	add	r7, sp, #0
    sint8 ret = M2M_ERR_FAIL;
 801a392:	23f4      	movs	r3, #244	; 0xf4
 801a394:	71fb      	strb	r3, [r7, #7]

    /* Apply device specific initialization. */
    ret = nm_drv_init_hold(0);
 801a396:	2000      	movs	r0, #0
 801a398:	f001 fd84 	bl	801bea4 <nm_drv_init_hold>
 801a39c:	4603      	mov	r3, r0
 801a39e:	71fb      	strb	r3, [r7, #7]

    return ret;
 801a3a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801a3a4:	4618      	mov	r0, r3
 801a3a6:	3708      	adds	r7, #8
 801a3a8:	46bd      	mov	sp, r7
 801a3aa:	bd80      	pop	{r7, pc}

0801a3ac <m2m_wifi_init_start>:

sint8 m2m_wifi_init_start(tstrWifiInitParam *param)
{
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b08c      	sub	sp, #48	; 0x30
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	6078      	str	r0, [r7, #4]
    tstrM2mRev strtmp;
    sint8 ret = M2M_SUCCESS;
 801a3b4:	2300      	movs	r3, #0
 801a3b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8 u8WifiMode = M2M_WIFI_MODE_NORMAL;
 801a3ba:	2301      	movs	r3, #1
 801a3bc:	73fb      	strb	r3, [r7, #15]

    if(param == NULL) {
 801a3be:	687b      	ldr	r3, [r7, #4]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d103      	bne.n	801a3cc <m2m_wifi_init_start+0x20>
        ret = M2M_ERR_FAIL;
 801a3c4:	23f4      	movs	r3, #244	; 0xf4
 801a3c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        goto _EXIT0;
 801a3ca:	e05d      	b.n	801a488 <m2m_wifi_init_start+0xdc>
    }

    gpfAppWifiCb = param->pfAppWifiCb;
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	4a30      	ldr	r2, [pc, #192]	; (801a494 <m2m_wifi_init_start+0xe8>)
 801a3d2:	6013      	str	r3, [r2, #0]
    u8WifiMode          = param->strEthInitParam.u8EthernetEnable;
#endif

    /* Initialize host interface module */
    /* Do this before bringing up the WINC as it can send HIF messages very quickly from bootup and we need to be ready */
    ret = hif_init(NULL);
 801a3d4:	2000      	movs	r0, #0
 801a3d6:	f7fe ff21 	bl	801921c <hif_init>
 801a3da:	4603      	mov	r3, r0
 801a3dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(ret != M2M_SUCCESS)  goto _EXIT1;
 801a3e0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801a3e4:	2b00      	cmp	r3, #0
 801a3e6:	d147      	bne.n	801a478 <m2m_wifi_init_start+0xcc>
    hif_register_cb(M2M_REQ_GROUP_WIFI, m2m_wifi_cb);
 801a3e8:	492b      	ldr	r1, [pc, #172]	; (801a498 <m2m_wifi_init_start+0xec>)
 801a3ea:	2001      	movs	r0, #1
 801a3ec:	f7ff fd10 	bl	8019e10 <hif_register_cb>

    /* Apply device specific initialization. */
    ret = nm_drv_init_start(&u8WifiMode);
 801a3f0:	f107 030f 	add.w	r3, r7, #15
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	f001 fd9b 	bl	801bf30 <nm_drv_init_start>
 801a3fa:	4603      	mov	r3, r0
 801a3fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(ret != M2M_SUCCESS)  goto _EXIT0;
 801a400:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801a404:	2b00      	cmp	r3, #0
 801a406:	d13c      	bne.n	801a482 <m2m_wifi_init_start+0xd6>

    M2M_INFO("Curr driver ver: %u.%u.%u\n", M2M_DRIVER_VERSION_MAJOR_NO, M2M_DRIVER_VERSION_MINOR_NO, M2M_DRIVER_VERSION_PATCH_NO);
 801a408:	4824      	ldr	r0, [pc, #144]	; (801a49c <m2m_wifi_init_start+0xf0>)
 801a40a:	f004 f89b 	bl	801e544 <iprintf>
 801a40e:	2300      	movs	r3, #0
 801a410:	2201      	movs	r2, #1
 801a412:	2101      	movs	r1, #1
 801a414:	4822      	ldr	r0, [pc, #136]	; (801a4a0 <m2m_wifi_init_start+0xf4>)
 801a416:	f004 f895 	bl	801e544 <iprintf>
 801a41a:	200d      	movs	r0, #13
 801a41c:	f004 f8aa 	bl	801e574 <putchar>
    M2M_INFO("Curr driver HIF Level: (%u) %u.%u\n", M2M_HIF_BLOCK_VALUE, M2M_HIF_MAJOR_VALUE, M2M_HIF_MINOR_VALUE);
 801a420:	481e      	ldr	r0, [pc, #120]	; (801a49c <m2m_wifi_init_start+0xf0>)
 801a422:	f004 f88f 	bl	801e544 <iprintf>
 801a426:	2304      	movs	r3, #4
 801a428:	2201      	movs	r2, #1
 801a42a:	2102      	movs	r1, #2
 801a42c:	481d      	ldr	r0, [pc, #116]	; (801a4a4 <m2m_wifi_init_start+0xf8>)
 801a42e:	f004 f889 	bl	801e544 <iprintf>
 801a432:	200d      	movs	r0, #13
 801a434:	f004 f89e 	bl	801e574 <putchar>
    ret = m2m_wifi_get_firmware_version(&strtmp);
 801a438:	f107 0310 	add.w	r3, r7, #16
 801a43c:	4618      	mov	r0, r3
 801a43e:	f000 fd02 	bl	801ae46 <m2m_wifi_get_firmware_version>
 801a442:	4603      	mov	r3, r0
 801a444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    m2m_ota_get_firmware_version(&strtmp);
 801a448:	f107 0310 	add.w	r3, r7, #16
 801a44c:	4618      	mov	r0, r3
 801a44e:	f000 fd15 	bl	801ae7c <m2m_ota_get_firmware_version>

    if(ret == M2M_SUCCESS)
 801a452:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801a456:	2b00      	cmp	r3, #0
 801a458:	d115      	bne.n	801a486 <m2m_wifi_init_start+0xda>
    {
        ret = hif_enable_access();
 801a45a:	f7fe ff23 	bl	80192a4 <hif_enable_access>
 801a45e:	4603      	mov	r3, r0
 801a460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if(ret == M2M_SUCCESS)
 801a464:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 801a468:	2b00      	cmp	r3, #0
 801a46a:	d10c      	bne.n	801a486 <m2m_wifi_init_start+0xda>
        {
            m2m_wifi_ble_set_gain_table(param->GainTableIndex);
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	7e1b      	ldrb	r3, [r3, #24]
 801a470:	4618      	mov	r0, r3
 801a472:	f7ff ff6b 	bl	801a34c <m2m_wifi_ble_set_gain_table>
        }
    }
    goto _EXIT0;
 801a476:	e006      	b.n	801a486 <m2m_wifi_init_start+0xda>
    if(ret != M2M_SUCCESS)  goto _EXIT1;
 801a478:	bf00      	nop

_EXIT1:
    nm_drv_deinit(NULL);
 801a47a:	2000      	movs	r0, #0
 801a47c:	f001 fdc2 	bl	801c004 <nm_drv_deinit>
 801a480:	e002      	b.n	801a488 <m2m_wifi_init_start+0xdc>
    if(ret != M2M_SUCCESS)  goto _EXIT0;
 801a482:	bf00      	nop
 801a484:	e000      	b.n	801a488 <m2m_wifi_init_start+0xdc>
    goto _EXIT0;
 801a486:	bf00      	nop

_EXIT0:
    return ret;
 801a488:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 801a48c:	4618      	mov	r0, r3
 801a48e:	3730      	adds	r7, #48	; 0x30
 801a490:	46bd      	mov	sp, r7
 801a492:	bd80      	pop	{r7, pc}
 801a494:	2001defc 	.word	0x2001defc
 801a498:	08019ed9 	.word	0x08019ed9
 801a49c:	08020bf4 	.word	0x08020bf4
 801a4a0:	08020d5c 	.word	0x08020d5c
 801a4a4:	08020d78 	.word	0x08020d78

0801a4a8 <m2m_wifi_init>:

sint8 m2m_wifi_init(tstrWifiInitParam *param)
{
 801a4a8:	b580      	push	{r7, lr}
 801a4aa:	b084      	sub	sp, #16
 801a4ac:	af00      	add	r7, sp, #0
 801a4ae:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	73fb      	strb	r3, [r7, #15]

    ret = m2m_wifi_init_hold();
 801a4b4:	f7ff ff6a 	bl	801a38c <m2m_wifi_init_hold>
 801a4b8:	4603      	mov	r3, r0
 801a4ba:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801a4bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d104      	bne.n	801a4ce <m2m_wifi_init+0x26>
    {
        ret = m2m_wifi_init_start(param);
 801a4c4:	6878      	ldr	r0, [r7, #4]
 801a4c6:	f7ff ff71 	bl	801a3ac <m2m_wifi_init_start>
 801a4ca:	4603      	mov	r3, r0
 801a4cc:	73fb      	strb	r3, [r7, #15]
    }
    return ret;
 801a4ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a4d2:	4618      	mov	r0, r3
 801a4d4:	3710      	adds	r7, #16
 801a4d6:	46bd      	mov	sp, r7
 801a4d8:	bd80      	pop	{r7, pc}

0801a4da <m2m_wifi_get_state>:
    }
    return ret;
}

uint8 m2m_wifi_get_state(void)
{
 801a4da:	b580      	push	{r7, lr}
 801a4dc:	af00      	add	r7, sp, #0
    switch(nm_get_state())
 801a4de:	f001 fdd5 	bl	801c08c <nm_get_state>
 801a4e2:	4603      	mov	r3, r0
 801a4e4:	2b02      	cmp	r3, #2
 801a4e6:	d00a      	beq.n	801a4fe <m2m_wifi_get_state+0x24>
 801a4e8:	2b02      	cmp	r3, #2
 801a4ea:	dc0a      	bgt.n	801a502 <m2m_wifi_get_state+0x28>
 801a4ec:	2b00      	cmp	r3, #0
 801a4ee:	d002      	beq.n	801a4f6 <m2m_wifi_get_state+0x1c>
 801a4f0:	2b01      	cmp	r3, #1
 801a4f2:	d002      	beq.n	801a4fa <m2m_wifi_get_state+0x20>
 801a4f4:	e005      	b.n	801a502 <m2m_wifi_get_state+0x28>
    {
    case NM_STATE_DEINIT:
        return WIFI_STATE_DEINIT;
 801a4f6:	2300      	movs	r3, #0
 801a4f8:	e004      	b.n	801a504 <m2m_wifi_get_state+0x2a>
    case NM_STATE_INIT:
        return WIFI_STATE_INIT;
 801a4fa:	2301      	movs	r3, #1
 801a4fc:	e002      	b.n	801a504 <m2m_wifi_get_state+0x2a>
    case NM_STATE_START:
        return WIFI_STATE_START;
 801a4fe:	2302      	movs	r3, #2
 801a500:	e000      	b.n	801a504 <m2m_wifi_get_state+0x2a>
    }
    return WIFI_STATE_DEINIT;
 801a502:	2300      	movs	r3, #0
}
 801a504:	4618      	mov	r0, r3
 801a506:	bd80      	pop	{r7, pc}

0801a508 <m2m_wifi_handle_events>:
{
    hif_yield();
}

sint8 m2m_wifi_handle_events(void *arg)
{
 801a508:	b580      	push	{r7, lr}
 801a50a:	b084      	sub	sp, #16
 801a50c:	af00      	add	r7, sp, #0
 801a50e:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801a510:	2300      	movs	r3, #0
 801a512:	73fb      	strb	r3, [r7, #15]

    if(WIFI_STATE_START == m2m_wifi_get_state())
 801a514:	f7ff ffe1 	bl	801a4da <m2m_wifi_get_state>
 801a518:	4603      	mov	r3, r0
 801a51a:	2b02      	cmp	r3, #2
 801a51c:	d103      	bne.n	801a526 <m2m_wifi_handle_events+0x1e>
        ret = hif_handle_isr();
 801a51e:	f7ff fb6d 	bl	8019bfc <hif_handle_isr>
 801a522:	4603      	mov	r3, r0
 801a524:	73fb      	strb	r3, [r7, #15]

    return ret;
 801a526:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a52a:	4618      	mov	r0, r3
 801a52c:	3710      	adds	r7, #16
 801a52e:	46bd      	mov	sp, r7
 801a530:	bd80      	pop	{r7, pc}

0801a532 <m2m_wifi_connect_prepare_msg>:
    tenuM2mSecType      enuAuthType,
    uint16              u16AuthSize,
    tstrNetworkId       *pstrNetworkId,
    tstrM2mWifiConnHdr  *pstrWifiConn
)
{
 801a532:	b580      	push	{r7, lr}
 801a534:	b086      	sub	sp, #24
 801a536:	af00      	add	r7, sp, #0
 801a538:	603b      	str	r3, [r7, #0]
 801a53a:	4603      	mov	r3, r0
 801a53c:	71fb      	strb	r3, [r7, #7]
 801a53e:	460b      	mov	r3, r1
 801a540:	71bb      	strb	r3, [r7, #6]
 801a542:	4613      	mov	r3, r2
 801a544:	80bb      	strh	r3, [r7, #4]
    sint8   ret = M2M_ERR_FAIL;
 801a546:	23f4      	movs	r3, #244	; 0xf4
 801a548:	75fb      	strb	r3, [r7, #23]
    uint16  u16CredSize = sizeof(tstrM2mConnCredCmn) + u16AuthSize;
 801a54a:	88bb      	ldrh	r3, [r7, #4]
 801a54c:	332c      	adds	r3, #44	; 0x2c
 801a54e:	82bb      	strh	r3, [r7, #20]
    /* Check application params. */
    if(
 801a550:	683b      	ldr	r3, [r7, #0]
 801a552:	2b00      	cmp	r3, #0
 801a554:	d074      	beq.n	801a640 <m2m_wifi_connect_prepare_msg+0x10e>
        (pstrNetworkId == NULL)
        || (pstrNetworkId->pu8Ssid == NULL)
 801a556:	683b      	ldr	r3, [r7, #0]
 801a558:	685b      	ldr	r3, [r3, #4]
 801a55a:	2b00      	cmp	r3, #0
 801a55c:	d070      	beq.n	801a640 <m2m_wifi_connect_prepare_msg+0x10e>
        || (pstrNetworkId->u8SsidLen >= M2M_MAX_SSID_LEN)
 801a55e:	683b      	ldr	r3, [r7, #0]
 801a560:	7a1b      	ldrb	r3, [r3, #8]
 801a562:	2b20      	cmp	r3, #32
 801a564:	d86c      	bhi.n	801a640 <m2m_wifi_connect_prepare_msg+0x10e>
    )
        goto INVALID_ARG;

    if(pstrWifiConn != NULL)
 801a566:	6a3b      	ldr	r3, [r7, #32]
 801a568:	2b00      	cmp	r3, #0
 801a56a:	d066      	beq.n	801a63a <m2m_wifi_connect_prepare_msg+0x108>
    {
        tstrM2mConnCredHdr  *pstrHdr = &pstrWifiConn->strConnCredHdr;
 801a56c:	6a3b      	ldr	r3, [r7, #32]
 801a56e:	613b      	str	r3, [r7, #16]
        tstrM2mConnCredCmn  *pstrCmn = &pstrWifiConn->strConnCredCmn;
 801a570:	6a3b      	ldr	r3, [r7, #32]
 801a572:	3304      	adds	r3, #4
 801a574:	60fb      	str	r3, [r7, #12]

        m2m_memset((uint8 *)pstrWifiConn, 0, sizeof(tstrM2mWifiConnHdr));
 801a576:	2230      	movs	r2, #48	; 0x30
 801a578:	2100      	movs	r1, #0
 801a57a:	6a38      	ldr	r0, [r7, #32]
 801a57c:	f7fe fcd6 	bl	8018f2c <m2m_memset>

        pstrHdr->u16CredSize = u16CredSize;
 801a580:	693b      	ldr	r3, [r7, #16]
 801a582:	8aba      	ldrh	r2, [r7, #20]
 801a584:	801a      	strh	r2, [r3, #0]
        switch(enuCredStoreOption)
 801a586:	79fb      	ldrb	r3, [r7, #7]
 801a588:	2b02      	cmp	r3, #2
 801a58a:	d006      	beq.n	801a59a <m2m_wifi_connect_prepare_msg+0x68>
 801a58c:	2b02      	cmp	r3, #2
 801a58e:	dc59      	bgt.n	801a644 <m2m_wifi_connect_prepare_msg+0x112>
 801a590:	2b00      	cmp	r3, #0
 801a592:	d010      	beq.n	801a5b6 <m2m_wifi_connect_prepare_msg+0x84>
 801a594:	2b01      	cmp	r3, #1
 801a596:	d007      	beq.n	801a5a8 <m2m_wifi_connect_prepare_msg+0x76>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
        // intentional fall through...
        case WIFI_CRED_DONTSAVE:
            break;
        default:
            goto INVALID_ARG;
 801a598:	e054      	b.n	801a644 <m2m_wifi_connect_prepare_msg+0x112>
            pstrHdr->u8CredStoreFlags |= M2M_CRED_ENCRYPT_FLAG;
 801a59a:	693b      	ldr	r3, [r7, #16]
 801a59c:	789b      	ldrb	r3, [r3, #2]
 801a59e:	f043 0302 	orr.w	r3, r3, #2
 801a5a2:	b2da      	uxtb	r2, r3
 801a5a4:	693b      	ldr	r3, [r7, #16]
 801a5a6:	709a      	strb	r2, [r3, #2]
            pstrHdr->u8CredStoreFlags |= M2M_CRED_STORE_FLAG;
 801a5a8:	693b      	ldr	r3, [r7, #16]
 801a5aa:	789b      	ldrb	r3, [r3, #2]
 801a5ac:	f043 0301 	orr.w	r3, r3, #1
 801a5b0:	b2da      	uxtb	r2, r3
 801a5b2:	693b      	ldr	r3, [r7, #16]
 801a5b4:	709a      	strb	r2, [r3, #2]
            break;
 801a5b6:	bf00      	nop
        }

        if(pstrNetworkId->enuChannel == M2M_WIFI_CH_ALL)
 801a5b8:	683b      	ldr	r3, [r7, #0]
 801a5ba:	7a5b      	ldrb	r3, [r3, #9]
 801a5bc:	2bff      	cmp	r3, #255	; 0xff
 801a5be:	d104      	bne.n	801a5ca <m2m_wifi_connect_prepare_msg+0x98>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel);
 801a5c0:	683b      	ldr	r3, [r7, #0]
 801a5c2:	7a5a      	ldrb	r2, [r3, #9]
 801a5c4:	693b      	ldr	r3, [r7, #16]
 801a5c6:	70da      	strb	r2, [r3, #3]
 801a5c8:	e00d      	b.n	801a5e6 <m2m_wifi_connect_prepare_msg+0xb4>
        else if((pstrNetworkId->enuChannel <= M2M_WIFI_CH_14) && (pstrNetworkId->enuChannel >= M2M_WIFI_CH_1))
 801a5ca:	683b      	ldr	r3, [r7, #0]
 801a5cc:	7a5b      	ldrb	r3, [r3, #9]
 801a5ce:	2b0e      	cmp	r3, #14
 801a5d0:	d83a      	bhi.n	801a648 <m2m_wifi_connect_prepare_msg+0x116>
 801a5d2:	683b      	ldr	r3, [r7, #0]
 801a5d4:	7a5b      	ldrb	r3, [r3, #9]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d036      	beq.n	801a648 <m2m_wifi_connect_prepare_msg+0x116>
            pstrHdr->u8Channel = (uint8)(pstrNetworkId->enuChannel) - 1;
 801a5da:	683b      	ldr	r3, [r7, #0]
 801a5dc:	7a5b      	ldrb	r3, [r3, #9]
 801a5de:	3b01      	subs	r3, #1
 801a5e0:	b2da      	uxtb	r2, r3
 801a5e2:	693b      	ldr	r3, [r7, #16]
 801a5e4:	70da      	strb	r2, [r3, #3]
        else
            goto INVALID_ARG;

        if((enuAuthType == M2M_WIFI_SEC_INVALID) || (enuAuthType >= M2M_WIFI_NUM_AUTH_TYPES))
 801a5e6:	79bb      	ldrb	r3, [r7, #6]
 801a5e8:	2b00      	cmp	r3, #0
 801a5ea:	d02f      	beq.n	801a64c <m2m_wifi_connect_prepare_msg+0x11a>
 801a5ec:	79bb      	ldrb	r3, [r7, #6]
 801a5ee:	2b04      	cmp	r3, #4
 801a5f0:	d82c      	bhi.n	801a64c <m2m_wifi_connect_prepare_msg+0x11a>
            goto INVALID_ARG;
        pstrCmn->u8AuthType = (uint8)enuAuthType;
 801a5f2:	68fb      	ldr	r3, [r7, #12]
 801a5f4:	79ba      	ldrb	r2, [r7, #6]
 801a5f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

        pstrCmn->u8SsidLen = pstrNetworkId->u8SsidLen;
 801a5fa:	683b      	ldr	r3, [r7, #0]
 801a5fc:	7a1a      	ldrb	r2, [r3, #8]
 801a5fe:	68fb      	ldr	r3, [r7, #12]
 801a600:	701a      	strb	r2, [r3, #0]
        m2m_memcpy(pstrCmn->au8Ssid, pstrNetworkId->pu8Ssid, pstrNetworkId->u8SsidLen);
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	1c58      	adds	r0, r3, #1
 801a606:	683b      	ldr	r3, [r7, #0]
 801a608:	6859      	ldr	r1, [r3, #4]
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	7a1b      	ldrb	r3, [r3, #8]
 801a60e:	461a      	mov	r2, r3
 801a610:	f7fe fc6c 	bl	8018eec <m2m_memcpy>
        if(pstrNetworkId->pu8Bssid != NULL)
 801a614:	683b      	ldr	r3, [r7, #0]
 801a616:	681b      	ldr	r3, [r3, #0]
 801a618:	2b00      	cmp	r3, #0
 801a61a:	d00c      	beq.n	801a636 <m2m_wifi_connect_prepare_msg+0x104>
        {
            pstrCmn->u8Options = M2M_WIFI_CONN_BSSID_FLAG;
 801a61c:	68fb      	ldr	r3, [r7, #12]
 801a61e:	2201      	movs	r2, #1
 801a620:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            m2m_memcpy(pstrCmn->au8Bssid, pstrNetworkId->pu8Bssid, M2M_MAC_ADDRES_LEN);
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	f103 0022 	add.w	r0, r3, #34	; 0x22
 801a62a:	683b      	ldr	r3, [r7, #0]
 801a62c:	681b      	ldr	r3, [r3, #0]
 801a62e:	2206      	movs	r2, #6
 801a630:	4619      	mov	r1, r3
 801a632:	f7fe fc5b 	bl	8018eec <m2m_memcpy>
        }
        /* Everything is ok, set return value. */
        ret = M2M_SUCCESS;
 801a636:	2300      	movs	r3, #0
 801a638:	75fb      	strb	r3, [r7, #23]
    }
    return ret;
 801a63a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801a63e:	e008      	b.n	801a652 <m2m_wifi_connect_prepare_msg+0x120>
        goto INVALID_ARG;
 801a640:	bf00      	nop
 801a642:	e004      	b.n	801a64e <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 801a644:	bf00      	nop
 801a646:	e002      	b.n	801a64e <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 801a648:	bf00      	nop
 801a64a:	e000      	b.n	801a64e <m2m_wifi_connect_prepare_msg+0x11c>
            goto INVALID_ARG;
 801a64c:	bf00      	nop
INVALID_ARG:
    return M2M_ERR_INVALID_ARG;
 801a64e:	f06f 030e 	mvn.w	r3, #14
}
 801a652:	4618      	mov	r0, r3
 801a654:	3718      	adds	r7, #24
 801a656:	46bd      	mov	sp, r7
 801a658:	bd80      	pop	{r7, pc}

0801a65a <legacy_connect_prepare_msg>:

static sint8 legacy_connect_prepare_msg(tstrM2mWifiConnHdr *pstrConnHdr, tstrM2mWifiConnectLegacy_1_2 *pstrConnect)
{
 801a65a:	b580      	push	{r7, lr}
 801a65c:	b084      	sub	sp, #16
 801a65e:	af00      	add	r7, sp, #0
 801a660:	6078      	str	r0, [r7, #4]
 801a662:	6039      	str	r1, [r7, #0]
    sint8 s8Ret = M2M_ERR_FAIL;
 801a664:	23f4      	movs	r3, #244	; 0xf4
 801a666:	73fb      	strb	r3, [r7, #15]

    if(
        !(pstrConnHdr->strConnCredHdr.u8CredStoreFlags & M2M_CRED_ENCRYPT_FLAG)
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	789b      	ldrb	r3, [r3, #2]
 801a66c:	f003 0302 	and.w	r3, r3, #2
    if(
 801a670:	2b00      	cmp	r3, #0
 801a672:	d138      	bne.n	801a6e6 <legacy_connect_prepare_msg+0x8c>
        &&  !(pstrConnHdr->strConnCredCmn.u8Options & M2M_WIFI_CONN_BSSID_FLAG)
 801a674:	687b      	ldr	r3, [r7, #4]
 801a676:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801a67a:	f003 0301 	and.w	r3, r3, #1
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d131      	bne.n	801a6e6 <legacy_connect_prepare_msg+0x8c>
    )
    {
        m2m_memset((uint8 *)pstrConnect, 0, sizeof(tstrM2mWifiConnectLegacy_1_2));
 801a682:	2268      	movs	r2, #104	; 0x68
 801a684:	2100      	movs	r1, #0
 801a686:	6838      	ldr	r0, [r7, #0]
 801a688:	f7fe fc50 	bl	8018f2c <m2m_memset>
        m2m_memcpy(pstrConnect->au8SSID, pstrConnHdr->strConnCredCmn.au8Ssid, pstrConnHdr->strConnCredCmn.u8SsidLen);
 801a68c:	683b      	ldr	r3, [r7, #0]
 801a68e:	f103 0046 	add.w	r0, r3, #70	; 0x46
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	1d59      	adds	r1, r3, #5
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	791b      	ldrb	r3, [r3, #4]
 801a69a:	461a      	mov	r2, r3
 801a69c:	f7fe fc26 	bl	8018eec <m2m_memcpy>
        pstrConnect->au8SSID[pstrConnHdr->strConnCredCmn.u8SsidLen] = 0;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	791b      	ldrb	r3, [r3, #4]
 801a6a4:	461a      	mov	r2, r3
 801a6a6:	683b      	ldr	r3, [r7, #0]
 801a6a8:	4413      	add	r3, r2
 801a6aa:	2200      	movs	r2, #0
 801a6ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
        pstrConnect->u16Ch = pstrConnHdr->strConnCredHdr.u8Channel;
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	78db      	ldrb	r3, [r3, #3]
 801a6b4:	b29a      	uxth	r2, r3
 801a6b6:	683b      	ldr	r3, [r7, #0]
 801a6b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
        pstrConnect->u8NoSaveCred = !(pstrConnHdr->strConnCredHdr.u8CredStoreFlags & M2M_CRED_STORE_FLAG);
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	789b      	ldrb	r3, [r3, #2]
 801a6c0:	f003 0301 	and.w	r3, r3, #1
 801a6c4:	2b00      	cmp	r3, #0
 801a6c6:	bf0c      	ite	eq
 801a6c8:	2301      	moveq	r3, #1
 801a6ca:	2300      	movne	r3, #0
 801a6cc:	b2db      	uxtb	r3, r3
 801a6ce:	461a      	mov	r2, r3
 801a6d0:	683b      	ldr	r3, [r7, #0]
 801a6d2:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
        pstrConnect->strSec.u8SecType = pstrConnHdr->strConnCredCmn.u8AuthType;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 801a6dc:	683b      	ldr	r3, [r7, #0]
 801a6de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        s8Ret = M2M_SUCCESS;
 801a6e2:	2300      	movs	r3, #0
 801a6e4:	73fb      	strb	r3, [r7, #15]
    }
    return s8Ret;
 801a6e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a6ea:	4618      	mov	r0, r3
 801a6ec:	3710      	adds	r7, #16
 801a6ee:	46bd      	mov	sp, r7
 801a6f0:	bd80      	pop	{r7, pc}

0801a6f2 <m2m_wifi_connect_open>:
/*************************************************************************************************/
sint8 m2m_wifi_connect_open(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId
)
{
 801a6f2:	b580      	push	{r7, lr}
 801a6f4:	b0ae      	sub	sp, #184	; 0xb8
 801a6f6:	af04      	add	r7, sp, #16
 801a6f8:	4603      	mov	r3, r0
 801a6fa:	6039      	str	r1, [r7, #0]
 801a6fc:	71fb      	strb	r3, [r7, #7]
    sint8               ret = M2M_ERR_INVALID_ARG;
 801a6fe:	23f1      	movs	r3, #241	; 0xf1
 801a700:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    tstrM2mWifiConnHdr  strConnHdr;

    ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption, M2M_WIFI_SEC_OPEN, 0, pstrNetworkId, &strConnHdr);
 801a704:	79f8      	ldrb	r0, [r7, #7]
 801a706:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801a70a:	9300      	str	r3, [sp, #0]
 801a70c:	683b      	ldr	r3, [r7, #0]
 801a70e:	2200      	movs	r2, #0
 801a710:	2101      	movs	r1, #1
 801a712:	f7ff ff0e 	bl	801a532 <m2m_wifi_connect_prepare_msg>
 801a716:	4603      	mov	r3, r0
 801a718:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
    if(ret == M2M_SUCCESS)
 801a71c:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 801a720:	2b00      	cmp	r3, #0
 801a722:	d132      	bne.n	801a78a <m2m_wifi_connect_open+0x98>
    {
        ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN,
 801a724:	f107 0274 	add.w	r2, r7, #116	; 0x74
 801a728:	2300      	movs	r3, #0
 801a72a:	9302      	str	r3, [sp, #8]
 801a72c:	2300      	movs	r3, #0
 801a72e:	9301      	str	r3, [sp, #4]
 801a730:	2300      	movs	r3, #0
 801a732:	9300      	str	r3, [sp, #0]
 801a734:	2330      	movs	r3, #48	; 0x30
 801a736:	213d      	movs	r1, #61	; 0x3d
 801a738:	2001      	movs	r0, #1
 801a73a:	f7fe fe77 	bl	801942c <hif_send>
 801a73e:	4603      	mov	r3, r0
 801a740:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                       (uint8 *)&strConnHdr, sizeof(strConnHdr),
                       NULL, 0, 0);
        if(ret != M2M_SUCCESS)
 801a744:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 801a748:	2b00      	cmp	r3, #0
 801a74a:	d01e      	beq.n	801a78a <m2m_wifi_connect_open+0x98>
        {
            /* Might just be that we are talking to legacy firmware - try the legacy connect message instead. */
            tstrM2mWifiConnectLegacy_1_2    strConnectLegacy;
            ret = legacy_connect_prepare_msg(&strConnHdr, &strConnectLegacy);
 801a74c:	f107 020c 	add.w	r2, r7, #12
 801a750:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801a754:	4611      	mov	r1, r2
 801a756:	4618      	mov	r0, r3
 801a758:	f7ff ff7f 	bl	801a65a <legacy_connect_prepare_msg>
 801a75c:	4603      	mov	r3, r0
 801a75e:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
            if(ret ==  M2M_SUCCESS)
 801a762:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 801a766:	2b00      	cmp	r3, #0
 801a768:	d10f      	bne.n	801a78a <m2m_wifi_connect_open+0x98>
            {
                ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT,
 801a76a:	f107 020c 	add.w	r2, r7, #12
 801a76e:	2300      	movs	r3, #0
 801a770:	9302      	str	r3, [sp, #8]
 801a772:	2300      	movs	r3, #0
 801a774:	9301      	str	r3, [sp, #4]
 801a776:	2300      	movs	r3, #0
 801a778:	9300      	str	r3, [sp, #0]
 801a77a:	2368      	movs	r3, #104	; 0x68
 801a77c:	2128      	movs	r1, #40	; 0x28
 801a77e:	2001      	movs	r0, #1
 801a780:	f7fe fe54 	bl	801942c <hif_send>
 801a784:	4603      	mov	r3, r0
 801a786:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
                               (uint8 *)&strConnectLegacy, sizeof(tstrM2mWifiConnectLegacy_1_2),
                               NULL, 0, 0);
            }
        }
    }
    return ret;
 801a78a:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
}
 801a78e:	4618      	mov	r0, r3
 801a790:	37a8      	adds	r7, #168	; 0xa8
 801a792:	46bd      	mov	sp, r7
 801a794:	bd80      	pop	{r7, pc}

0801a796 <m2m_wifi_connect_wep>:
sint8 m2m_wifi_connect_wep(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthWep         *pstrAuthWep
)
{
 801a796:	b580      	push	{r7, lr}
 801a798:	b0b2      	sub	sp, #200	; 0xc8
 801a79a:	af04      	add	r7, sp, #16
 801a79c:	4603      	mov	r3, r0
 801a79e:	60b9      	str	r1, [r7, #8]
 801a7a0:	607a      	str	r2, [r7, #4]
 801a7a2:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 801a7a4:	23f1      	movs	r3, #241	; 0xf1
 801a7a6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

    if(
 801a7aa:	687b      	ldr	r3, [r7, #4]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	f000 80a1 	beq.w	801a8f4 <m2m_wifi_connect_wep+0x15e>
        (pstrAuthWep != NULL) && (pstrAuthWep->pu8WepKey != NULL)
 801a7b2:	687b      	ldr	r3, [r7, #4]
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	2b00      	cmp	r3, #0
 801a7b8:	f000 809c 	beq.w	801a8f4 <m2m_wifi_connect_wep+0x15e>
        && (pstrAuthWep->u8KeyIndx > 0) && (pstrAuthWep->u8KeyIndx <= WEP_KEY_MAX_INDEX)
 801a7bc:	687b      	ldr	r3, [r7, #4]
 801a7be:	795b      	ldrb	r3, [r3, #5]
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	f000 8097 	beq.w	801a8f4 <m2m_wifi_connect_wep+0x15e>
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	795b      	ldrb	r3, [r3, #5]
 801a7ca:	2b04      	cmp	r3, #4
 801a7cc:	f200 8092 	bhi.w	801a8f4 <m2m_wifi_connect_wep+0x15e>
        && ((pstrAuthWep->u8KeySz == WEP_104_KEY_STRING_SIZE) || (pstrAuthWep->u8KeySz == WEP_40_KEY_STRING_SIZE))
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	791b      	ldrb	r3, [r3, #4]
 801a7d4:	2b1a      	cmp	r3, #26
 801a7d6:	d004      	beq.n	801a7e2 <m2m_wifi_connect_wep+0x4c>
 801a7d8:	687b      	ldr	r3, [r7, #4]
 801a7da:	791b      	ldrb	r3, [r3, #4]
 801a7dc:	2b0a      	cmp	r3, #10
 801a7de:	f040 8089 	bne.w	801a8f4 <m2m_wifi_connect_wep+0x15e>
    )
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 801a7e2:	7bf8      	ldrb	r0, [r7, #15]
 801a7e4:	f107 0314 	add.w	r3, r7, #20
 801a7e8:	9300      	str	r3, [sp, #0]
 801a7ea:	68bb      	ldr	r3, [r7, #8]
 801a7ec:	2210      	movs	r2, #16
 801a7ee:	2103      	movs	r1, #3
 801a7f0:	f7ff fe9f 	bl	801a532 <m2m_wifi_connect_prepare_msg>
 801a7f4:	4603      	mov	r3, r0
 801a7f6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                           M2M_WIFI_SEC_WEP,
                                           sizeof(tstrM2mWifiWep),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 801a7fa:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801a7fe:	2b00      	cmp	r3, #0
 801a800:	d178      	bne.n	801a8f4 <m2m_wifi_connect_wep+0x15e>
        {
            tstrM2mWifiWep  *pstrWep = (tstrM2mWifiWep *)malloc(sizeof(tstrM2mWifiWep));
 801a802:	2010      	movs	r0, #16
 801a804:	f003 fd7e 	bl	801e304 <malloc>
 801a808:	4603      	mov	r3, r0
 801a80a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            if(pstrWep == NULL)
 801a80e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a812:	2b00      	cmp	r3, #0
 801a814:	d103      	bne.n	801a81e <m2m_wifi_connect_wep+0x88>
                ret = M2M_ERR_FAIL;
 801a816:	23f4      	movs	r3, #244	; 0xf4
 801a818:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801a81c:	e02d      	b.n	801a87a <m2m_wifi_connect_wep+0xe4>
            else
            {
                pstrWep->u8KeyIndex = pstrAuthWep->u8KeyIndx - 1;
 801a81e:	687b      	ldr	r3, [r7, #4]
 801a820:	795b      	ldrb	r3, [r3, #5]
 801a822:	3b01      	subs	r3, #1
 801a824:	b2da      	uxtb	r2, r3
 801a826:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a82a:	701a      	strb	r2, [r3, #0]
                pstrWep->u8KeyLen = pstrAuthWep->u8KeySz/2;
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	791b      	ldrb	r3, [r3, #4]
 801a830:	085b      	lsrs	r3, r3, #1
 801a832:	b2da      	uxtb	r2, r3
 801a834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a838:	705a      	strb	r2, [r3, #1]
                hexstr_2_bytes(pstrWep->au8WepKey, (pstrAuthWep->pu8WepKey), pstrWep->u8KeyLen);
 801a83a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a83e:	1c98      	adds	r0, r3, #2
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	6819      	ldr	r1, [r3, #0]
 801a844:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a848:	785b      	ldrb	r3, [r3, #1]
 801a84a:	461a      	mov	r2, r3
 801a84c:	f7fe fbc5 	bl	8018fda <hexstr_2_bytes>

                ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 801a850:	f107 0214 	add.w	r2, r7, #20
 801a854:	2330      	movs	r3, #48	; 0x30
 801a856:	9302      	str	r3, [sp, #8]
 801a858:	2310      	movs	r3, #16
 801a85a:	9301      	str	r3, [sp, #4]
 801a85c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a860:	9300      	str	r3, [sp, #0]
 801a862:	2330      	movs	r3, #48	; 0x30
 801a864:	21bd      	movs	r1, #189	; 0xbd
 801a866:	2001      	movs	r0, #1
 801a868:	f7fe fde0 	bl	801942c <hif_send>
 801a86c:	4603      	mov	r3, r0
 801a86e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                               (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                               (uint8 *)pstrWep, sizeof(tstrM2mWifiWep), sizeof(tstrM2mWifiConnHdr));
                free(pstrWep);
 801a872:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801a876:	f003 fd4d 	bl	801e314 <free>
            }
            if(ret != M2M_SUCCESS)
 801a87a:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801a87e:	2b00      	cmp	r3, #0
 801a880:	d038      	beq.n	801a8f4 <m2m_wifi_connect_wep+0x15e>
            {
                /* Might just be that we are talking to legacy firmware - try the legacy connect message instead. */
                tstrM2mWifiConnectLegacy_1_2    strConnectLegacy;
                ret = legacy_connect_prepare_msg(&strConnHdr, &strConnectLegacy);
 801a882:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801a886:	f107 0314 	add.w	r3, r7, #20
 801a88a:	4611      	mov	r1, r2
 801a88c:	4618      	mov	r0, r3
 801a88e:	f7ff fee4 	bl	801a65a <legacy_connect_prepare_msg>
 801a892:	4603      	mov	r3, r0
 801a894:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                if(ret ==  M2M_SUCCESS)
 801a898:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801a89c:	2b00      	cmp	r3, #0
 801a89e:	d129      	bne.n	801a8f4 <m2m_wifi_connect_wep+0x15e>
                {
                    tstrM2mWifiWepParamsLegacy_1_2  *pstrWepLegacy = &strConnectLegacy.strSec.uniAuth.strWepInfo;
 801a8a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801a8a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    pstrWepLegacy->u8KeyIndx = pstrAuthWep->u8KeyIndx - 1;
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	795b      	ldrb	r3, [r3, #5]
 801a8ac:	3b01      	subs	r3, #1
 801a8ae:	b2da      	uxtb	r2, r3
 801a8b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a8b4:	701a      	strb	r2, [r3, #0]
                    pstrWepLegacy->u8KeySz = pstrAuthWep->u8KeySz;
 801a8b6:	687b      	ldr	r3, [r7, #4]
 801a8b8:	791a      	ldrb	r2, [r3, #4]
 801a8ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a8be:	705a      	strb	r2, [r3, #1]
                    m2m_memcpy(pstrWepLegacy->au8WepKey, pstrAuthWep->pu8WepKey, pstrAuthWep->u8KeySz);
 801a8c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801a8c4:	1c98      	adds	r0, r3, #2
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	6819      	ldr	r1, [r3, #0]
 801a8ca:	687b      	ldr	r3, [r7, #4]
 801a8cc:	791b      	ldrb	r3, [r3, #4]
 801a8ce:	461a      	mov	r2, r3
 801a8d0:	f7fe fb0c 	bl	8018eec <m2m_memcpy>
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT,
 801a8d4:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801a8d8:	2300      	movs	r3, #0
 801a8da:	9302      	str	r3, [sp, #8]
 801a8dc:	2300      	movs	r3, #0
 801a8de:	9301      	str	r3, [sp, #4]
 801a8e0:	2300      	movs	r3, #0
 801a8e2:	9300      	str	r3, [sp, #0]
 801a8e4:	2368      	movs	r3, #104	; 0x68
 801a8e6:	2128      	movs	r1, #40	; 0x28
 801a8e8:	2001      	movs	r0, #1
 801a8ea:	f7fe fd9f 	bl	801942c <hif_send>
 801a8ee:	4603      	mov	r3, r0
 801a8f0:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                   NULL, 0, 0);
                }
            }
        }
    }
    return ret;
 801a8f4:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
}
 801a8f8:	4618      	mov	r0, r3
 801a8fa:	37b8      	adds	r7, #184	; 0xb8
 801a8fc:	46bd      	mov	sp, r7
 801a8fe:	bd80      	pop	{r7, pc}

0801a900 <m2m_wifi_connect_psk>:
sint8 m2m_wifi_connect_psk(
    tenuCredStoreOption enuCredStoreOption,
    tstrNetworkId       *pstrNetworkId,
    tstrAuthPsk         *pstrAuthPsk
)
{
 801a900:	b580      	push	{r7, lr}
 801a902:	b0b2      	sub	sp, #200	; 0xc8
 801a904:	af04      	add	r7, sp, #16
 801a906:	4603      	mov	r3, r0
 801a908:	60b9      	str	r1, [r7, #8]
 801a90a:	607a      	str	r2, [r7, #4]
 801a90c:	73fb      	strb	r3, [r7, #15]
    sint8   ret = M2M_ERR_INVALID_ARG;
 801a90e:	23f1      	movs	r3, #241	; 0xf1
 801a910:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

    if(pstrAuthPsk != NULL)
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	2b00      	cmp	r3, #0
 801a918:	f000 80bf 	beq.w	801aa9a <m2m_wifi_connect_psk+0x19a>
    {
        tstrM2mWifiConnHdr  strConnHdr;

        ret = m2m_wifi_connect_prepare_msg(enuCredStoreOption,
 801a91c:	7bf8      	ldrb	r0, [r7, #15]
 801a91e:	f107 0314 	add.w	r3, r7, #20
 801a922:	9300      	str	r3, [sp, #0]
 801a924:	68bb      	ldr	r3, [r7, #8]
 801a926:	226c      	movs	r2, #108	; 0x6c
 801a928:	2102      	movs	r1, #2
 801a92a:	f7ff fe02 	bl	801a532 <m2m_wifi_connect_prepare_msg>
 801a92e:	4603      	mov	r3, r0
 801a930:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                           M2M_WIFI_SEC_WPA_PSK,
                                           sizeof(tstrM2mWifiPsk),
                                           pstrNetworkId,
                                           &strConnHdr);

        if(ret == M2M_SUCCESS)
 801a934:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801a938:	2b00      	cmp	r3, #0
 801a93a:	f040 80ae 	bne.w	801aa9a <m2m_wifi_connect_psk+0x19a>
        {
            tstrM2mWifiPsk  *pstrPsk = (tstrM2mWifiPsk *)malloc(sizeof(tstrM2mWifiPsk));
 801a93e:	206c      	movs	r0, #108	; 0x6c
 801a940:	f003 fce0 	bl	801e304 <malloc>
 801a944:	4603      	mov	r3, r0
 801a946:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
            if(pstrPsk == NULL)
 801a94a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a94e:	2b00      	cmp	r3, #0
 801a950:	d103      	bne.n	801a95a <m2m_wifi_connect_psk+0x5a>
                ret = M2M_ERR_FAIL;
 801a952:	23f4      	movs	r3, #244	; 0xf4
 801a954:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801a958:	e06d      	b.n	801aa36 <m2m_wifi_connect_psk+0x136>
            else
            {
                m2m_memset((uint8 *)pstrPsk, 0, sizeof(tstrM2mWifiPsk));
 801a95a:	226c      	movs	r2, #108	; 0x6c
 801a95c:	2100      	movs	r1, #0
 801a95e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801a962:	f7fe fae3 	bl	8018f2c <m2m_memset>
                if(pstrAuthPsk->pu8Psk != NULL)
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	681b      	ldr	r3, [r3, #0]
 801a96a:	2b00      	cmp	r3, #0
 801a96c:	d02a      	beq.n	801a9c4 <m2m_wifi_connect_psk+0xc4>
                {
                    if(pstrAuthPsk->pu8Passphrase != NULL)
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	685b      	ldr	r3, [r3, #4]
 801a972:	2b00      	cmp	r3, #0
 801a974:	d003      	beq.n	801a97e <m2m_wifi_connect_psk+0x7e>
                        ret = M2M_ERR_INVALID_ARG;
 801a976:	23f1      	movs	r3, #241	; 0xf1
 801a978:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801a97c:	e042      	b.n	801aa04 <m2m_wifi_connect_psk+0x104>
                    else
                    {
                        pstrPsk->u8PassphraseLen = M2M_MAX_PSK_LEN-1;
 801a97e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a982:	2240      	movs	r2, #64	; 0x40
 801a984:	701a      	strb	r2, [r3, #0]
                        /* Use hexstr_2_bytes to verify pu8Psk input. */
                        if(M2M_SUCCESS != hexstr_2_bytes(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen/2))
 801a986:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a98a:	1c58      	adds	r0, r3, #1
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	6819      	ldr	r1, [r3, #0]
 801a990:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a994:	781b      	ldrb	r3, [r3, #0]
 801a996:	085b      	lsrs	r3, r3, #1
 801a998:	b2db      	uxtb	r3, r3
 801a99a:	461a      	mov	r2, r3
 801a99c:	f7fe fb1d 	bl	8018fda <hexstr_2_bytes>
 801a9a0:	4603      	mov	r3, r0
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d002      	beq.n	801a9ac <m2m_wifi_connect_psk+0xac>
                            ret = M2M_ERR_INVALID_ARG;
 801a9a6:	23f1      	movs	r3, #241	; 0xf1
 801a9a8:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Psk, pstrPsk->u8PassphraseLen);
 801a9ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9b0:	1c58      	adds	r0, r3, #1
 801a9b2:	687b      	ldr	r3, [r7, #4]
 801a9b4:	6819      	ldr	r1, [r3, #0]
 801a9b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9ba:	781b      	ldrb	r3, [r3, #0]
 801a9bc:	461a      	mov	r2, r3
 801a9be:	f7fe fa95 	bl	8018eec <m2m_memcpy>
 801a9c2:	e01f      	b.n	801aa04 <m2m_wifi_connect_psk+0x104>
                    }
                }
                else if(pstrAuthPsk->pu8Passphrase != NULL)
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	685b      	ldr	r3, [r3, #4]
 801a9c8:	2b00      	cmp	r3, #0
 801a9ca:	d018      	beq.n	801a9fe <m2m_wifi_connect_psk+0xfe>
                {
                    if(pstrAuthPsk->u8PassphraseLen > M2M_MAX_PSK_LEN-1)
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	7a1b      	ldrb	r3, [r3, #8]
 801a9d0:	2b40      	cmp	r3, #64	; 0x40
 801a9d2:	d903      	bls.n	801a9dc <m2m_wifi_connect_psk+0xdc>
                        ret = M2M_ERR_INVALID_ARG;
 801a9d4:	23f1      	movs	r3, #241	; 0xf1
 801a9d6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 801a9da:	e013      	b.n	801aa04 <m2m_wifi_connect_psk+0x104>
                    else
                    {
                        pstrPsk->u8PassphraseLen = pstrAuthPsk->u8PassphraseLen;
 801a9dc:	687b      	ldr	r3, [r7, #4]
 801a9de:	7a1a      	ldrb	r2, [r3, #8]
 801a9e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9e4:	701a      	strb	r2, [r3, #0]
                        m2m_memcpy(pstrPsk->au8Passphrase, pstrAuthPsk->pu8Passphrase, pstrPsk->u8PassphraseLen);
 801a9e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9ea:	1c58      	adds	r0, r3, #1
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	6859      	ldr	r1, [r3, #4]
 801a9f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801a9f4:	781b      	ldrb	r3, [r3, #0]
 801a9f6:	461a      	mov	r2, r3
 801a9f8:	f7fe fa78 	bl	8018eec <m2m_memcpy>
 801a9fc:	e002      	b.n	801aa04 <m2m_wifi_connect_psk+0x104>
                    }
                }
                else
                    ret = M2M_ERR_INVALID_ARG;
 801a9fe:	23f1      	movs	r3, #241	; 0xf1
 801aa00:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                if(ret == M2M_SUCCESS)
 801aa04:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d110      	bne.n	801aa2e <m2m_wifi_connect_psk+0x12e>
                {
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONN | M2M_REQ_DATA_PKT,
 801aa0c:	f107 0214 	add.w	r2, r7, #20
 801aa10:	2330      	movs	r3, #48	; 0x30
 801aa12:	9302      	str	r3, [sp, #8]
 801aa14:	236c      	movs	r3, #108	; 0x6c
 801aa16:	9301      	str	r3, [sp, #4]
 801aa18:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801aa1c:	9300      	str	r3, [sp, #0]
 801aa1e:	2330      	movs	r3, #48	; 0x30
 801aa20:	21bd      	movs	r1, #189	; 0xbd
 801aa22:	2001      	movs	r0, #1
 801aa24:	f7fe fd02 	bl	801942c <hif_send>
 801aa28:	4603      	mov	r3, r0
 801aa2a:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                   (uint8 *)&strConnHdr, sizeof(tstrM2mWifiConnHdr),
                                   (uint8 *)pstrPsk, sizeof(tstrM2mWifiPsk), sizeof(tstrM2mWifiConnHdr));
                }
                free(pstrPsk);
 801aa2e:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801aa32:	f003 fc6f 	bl	801e314 <free>
            }
            if(ret != M2M_SUCCESS)
 801aa36:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d02d      	beq.n	801aa9a <m2m_wifi_connect_psk+0x19a>
            {
                /* Might just be that we are talking to legacy firmware - try the legacy connect message instead. */
                tstrM2mWifiConnectLegacy_1_2    strConnectLegacy;
                ret = legacy_connect_prepare_msg(&strConnHdr, &strConnectLegacy);
 801aa3e:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801aa42:	f107 0314 	add.w	r3, r7, #20
 801aa46:	4611      	mov	r1, r2
 801aa48:	4618      	mov	r0, r3
 801aa4a:	f7ff fe06 	bl	801a65a <legacy_connect_prepare_msg>
 801aa4e:	4603      	mov	r3, r0
 801aa50:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                if(ret ==  M2M_SUCCESS)
 801aa54:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
 801aa58:	2b00      	cmp	r3, #0
 801aa5a:	d11e      	bne.n	801aa9a <m2m_wifi_connect_psk+0x19a>
                {
                    uint8   *pu8PskLegacy = strConnectLegacy.strSec.uniAuth.au8PSK;
 801aa5c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 801aa60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                    m2m_memcpy(pu8PskLegacy, pstrPsk->au8Passphrase, pstrPsk->u8PassphraseLen);
 801aa64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801aa68:	1c59      	adds	r1, r3, #1
 801aa6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801aa6e:	781b      	ldrb	r3, [r3, #0]
 801aa70:	461a      	mov	r2, r3
 801aa72:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 801aa76:	f7fe fa39 	bl	8018eec <m2m_memcpy>
                    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONNECT,
 801aa7a:	f107 0244 	add.w	r2, r7, #68	; 0x44
 801aa7e:	2300      	movs	r3, #0
 801aa80:	9302      	str	r3, [sp, #8]
 801aa82:	2300      	movs	r3, #0
 801aa84:	9301      	str	r3, [sp, #4]
 801aa86:	2300      	movs	r3, #0
 801aa88:	9300      	str	r3, [sp, #0]
 801aa8a:	2368      	movs	r3, #104	; 0x68
 801aa8c:	2128      	movs	r1, #40	; 0x28
 801aa8e:	2001      	movs	r0, #1
 801aa90:	f7fe fccc 	bl	801942c <hif_send>
 801aa94:	4603      	mov	r3, r0
 801aa96:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
                                   NULL, 0, 0);
                }
            }
        }
    }
    return ret;
 801aa9a:	f997 30b7 	ldrsb.w	r3, [r7, #183]	; 0xb7
}
 801aa9e:	4618      	mov	r0, r3
 801aaa0:	37b8      	adds	r7, #184	; 0xb8
 801aaa2:	46bd      	mov	sp, r7
 801aaa4:	bd80      	pop	{r7, pc}

0801aaa6 <m2m_wifi_connect>:
    }
    return ret;
}

sint8 m2m_wifi_connect(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch)
{
 801aaa6:	b580      	push	{r7, lr}
 801aaa8:	b086      	sub	sp, #24
 801aaaa:	af02      	add	r7, sp, #8
 801aaac:	60f8      	str	r0, [r7, #12]
 801aaae:	607b      	str	r3, [r7, #4]
 801aab0:	460b      	mov	r3, r1
 801aab2:	72fb      	strb	r3, [r7, #11]
 801aab4:	4613      	mov	r3, r2
 801aab6:	72bb      	strb	r3, [r7, #10]
    return m2m_wifi_connect_sc(pcSsid, u8SsidLen, u8SecType, pvAuthInfo,  u16Ch, 0);
 801aab8:	7aba      	ldrb	r2, [r7, #10]
 801aaba:	7af9      	ldrb	r1, [r7, #11]
 801aabc:	2300      	movs	r3, #0
 801aabe:	9301      	str	r3, [sp, #4]
 801aac0:	8b3b      	ldrh	r3, [r7, #24]
 801aac2:	9300      	str	r3, [sp, #0]
 801aac4:	687b      	ldr	r3, [r7, #4]
 801aac6:	68f8      	ldr	r0, [r7, #12]
 801aac8:	f000 f805 	bl	801aad6 <m2m_wifi_connect_sc>
 801aacc:	4603      	mov	r3, r0
}
 801aace:	4618      	mov	r0, r3
 801aad0:	3710      	adds	r7, #16
 801aad2:	46bd      	mov	sp, r7
 801aad4:	bd80      	pop	{r7, pc}

0801aad6 <m2m_wifi_connect_sc>:

sint8 m2m_wifi_connect_sc(char *pcSsid, uint8 u8SsidLen, uint8 u8SecType, void *pvAuthInfo, uint16 u16Ch, uint8 u8NoSaveCred)
{
 801aad6:	b580      	push	{r7, lr}
 801aad8:	b090      	sub	sp, #64	; 0x40
 801aada:	af00      	add	r7, sp, #0
 801aadc:	60f8      	str	r0, [r7, #12]
 801aade:	607b      	str	r3, [r7, #4]
 801aae0:	460b      	mov	r3, r1
 801aae2:	72fb      	strb	r3, [r7, #11]
 801aae4:	4613      	mov	r3, r2
 801aae6:	72bb      	strb	r3, [r7, #10]
    sint8               s8Ret              = M2M_ERR_INVALID_ARG;
 801aae8:	23f1      	movs	r3, #241	; 0xf1
 801aaea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    tstrNetworkId       strNetworkId       = {NULL, (uint8 *)pcSsid, u8SsidLen, (tenuM2mScanCh)u16Ch};
 801aaee:	2300      	movs	r3, #0
 801aaf0:	62bb      	str	r3, [r7, #40]	; 0x28
 801aaf2:	68fb      	ldr	r3, [r7, #12]
 801aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 801aaf6:	7afb      	ldrb	r3, [r7, #11]
 801aaf8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 801aafc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 801ab00:	b2db      	uxtb	r3, r3
 801ab02:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    tenuCredStoreOption enuCredStoreOption = u8NoSaveCred ? WIFI_CRED_DONTSAVE : WIFI_CRED_SAVE_ENCRYPTED;
 801ab06:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 801ab0a:	2b00      	cmp	r3, #0
 801ab0c:	d001      	beq.n	801ab12 <m2m_wifi_connect_sc+0x3c>
 801ab0e:	2300      	movs	r3, #0
 801ab10:	e000      	b.n	801ab14 <m2m_wifi_connect_sc+0x3e>
 801ab12:	2302      	movs	r3, #2
 801ab14:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e

    /* This API does not support SSIDs which contain '\0'. If there is a '\0' character within the
     * first u8SsidLen characters, then assume that the input u8SsidLen was incorrect - set length
     * to strlen(pcSsid) and continue. This is to avoid a change from the behaviour of previously
     * released drivers. */
    if(u8SsidLen < M2M_MAX_SSID_LEN)
 801ab18:	7afb      	ldrb	r3, [r7, #11]
 801ab1a:	2b20      	cmp	r3, #32
 801ab1c:	d80e      	bhi.n	801ab3c <m2m_wifi_connect_sc+0x66>
        while(u8SsidLen--)
 801ab1e:	e008      	b.n	801ab32 <m2m_wifi_connect_sc+0x5c>
            if(strNetworkId.pu8Ssid[u8SsidLen] == 0)
 801ab20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ab22:	7afb      	ldrb	r3, [r7, #11]
 801ab24:	4413      	add	r3, r2
 801ab26:	781b      	ldrb	r3, [r3, #0]
 801ab28:	2b00      	cmp	r3, #0
 801ab2a:	d102      	bne.n	801ab32 <m2m_wifi_connect_sc+0x5c>
                strNetworkId.u8SsidLen = u8SsidLen;
 801ab2c:	7afb      	ldrb	r3, [r7, #11]
 801ab2e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
        while(u8SsidLen--)
 801ab32:	7afb      	ldrb	r3, [r7, #11]
 801ab34:	1e5a      	subs	r2, r3, #1
 801ab36:	72fa      	strb	r2, [r7, #11]
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d1f1      	bne.n	801ab20 <m2m_wifi_connect_sc+0x4a>

    switch((tenuM2mSecType)u8SecType)
 801ab3c:	7abb      	ldrb	r3, [r7, #10]
 801ab3e:	2b03      	cmp	r3, #3
 801ab40:	d03a      	beq.n	801abb8 <m2m_wifi_connect_sc+0xe2>
 801ab42:	2b03      	cmp	r3, #3
 801ab44:	dc55      	bgt.n	801abf2 <m2m_wifi_connect_sc+0x11c>
 801ab46:	2b01      	cmp	r3, #1
 801ab48:	d002      	beq.n	801ab50 <m2m_wifi_connect_sc+0x7a>
 801ab4a:	2b02      	cmp	r3, #2
 801ab4c:	d00c      	beq.n	801ab68 <m2m_wifi_connect_sc+0x92>

            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
        }
        break;
    default:
        break;
 801ab4e:	e050      	b.n	801abf2 <m2m_wifi_connect_sc+0x11c>
        s8Ret = m2m_wifi_connect_open(enuCredStoreOption, &strNetworkId);
 801ab50:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801ab54:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801ab58:	4611      	mov	r1, r2
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f7ff fdc9 	bl	801a6f2 <m2m_wifi_connect_open>
 801ab60:	4603      	mov	r3, r0
 801ab62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 801ab66:	e049      	b.n	801abfc <m2m_wifi_connect_sc+0x126>
        if(pvAuthInfo != NULL)
 801ab68:	687b      	ldr	r3, [r7, #4]
 801ab6a:	2b00      	cmp	r3, #0
 801ab6c:	d043      	beq.n	801abf6 <m2m_wifi_connect_sc+0x120>
            tstrAuthPsk strAuthPsk = {NULL, NULL, 0};
 801ab6e:	2300      	movs	r3, #0
 801ab70:	61fb      	str	r3, [r7, #28]
 801ab72:	2300      	movs	r3, #0
 801ab74:	623b      	str	r3, [r7, #32]
 801ab76:	2300      	movs	r3, #0
 801ab78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            uint16      len        = m2m_strlen((uint8 *)pvAuthInfo);
 801ab7c:	6878      	ldr	r0, [r7, #4]
 801ab7e:	f7fe f9f2 	bl	8018f66 <m2m_strlen>
 801ab82:	4603      	mov	r3, r0
 801ab84:	86fb      	strh	r3, [r7, #54]	; 0x36
            if(len == M2M_MAX_PSK_LEN-1)
 801ab86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ab88:	2b40      	cmp	r3, #64	; 0x40
 801ab8a:	d102      	bne.n	801ab92 <m2m_wifi_connect_sc+0xbc>
                strAuthPsk.pu8Psk = (uint8 *)pvAuthInfo;
 801ab8c:	687b      	ldr	r3, [r7, #4]
 801ab8e:	61fb      	str	r3, [r7, #28]
 801ab90:	e005      	b.n	801ab9e <m2m_wifi_connect_sc+0xc8>
                strAuthPsk.pu8Passphrase   = (uint8 *)pvAuthInfo;
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	623b      	str	r3, [r7, #32]
                strAuthPsk.u8PassphraseLen = len;
 801ab96:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801ab98:	b2db      	uxtb	r3, r3
 801ab9a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
            s8Ret = m2m_wifi_connect_psk(enuCredStoreOption, &strNetworkId, &strAuthPsk);
 801ab9e:	f107 021c 	add.w	r2, r7, #28
 801aba2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801aba6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801abaa:	4618      	mov	r0, r3
 801abac:	f7ff fea8 	bl	801a900 <m2m_wifi_connect_psk>
 801abb0:	4603      	mov	r3, r0
 801abb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 801abb6:	e01e      	b.n	801abf6 <m2m_wifi_connect_sc+0x120>
        if(pvAuthInfo != NULL)
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	2b00      	cmp	r3, #0
 801abbc:	d01d      	beq.n	801abfa <m2m_wifi_connect_sc+0x124>
            tstrM2mWifiWepParams    *pstrWepParams = (tstrM2mWifiWepParams *)pvAuthInfo;
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	63bb      	str	r3, [r7, #56]	; 0x38
            tstrAuthWep             strAuthWep     = {pstrWepParams->au8WepKey, pstrWepParams->u8KeySz-1, pstrWepParams->u8KeyIndx};
 801abc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abc4:	3302      	adds	r3, #2
 801abc6:	617b      	str	r3, [r7, #20]
 801abc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abca:	785b      	ldrb	r3, [r3, #1]
 801abcc:	3b01      	subs	r3, #1
 801abce:	b2db      	uxtb	r3, r3
 801abd0:	763b      	strb	r3, [r7, #24]
 801abd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801abd4:	781b      	ldrb	r3, [r3, #0]
 801abd6:	767b      	strb	r3, [r7, #25]
            s8Ret = m2m_wifi_connect_wep(enuCredStoreOption, &strNetworkId, &strAuthWep);
 801abd8:	f107 0214 	add.w	r2, r7, #20
 801abdc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801abe0:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 801abe4:	4618      	mov	r0, r3
 801abe6:	f7ff fdd6 	bl	801a796 <m2m_wifi_connect_wep>
 801abea:	4603      	mov	r3, r0
 801abec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        break;
 801abf0:	e003      	b.n	801abfa <m2m_wifi_connect_sc+0x124>
        break;
 801abf2:	bf00      	nop
 801abf4:	e002      	b.n	801abfc <m2m_wifi_connect_sc+0x126>
        break;
 801abf6:	bf00      	nop
 801abf8:	e000      	b.n	801abfc <m2m_wifi_connect_sc+0x126>
        break;
 801abfa:	bf00      	nop
    }
    return s8Ret;
 801abfc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3740      	adds	r7, #64	; 0x40
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bd80      	pop	{r7, pc}

0801ac08 <m2m_wifi_disconnect>:

sint8 m2m_wifi_disconnect(void)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b084      	sub	sp, #16
 801ac0c:	af04      	add	r7, sp, #16
    return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_DISCONNECT, NULL, 0, NULL, 0, 0);
 801ac0e:	2300      	movs	r3, #0
 801ac10:	9302      	str	r3, [sp, #8]
 801ac12:	2300      	movs	r3, #0
 801ac14:	9301      	str	r3, [sp, #4]
 801ac16:	2300      	movs	r3, #0
 801ac18:	9300      	str	r3, [sp, #0]
 801ac1a:	2300      	movs	r3, #0
 801ac1c:	2200      	movs	r2, #0
 801ac1e:	212b      	movs	r1, #43	; 0x2b
 801ac20:	2001      	movs	r0, #1
 801ac22:	f7fe fc03 	bl	801942c <hif_send>
 801ac26:	4603      	mov	r3, r0
}
 801ac28:	4618      	mov	r0, r3
 801ac2a:	46bd      	mov	sp, r7
 801ac2c:	bd80      	pop	{r7, pc}

0801ac2e <m2m_wifi_set_mac_address>:

sint8 m2m_wifi_set_mac_address(uint8 au8MacAddress[6])
{
 801ac2e:	b580      	push	{r7, lr}
 801ac30:	b088      	sub	sp, #32
 801ac32:	af04      	add	r7, sp, #16
 801ac34:	6078      	str	r0, [r7, #4]
    tstrM2mSetMacAddress strTmp;
    m2m_memcpy((uint8 *) strTmp.au8Mac, (uint8 *) au8MacAddress, 6);
 801ac36:	f107 0308 	add.w	r3, r7, #8
 801ac3a:	2206      	movs	r2, #6
 801ac3c:	6879      	ldr	r1, [r7, #4]
 801ac3e:	4618      	mov	r0, r3
 801ac40:	f7fe f954 	bl	8018eec <m2m_memcpy>
    return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_MAC_ADDRESS,
 801ac44:	f107 0208 	add.w	r2, r7, #8
 801ac48:	2300      	movs	r3, #0
 801ac4a:	9302      	str	r3, [sp, #8]
 801ac4c:	2300      	movs	r3, #0
 801ac4e:	9301      	str	r3, [sp, #4]
 801ac50:	2300      	movs	r3, #0
 801ac52:	9300      	str	r3, [sp, #0]
 801ac54:	2308      	movs	r3, #8
 801ac56:	2102      	movs	r1, #2
 801ac58:	2001      	movs	r0, #1
 801ac5a:	f7fe fbe7 	bl	801942c <hif_send>
 801ac5e:	4603      	mov	r3, r0
                    (uint8 *) &strTmp, sizeof(tstrM2mSetMacAddress), NULL, 0, 0);
}
 801ac60:	4618      	mov	r0, r3
 801ac62:	3710      	adds	r7, #16
 801ac64:	46bd      	mov	sp, r7
 801ac66:	bd80      	pop	{r7, pc}

0801ac68 <m2m_wifi_get_otp_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_mac_address
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_otp_mac_address(uint8 *pu8MacAddr, uint8 *pu8IsValid)
{
 801ac68:	b580      	push	{r7, lr}
 801ac6a:	b084      	sub	sp, #16
 801ac6c:	af00      	add	r7, sp, #0
 801ac6e:	6078      	str	r0, [r7, #4]
 801ac70:	6039      	str	r1, [r7, #0]
    sint8 ret = M2M_SUCCESS;
 801ac72:	2300      	movs	r3, #0
 801ac74:	73fb      	strb	r3, [r7, #15]
    ret = hif_chip_wake();
 801ac76:	f7fe fa53 	bl	8019120 <hif_chip_wake>
 801ac7a:	4603      	mov	r3, r0
 801ac7c:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801ac7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d107      	bne.n	801ac96 <m2m_wifi_get_otp_mac_address+0x2e>
    {
        ret = nmi_get_otp_mac_address(pu8MacAddr, pu8IsValid);
 801ac86:	6839      	ldr	r1, [r7, #0]
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	f000 fd7d 	bl	801b788 <nmi_get_otp_mac_address>
 801ac8e:	4603      	mov	r3, r0
 801ac90:	73fb      	strb	r3, [r7, #15]
        hif_chip_sleep();
 801ac92:	f7fe fa9b 	bl	80191cc <hif_chip_sleep>
    }
    return ret;
 801ac96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ac9a:	4618      	mov	r0, r3
 801ac9c:	3710      	adds	r7, #16
 801ac9e:	46bd      	mov	sp, r7
 801aca0:	bd80      	pop	{r7, pc}

0801aca2 <m2m_wifi_get_mac_address>:
@return      The function shall return M2M_SUCCESS for success and a negative value otherwise.
@sa          m2m_wifi_get_otp_mac_address
@pre         m2m_wifi_init required to call any WIFI/socket function
*/
sint8 m2m_wifi_get_mac_address(uint8 *pu8MacAddr)
{
 801aca2:	b580      	push	{r7, lr}
 801aca4:	b084      	sub	sp, #16
 801aca6:	af00      	add	r7, sp, #0
 801aca8:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801acaa:	2300      	movs	r3, #0
 801acac:	73fb      	strb	r3, [r7, #15]
    ret = hif_chip_wake();
 801acae:	f7fe fa37 	bl	8019120 <hif_chip_wake>
 801acb2:	4603      	mov	r3, r0
 801acb4:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801acb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801acba:	2b00      	cmp	r3, #0
 801acbc:	d106      	bne.n	801accc <m2m_wifi_get_mac_address+0x2a>
    {
        ret = nmi_get_mac_address(pu8MacAddr);
 801acbe:	6878      	ldr	r0, [r7, #4]
 801acc0:	f000 fdc2 	bl	801b848 <nmi_get_mac_address>
 801acc4:	4603      	mov	r3, r0
 801acc6:	73fb      	strb	r3, [r7, #15]
        hif_chip_sleep();
 801acc8:	f7fe fa80 	bl	80191cc <hif_chip_sleep>
    }

    return ret;
 801accc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801acd0:	4618      	mov	r0, r3
 801acd2:	3710      	adds	r7, #16
 801acd4:	46bd      	mov	sp, r7
 801acd6:	bd80      	pop	{r7, pc}

0801acd8 <m2m_wifi_req_scan_result>:
             which mean if large delay occur between the scan request and the scan result request,
             the result will not be up-to-date
*/

sint8 m2m_wifi_req_scan_result(uint8 index)
{
 801acd8:	b580      	push	{r7, lr}
 801acda:	b088      	sub	sp, #32
 801acdc:	af04      	add	r7, sp, #16
 801acde:	4603      	mov	r3, r0
 801ace0:	71fb      	strb	r3, [r7, #7]
    sint8 ret = M2M_SUCCESS;
 801ace2:	2300      	movs	r3, #0
 801ace4:	73fb      	strb	r3, [r7, #15]
    tstrM2mReqScanResult strReqScanRlt;
    strReqScanRlt.u8Index = index;
 801ace6:	79fb      	ldrb	r3, [r7, #7]
 801ace8:	723b      	strb	r3, [r7, #8]
    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SCAN_RESULT, (uint8 *) &strReqScanRlt, sizeof(tstrM2mReqScanResult), NULL, 0, 0);
 801acea:	f107 0208 	add.w	r2, r7, #8
 801acee:	2300      	movs	r3, #0
 801acf0:	9302      	str	r3, [sp, #8]
 801acf2:	2300      	movs	r3, #0
 801acf4:	9301      	str	r3, [sp, #4]
 801acf6:	2300      	movs	r3, #0
 801acf8:	9300      	str	r3, [sp, #0]
 801acfa:	2304      	movs	r3, #4
 801acfc:	2114      	movs	r1, #20
 801acfe:	2001      	movs	r0, #1
 801ad00:	f7fe fb94 	bl	801942c <hif_send>
 801ad04:	4603      	mov	r3, r0
 801ad06:	73fb      	strb	r3, [r7, #15]
    return ret;
 801ad08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ad0c:	4618      	mov	r0, r3
 801ad0e:	3710      	adds	r7, #16
 801ad10:	46bd      	mov	sp, r7
 801ad12:	bd80      	pop	{r7, pc}

0801ad14 <m2m_wifi_get_num_ap_found>:
@warning     That function need to be called in the wifi_cb in M2M_WIFI_RESP_SCAN_DONE,
             calling that function in any other place will return undefined/undated numbers.
             Function used only in STA mode only.
*/
uint8 m2m_wifi_get_num_ap_found(void)
{
 801ad14:	b480      	push	{r7}
 801ad16:	af00      	add	r7, sp, #0
    return gu8ChNum;
 801ad18:	4b03      	ldr	r3, [pc, #12]	; (801ad28 <m2m_wifi_get_num_ap_found+0x14>)
 801ad1a:	781b      	ldrb	r3, [r3, #0]
 801ad1c:	b2db      	uxtb	r3, r3
}
 801ad1e:	4618      	mov	r0, r3
 801ad20:	46bd      	mov	sp, r7
 801ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad26:	4770      	bx	lr
 801ad28:	2001def9 	.word	0x2001def9

0801ad2c <m2m_wifi_set_sleep_mode>:
@return     The function SHALL return 0 for success and a negative value otherwise.
@sa         tenuPowerSaveModes
@warning    The function called once after initialization.
*/
sint8 m2m_wifi_set_sleep_mode(uint8 PsTyp, uint8 BcastEn)
{
 801ad2c:	b580      	push	{r7, lr}
 801ad2e:	b088      	sub	sp, #32
 801ad30:	af04      	add	r7, sp, #16
 801ad32:	4603      	mov	r3, r0
 801ad34:	460a      	mov	r2, r1
 801ad36:	71fb      	strb	r3, [r7, #7]
 801ad38:	4613      	mov	r3, r2
 801ad3a:	71bb      	strb	r3, [r7, #6]
    sint8 ret = M2M_SUCCESS;
 801ad3c:	2300      	movs	r3, #0
 801ad3e:	73fb      	strb	r3, [r7, #15]
    tstrM2mPsType strPs;
    strPs.u8PsType = PsTyp;
 801ad40:	79fb      	ldrb	r3, [r7, #7]
 801ad42:	723b      	strb	r3, [r7, #8]
    strPs.u8BcastEn = BcastEn;
 801ad44:	79bb      	ldrb	r3, [r7, #6]
 801ad46:	727b      	strb	r3, [r7, #9]
    ret = hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SLEEP, (uint8 *) &strPs, sizeof(tstrM2mPsType), NULL, 0, 0);
 801ad48:	f107 0208 	add.w	r2, r7, #8
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	9302      	str	r3, [sp, #8]
 801ad50:	2300      	movs	r3, #0
 801ad52:	9301      	str	r3, [sp, #4]
 801ad54:	2300      	movs	r3, #0
 801ad56:	9300      	str	r3, [sp, #0]
 801ad58:	2304      	movs	r3, #4
 801ad5a:	212d      	movs	r1, #45	; 0x2d
 801ad5c:	2001      	movs	r0, #1
 801ad5e:	f7fe fb65 	bl	801942c <hif_send>
 801ad62:	4603      	mov	r3, r0
 801ad64:	73fb      	strb	r3, [r7, #15]
    M2M_INFO("POWER SAVE %d\n", PsTyp);
 801ad66:	480a      	ldr	r0, [pc, #40]	; (801ad90 <m2m_wifi_set_sleep_mode+0x64>)
 801ad68:	f003 fbec 	bl	801e544 <iprintf>
 801ad6c:	79fb      	ldrb	r3, [r7, #7]
 801ad6e:	4619      	mov	r1, r3
 801ad70:	4808      	ldr	r0, [pc, #32]	; (801ad94 <m2m_wifi_set_sleep_mode+0x68>)
 801ad72:	f003 fbe7 	bl	801e544 <iprintf>
 801ad76:	200d      	movs	r0, #13
 801ad78:	f003 fbfc 	bl	801e574 <putchar>
    hif_set_sleep_mode(PsTyp);
 801ad7c:	79fb      	ldrb	r3, [r7, #7]
 801ad7e:	4618      	mov	r0, r3
 801ad80:	f7fe f9fe 	bl	8019180 <hif_set_sleep_mode>
    return ret;
 801ad84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ad88:	4618      	mov	r0, r3
 801ad8a:	3710      	adds	r7, #16
 801ad8c:	46bd      	mov	sp, r7
 801ad8e:	bd80      	pop	{r7, pc}
 801ad90:	08020bf4 	.word	0x08020bf4
 801ad94:	08020dc8 	.word	0x08020dc8

0801ad98 <m2m_wifi_set_device_name>:
            Length of the device name.
@return     The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
@warning    The Function called once after initialization.
*/
sint8 m2m_wifi_set_device_name(uint8 *pu8DeviceName, uint8 u8DeviceNameLength)
{
 801ad98:	b580      	push	{r7, lr}
 801ad9a:	b092      	sub	sp, #72	; 0x48
 801ad9c:	af04      	add	r7, sp, #16
 801ad9e:	6078      	str	r0, [r7, #4]
 801ada0:	460b      	mov	r3, r1
 801ada2:	70fb      	strb	r3, [r7, #3]
    tstrM2MDeviceNameConfig strDeviceName;
    if(u8DeviceNameLength >= M2M_DEVICE_NAME_MAX)
 801ada4:	78fb      	ldrb	r3, [r7, #3]
 801ada6:	2b2f      	cmp	r3, #47	; 0x2f
 801ada8:	d901      	bls.n	801adae <m2m_wifi_set_device_name+0x16>
    {
        u8DeviceNameLength = M2M_DEVICE_NAME_MAX;
 801adaa:	2330      	movs	r3, #48	; 0x30
 801adac:	70fb      	strb	r3, [r7, #3]
    }
    //pu8DeviceName[u8DeviceNameLength] = '\0';
    u8DeviceNameLength ++;
 801adae:	78fb      	ldrb	r3, [r7, #3]
 801adb0:	3301      	adds	r3, #1
 801adb2:	70fb      	strb	r3, [r7, #3]
    m2m_memcpy(strDeviceName.au8DeviceName, pu8DeviceName, u8DeviceNameLength);
 801adb4:	78fa      	ldrb	r2, [r7, #3]
 801adb6:	f107 0308 	add.w	r3, r7, #8
 801adba:	6879      	ldr	r1, [r7, #4]
 801adbc:	4618      	mov	r0, r3
 801adbe:	f7fe f895 	bl	8018eec <m2m_memcpy>
    return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_SET_DEVICE_NAME,
 801adc2:	f107 0208 	add.w	r2, r7, #8
 801adc6:	2300      	movs	r3, #0
 801adc8:	9302      	str	r3, [sp, #8]
 801adca:	2300      	movs	r3, #0
 801adcc:	9301      	str	r3, [sp, #4]
 801adce:	2300      	movs	r3, #0
 801add0:	9300      	str	r3, [sp, #0]
 801add2:	2330      	movs	r3, #48	; 0x30
 801add4:	2109      	movs	r1, #9
 801add6:	2001      	movs	r0, #1
 801add8:	f7fe fb28 	bl	801942c <hif_send>
 801addc:	4603      	mov	r3, r0
                    (uint8 *)&strDeviceName, sizeof(tstrM2MDeviceNameConfig), NULL, 0, 0);
}
 801adde:	4618      	mov	r0, r3
 801ade0:	3738      	adds	r7, #56	; 0x38
 801ade2:	46bd      	mov	sp, r7
 801ade4:	bd80      	pop	{r7, pc}

0801ade6 <m2m_wifi_configure_sntp>:
@param [in] useDHCP
            Should the NTP server provided by the DHCP server be used.
@return     The function SHALL return M2M_SUCCESS for success and a negative value otherwise.
*/
sint8 m2m_wifi_configure_sntp(uint8 *pu8NTPServerName, uint8 u8NTPServerNameLength, tenuSNTPUseDHCP useDHCP)
{
 801ade6:	b580      	push	{r7, lr}
 801ade8:	b090      	sub	sp, #64	; 0x40
 801adea:	af04      	add	r7, sp, #16
 801adec:	6078      	str	r0, [r7, #4]
 801adee:	460b      	mov	r3, r1
 801adf0:	70fb      	strb	r3, [r7, #3]
 801adf2:	4613      	mov	r3, r2
 801adf4:	70bb      	strb	r3, [r7, #2]
    tstrM2MSNTPConfig strSNTPConfig;
    if(u8NTPServerNameLength > M2M_NTP_MAX_SERVER_NAME_LENGTH)
 801adf6:	78fb      	ldrb	r3, [r7, #3]
 801adf8:	2b20      	cmp	r3, #32
 801adfa:	d902      	bls.n	801ae02 <m2m_wifi_configure_sntp+0x1c>
        return M2M_ERR_FAIL;
 801adfc:	f06f 030b 	mvn.w	r3, #11
 801ae00:	e01d      	b.n	801ae3e <m2m_wifi_configure_sntp+0x58>

    m2m_memcpy((uint8 *)strSNTPConfig.acNTPServer, pu8NTPServerName, u8NTPServerNameLength);
 801ae02:	78fa      	ldrb	r2, [r7, #3]
 801ae04:	f107 030c 	add.w	r3, r7, #12
 801ae08:	6879      	ldr	r1, [r7, #4]
 801ae0a:	4618      	mov	r0, r3
 801ae0c:	f7fe f86e 	bl	8018eec <m2m_memcpy>
    strSNTPConfig.acNTPServer[u8NTPServerNameLength] = '\0';
 801ae10:	78fb      	ldrb	r3, [r7, #3]
 801ae12:	3330      	adds	r3, #48	; 0x30
 801ae14:	443b      	add	r3, r7
 801ae16:	2200      	movs	r2, #0
 801ae18:	f803 2c24 	strb.w	r2, [r3, #-36]

    strSNTPConfig.enuUseDHCP = useDHCP;
 801ae1c:	78bb      	ldrb	r3, [r7, #2]
 801ae1e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    return hif_send(M2M_REQ_GROUP_WIFI, M2M_WIFI_REQ_CONFIG_SNTP,
 801ae22:	f107 020c 	add.w	r2, r7, #12
 801ae26:	2300      	movs	r3, #0
 801ae28:	9302      	str	r3, [sp, #8]
 801ae2a:	2300      	movs	r3, #0
 801ae2c:	9301      	str	r3, [sp, #4]
 801ae2e:	2300      	movs	r3, #0
 801ae30:	9300      	str	r3, [sp, #0]
 801ae32:	2324      	movs	r3, #36	; 0x24
 801ae34:	2126      	movs	r1, #38	; 0x26
 801ae36:	2001      	movs	r0, #1
 801ae38:	f7fe faf8 	bl	801942c <hif_send>
 801ae3c:	4603      	mov	r3, r0
                    (uint8 *)&strSNTPConfig, sizeof(tstrM2MSNTPConfig), NULL, 0, 0);
}
 801ae3e:	4618      	mov	r0, r3
 801ae40:	3730      	adds	r7, #48	; 0x30
 801ae42:	46bd      	mov	sp, r7
 801ae44:	bd80      	pop	{r7, pc}

0801ae46 <m2m_wifi_get_firmware_version>:

@return
    The function SHALL return @ref M2M_SUCCESS for success and a negative value otherwise.
*/
sint8 m2m_wifi_get_firmware_version(tstrM2mRev *pstrRev)
{
 801ae46:	b580      	push	{r7, lr}
 801ae48:	b084      	sub	sp, #16
 801ae4a:	af00      	add	r7, sp, #0
 801ae4c:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801ae4e:	2300      	movs	r3, #0
 801ae50:	73fb      	strb	r3, [r7, #15]
    ret = hif_chip_wake();
 801ae52:	f7fe f965 	bl	8019120 <hif_chip_wake>
 801ae56:	4603      	mov	r3, r0
 801ae58:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801ae5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae5e:	2b00      	cmp	r3, #0
 801ae60:	d106      	bne.n	801ae70 <m2m_wifi_get_firmware_version+0x2a>
    {
        ret = nm_get_firmware_full_info(pstrRev);
 801ae62:	6878      	ldr	r0, [r7, #4]
 801ae64:	f000 fe64 	bl	801bb30 <nm_get_firmware_full_info>
 801ae68:	4603      	mov	r3, r0
 801ae6a:	73fb      	strb	r3, [r7, #15]
        hif_chip_sleep();
 801ae6c:	f7fe f9ae 	bl	80191cc <hif_chip_sleep>
    }
    return ret;
 801ae70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801ae74:	4618      	mov	r0, r3
 801ae76:	3710      	adds	r7, #16
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}

0801ae7c <m2m_ota_get_firmware_version>:

@return
    The function SHALL return @ref M2M_SUCCESS for success and a negative value otherwise.
*/
NMI_API sint8 m2m_ota_get_firmware_version(tstrM2mRev *pstrRev)
{
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	b084      	sub	sp, #16
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801ae84:	2300      	movs	r3, #0
 801ae86:	73fb      	strb	r3, [r7, #15]
    ret = hif_chip_wake();
 801ae88:	f7fe f94a 	bl	8019120 <hif_chip_wake>
 801ae8c:	4603      	mov	r3, r0
 801ae8e:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801ae90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ae94:	2b00      	cmp	r3, #0
 801ae96:	d106      	bne.n	801aea6 <m2m_ota_get_firmware_version+0x2a>
    {
        ret = nm_get_ota_firmware_info(pstrRev);
 801ae98:	6878      	ldr	r0, [r7, #4]
 801ae9a:	f000 ff27 	bl	801bcec <nm_get_ota_firmware_info>
 801ae9e:	4603      	mov	r3, r0
 801aea0:	73fb      	strb	r3, [r7, #15]
        hif_chip_sleep();
 801aea2:	f7fe f993 	bl	80191cc <hif_chip_sleep>
    }
    return ret;
 801aea6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801aeaa:	4618      	mov	r0, r3
 801aeac:	3710      	adds	r7, #16
 801aeae:	46bd      	mov	sp, r7
 801aeb0:	bd80      	pop	{r7, pc}

0801aeb2 <chip_apply_conf>:

#define TIMEOUT                     (2000)
#define WAKEUP_TRIALS               (4)

sint8 chip_apply_conf(uint32 u32Conf)
{
 801aeb2:	b580      	push	{r7, lr}
 801aeb4:	b086      	sub	sp, #24
 801aeb6:	af00      	add	r7, sp, #0
 801aeb8:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801aeba:	2300      	movs	r3, #0
 801aebc:	75fb      	strb	r3, [r7, #23]
    uint32 val32 = u32Conf;
 801aebe:	687b      	ldr	r3, [r7, #4]
 801aec0:	613b      	str	r3, [r7, #16]
#endif
#ifdef __DISABLE_FIRMWARE_LOGS__
    val32 |= rHAVE_LOGS_DISABLED_BIT;
#endif
    do {
        nm_write_reg(rNMI_GP_REG_1, val32);
 801aec2:	6939      	ldr	r1, [r7, #16]
 801aec4:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 801aec8:	f000 fd40 	bl	801b94c <nm_write_reg>
        if(val32 != 0) {
 801aecc:	693b      	ldr	r3, [r7, #16]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d013      	beq.n	801aefa <chip_apply_conf+0x48>
            uint32 reg = 0;
 801aed2:	2300      	movs	r3, #0
 801aed4:	60fb      	str	r3, [r7, #12]
            ret = nm_read_reg_with_ret(rNMI_GP_REG_1, &reg);
 801aed6:	f107 030c 	add.w	r3, r7, #12
 801aeda:	4619      	mov	r1, r3
 801aedc:	f44f 50a5 	mov.w	r0, #5280	; 0x14a0
 801aee0:	f000 fd26 	bl	801b930 <nm_read_reg_with_ret>
 801aee4:	4603      	mov	r3, r0
 801aee6:	75fb      	strb	r3, [r7, #23]
            if(ret == M2M_SUCCESS) {
 801aee8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801aeec:	2b00      	cmp	r3, #0
 801aeee:	d1e8      	bne.n	801aec2 <chip_apply_conf+0x10>
                if(reg == val32)
 801aef0:	68fb      	ldr	r3, [r7, #12]
 801aef2:	693a      	ldr	r2, [r7, #16]
 801aef4:	429a      	cmp	r2, r3
 801aef6:	d002      	beq.n	801aefe <chip_apply_conf+0x4c>
        nm_write_reg(rNMI_GP_REG_1, val32);
 801aef8:	e7e3      	b.n	801aec2 <chip_apply_conf+0x10>
                    break;
            }
        } else {
            break;
 801aefa:	bf00      	nop
 801aefc:	e000      	b.n	801af00 <chip_apply_conf+0x4e>
                    break;
 801aefe:	bf00      	nop
        }
    } while(1);

    return M2M_SUCCESS;
 801af00:	2300      	movs	r3, #0
}
 801af02:	4618      	mov	r0, r3
 801af04:	3718      	adds	r7, #24
 801af06:	46bd      	mov	sp, r7
 801af08:	bd80      	pop	{r7, pc}

0801af0a <chip_idle>:

void chip_idle(void)
{
 801af0a:	b580      	push	{r7, lr}
 801af0c:	b082      	sub	sp, #8
 801af0e:	af00      	add	r7, sp, #0
    uint32 reg =0;
 801af10:	2300      	movs	r3, #0
 801af12:	607b      	str	r3, [r7, #4]
    nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 801af14:	1d3b      	adds	r3, r7, #4
 801af16:	4619      	mov	r1, r3
 801af18:	2001      	movs	r0, #1
 801af1a:	f000 fd09 	bl	801b930 <nm_read_reg_with_ret>
    if(reg&NBIT1)
 801af1e:	687b      	ldr	r3, [r7, #4]
 801af20:	f003 0302 	and.w	r3, r3, #2
 801af24:	2b00      	cmp	r3, #0
 801af26:	d008      	beq.n	801af3a <chip_idle+0x30>
    {
        reg &=~NBIT1;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	f023 0302 	bic.w	r3, r3, #2
 801af2e:	607b      	str	r3, [r7, #4]
        nm_write_reg(WAKE_CLK_REG, reg);
 801af30:	687b      	ldr	r3, [r7, #4]
 801af32:	4619      	mov	r1, r3
 801af34:	2001      	movs	r0, #1
 801af36:	f000 fd09 	bl	801b94c <nm_write_reg>
    }
}
 801af3a:	bf00      	nop
 801af3c:	3708      	adds	r7, #8
 801af3e:	46bd      	mov	sp, r7
 801af40:	bd80      	pop	{r7, pc}

0801af42 <enable_interrupts>:
    nm_write_reg(0x6, 0x0);
    nm_write_reg(0x7, 0x0);
}

sint8 enable_interrupts(void)
{
 801af42:	b580      	push	{r7, lr}
 801af44:	b082      	sub	sp, #8
 801af46:	af00      	add	r7, sp, #0
    uint32 reg = 0;
 801af48:	2300      	movs	r3, #0
 801af4a:	603b      	str	r3, [r7, #0]
    sint8 ret = M2M_SUCCESS;
 801af4c:	2300      	movs	r3, #0
 801af4e:	71fb      	strb	r3, [r7, #7]
    /**
    interrupt pin mux select
    **/
    ret = nm_read_reg_with_ret(NMI_PIN_MUX_0, &reg);
 801af50:	463b      	mov	r3, r7
 801af52:	4619      	mov	r1, r3
 801af54:	f241 4008 	movw	r0, #5128	; 0x1408
 801af58:	f000 fcea 	bl	801b930 <nm_read_reg_with_ret>
 801af5c:	4603      	mov	r3, r0
 801af5e:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801af60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af64:	2b00      	cmp	r3, #0
 801af66:	d002      	beq.n	801af6e <enable_interrupts+0x2c>
        return M2M_ERR_BUS_FAIL;
 801af68:	f06f 0305 	mvn.w	r3, #5
 801af6c:	e035      	b.n	801afda <enable_interrupts+0x98>
    }
    reg |= ((uint32) 1 << 8);
 801af6e:	683b      	ldr	r3, [r7, #0]
 801af70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801af74:	603b      	str	r3, [r7, #0]
    ret = nm_write_reg(NMI_PIN_MUX_0, reg);
 801af76:	683b      	ldr	r3, [r7, #0]
 801af78:	4619      	mov	r1, r3
 801af7a:	f241 4008 	movw	r0, #5128	; 0x1408
 801af7e:	f000 fce5 	bl	801b94c <nm_write_reg>
 801af82:	4603      	mov	r3, r0
 801af84:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801af86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	d002      	beq.n	801af94 <enable_interrupts+0x52>
        return M2M_ERR_BUS_FAIL;
 801af8e:	f06f 0305 	mvn.w	r3, #5
 801af92:	e022      	b.n	801afda <enable_interrupts+0x98>
    }
    /**
    interrupt enable
    **/
    ret = nm_read_reg_with_ret(NMI_INTR_ENABLE, &reg);
 801af94:	463b      	mov	r3, r7
 801af96:	4619      	mov	r1, r3
 801af98:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801af9c:	f000 fcc8 	bl	801b930 <nm_read_reg_with_ret>
 801afa0:	4603      	mov	r3, r0
 801afa2:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801afa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	d002      	beq.n	801afb2 <enable_interrupts+0x70>
        return M2M_ERR_BUS_FAIL;
 801afac:	f06f 0305 	mvn.w	r3, #5
 801afb0:	e013      	b.n	801afda <enable_interrupts+0x98>
    }
    reg |= ((uint32) 1 << 16);
 801afb2:	683b      	ldr	r3, [r7, #0]
 801afb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801afb8:	603b      	str	r3, [r7, #0]
    ret = nm_write_reg(NMI_INTR_ENABLE, reg);
 801afba:	683b      	ldr	r3, [r7, #0]
 801afbc:	4619      	mov	r1, r3
 801afbe:	f44f 50d0 	mov.w	r0, #6656	; 0x1a00
 801afc2:	f000 fcc3 	bl	801b94c <nm_write_reg>
 801afc6:	4603      	mov	r3, r0
 801afc8:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801afca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801afce:	2b00      	cmp	r3, #0
 801afd0:	d002      	beq.n	801afd8 <enable_interrupts+0x96>
        return M2M_ERR_BUS_FAIL;
 801afd2:	f06f 0305 	mvn.w	r3, #5
 801afd6:	e000      	b.n	801afda <enable_interrupts+0x98>
    }
    return M2M_SUCCESS;
 801afd8:	2300      	movs	r3, #0
}
 801afda:	4618      	mov	r0, r3
 801afdc:	3708      	adds	r7, #8
 801afde:	46bd      	mov	sp, r7
 801afe0:	bd80      	pop	{r7, pc}
	...

0801afe4 <cpu_start>:

sint8 cpu_start(void) {
 801afe4:	b580      	push	{r7, lr}
 801afe6:	b082      	sub	sp, #8
 801afe8:	af00      	add	r7, sp, #0
    uint32 reg = 0;
 801afea:	2300      	movs	r3, #0
 801afec:	603b      	str	r3, [r7, #0]
    sint8 ret;

    /**
    reset regs
    */
    ret = nm_write_reg(BOOTROM_REG, 0);
 801afee:	2100      	movs	r1, #0
 801aff0:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 801aff4:	f000 fcaa 	bl	801b94c <nm_write_reg>
 801aff8:	4603      	mov	r3, r0
 801affa:	71fb      	strb	r3, [r7, #7]
    ret += nm_write_reg(NMI_STATE_REG, 0);
 801affc:	2100      	movs	r1, #0
 801affe:	f241 008c 	movw	r0, #4236	; 0x108c
 801b002:	f000 fca3 	bl	801b94c <nm_write_reg>
 801b006:	4603      	mov	r3, r0
 801b008:	b2da      	uxtb	r2, r3
 801b00a:	79fb      	ldrb	r3, [r7, #7]
 801b00c:	4413      	add	r3, r2
 801b00e:	b2db      	uxtb	r3, r3
 801b010:	71fb      	strb	r3, [r7, #7]
    ret += nm_write_reg(NMI_REV_REG, 0);
 801b012:	2100      	movs	r1, #0
 801b014:	483a      	ldr	r0, [pc, #232]	; (801b100 <cpu_start+0x11c>)
 801b016:	f000 fc99 	bl	801b94c <nm_write_reg>
 801b01a:	4603      	mov	r3, r0
 801b01c:	b2da      	uxtb	r2, r3
 801b01e:	79fb      	ldrb	r3, [r7, #7]
 801b020:	4413      	add	r3, r2
 801b022:	b2db      	uxtb	r3, r3
 801b024:	71fb      	strb	r3, [r7, #7]

    /**
    Go...
    **/
    ret += nm_read_reg_with_ret(0x1118, &reg);
 801b026:	463b      	mov	r3, r7
 801b028:	4619      	mov	r1, r3
 801b02a:	f241 1018 	movw	r0, #4376	; 0x1118
 801b02e:	f000 fc7f 	bl	801b930 <nm_read_reg_with_ret>
 801b032:	4603      	mov	r3, r0
 801b034:	b2da      	uxtb	r2, r3
 801b036:	79fb      	ldrb	r3, [r7, #7]
 801b038:	4413      	add	r3, r2
 801b03a:	b2db      	uxtb	r3, r3
 801b03c:	71fb      	strb	r3, [r7, #7]
    if(M2M_SUCCESS != ret) {
 801b03e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b042:	2b00      	cmp	r3, #0
 801b044:	d00c      	beq.n	801b060 <cpu_start+0x7c>
        ret = M2M_ERR_BUS_FAIL;
 801b046:	23fa      	movs	r3, #250	; 0xfa
 801b048:	71fb      	strb	r3, [r7, #7]
        M2M_ERR("[nmi start]: fail read reg 0x1118 ...\n");
 801b04a:	22a7      	movs	r2, #167	; 0xa7
 801b04c:	492d      	ldr	r1, [pc, #180]	; (801b104 <cpu_start+0x120>)
 801b04e:	482e      	ldr	r0, [pc, #184]	; (801b108 <cpu_start+0x124>)
 801b050:	f003 fa78 	bl	801e544 <iprintf>
 801b054:	482d      	ldr	r0, [pc, #180]	; (801b10c <cpu_start+0x128>)
 801b056:	f003 fb11 	bl	801e67c <puts>
 801b05a:	200d      	movs	r0, #13
 801b05c:	f003 fa8a 	bl	801e574 <putchar>
    }
    reg |= NBIT0;
 801b060:	683b      	ldr	r3, [r7, #0]
 801b062:	f043 0301 	orr.w	r3, r3, #1
 801b066:	603b      	str	r3, [r7, #0]
    ret += nm_write_reg(0x1118, reg);
 801b068:	683b      	ldr	r3, [r7, #0]
 801b06a:	4619      	mov	r1, r3
 801b06c:	f241 1018 	movw	r0, #4376	; 0x1118
 801b070:	f000 fc6c 	bl	801b94c <nm_write_reg>
 801b074:	4603      	mov	r3, r0
 801b076:	b2da      	uxtb	r2, r3
 801b078:	79fb      	ldrb	r3, [r7, #7]
 801b07a:	4413      	add	r3, r2
 801b07c:	b2db      	uxtb	r3, r3
 801b07e:	71fb      	strb	r3, [r7, #7]
    ret = nm_write_reg(0x150014, 0x1); //DTODO WHY IS THIS HERE??
 801b080:	2101      	movs	r1, #1
 801b082:	4823      	ldr	r0, [pc, #140]	; (801b110 <cpu_start+0x12c>)
 801b084:	f000 fc62 	bl	801b94c <nm_write_reg>
 801b088:	4603      	mov	r3, r0
 801b08a:	71fb      	strb	r3, [r7, #7]
    ret += nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 801b08c:	463b      	mov	r3, r7
 801b08e:	4619      	mov	r1, r3
 801b090:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b094:	f000 fc4c 	bl	801b930 <nm_read_reg_with_ret>
 801b098:	4603      	mov	r3, r0
 801b09a:	b2da      	uxtb	r2, r3
 801b09c:	79fb      	ldrb	r3, [r7, #7]
 801b09e:	4413      	add	r3, r2
 801b0a0:	b2db      	uxtb	r3, r3
 801b0a2:	71fb      	strb	r3, [r7, #7]
    if((reg & (1ul << 10)) == (1ul << 10)) {
 801b0a4:	683b      	ldr	r3, [r7, #0]
 801b0a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b0aa:	2b00      	cmp	r3, #0
 801b0ac:	d00f      	beq.n	801b0ce <cpu_start+0xea>
        reg &= ~(1ul << 10);
 801b0ae:	683b      	ldr	r3, [r7, #0]
 801b0b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b0b4:	603b      	str	r3, [r7, #0]
        ret += nm_write_reg(NMI_GLB_RESET_0, reg);
 801b0b6:	683b      	ldr	r3, [r7, #0]
 801b0b8:	4619      	mov	r1, r3
 801b0ba:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b0be:	f000 fc45 	bl	801b94c <nm_write_reg>
 801b0c2:	4603      	mov	r3, r0
 801b0c4:	b2da      	uxtb	r2, r3
 801b0c6:	79fb      	ldrb	r3, [r7, #7]
 801b0c8:	4413      	add	r3, r2
 801b0ca:	b2db      	uxtb	r3, r3
 801b0cc:	71fb      	strb	r3, [r7, #7]
    }

    reg |= (1ul << 10);
 801b0ce:	683b      	ldr	r3, [r7, #0]
 801b0d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801b0d4:	603b      	str	r3, [r7, #0]
    ret += nm_write_reg(NMI_GLB_RESET_0, reg);
 801b0d6:	683b      	ldr	r3, [r7, #0]
 801b0d8:	4619      	mov	r1, r3
 801b0da:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b0de:	f000 fc35 	bl	801b94c <nm_write_reg>
 801b0e2:	4603      	mov	r3, r0
 801b0e4:	b2da      	uxtb	r2, r3
 801b0e6:	79fb      	ldrb	r3, [r7, #7]
 801b0e8:	4413      	add	r3, r2
 801b0ea:	b2db      	uxtb	r3, r3
 801b0ec:	71fb      	strb	r3, [r7, #7]
    nm_bsp_sleep(1); /* Removing this can cause a bus error. */
 801b0ee:	2001      	movs	r0, #1
 801b0f0:	f7fd fe08 	bl	8018d04 <nm_bsp_sleep>
    return ret;
 801b0f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b0f8:	4618      	mov	r0, r3
 801b0fa:	3708      	adds	r7, #8
 801b0fc:	46bd      	mov	sp, r7
 801b0fe:	bd80      	pop	{r7, pc}
 801b100:	000207ac 	.word	0x000207ac
 801b104:	0802911c 	.word	0x0802911c
 801b108:	08020e24 	.word	0x08020e24
 801b10c:	08020e38 	.word	0x08020e38
 801b110:	00150014 	.word	0x00150014

0801b114 <nmi_get_chipid>:

uint32 nmi_get_chipid(void)
{
 801b114:	b580      	push	{r7, lr}
 801b116:	b082      	sub	sp, #8
 801b118:	af00      	add	r7, sp, #0
    static uint32 chipid = 0;

    if(chipid == 0) {
 801b11a:	4b44      	ldr	r3, [pc, #272]	; (801b22c <nmi_get_chipid+0x118>)
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	2b00      	cmp	r3, #0
 801b120:	d17d      	bne.n	801b21e <nmi_get_chipid+0x10a>
        uint32 rfrevid;

        if((nm_read_reg_with_ret(0x1000, &chipid)) != M2M_SUCCESS) {
 801b122:	4942      	ldr	r1, [pc, #264]	; (801b22c <nmi_get_chipid+0x118>)
 801b124:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801b128:	f000 fc02 	bl	801b930 <nm_read_reg_with_ret>
 801b12c:	4603      	mov	r3, r0
 801b12e:	2b00      	cmp	r3, #0
 801b130:	d004      	beq.n	801b13c <nmi_get_chipid+0x28>
            chipid = 0;
 801b132:	4b3e      	ldr	r3, [pc, #248]	; (801b22c <nmi_get_chipid+0x118>)
 801b134:	2200      	movs	r2, #0
 801b136:	601a      	str	r2, [r3, #0]
            return 0;
 801b138:	2300      	movs	r3, #0
 801b13a:	e072      	b.n	801b222 <nmi_get_chipid+0x10e>
        }
        if((nm_read_reg_with_ret(0x13f4, &rfrevid)) != M2M_SUCCESS) {
 801b13c:	1d3b      	adds	r3, r7, #4
 801b13e:	4619      	mov	r1, r3
 801b140:	f241 30f4 	movw	r0, #5108	; 0x13f4
 801b144:	f000 fbf4 	bl	801b930 <nm_read_reg_with_ret>
 801b148:	4603      	mov	r3, r0
 801b14a:	2b00      	cmp	r3, #0
 801b14c:	d004      	beq.n	801b158 <nmi_get_chipid+0x44>
            chipid = 0;
 801b14e:	4b37      	ldr	r3, [pc, #220]	; (801b22c <nmi_get_chipid+0x118>)
 801b150:	2200      	movs	r2, #0
 801b152:	601a      	str	r2, [r3, #0]
            return 0;
 801b154:	2300      	movs	r3, #0
 801b156:	e064      	b.n	801b222 <nmi_get_chipid+0x10e>
        }

        if(chipid == 0x1002a0)  {
 801b158:	4b34      	ldr	r3, [pc, #208]	; (801b22c <nmi_get_chipid+0x118>)
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	4a34      	ldr	r2, [pc, #208]	; (801b230 <nmi_get_chipid+0x11c>)
 801b15e:	4293      	cmp	r3, r2
 801b160:	d106      	bne.n	801b170 <nmi_get_chipid+0x5c>
            if(rfrevid == 0x1) { /* 1002A0 */
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	2b01      	cmp	r3, #1
 801b166:	d03a      	beq.n	801b1de <nmi_get_chipid+0xca>
            } else /* if (rfrevid == 0x2) */ { /* 1002A1 */
                chipid = 0x1002a1;
 801b168:	4b30      	ldr	r3, [pc, #192]	; (801b22c <nmi_get_chipid+0x118>)
 801b16a:	4a32      	ldr	r2, [pc, #200]	; (801b234 <nmi_get_chipid+0x120>)
 801b16c:	601a      	str	r2, [r3, #0]
 801b16e:	e036      	b.n	801b1de <nmi_get_chipid+0xca>
            }
        } else if(chipid == 0x1002b0) {
 801b170:	4b2e      	ldr	r3, [pc, #184]	; (801b22c <nmi_get_chipid+0x118>)
 801b172:	681b      	ldr	r3, [r3, #0]
 801b174:	4a30      	ldr	r2, [pc, #192]	; (801b238 <nmi_get_chipid+0x124>)
 801b176:	4293      	cmp	r3, r2
 801b178:	d10d      	bne.n	801b196 <nmi_get_chipid+0x82>
            if(rfrevid == 3) { /* 1002B0 */
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	2b03      	cmp	r3, #3
 801b17e:	d02e      	beq.n	801b1de <nmi_get_chipid+0xca>
            } else if(rfrevid == 4) { /* 1002B1 */
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	2b04      	cmp	r3, #4
 801b184:	d103      	bne.n	801b18e <nmi_get_chipid+0x7a>
                chipid = 0x1002b1;
 801b186:	4b29      	ldr	r3, [pc, #164]	; (801b22c <nmi_get_chipid+0x118>)
 801b188:	4a2c      	ldr	r2, [pc, #176]	; (801b23c <nmi_get_chipid+0x128>)
 801b18a:	601a      	str	r2, [r3, #0]
 801b18c:	e027      	b.n	801b1de <nmi_get_chipid+0xca>
            } else /* if(rfrevid == 5) */ { /* 1002B2 */
                chipid = 0x1002b2;
 801b18e:	4b27      	ldr	r3, [pc, #156]	; (801b22c <nmi_get_chipid+0x118>)
 801b190:	4a2b      	ldr	r2, [pc, #172]	; (801b240 <nmi_get_chipid+0x12c>)
 801b192:	601a      	str	r2, [r3, #0]
 801b194:	e023      	b.n	801b1de <nmi_get_chipid+0xca>
            }
        } else if(chipid == 0x1000f0) {
 801b196:	4b25      	ldr	r3, [pc, #148]	; (801b22c <nmi_get_chipid+0x118>)
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	4a2a      	ldr	r2, [pc, #168]	; (801b244 <nmi_get_chipid+0x130>)
 801b19c:	4293      	cmp	r3, r2
 801b19e:	d11e      	bne.n	801b1de <nmi_get_chipid+0xca>
            /* For 3400, the WiFi chip ID register reads 0x1000f0.
             * Therefore using BT chip ID register here which should read 0x3000D0
             */
#define rBT_CHIP_ID_REG  (0x3b0000)
            if((nm_read_reg_with_ret(rBT_CHIP_ID_REG, &chipid)) != M2M_SUCCESS) {
 801b1a0:	4922      	ldr	r1, [pc, #136]	; (801b22c <nmi_get_chipid+0x118>)
 801b1a2:	f44f 106c 	mov.w	r0, #3866624	; 0x3b0000
 801b1a6:	f000 fbc3 	bl	801b930 <nm_read_reg_with_ret>
 801b1aa:	4603      	mov	r3, r0
 801b1ac:	2b00      	cmp	r3, #0
 801b1ae:	d004      	beq.n	801b1ba <nmi_get_chipid+0xa6>
                chipid = 0;
 801b1b0:	4b1e      	ldr	r3, [pc, #120]	; (801b22c <nmi_get_chipid+0x118>)
 801b1b2:	2200      	movs	r2, #0
 801b1b4:	601a      	str	r2, [r3, #0]
                return 0;
 801b1b6:	2300      	movs	r3, #0
 801b1b8:	e033      	b.n	801b222 <nmi_get_chipid+0x10e>
            }
            if(chipid == 0x3000d0) {
 801b1ba:	4b1c      	ldr	r3, [pc, #112]	; (801b22c <nmi_get_chipid+0x118>)
 801b1bc:	681b      	ldr	r3, [r3, #0]
 801b1be:	4a22      	ldr	r2, [pc, #136]	; (801b248 <nmi_get_chipid+0x134>)
 801b1c0:	4293      	cmp	r3, r2
 801b1c2:	d10c      	bne.n	801b1de <nmi_get_chipid+0xca>
                if(rfrevid == 6) {
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	2b06      	cmp	r3, #6
 801b1c8:	d103      	bne.n	801b1d2 <nmi_get_chipid+0xbe>
                    chipid = 0x3000d1;
 801b1ca:	4b18      	ldr	r3, [pc, #96]	; (801b22c <nmi_get_chipid+0x118>)
 801b1cc:	4a1f      	ldr	r2, [pc, #124]	; (801b24c <nmi_get_chipid+0x138>)
 801b1ce:	601a      	str	r2, [r3, #0]
 801b1d0:	e005      	b.n	801b1de <nmi_get_chipid+0xca>
                }
                else if(rfrevid == 2) {
 801b1d2:	687b      	ldr	r3, [r7, #4]
 801b1d4:	2b02      	cmp	r3, #2
 801b1d6:	d102      	bne.n	801b1de <nmi_get_chipid+0xca>
                    chipid = 0x3000d2;
 801b1d8:	4b14      	ldr	r3, [pc, #80]	; (801b22c <nmi_get_chipid+0x118>)
 801b1da:	4a1d      	ldr	r2, [pc, #116]	; (801b250 <nmi_get_chipid+0x13c>)
 801b1dc:	601a      	str	r2, [r3, #0]
                }
            }
        }
#else
        /*M2M is by default have SPI flash*/
        if((chipid & 0xf00000) == 0x300000) {
 801b1de:	4b13      	ldr	r3, [pc, #76]	; (801b22c <nmi_get_chipid+0x118>)
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 801b1e6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801b1ea:	d10c      	bne.n	801b206 <nmi_get_chipid+0xf2>
            chipid &= ~(0x0f0000);
 801b1ec:	4b0f      	ldr	r3, [pc, #60]	; (801b22c <nmi_get_chipid+0x118>)
 801b1ee:	681b      	ldr	r3, [r3, #0]
 801b1f0:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 801b1f4:	4a0d      	ldr	r2, [pc, #52]	; (801b22c <nmi_get_chipid+0x118>)
 801b1f6:	6013      	str	r3, [r2, #0]
            chipid |= 0x040000;
 801b1f8:	4b0c      	ldr	r3, [pc, #48]	; (801b22c <nmi_get_chipid+0x118>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 801b200:	4a0a      	ldr	r2, [pc, #40]	; (801b22c <nmi_get_chipid+0x118>)
 801b202:	6013      	str	r3, [r2, #0]
 801b204:	e00b      	b.n	801b21e <nmi_get_chipid+0x10a>
        } else {
            chipid &= ~(0x0f0000);
 801b206:	4b09      	ldr	r3, [pc, #36]	; (801b22c <nmi_get_chipid+0x118>)
 801b208:	681b      	ldr	r3, [r3, #0]
 801b20a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 801b20e:	4a07      	ldr	r2, [pc, #28]	; (801b22c <nmi_get_chipid+0x118>)
 801b210:	6013      	str	r3, [r2, #0]
            chipid |= 0x050000;
 801b212:	4b06      	ldr	r3, [pc, #24]	; (801b22c <nmi_get_chipid+0x118>)
 801b214:	681b      	ldr	r3, [r3, #0]
 801b216:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 801b21a:	4a04      	ldr	r2, [pc, #16]	; (801b22c <nmi_get_chipid+0x118>)
 801b21c:	6013      	str	r3, [r2, #0]
        }
#endif /* PROBE_FLASH */
    }
    return chipid;
 801b21e:	4b03      	ldr	r3, [pc, #12]	; (801b22c <nmi_get_chipid+0x118>)
 801b220:	681b      	ldr	r3, [r3, #0]
}
 801b222:	4618      	mov	r0, r3
 801b224:	3708      	adds	r7, #8
 801b226:	46bd      	mov	sp, r7
 801b228:	bd80      	pop	{r7, pc}
 801b22a:	bf00      	nop
 801b22c:	2001df00 	.word	0x2001df00
 801b230:	001002a0 	.word	0x001002a0
 801b234:	001002a1 	.word	0x001002a1
 801b238:	001002b0 	.word	0x001002b0
 801b23c:	001002b1 	.word	0x001002b1
 801b240:	001002b2 	.word	0x001002b2
 801b244:	001000f0 	.word	0x001000f0
 801b248:	003000d0 	.word	0x003000d0
 801b24c:	003000d1 	.word	0x003000d1
 801b250:	003000d2 	.word	0x003000d2

0801b254 <chip_sleep>:
    /* Do PLL update */
    nmi_update_pll();
}

sint8 chip_sleep(void)
{
 801b254:	b580      	push	{r7, lr}
 801b256:	b082      	sub	sp, #8
 801b258:	af00      	add	r7, sp, #0
    uint32 reg;
    sint8 ret = M2M_SUCCESS;
 801b25a:	2300      	movs	r3, #0
 801b25c:	71fb      	strb	r3, [r7, #7]

    while(1)
    {
        ret = nm_read_reg_with_ret(CORT_HOST_COMM, &reg);
 801b25e:	463b      	mov	r3, r7
 801b260:	4619      	mov	r1, r3
 801b262:	2014      	movs	r0, #20
 801b264:	f000 fb64 	bl	801b930 <nm_read_reg_with_ret>
 801b268:	4603      	mov	r3, r0
 801b26a:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS) goto ERR1;
 801b26c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b270:	2b00      	cmp	r3, #0
 801b272:	d144      	bne.n	801b2fe <chip_sleep+0xaa>
        if((reg & NBIT0) == 0) break;
 801b274:	683b      	ldr	r3, [r7, #0]
 801b276:	f003 0301 	and.w	r3, r3, #1
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d000      	beq.n	801b280 <chip_sleep+0x2c>
        ret = nm_read_reg_with_ret(CORT_HOST_COMM, &reg);
 801b27e:	e7ee      	b.n	801b25e <chip_sleep+0xa>
        if((reg & NBIT0) == 0) break;
 801b280:	bf00      	nop
    }

    /* Clear bit 1 */
    ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 801b282:	463b      	mov	r3, r7
 801b284:	4619      	mov	r1, r3
 801b286:	2001      	movs	r0, #1
 801b288:	f000 fb52 	bl	801b930 <nm_read_reg_with_ret>
 801b28c:	4603      	mov	r3, r0
 801b28e:	71fb      	strb	r3, [r7, #7]
    if(ret != M2M_SUCCESS)goto ERR1;
 801b290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b294:	2b00      	cmp	r3, #0
 801b296:	d134      	bne.n	801b302 <chip_sleep+0xae>
    if(reg & NBIT1)
 801b298:	683b      	ldr	r3, [r7, #0]
 801b29a:	f003 0302 	and.w	r3, r3, #2
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d00e      	beq.n	801b2c0 <chip_sleep+0x6c>
    {
        reg &=~NBIT1;
 801b2a2:	683b      	ldr	r3, [r7, #0]
 801b2a4:	f023 0302 	bic.w	r3, r3, #2
 801b2a8:	603b      	str	r3, [r7, #0]
        ret = nm_write_reg(WAKE_CLK_REG, reg);
 801b2aa:	683b      	ldr	r3, [r7, #0]
 801b2ac:	4619      	mov	r1, r3
 801b2ae:	2001      	movs	r0, #1
 801b2b0:	f000 fb4c 	bl	801b94c <nm_write_reg>
 801b2b4:	4603      	mov	r3, r0
 801b2b6:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 801b2b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	d122      	bne.n	801b306 <chip_sleep+0xb2>
    }

    ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 801b2c0:	463b      	mov	r3, r7
 801b2c2:	4619      	mov	r1, r3
 801b2c4:	200e      	movs	r0, #14
 801b2c6:	f000 fb33 	bl	801b930 <nm_read_reg_with_ret>
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	71fb      	strb	r3, [r7, #7]
    if(ret != M2M_SUCCESS)goto ERR1;
 801b2ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2d2:	2b00      	cmp	r3, #0
 801b2d4:	d119      	bne.n	801b30a <chip_sleep+0xb6>
    if(reg & NBIT0)
 801b2d6:	683b      	ldr	r3, [r7, #0]
 801b2d8:	f003 0301 	and.w	r3, r3, #1
 801b2dc:	2b00      	cmp	r3, #0
 801b2de:	d016      	beq.n	801b30e <chip_sleep+0xba>
    {
        reg &= ~NBIT0;
 801b2e0:	683b      	ldr	r3, [r7, #0]
 801b2e2:	f023 0301 	bic.w	r3, r3, #1
 801b2e6:	603b      	str	r3, [r7, #0]
        ret = nm_write_reg(HOST_CORT_COMM, reg);
 801b2e8:	683b      	ldr	r3, [r7, #0]
 801b2ea:	4619      	mov	r1, r3
 801b2ec:	200e      	movs	r0, #14
 801b2ee:	f000 fb2d 	bl	801b94c <nm_write_reg>
 801b2f2:	4603      	mov	r3, r0
 801b2f4:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS)goto ERR1;
 801b2f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b2fa:	2b00      	cmp	r3, #0
    }

ERR1:
 801b2fc:	e007      	b.n	801b30e <chip_sleep+0xba>
        if(ret != M2M_SUCCESS) goto ERR1;
 801b2fe:	bf00      	nop
 801b300:	e006      	b.n	801b310 <chip_sleep+0xbc>
    if(ret != M2M_SUCCESS)goto ERR1;
 801b302:	bf00      	nop
 801b304:	e004      	b.n	801b310 <chip_sleep+0xbc>
        if(ret != M2M_SUCCESS)goto ERR1;
 801b306:	bf00      	nop
 801b308:	e002      	b.n	801b310 <chip_sleep+0xbc>
    if(ret != M2M_SUCCESS)goto ERR1;
 801b30a:	bf00      	nop
 801b30c:	e000      	b.n	801b310 <chip_sleep+0xbc>
ERR1:
 801b30e:	bf00      	nop
    return ret;
 801b310:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b314:	4618      	mov	r0, r3
 801b316:	3708      	adds	r7, #8
 801b318:	46bd      	mov	sp, r7
 801b31a:	bd80      	pop	{r7, pc}

0801b31c <chip_wake>:

sint8 chip_wake(void)
{
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b084      	sub	sp, #16
 801b320:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 801b322:	2300      	movs	r3, #0
 801b324:	73fb      	strb	r3, [r7, #15]
    uint32 reg = 0, clk_status_reg = 0, trials = 0;
 801b326:	2300      	movs	r3, #0
 801b328:	607b      	str	r3, [r7, #4]
 801b32a:	2300      	movs	r3, #0
 801b32c:	603b      	str	r3, [r7, #0]
 801b32e:	2300      	movs	r3, #0
 801b330:	60bb      	str	r3, [r7, #8]

    nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 801b332:	463b      	mov	r3, r7
 801b334:	4619      	mov	r1, r3
 801b336:	2013      	movs	r0, #19
 801b338:	f000 fafa 	bl	801b930 <nm_read_reg_with_ret>

    ret = nm_read_reg_with_ret(HOST_CORT_COMM, &reg);
 801b33c:	1d3b      	adds	r3, r7, #4
 801b33e:	4619      	mov	r1, r3
 801b340:	200e      	movs	r0, #14
 801b342:	f000 faf5 	bl	801b930 <nm_read_reg_with_ret>
 801b346:	4603      	mov	r3, r0
 801b348:	73fb      	strb	r3, [r7, #15]
    if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 801b34a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b34e:	2b00      	cmp	r3, #0
 801b350:	d167      	bne.n	801b422 <chip_wake+0x106>

    if(!(reg & NBIT0))
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	f003 0301 	and.w	r3, r3, #1
 801b358:	2b00      	cmp	r3, #0
 801b35a:	d10c      	bne.n	801b376 <chip_wake+0x5a>
    {
        /*USE bit 0 to indicate host wakeup*/
        ret = nm_write_reg(HOST_CORT_COMM, reg|NBIT0);
 801b35c:	687b      	ldr	r3, [r7, #4]
 801b35e:	f043 0301 	orr.w	r3, r3, #1
 801b362:	4619      	mov	r1, r3
 801b364:	200e      	movs	r0, #14
 801b366:	f000 faf1 	bl	801b94c <nm_write_reg>
 801b36a:	4603      	mov	r3, r0
 801b36c:	73fb      	strb	r3, [r7, #15]
        if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 801b36e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b372:	2b00      	cmp	r3, #0
 801b374:	d157      	bne.n	801b426 <chip_wake+0x10a>
    }

    ret = nm_read_reg_with_ret(WAKE_CLK_REG, &reg);
 801b376:	1d3b      	adds	r3, r7, #4
 801b378:	4619      	mov	r1, r3
 801b37a:	2001      	movs	r0, #1
 801b37c:	f000 fad8 	bl	801b930 <nm_read_reg_with_ret>
 801b380:	4603      	mov	r3, r0
 801b382:	73fb      	strb	r3, [r7, #15]
    if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 801b384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d14e      	bne.n	801b42a <chip_wake+0x10e>

    /* Set bit 1 */
    if(!(reg & NBIT1))
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	f003 0302 	and.w	r3, r3, #2
 801b392:	2b00      	cmp	r3, #0
 801b394:	d10c      	bne.n	801b3b0 <chip_wake+0x94>
    {
        ret = nm_write_reg(WAKE_CLK_REG, reg | NBIT1);
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	f043 0302 	orr.w	r3, r3, #2
 801b39c:	4619      	mov	r1, r3
 801b39e:	2001      	movs	r0, #1
 801b3a0:	f000 fad4 	bl	801b94c <nm_write_reg>
 801b3a4:	4603      	mov	r3, r0
 801b3a6:	73fb      	strb	r3, [r7, #15]
        if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 801b3a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d13e      	bne.n	801b42e <chip_wake+0x112>
    }

    do
    {
        ret = nm_read_reg_with_ret(CLOCKS_EN_REG, &clk_status_reg);
 801b3b0:	463b      	mov	r3, r7
 801b3b2:	4619      	mov	r1, r3
 801b3b4:	2013      	movs	r0, #19
 801b3b6:	f000 fabb 	bl	801b930 <nm_read_reg_with_ret>
 801b3ba:	4603      	mov	r3, r0
 801b3bc:	73fb      	strb	r3, [r7, #15]
        if(ret != M2M_SUCCESS) {
 801b3be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d010      	beq.n	801b3e8 <chip_wake+0xcc>
            M2M_ERR("Bus error (5).%d %lx\n", ret, clk_status_reg);
 801b3c6:	f240 1279 	movw	r2, #377	; 0x179
 801b3ca:	491d      	ldr	r1, [pc, #116]	; (801b440 <chip_wake+0x124>)
 801b3cc:	481d      	ldr	r0, [pc, #116]	; (801b444 <chip_wake+0x128>)
 801b3ce:	f003 f8b9 	bl	801e544 <iprintf>
 801b3d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b3d6:	683a      	ldr	r2, [r7, #0]
 801b3d8:	4619      	mov	r1, r3
 801b3da:	481b      	ldr	r0, [pc, #108]	; (801b448 <chip_wake+0x12c>)
 801b3dc:	f003 f8b2 	bl	801e544 <iprintf>
 801b3e0:	200d      	movs	r0, #13
 801b3e2:	f003 f8c7 	bl	801e574 <putchar>
            goto _WAKE_EXIT;
 801b3e6:	e025      	b.n	801b434 <chip_wake+0x118>
        }
        if(clk_status_reg & NBIT2) {
 801b3e8:	683b      	ldr	r3, [r7, #0]
 801b3ea:	f003 0304 	and.w	r3, r3, #4
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d11f      	bne.n	801b432 <chip_wake+0x116>
            break;
        }
        nm_bsp_sleep(2);
 801b3f2:	2002      	movs	r0, #2
 801b3f4:	f7fd fc86 	bl	8018d04 <nm_bsp_sleep>
        trials++;
 801b3f8:	68bb      	ldr	r3, [r7, #8]
 801b3fa:	3301      	adds	r3, #1
 801b3fc:	60bb      	str	r3, [r7, #8]
        if(trials > WAKEUP_TRIALS)
 801b3fe:	68bb      	ldr	r3, [r7, #8]
 801b400:	2b04      	cmp	r3, #4
 801b402:	d9d5      	bls.n	801b3b0 <chip_wake+0x94>
        {
            M2M_ERR("Failed to wakeup the chip\n");
 801b404:	f240 1283 	movw	r2, #387	; 0x183
 801b408:	490d      	ldr	r1, [pc, #52]	; (801b440 <chip_wake+0x124>)
 801b40a:	480e      	ldr	r0, [pc, #56]	; (801b444 <chip_wake+0x128>)
 801b40c:	f003 f89a 	bl	801e544 <iprintf>
 801b410:	480e      	ldr	r0, [pc, #56]	; (801b44c <chip_wake+0x130>)
 801b412:	f003 f933 	bl	801e67c <puts>
 801b416:	200d      	movs	r0, #13
 801b418:	f003 f8ac 	bl	801e574 <putchar>
            ret = M2M_ERR_TIME_OUT;
 801b41c:	23fc      	movs	r3, #252	; 0xfc
 801b41e:	73fb      	strb	r3, [r7, #15]
            goto _WAKE_EXIT;
 801b420:	e008      	b.n	801b434 <chip_wake+0x118>
    if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 801b422:	bf00      	nop
 801b424:	e006      	b.n	801b434 <chip_wake+0x118>
        if(ret != M2M_SUCCESS)goto _WAKE_EXIT;
 801b426:	bf00      	nop
 801b428:	e004      	b.n	801b434 <chip_wake+0x118>
    if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 801b42a:	bf00      	nop
 801b42c:	e002      	b.n	801b434 <chip_wake+0x118>
        if(ret != M2M_SUCCESS) goto _WAKE_EXIT;
 801b42e:	bf00      	nop
 801b430:	e000      	b.n	801b434 <chip_wake+0x118>
            break;
 801b432:	bf00      	nop
        }
    } while(1);
    /* Workaround sometimes spi fail to read clock regs after reading/writing clockless registers */
    //nm_bus_reset();
_WAKE_EXIT:
    return ret;
 801b434:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b438:	4618      	mov	r0, r3
 801b43a:	3710      	adds	r7, #16
 801b43c:	46bd      	mov	sp, r7
 801b43e:	bd80      	pop	{r7, pc}
 801b440:	08029128 	.word	0x08029128
 801b444:	08020e24 	.word	0x08020e24
 801b448:	08020e60 	.word	0x08020e60
 801b44c:	08020e78 	.word	0x08020e78

0801b450 <wait_for_bootrom>:
#endif
    return ret;
}

sint8 wait_for_bootrom(uint8 arg)
{
 801b450:	b580      	push	{r7, lr}
 801b452:	b086      	sub	sp, #24
 801b454:	af00      	add	r7, sp, #0
 801b456:	4603      	mov	r3, r0
 801b458:	71fb      	strb	r3, [r7, #7]
    sint8 ret = M2M_SUCCESS;
 801b45a:	2300      	movs	r3, #0
 801b45c:	75fb      	strb	r3, [r7, #23]
    uint32 reg = 0, cnt = 0;
 801b45e:	2300      	movs	r3, #0
 801b460:	613b      	str	r3, [r7, #16]
 801b462:	2300      	movs	r3, #0
 801b464:	60fb      	str	r3, [r7, #12]
    uint32 u32GpReg1 = 0;
 801b466:	2300      	movs	r3, #0
 801b468:	60bb      	str	r3, [r7, #8]

    reg = 0;
 801b46a:	2300      	movs	r3, #0
 801b46c:	613b      	str	r3, [r7, #16]
    while(1) {
        reg = nm_read_reg(0x1014);  /* wait for efuse loading done */
 801b46e:	f241 0014 	movw	r0, #4116	; 0x1014
 801b472:	f000 fa51 	bl	801b918 <nm_read_reg>
 801b476:	6138      	str	r0, [r7, #16]
        if(reg & 0x80000000) {
 801b478:	693b      	ldr	r3, [r7, #16]
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	db03      	blt.n	801b486 <wait_for_bootrom+0x36>
            break;
        }
        nm_bsp_sleep(1); /* Removing this can cause a bus error. */
 801b47e:	2001      	movs	r0, #1
 801b480:	f7fd fc40 	bl	8018d04 <nm_bsp_sleep>
        reg = nm_read_reg(0x1014);  /* wait for efuse loading done */
 801b484:	e7f3      	b.n	801b46e <wait_for_bootrom+0x1e>
            break;
 801b486:	bf00      	nop
    }
    reg = nm_read_reg(M2M_WAIT_FOR_HOST_REG);
 801b488:	4825      	ldr	r0, [pc, #148]	; (801b520 <wait_for_bootrom+0xd0>)
 801b48a:	f000 fa45 	bl	801b918 <nm_read_reg>
 801b48e:	6138      	str	r0, [r7, #16]
    reg &= 0x1;
 801b490:	693b      	ldr	r3, [r7, #16]
 801b492:	f003 0301 	and.w	r3, r3, #1
 801b496:	613b      	str	r3, [r7, #16]

    /* check if waiting for the host will be skipped or not */
    if(reg == 0)
 801b498:	693b      	ldr	r3, [r7, #16]
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d116      	bne.n	801b4cc <wait_for_bootrom+0x7c>
    {
        while(reg != M2M_FINISH_BOOT_ROM)
 801b49e:	e011      	b.n	801b4c4 <wait_for_bootrom+0x74>
        {
            nm_bsp_sleep(1);
 801b4a0:	2001      	movs	r0, #1
 801b4a2:	f7fd fc2f 	bl	8018d04 <nm_bsp_sleep>
            reg = nm_read_reg(BOOTROM_REG);
 801b4a6:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 801b4aa:	f000 fa35 	bl	801b918 <nm_read_reg>
 801b4ae:	6138      	str	r0, [r7, #16]

            if(++cnt > TIMEOUT)
 801b4b0:	68fb      	ldr	r3, [r7, #12]
 801b4b2:	3301      	adds	r3, #1
 801b4b4:	60fb      	str	r3, [r7, #12]
 801b4b6:	68fb      	ldr	r3, [r7, #12]
 801b4b8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801b4bc:	d902      	bls.n	801b4c4 <wait_for_bootrom+0x74>
            {
                M2M_DBG("failed to load firmware from flash.\n");
                ret = M2M_ERR_INIT;
 801b4be:	23fb      	movs	r3, #251	; 0xfb
 801b4c0:	75fb      	strb	r3, [r7, #23]
                goto ERR2;
 801b4c2:	e027      	b.n	801b514 <wait_for_bootrom+0xc4>
        while(reg != M2M_FINISH_BOOT_ROM)
 801b4c4:	693b      	ldr	r3, [r7, #16]
 801b4c6:	4a17      	ldr	r2, [pc, #92]	; (801b524 <wait_for_bootrom+0xd4>)
 801b4c8:	4293      	cmp	r3, r2
 801b4ca:	d1e9      	bne.n	801b4a0 <wait_for_bootrom+0x50>
            }
        }
    }

    if(M2M_WIFI_MODE_CONFIG == arg) {
 801b4cc:	79fb      	ldrb	r3, [r7, #7]
 801b4ce:	2b02      	cmp	r3, #2
 801b4d0:	d104      	bne.n	801b4dc <wait_for_bootrom+0x8c>
        nm_write_reg(NMI_REV_REG, M2M_ATE_FW_START_VALUE);
 801b4d2:	4915      	ldr	r1, [pc, #84]	; (801b528 <wait_for_bootrom+0xd8>)
 801b4d4:	4815      	ldr	r0, [pc, #84]	; (801b52c <wait_for_bootrom+0xdc>)
 801b4d6:	f000 fa39 	bl	801b94c <nm_write_reg>
 801b4da:	e004      	b.n	801b4e6 <wait_for_bootrom+0x96>
    } else if(M2M_WIFI_MODE_ETHERNET == arg) {
 801b4dc:	79fb      	ldrb	r3, [r7, #7]
 801b4de:	2b03      	cmp	r3, #3
 801b4e0:	d101      	bne.n	801b4e6 <wait_for_bootrom+0x96>
        u32GpReg1 = rHAVE_ETHERNET_MODE_BIT;
 801b4e2:	2380      	movs	r3, #128	; 0x80
 801b4e4:	60bb      	str	r3, [r7, #8]
    } else {
        /*bypass this step*/
    }

    if(REV(nmi_get_chipid()) == REV_3A0)
 801b4e6:	f7ff fe15 	bl	801b114 <nmi_get_chipid>
 801b4ea:	4603      	mov	r3, r0
 801b4ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801b4f0:	f5b3 7f68 	cmp.w	r3, #928	; 0x3a0
 801b4f4:	d106      	bne.n	801b504 <wait_for_bootrom+0xb4>
    {
        chip_apply_conf(u32GpReg1 | rHAVE_USE_PMU_BIT);
 801b4f6:	68bb      	ldr	r3, [r7, #8]
 801b4f8:	f043 0302 	orr.w	r3, r3, #2
 801b4fc:	4618      	mov	r0, r3
 801b4fe:	f7ff fcd8 	bl	801aeb2 <chip_apply_conf>
 801b502:	e002      	b.n	801b50a <wait_for_bootrom+0xba>
    }
    else
    {
        chip_apply_conf(u32GpReg1);
 801b504:	68b8      	ldr	r0, [r7, #8]
 801b506:	f7ff fcd4 	bl	801aeb2 <chip_apply_conf>
    }

    nm_write_reg(BOOTROM_REG, M2M_START_FIRMWARE);
 801b50a:	4909      	ldr	r1, [pc, #36]	; (801b530 <wait_for_bootrom+0xe0>)
 801b50c:	f04f 100c 	mov.w	r0, #786444	; 0xc000c
 801b510:	f000 fa1c 	bl	801b94c <nm_write_reg>
#ifdef __ROM_TEST__
    rom_test();
#endif /* __ROM_TEST__ */

ERR2:
    return ret;
 801b514:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801b518:	4618      	mov	r0, r3
 801b51a:	3718      	adds	r7, #24
 801b51c:	46bd      	mov	sp, r7
 801b51e:	bd80      	pop	{r7, pc}
 801b520:	000207bc 	.word	0x000207bc
 801b524:	10add09e 	.word	0x10add09e
 801b528:	3c1cd57d 	.word	0x3c1cd57d
 801b52c:	000207ac 	.word	0x000207ac
 801b530:	ef522f61 	.word	0xef522f61

0801b534 <wait_for_firmware_start>:

sint8 wait_for_firmware_start(uint8 arg)
{
 801b534:	b580      	push	{r7, lr}
 801b536:	b088      	sub	sp, #32
 801b538:	af00      	add	r7, sp, #0
 801b53a:	4603      	mov	r3, r0
 801b53c:	71fb      	strb	r3, [r7, #7]
    sint8 ret = M2M_SUCCESS;
 801b53e:	2300      	movs	r3, #0
 801b540:	77fb      	strb	r3, [r7, #31]
    uint32 reg = 0, cnt = 0;
 801b542:	2300      	movs	r3, #0
 801b544:	617b      	str	r3, [r7, #20]
 801b546:	2300      	movs	r3, #0
 801b548:	61bb      	str	r3, [r7, #24]
    volatile uint32 regAddress = NMI_STATE_REG;
 801b54a:	f241 038c 	movw	r3, #4236	; 0x108c
 801b54e:	613b      	str	r3, [r7, #16]
    volatile uint32 checkValue = M2M_FINISH_INIT_STATE;
 801b550:	4b1e      	ldr	r3, [pc, #120]	; (801b5cc <wait_for_firmware_start+0x98>)
 801b552:	60fb      	str	r3, [r7, #12]

    if(M2M_WIFI_MODE_CONFIG == arg) {
 801b554:	79fb      	ldrb	r3, [r7, #7]
 801b556:	2b02      	cmp	r3, #2
 801b558:	d122      	bne.n	801b5a0 <wait_for_firmware_start+0x6c>
        regAddress = NMI_REV_REG;
 801b55a:	4b1d      	ldr	r3, [pc, #116]	; (801b5d0 <wait_for_firmware_start+0x9c>)
 801b55c:	613b      	str	r3, [r7, #16]
        checkValue = M2M_ATE_FW_START_VALUE;//M2M_ATE_FW_IS_UP_VALUE;
 801b55e:	4b1d      	ldr	r3, [pc, #116]	; (801b5d4 <wait_for_firmware_start+0xa0>)
 801b560:	60fb      	str	r3, [r7, #12]
    } else {
        /*bypass this step*/
    }

    while(checkValue != reg)
 801b562:	e01d      	b.n	801b5a0 <wait_for_firmware_start+0x6c>
    {
        nm_bsp_sleep(2); /* Removing this can cause a bus error. */
 801b564:	2002      	movs	r0, #2
 801b566:	f7fd fbcd 	bl	8018d04 <nm_bsp_sleep>
        M2M_DBG("%x %x %x\n", (unsigned int)nm_read_reg(0x108c), (unsigned int)nm_read_reg(0x108c), (unsigned int)nm_read_reg(0x14A0));
        if(nm_read_reg_with_ret(regAddress, &reg) != M2M_SUCCESS)
 801b56a:	693b      	ldr	r3, [r7, #16]
 801b56c:	f107 0214 	add.w	r2, r7, #20
 801b570:	4611      	mov	r1, r2
 801b572:	4618      	mov	r0, r3
 801b574:	f000 f9dc 	bl	801b930 <nm_read_reg_with_ret>
 801b578:	4603      	mov	r3, r0
 801b57a:	2b00      	cmp	r3, #0
 801b57c:	d006      	beq.n	801b58c <wait_for_firmware_start+0x58>
        {
            // ensure reg != checkValue
            reg = !checkValue;
 801b57e:	68fb      	ldr	r3, [r7, #12]
 801b580:	2b00      	cmp	r3, #0
 801b582:	bf0c      	ite	eq
 801b584:	2301      	moveq	r3, #1
 801b586:	2300      	movne	r3, #0
 801b588:	b2db      	uxtb	r3, r3
 801b58a:	617b      	str	r3, [r7, #20]
        }
        if(++cnt > TIMEOUT)
 801b58c:	69bb      	ldr	r3, [r7, #24]
 801b58e:	3301      	adds	r3, #1
 801b590:	61bb      	str	r3, [r7, #24]
 801b592:	69bb      	ldr	r3, [r7, #24]
 801b594:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801b598:	d902      	bls.n	801b5a0 <wait_for_firmware_start+0x6c>
        {
            M2M_DBG("Time out for wait firmware Run\n");
            ret = M2M_ERR_INIT;
 801b59a:	23fb      	movs	r3, #251	; 0xfb
 801b59c:	77fb      	strb	r3, [r7, #31]
            goto ERR;
 801b59e:	e00e      	b.n	801b5be <wait_for_firmware_start+0x8a>
    while(checkValue != reg)
 801b5a0:	68fa      	ldr	r2, [r7, #12]
 801b5a2:	697b      	ldr	r3, [r7, #20]
 801b5a4:	429a      	cmp	r2, r3
 801b5a6:	d1dd      	bne.n	801b564 <wait_for_firmware_start+0x30>
        }
    }
    if(M2M_FINISH_INIT_STATE == checkValue)
 801b5a8:	68fb      	ldr	r3, [r7, #12]
 801b5aa:	4a08      	ldr	r2, [pc, #32]	; (801b5cc <wait_for_firmware_start+0x98>)
 801b5ac:	4293      	cmp	r3, r2
 801b5ae:	d105      	bne.n	801b5bc <wait_for_firmware_start+0x88>
    {
        nm_write_reg(NMI_STATE_REG, 0);
 801b5b0:	2100      	movs	r1, #0
 801b5b2:	f241 008c 	movw	r0, #4236	; 0x108c
 801b5b6:	f000 f9c9 	bl	801b94c <nm_write_reg>
 801b5ba:	e000      	b.n	801b5be <wait_for_firmware_start+0x8a>
    }
ERR:
 801b5bc:	bf00      	nop
    return ret;
 801b5be:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b5c2:	4618      	mov	r0, r3
 801b5c4:	3720      	adds	r7, #32
 801b5c6:	46bd      	mov	sp, r7
 801b5c8:	bd80      	pop	{r7, pc}
 801b5ca:	bf00      	nop
 801b5cc:	02532636 	.word	0x02532636
 801b5d0:	000207ac 	.word	0x000207ac
 801b5d4:	3c1cd57d 	.word	0x3c1cd57d

0801b5d8 <chip_deinit>:

sint8 chip_deinit(void)
{
 801b5d8:	b580      	push	{r7, lr}
 801b5da:	b082      	sub	sp, #8
 801b5dc:	af00      	add	r7, sp, #0
    uint32 reg = 0;
 801b5de:	2300      	movs	r3, #0
 801b5e0:	603b      	str	r3, [r7, #0]
    sint8 ret;
    uint8 timeout = 10;
 801b5e2:	230a      	movs	r3, #10
 801b5e4:	71bb      	strb	r3, [r7, #6]

    /**
    stop the firmware, need a re-download
    **/
    ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 801b5e6:	463b      	mov	r3, r7
 801b5e8:	4619      	mov	r1, r3
 801b5ea:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b5ee:	f000 f99f 	bl	801b930 <nm_read_reg_with_ret>
 801b5f2:	4603      	mov	r3, r0
 801b5f4:	71fb      	strb	r3, [r7, #7]
    if(ret != M2M_SUCCESS) {
 801b5f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b5fa:	2b00      	cmp	r3, #0
 801b5fc:	d00b      	beq.n	801b616 <chip_deinit+0x3e>
        M2M_ERR("failed to de-initialize\n");
 801b5fe:	f240 2225 	movw	r2, #549	; 0x225
 801b602:	4931      	ldr	r1, [pc, #196]	; (801b6c8 <chip_deinit+0xf0>)
 801b604:	4831      	ldr	r0, [pc, #196]	; (801b6cc <chip_deinit+0xf4>)
 801b606:	f002 ff9d 	bl	801e544 <iprintf>
 801b60a:	4831      	ldr	r0, [pc, #196]	; (801b6d0 <chip_deinit+0xf8>)
 801b60c:	f003 f836 	bl	801e67c <puts>
 801b610:	200d      	movs	r0, #13
 801b612:	f002 ffaf 	bl	801e574 <putchar>
    }
    reg &= ~(1 << 10);
 801b616:	683b      	ldr	r3, [r7, #0]
 801b618:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b61c:	603b      	str	r3, [r7, #0]
    ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 801b61e:	683b      	ldr	r3, [r7, #0]
 801b620:	4619      	mov	r1, r3
 801b622:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b626:	f000 f991 	bl	801b94c <nm_write_reg>
 801b62a:	4603      	mov	r3, r0
 801b62c:	71fb      	strb	r3, [r7, #7]

    if(ret != M2M_SUCCESS) {
 801b62e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d00e      	beq.n	801b654 <chip_deinit+0x7c>
        M2M_ERR("Error while writing reg\n");
 801b636:	f240 222b 	movw	r2, #555	; 0x22b
 801b63a:	4923      	ldr	r1, [pc, #140]	; (801b6c8 <chip_deinit+0xf0>)
 801b63c:	4823      	ldr	r0, [pc, #140]	; (801b6cc <chip_deinit+0xf4>)
 801b63e:	f002 ff81 	bl	801e544 <iprintf>
 801b642:	4824      	ldr	r0, [pc, #144]	; (801b6d4 <chip_deinit+0xfc>)
 801b644:	f003 f81a 	bl	801e67c <puts>
 801b648:	200d      	movs	r0, #13
 801b64a:	f002 ff93 	bl	801e574 <putchar>
        return ret;
 801b64e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b652:	e035      	b.n	801b6c0 <chip_deinit+0xe8>
    }

    do {
        ret = nm_read_reg_with_ret(NMI_GLB_RESET_0, &reg);
 801b654:	463b      	mov	r3, r7
 801b656:	4619      	mov	r1, r3
 801b658:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b65c:	f000 f968 	bl	801b930 <nm_read_reg_with_ret>
 801b660:	4603      	mov	r3, r0
 801b662:	71fb      	strb	r3, [r7, #7]
        if(ret != M2M_SUCCESS) {
 801b664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b668:	2b00      	cmp	r3, #0
 801b66a:	d00e      	beq.n	801b68a <chip_deinit+0xb2>
            M2M_ERR("Error while reading reg\n");
 801b66c:	f240 2232 	movw	r2, #562	; 0x232
 801b670:	4915      	ldr	r1, [pc, #84]	; (801b6c8 <chip_deinit+0xf0>)
 801b672:	4816      	ldr	r0, [pc, #88]	; (801b6cc <chip_deinit+0xf4>)
 801b674:	f002 ff66 	bl	801e544 <iprintf>
 801b678:	4817      	ldr	r0, [pc, #92]	; (801b6d8 <chip_deinit+0x100>)
 801b67a:	f002 ffff 	bl	801e67c <puts>
 801b67e:	200d      	movs	r0, #13
 801b680:	f002 ff78 	bl	801e574 <putchar>
            return ret;
 801b684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801b688:	e01a      	b.n	801b6c0 <chip_deinit+0xe8>
        }
        /*Workaround to ensure that the chip is actually reset*/
        if((reg & (1 << 10))) {
 801b68a:	683b      	ldr	r3, [r7, #0]
 801b68c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801b690:	2b00      	cmp	r3, #0
 801b692:	d012      	beq.n	801b6ba <chip_deinit+0xe2>
            M2M_DBG("Bit 10 not reset retry %d\n", timeout);
            reg &= ~(1 << 10);
 801b694:	683b      	ldr	r3, [r7, #0]
 801b696:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 801b69a:	603b      	str	r3, [r7, #0]
            ret = nm_write_reg(NMI_GLB_RESET_0, reg);
 801b69c:	683b      	ldr	r3, [r7, #0]
 801b69e:	4619      	mov	r1, r3
 801b6a0:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 801b6a4:	f000 f952 	bl	801b94c <nm_write_reg>
 801b6a8:	4603      	mov	r3, r0
 801b6aa:	71fb      	strb	r3, [r7, #7]
            timeout--;
 801b6ac:	79bb      	ldrb	r3, [r7, #6]
 801b6ae:	3b01      	subs	r3, #1
 801b6b0:	71bb      	strb	r3, [r7, #6]
        } else {
            break;
        }
    } while(timeout);
 801b6b2:	79bb      	ldrb	r3, [r7, #6]
 801b6b4:	2b00      	cmp	r3, #0
 801b6b6:	d1cd      	bne.n	801b654 <chip_deinit+0x7c>
 801b6b8:	e000      	b.n	801b6bc <chip_deinit+0xe4>
            break;
 801b6ba:	bf00      	nop

    return ret;
 801b6bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b6c0:	4618      	mov	r0, r3
 801b6c2:	3708      	adds	r7, #8
 801b6c4:	46bd      	mov	sp, r7
 801b6c6:	bd80      	pop	{r7, pc}
 801b6c8:	08029134 	.word	0x08029134
 801b6cc:	08020e24 	.word	0x08020e24
 801b6d0:	08020e94 	.word	0x08020e94
 801b6d4:	08020eac 	.word	0x08020eac
 801b6d8:	08020ec4 	.word	0x08020ec4

0801b6dc <pullup_ctrl>:
_EXIT:
    return ret;
}

sint8 pullup_ctrl(uint32 pinmask, uint8 enable)
{
 801b6dc:	b580      	push	{r7, lr}
 801b6de:	b084      	sub	sp, #16
 801b6e0:	af00      	add	r7, sp, #0
 801b6e2:	6078      	str	r0, [r7, #4]
 801b6e4:	460b      	mov	r3, r1
 801b6e6:	70fb      	strb	r3, [r7, #3]
    sint8 s8Ret;
    uint32 val32;
    s8Ret = nm_read_reg_with_ret(0x142c, &val32);
 801b6e8:	f107 0308 	add.w	r3, r7, #8
 801b6ec:	4619      	mov	r1, r3
 801b6ee:	f241 402c 	movw	r0, #5164	; 0x142c
 801b6f2:	f000 f91d 	bl	801b930 <nm_read_reg_with_ret>
 801b6f6:	4603      	mov	r3, r0
 801b6f8:	73fb      	strb	r3, [r7, #15]
    if(s8Ret != M2M_SUCCESS) {
 801b6fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b6fe:	2b00      	cmp	r3, #0
 801b700:	d00c      	beq.n	801b71c <pullup_ctrl+0x40>
        M2M_ERR("[pullup_ctrl]: failed to read\n");
 801b702:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b706:	491c      	ldr	r1, [pc, #112]	; (801b778 <pullup_ctrl+0x9c>)
 801b708:	481c      	ldr	r0, [pc, #112]	; (801b77c <pullup_ctrl+0xa0>)
 801b70a:	f002 ff1b 	bl	801e544 <iprintf>
 801b70e:	481c      	ldr	r0, [pc, #112]	; (801b780 <pullup_ctrl+0xa4>)
 801b710:	f002 ffb4 	bl	801e67c <puts>
 801b714:	200d      	movs	r0, #13
 801b716:	f002 ff2d 	bl	801e574 <putchar>
        goto _EXIT;
 801b71a:	e026      	b.n	801b76a <pullup_ctrl+0x8e>
    }
    if(enable) {
 801b71c:	78fb      	ldrb	r3, [r7, #3]
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d005      	beq.n	801b72e <pullup_ctrl+0x52>
        val32 &= ~pinmask;
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	43da      	mvns	r2, r3
 801b726:	68bb      	ldr	r3, [r7, #8]
 801b728:	4013      	ands	r3, r2
 801b72a:	60bb      	str	r3, [r7, #8]
 801b72c:	e003      	b.n	801b736 <pullup_ctrl+0x5a>
    } else {
        val32 |= pinmask;
 801b72e:	68ba      	ldr	r2, [r7, #8]
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	4313      	orrs	r3, r2
 801b734:	60bb      	str	r3, [r7, #8]
    }
    s8Ret = nm_write_reg(0x142c, val32);
 801b736:	68bb      	ldr	r3, [r7, #8]
 801b738:	4619      	mov	r1, r3
 801b73a:	f241 402c 	movw	r0, #5164	; 0x142c
 801b73e:	f000 f905 	bl	801b94c <nm_write_reg>
 801b742:	4603      	mov	r3, r0
 801b744:	73fb      	strb	r3, [r7, #15]
    if(s8Ret  != M2M_SUCCESS) {
 801b746:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d00c      	beq.n	801b768 <pullup_ctrl+0x8c>
        M2M_ERR("[pullup_ctrl]: failed to write\n");
 801b74e:	f240 228a 	movw	r2, #650	; 0x28a
 801b752:	4909      	ldr	r1, [pc, #36]	; (801b778 <pullup_ctrl+0x9c>)
 801b754:	4809      	ldr	r0, [pc, #36]	; (801b77c <pullup_ctrl+0xa0>)
 801b756:	f002 fef5 	bl	801e544 <iprintf>
 801b75a:	480a      	ldr	r0, [pc, #40]	; (801b784 <pullup_ctrl+0xa8>)
 801b75c:	f002 ff8e 	bl	801e67c <puts>
 801b760:	200d      	movs	r0, #13
 801b762:	f002 ff07 	bl	801e574 <putchar>
        goto _EXIT;
 801b766:	e000      	b.n	801b76a <pullup_ctrl+0x8e>
    }
_EXIT:
 801b768:	bf00      	nop
    return s8Ret;
 801b76a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b76e:	4618      	mov	r0, r3
 801b770:	3710      	adds	r7, #16
 801b772:	46bd      	mov	sp, r7
 801b774:	bd80      	pop	{r7, pc}
 801b776:	bf00      	nop
 801b778:	08029140 	.word	0x08029140
 801b77c:	08020e24 	.word	0x08020e24
 801b780:	08020edc 	.word	0x08020edc
 801b784:	08020efc 	.word	0x08020efc

0801b788 <nmi_get_otp_mac_address>:
#endif /* CONF_PERIPH */

sint8 nmi_get_otp_mac_address(uint8 *pu8MacAddr,  uint8 *pu8IsValid)
{
 801b788:	b580      	push	{r7, lr}
 801b78a:	b088      	sub	sp, #32
 801b78c:	af00      	add	r7, sp, #0
 801b78e:	6078      	str	r0, [r7, #4]
 801b790:	6039      	str	r1, [r7, #0]
    sint8 ret;
    uint32  u32RegValue;
    uint8   mac[6];
    tstrGpRegs strgp = {0};
 801b792:	f107 0308 	add.w	r3, r7, #8
 801b796:	2200      	movs	r2, #0
 801b798:	601a      	str	r2, [r3, #0]
 801b79a:	605a      	str	r2, [r3, #4]

    ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &u32RegValue);
 801b79c:	f107 0318 	add.w	r3, r7, #24
 801b7a0:	4619      	mov	r1, r3
 801b7a2:	f241 409c 	movw	r0, #5276	; 0x149c
 801b7a6:	f000 f8c3 	bl	801b930 <nm_read_reg_with_ret>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	77fb      	strb	r3, [r7, #31]
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b7ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d139      	bne.n	801b82a <nmi_get_otp_mac_address+0xa2>

    ret = nm_read_block(u32RegValue|0x30000, (uint8*)&strgp, sizeof(tstrGpRegs));
 801b7b6:	69bb      	ldr	r3, [r7, #24]
 801b7b8:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801b7bc:	f107 0108 	add.w	r1, r7, #8
 801b7c0:	2208      	movs	r2, #8
 801b7c2:	4618      	mov	r0, r3
 801b7c4:	f000 f8e2 	bl	801b98c <nm_read_block>
 801b7c8:	4603      	mov	r3, r0
 801b7ca:	77fb      	strb	r3, [r7, #31]
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b7cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	d12c      	bne.n	801b82e <nmi_get_otp_mac_address+0xa6>
    u32RegValue = strgp.u32Mac_efuse_mib;
 801b7d4:	68bb      	ldr	r3, [r7, #8]
 801b7d6:	61bb      	str	r3, [r7, #24]

    if(!EFUSED_MAC(u32RegValue)) {
 801b7d8:	69bb      	ldr	r3, [r7, #24]
 801b7da:	0c1b      	lsrs	r3, r3, #16
 801b7dc:	041b      	lsls	r3, r3, #16
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d105      	bne.n	801b7ee <nmi_get_otp_mac_address+0x66>
        M2M_DBG("Default MAC\n");
        m2m_memset(pu8MacAddr, 0, 6);
 801b7e2:	2206      	movs	r2, #6
 801b7e4:	2100      	movs	r1, #0
 801b7e6:	6878      	ldr	r0, [r7, #4]
 801b7e8:	f7fd fba0 	bl	8018f2c <m2m_memset>
        goto _EXIT_ERR;
 801b7ec:	e020      	b.n	801b830 <nmi_get_otp_mac_address+0xa8>
    }

    M2M_DBG("OTP MAC\n");
    u32RegValue >>=16;
 801b7ee:	69bb      	ldr	r3, [r7, #24]
 801b7f0:	0c1b      	lsrs	r3, r3, #16
 801b7f2:	61bb      	str	r3, [r7, #24]
    ret = nm_read_block(u32RegValue|0x30000, mac, 6);
 801b7f4:	69bb      	ldr	r3, [r7, #24]
 801b7f6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801b7fa:	f107 0110 	add.w	r1, r7, #16
 801b7fe:	2206      	movs	r2, #6
 801b800:	4618      	mov	r0, r3
 801b802:	f000 f8c3 	bl	801b98c <nm_read_block>
 801b806:	4603      	mov	r3, r0
 801b808:	77fb      	strb	r3, [r7, #31]
    m2m_memcpy(pu8MacAddr, mac, 6);
 801b80a:	f107 0310 	add.w	r3, r7, #16
 801b80e:	2206      	movs	r2, #6
 801b810:	4619      	mov	r1, r3
 801b812:	6878      	ldr	r0, [r7, #4]
 801b814:	f7fd fb6a 	bl	8018eec <m2m_memcpy>
    if(pu8IsValid) *pu8IsValid = 1;
 801b818:	683b      	ldr	r3, [r7, #0]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d002      	beq.n	801b824 <nmi_get_otp_mac_address+0x9c>
 801b81e:	683b      	ldr	r3, [r7, #0]
 801b820:	2201      	movs	r2, #1
 801b822:	701a      	strb	r2, [r3, #0]
    return ret;
 801b824:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b828:	e00a      	b.n	801b840 <nmi_get_otp_mac_address+0xb8>
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b82a:	bf00      	nop
 801b82c:	e000      	b.n	801b830 <nmi_get_otp_mac_address+0xa8>
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b82e:	bf00      	nop

_EXIT_ERR:
    if(pu8IsValid) *pu8IsValid = 0;
 801b830:	683b      	ldr	r3, [r7, #0]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d002      	beq.n	801b83c <nmi_get_otp_mac_address+0xb4>
 801b836:	683b      	ldr	r3, [r7, #0]
 801b838:	2200      	movs	r2, #0
 801b83a:	701a      	strb	r2, [r3, #0]
    return ret;
 801b83c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b840:	4618      	mov	r0, r3
 801b842:	3720      	adds	r7, #32
 801b844:	46bd      	mov	sp, r7
 801b846:	bd80      	pop	{r7, pc}

0801b848 <nmi_get_mac_address>:

sint8 nmi_get_mac_address(uint8 *pu8MacAddr)
{
 801b848:	b580      	push	{r7, lr}
 801b84a:	b088      	sub	sp, #32
 801b84c:	af00      	add	r7, sp, #0
 801b84e:	6078      	str	r0, [r7, #4]
    sint8 ret;
    uint32  u32RegValue;
    uint8   mac[6];
    tstrGpRegs strgp = {0};
 801b850:	f107 0308 	add.w	r3, r7, #8
 801b854:	2200      	movs	r2, #0
 801b856:	601a      	str	r2, [r3, #0]
 801b858:	605a      	str	r2, [r3, #4]

    ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &u32RegValue);
 801b85a:	f107 0318 	add.w	r3, r7, #24
 801b85e:	4619      	mov	r1, r3
 801b860:	f241 409c 	movw	r0, #5276	; 0x149c
 801b864:	f000 f864 	bl	801b930 <nm_read_reg_with_ret>
 801b868:	4603      	mov	r3, r0
 801b86a:	77fb      	strb	r3, [r7, #31]
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b86c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b870:	2b00      	cmp	r3, #0
 801b872:	d126      	bne.n	801b8c2 <nmi_get_mac_address+0x7a>

    ret = nm_read_block(u32RegValue|0x30000, (uint8*)&strgp, sizeof(tstrGpRegs));
 801b874:	69bb      	ldr	r3, [r7, #24]
 801b876:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801b87a:	f107 0108 	add.w	r1, r7, #8
 801b87e:	2208      	movs	r2, #8
 801b880:	4618      	mov	r0, r3
 801b882:	f000 f883 	bl	801b98c <nm_read_block>
 801b886:	4603      	mov	r3, r0
 801b888:	77fb      	strb	r3, [r7, #31]
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b88a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801b88e:	2b00      	cmp	r3, #0
 801b890:	d119      	bne.n	801b8c6 <nmi_get_mac_address+0x7e>
    u32RegValue = strgp.u32Mac_efuse_mib;
 801b892:	68bb      	ldr	r3, [r7, #8]
 801b894:	61bb      	str	r3, [r7, #24]

    u32RegValue &=0x0000ffff;
 801b896:	69bb      	ldr	r3, [r7, #24]
 801b898:	b29b      	uxth	r3, r3
 801b89a:	61bb      	str	r3, [r7, #24]
    ret = nm_read_block(u32RegValue|0x30000, mac, 6);
 801b89c:	69bb      	ldr	r3, [r7, #24]
 801b89e:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801b8a2:	f107 0110 	add.w	r1, r7, #16
 801b8a6:	2206      	movs	r2, #6
 801b8a8:	4618      	mov	r0, r3
 801b8aa:	f000 f86f 	bl	801b98c <nm_read_block>
 801b8ae:	4603      	mov	r3, r0
 801b8b0:	77fb      	strb	r3, [r7, #31]
    m2m_memcpy(pu8MacAddr, mac, 6);
 801b8b2:	f107 0310 	add.w	r3, r7, #16
 801b8b6:	2206      	movs	r2, #6
 801b8b8:	4619      	mov	r1, r3
 801b8ba:	6878      	ldr	r0, [r7, #4]
 801b8bc:	f7fd fb16 	bl	8018eec <m2m_memcpy>
 801b8c0:	e002      	b.n	801b8c8 <nmi_get_mac_address+0x80>
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b8c2:	bf00      	nop
 801b8c4:	e000      	b.n	801b8c8 <nmi_get_mac_address+0x80>
    if(ret != M2M_SUCCESS) goto _EXIT_ERR;
 801b8c6:	bf00      	nop

_EXIT_ERR:
    return ret;
 801b8c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b8cc:	4618      	mov	r0, r3
 801b8ce:	3720      	adds	r7, #32
 801b8d0:	46bd      	mov	sp, r7
 801b8d2:	bd80      	pop	{r7, pc}

0801b8d4 <nm_bus_iface_init>:
 *  @fn         nm_bus_iface_init
 *  @brief      Initialize bus interface
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_iface_init(uint8 *pvInitVal, uint32 req_serial_number)
{
 801b8d4:	b580      	push	{r7, lr}
 801b8d6:	b084      	sub	sp, #16
 801b8d8:	af00      	add	r7, sp, #0
 801b8da:	6078      	str	r0, [r7, #4]
 801b8dc:	6039      	str	r1, [r7, #0]
    sint8 ret = M2M_SUCCESS;
 801b8de:	2300      	movs	r3, #0
 801b8e0:	73fb      	strb	r3, [r7, #15]
    ret = nm_bus_init(pvInitVal, req_serial_number);
 801b8e2:	6839      	ldr	r1, [r7, #0]
 801b8e4:	6878      	ldr	r0, [r7, #4]
 801b8e6:	f7fd fab5 	bl	8018e54 <nm_bus_init>
 801b8ea:	4603      	mov	r3, r0
 801b8ec:	73fb      	strb	r3, [r7, #15]

    return ret;
 801b8ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801b8f2:	4618      	mov	r0, r3
 801b8f4:	3710      	adds	r7, #16
 801b8f6:	46bd      	mov	sp, r7
 801b8f8:	bd80      	pop	{r7, pc}

0801b8fa <nm_bus_iface_deinit>:
 *  @fn         nm_bus_iface_deinit
 *  @brief      Deinitialize bus interface
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_bus_iface_deinit(void)
{
 801b8fa:	b580      	push	{r7, lr}
 801b8fc:	b082      	sub	sp, #8
 801b8fe:	af00      	add	r7, sp, #0
    sint8 ret = M2M_SUCCESS;
 801b900:	2300      	movs	r3, #0
 801b902:	71fb      	strb	r3, [r7, #7]
    ret = nm_bus_deinit();
 801b904:	f7fd faea 	bl	8018edc <nm_bus_deinit>
 801b908:	4603      	mov	r3, r0
 801b90a:	71fb      	strb	r3, [r7, #7]

    return ret;
 801b90c:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 801b910:	4618      	mov	r0, r3
 801b912:	3708      	adds	r7, #8
 801b914:	46bd      	mov	sp, r7
 801b916:	bd80      	pop	{r7, pc}

0801b918 <nm_read_reg>:
 *  @param[in]  u32Addr
 *                  Register address
 *  @return     Register value
 */
uint32 nm_read_reg(uint32 u32Addr)
{
 801b918:	b580      	push	{r7, lr}
 801b91a:	b082      	sub	sp, #8
 801b91c:	af00      	add	r7, sp, #0
 801b91e:	6078      	str	r0, [r7, #4]
#ifdef CONF_WINC_USE_UART
    return nm_uart_read_reg(u32Addr);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_read_reg(u32Addr);
 801b920:	6878      	ldr	r0, [r7, #4]
 801b922:	f001 fa31 	bl	801cd88 <nm_spi_read_reg>
 801b926:	4603      	mov	r3, r0
    return nm_i2c_read_reg(u32Addr);
#else
#error "Please define bus usage"
#endif

}
 801b928:	4618      	mov	r0, r3
 801b92a:	3708      	adds	r7, #8
 801b92c:	46bd      	mov	sp, r7
 801b92e:	bd80      	pop	{r7, pc}

0801b930 <nm_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
*/
sint8 nm_read_reg_with_ret(uint32 u32Addr, uint32* pu32RetVal)
{
 801b930:	b580      	push	{r7, lr}
 801b932:	b082      	sub	sp, #8
 801b934:	af00      	add	r7, sp, #0
 801b936:	6078      	str	r0, [r7, #4]
 801b938:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
    return nm_uart_read_reg_with_ret(u32Addr, pu32RetVal);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_read_reg_with_ret(u32Addr, pu32RetVal);
 801b93a:	6839      	ldr	r1, [r7, #0]
 801b93c:	6878      	ldr	r0, [r7, #4]
 801b93e:	f001 f80f 	bl	801c960 <nm_spi_read_reg_with_ret>
 801b942:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
    return nm_i2c_read_reg_with_ret(u32Addr, pu32RetVal);
#else
#error "Please define bus usage"
#endif
}
 801b944:	4618      	mov	r0, r3
 801b946:	3708      	adds	r7, #8
 801b948:	46bd      	mov	sp, r7
 801b94a:	bd80      	pop	{r7, pc}

0801b94c <nm_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_write_reg(uint32 u32Addr, uint32 u32Val)
{
 801b94c:	b580      	push	{r7, lr}
 801b94e:	b082      	sub	sp, #8
 801b950:	af00      	add	r7, sp, #0
 801b952:	6078      	str	r0, [r7, #4]
 801b954:	6039      	str	r1, [r7, #0]
#ifdef CONF_WINC_USE_UART
    return nm_uart_write_reg(u32Addr, u32Val);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_write_reg(u32Addr, u32Val);
 801b956:	6839      	ldr	r1, [r7, #0]
 801b958:	6878      	ldr	r0, [r7, #4]
 801b95a:	f000 fee3 	bl	801c724 <nm_spi_write_reg>
 801b95e:	4603      	mov	r3, r0
#elif defined (CONF_WINC_USE_I2C)
    return nm_i2c_write_reg(u32Addr, u32Val);
#else
#error "Please define bus usage"
#endif
}
 801b960:	4618      	mov	r0, r3
 801b962:	3708      	adds	r7, #8
 801b964:	46bd      	mov	sp, r7
 801b966:	bd80      	pop	{r7, pc}

0801b968 <p_nm_read_block>:

static inline sint8 p_nm_read_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 801b968:	b580      	push	{r7, lr}
 801b96a:	b084      	sub	sp, #16
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	60f8      	str	r0, [r7, #12]
 801b970:	60b9      	str	r1, [r7, #8]
 801b972:	4613      	mov	r3, r2
 801b974:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
    return nm_uart_read_block(u32Addr, puBuf, u16Sz);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_read_block(u32Addr, puBuf, u16Sz);
 801b976:	88fb      	ldrh	r3, [r7, #6]
 801b978:	461a      	mov	r2, r3
 801b97a:	68b9      	ldr	r1, [r7, #8]
 801b97c:	68f8      	ldr	r0, [r7, #12]
 801b97e:	f001 f89b 	bl	801cab8 <nm_spi_read_block>
 801b982:	4603      	mov	r3, r0
    return nm_i2c_read_block(u32Addr, puBuf, u16Sz);
#else
#error "Please define bus usage"
#endif

}
 801b984:	4618      	mov	r0, r3
 801b986:	3710      	adds	r7, #16
 801b988:	46bd      	mov	sp, r7
 801b98a:	bd80      	pop	{r7, pc}

0801b98c <nm_read_block>:
 *  @param[in]  u32Sz
 *                  Number of bytes to read. The buffer size must be >= u32Sz
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_read_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b086      	sub	sp, #24
 801b990:	af00      	add	r7, sp, #0
 801b992:	60f8      	str	r0, [r7, #12]
 801b994:	60b9      	str	r1, [r7, #8]
 801b996:	607a      	str	r2, [r7, #4]
    uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 801b998:	4b20      	ldr	r3, [pc, #128]	; (801ba1c <nm_read_block+0x90>)
 801b99a:	881b      	ldrh	r3, [r3, #0]
 801b99c:	3b08      	subs	r3, #8
 801b99e:	823b      	strh	r3, [r7, #16]
    uint32 off = 0;
 801b9a0:	2300      	movs	r3, #0
 801b9a2:	617b      	str	r3, [r7, #20]
    sint8 s8Ret = M2M_SUCCESS;
 801b9a4:	2300      	movs	r3, #0
 801b9a6:	74fb      	strb	r3, [r7, #19]

    for(;;)
    {
        if(u32Sz <= u16MaxTrxSz)
 801b9a8:	8a3b      	ldrh	r3, [r7, #16]
 801b9aa:	687a      	ldr	r2, [r7, #4]
 801b9ac:	429a      	cmp	r2, r3
 801b9ae:	d80f      	bhi.n	801b9d0 <nm_read_block+0x44>
        {
            s8Ret += p_nm_read_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 801b9b0:	68ba      	ldr	r2, [r7, #8]
 801b9b2:	697b      	ldr	r3, [r7, #20]
 801b9b4:	4413      	add	r3, r2
 801b9b6:	687a      	ldr	r2, [r7, #4]
 801b9b8:	b292      	uxth	r2, r2
 801b9ba:	4619      	mov	r1, r3
 801b9bc:	68f8      	ldr	r0, [r7, #12]
 801b9be:	f7ff ffd3 	bl	801b968 <p_nm_read_block>
 801b9c2:	4603      	mov	r3, r0
 801b9c4:	b2da      	uxtb	r2, r3
 801b9c6:	7cfb      	ldrb	r3, [r7, #19]
 801b9c8:	4413      	add	r3, r2
 801b9ca:	b2db      	uxtb	r3, r3
 801b9cc:	74fb      	strb	r3, [r7, #19]
            break;
 801b9ce:	e01f      	b.n	801ba10 <nm_read_block+0x84>
        }
        else
        {
            s8Ret += p_nm_read_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 801b9d0:	68ba      	ldr	r2, [r7, #8]
 801b9d2:	697b      	ldr	r3, [r7, #20]
 801b9d4:	4413      	add	r3, r2
 801b9d6:	8a3a      	ldrh	r2, [r7, #16]
 801b9d8:	4619      	mov	r1, r3
 801b9da:	68f8      	ldr	r0, [r7, #12]
 801b9dc:	f7ff ffc4 	bl	801b968 <p_nm_read_block>
 801b9e0:	4603      	mov	r3, r0
 801b9e2:	b2da      	uxtb	r2, r3
 801b9e4:	7cfb      	ldrb	r3, [r7, #19]
 801b9e6:	4413      	add	r3, r2
 801b9e8:	b2db      	uxtb	r3, r3
 801b9ea:	74fb      	strb	r3, [r7, #19]
            if(M2M_SUCCESS != s8Ret) break;
 801b9ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b9f0:	2b00      	cmp	r3, #0
 801b9f2:	d10c      	bne.n	801ba0e <nm_read_block+0x82>
            u32Sz -= u16MaxTrxSz;
 801b9f4:	8a3b      	ldrh	r3, [r7, #16]
 801b9f6:	687a      	ldr	r2, [r7, #4]
 801b9f8:	1ad3      	subs	r3, r2, r3
 801b9fa:	607b      	str	r3, [r7, #4]
            off += u16MaxTrxSz;
 801b9fc:	8a3b      	ldrh	r3, [r7, #16]
 801b9fe:	697a      	ldr	r2, [r7, #20]
 801ba00:	4413      	add	r3, r2
 801ba02:	617b      	str	r3, [r7, #20]
            u32Addr += u16MaxTrxSz;
 801ba04:	8a3b      	ldrh	r3, [r7, #16]
 801ba06:	68fa      	ldr	r2, [r7, #12]
 801ba08:	4413      	add	r3, r2
 801ba0a:	60fb      	str	r3, [r7, #12]
        if(u32Sz <= u16MaxTrxSz)
 801ba0c:	e7cc      	b.n	801b9a8 <nm_read_block+0x1c>
            if(M2M_SUCCESS != s8Ret) break;
 801ba0e:	bf00      	nop
        }
    }

    return s8Ret;
 801ba10:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801ba14:	4618      	mov	r0, r3
 801ba16:	3718      	adds	r7, #24
 801ba18:	46bd      	mov	sp, r7
 801ba1a:	bd80      	pop	{r7, pc}
 801ba1c:	20000030 	.word	0x20000030

0801ba20 <p_nm_write_block>:

static inline sint8 p_nm_write_block(uint32 u32Addr, uint8 *puBuf, uint16 u16Sz)
{
 801ba20:	b580      	push	{r7, lr}
 801ba22:	b084      	sub	sp, #16
 801ba24:	af00      	add	r7, sp, #0
 801ba26:	60f8      	str	r0, [r7, #12]
 801ba28:	60b9      	str	r1, [r7, #8]
 801ba2a:	4613      	mov	r3, r2
 801ba2c:	80fb      	strh	r3, [r7, #6]
#ifdef CONF_WINC_USE_UART
    return nm_uart_write_block(u32Addr, puBuf, u16Sz);
#elif defined (CONF_WINC_USE_SPI)
    return nm_spi_write_block(u32Addr, puBuf, u16Sz);
 801ba2e:	88fb      	ldrh	r3, [r7, #6]
 801ba30:	461a      	mov	r2, r3
 801ba32:	68b9      	ldr	r1, [r7, #8]
 801ba34:	68f8      	ldr	r0, [r7, #12]
 801ba36:	f000 fef9 	bl	801c82c <nm_spi_write_block>
 801ba3a:	4603      	mov	r3, r0
    return nm_i2c_write_block(u32Addr, puBuf, u16Sz);
#else
#error "Please define bus usage"
#endif

}
 801ba3c:	4618      	mov	r0, r3
 801ba3e:	3710      	adds	r7, #16
 801ba40:	46bd      	mov	sp, r7
 801ba42:	bd80      	pop	{r7, pc}

0801ba44 <nm_write_block>:
 *  @param[in]  u32Sz
 *                  Number of bytes to write. The buffer size must be >= u32Sz
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_write_block(uint32 u32Addr, uint8 *puBuf, uint32 u32Sz)
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b086      	sub	sp, #24
 801ba48:	af00      	add	r7, sp, #0
 801ba4a:	60f8      	str	r0, [r7, #12]
 801ba4c:	60b9      	str	r1, [r7, #8]
 801ba4e:	607a      	str	r2, [r7, #4]
    uint16 u16MaxTrxSz = egstrNmBusCapabilities.u16MaxTrxSz - MAX_TRX_CFG_SZ;
 801ba50:	4b20      	ldr	r3, [pc, #128]	; (801bad4 <nm_write_block+0x90>)
 801ba52:	881b      	ldrh	r3, [r3, #0]
 801ba54:	3b08      	subs	r3, #8
 801ba56:	823b      	strh	r3, [r7, #16]
    uint32 off = 0;
 801ba58:	2300      	movs	r3, #0
 801ba5a:	617b      	str	r3, [r7, #20]
    sint8 s8Ret = M2M_SUCCESS;
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	74fb      	strb	r3, [r7, #19]

    for(;;)
    {
        if(u32Sz <= u16MaxTrxSz)
 801ba60:	8a3b      	ldrh	r3, [r7, #16]
 801ba62:	687a      	ldr	r2, [r7, #4]
 801ba64:	429a      	cmp	r2, r3
 801ba66:	d80f      	bhi.n	801ba88 <nm_write_block+0x44>
        {
            s8Ret += p_nm_write_block(u32Addr, &puBuf[off], (uint16)u32Sz);
 801ba68:	68ba      	ldr	r2, [r7, #8]
 801ba6a:	697b      	ldr	r3, [r7, #20]
 801ba6c:	4413      	add	r3, r2
 801ba6e:	687a      	ldr	r2, [r7, #4]
 801ba70:	b292      	uxth	r2, r2
 801ba72:	4619      	mov	r1, r3
 801ba74:	68f8      	ldr	r0, [r7, #12]
 801ba76:	f7ff ffd3 	bl	801ba20 <p_nm_write_block>
 801ba7a:	4603      	mov	r3, r0
 801ba7c:	b2da      	uxtb	r2, r3
 801ba7e:	7cfb      	ldrb	r3, [r7, #19]
 801ba80:	4413      	add	r3, r2
 801ba82:	b2db      	uxtb	r3, r3
 801ba84:	74fb      	strb	r3, [r7, #19]
            break;
 801ba86:	e01f      	b.n	801bac8 <nm_write_block+0x84>
        }
        else
        {
            s8Ret += p_nm_write_block(u32Addr, &puBuf[off], u16MaxTrxSz);
 801ba88:	68ba      	ldr	r2, [r7, #8]
 801ba8a:	697b      	ldr	r3, [r7, #20]
 801ba8c:	4413      	add	r3, r2
 801ba8e:	8a3a      	ldrh	r2, [r7, #16]
 801ba90:	4619      	mov	r1, r3
 801ba92:	68f8      	ldr	r0, [r7, #12]
 801ba94:	f7ff ffc4 	bl	801ba20 <p_nm_write_block>
 801ba98:	4603      	mov	r3, r0
 801ba9a:	b2da      	uxtb	r2, r3
 801ba9c:	7cfb      	ldrb	r3, [r7, #19]
 801ba9e:	4413      	add	r3, r2
 801baa0:	b2db      	uxtb	r3, r3
 801baa2:	74fb      	strb	r3, [r7, #19]
            if(M2M_SUCCESS != s8Ret) break;
 801baa4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	d10c      	bne.n	801bac6 <nm_write_block+0x82>
            u32Sz -= u16MaxTrxSz;
 801baac:	8a3b      	ldrh	r3, [r7, #16]
 801baae:	687a      	ldr	r2, [r7, #4]
 801bab0:	1ad3      	subs	r3, r2, r3
 801bab2:	607b      	str	r3, [r7, #4]
            off += u16MaxTrxSz;
 801bab4:	8a3b      	ldrh	r3, [r7, #16]
 801bab6:	697a      	ldr	r2, [r7, #20]
 801bab8:	4413      	add	r3, r2
 801baba:	617b      	str	r3, [r7, #20]
            u32Addr += u16MaxTrxSz;
 801babc:	8a3b      	ldrh	r3, [r7, #16]
 801babe:	68fa      	ldr	r2, [r7, #12]
 801bac0:	4413      	add	r3, r2
 801bac2:	60fb      	str	r3, [r7, #12]
        if(u32Sz <= u16MaxTrxSz)
 801bac4:	e7cc      	b.n	801ba60 <nm_write_block+0x1c>
            if(M2M_SUCCESS != s8Ret) break;
 801bac6:	bf00      	nop
        }
    }

    return s8Ret;
 801bac8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801bacc:	4618      	mov	r0, r3
 801bace:	3718      	adds	r7, #24
 801bad0:	46bd      	mov	sp, r7
 801bad2:	bd80      	pop	{r7, pc}
 801bad4:	20000030 	.word	0x20000030

0801bad8 <nm_get_hif_info>:
 *  @param[out] pu16OtaHifInfo
 *                  Pointer holding Hif info of image in the inactive partition.
 *  @return     @ref M2M_SUCCESS in case of success and Negative error code in case of failure
 */
sint8 nm_get_hif_info(uint16 *pu16FwHifInfo, uint16 *pu16OtaHifInfo)
{
 801bad8:	b580      	push	{r7, lr}
 801bada:	b084      	sub	sp, #16
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
 801bae0:	6039      	str	r1, [r7, #0]
    sint8 ret = M2M_SUCCESS;
 801bae2:	2300      	movs	r3, #0
 801bae4:	73fb      	strb	r3, [r7, #15]
    uint32 reg = 0;
 801bae6:	2300      	movs	r3, #0
 801bae8:	60bb      	str	r3, [r7, #8]

    ret = nm_read_reg_with_ret(NMI_REV_REG, &reg);
 801baea:	f107 0308 	add.w	r3, r7, #8
 801baee:	4619      	mov	r1, r3
 801baf0:	480e      	ldr	r0, [pc, #56]	; (801bb2c <nm_get_hif_info+0x54>)
 801baf2:	f7ff ff1d 	bl	801b930 <nm_read_reg_with_ret>
 801baf6:	4603      	mov	r3, r0
 801baf8:	73fb      	strb	r3, [r7, #15]
    if(ret == M2M_SUCCESS)
 801bafa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d10e      	bne.n	801bb20 <nm_get_hif_info+0x48>
    {
        if(pu16FwHifInfo != NULL)
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	2b00      	cmp	r3, #0
 801bb06:	d003      	beq.n	801bb10 <nm_get_hif_info+0x38>
        {
            *pu16FwHifInfo = (uint16)reg;
 801bb08:	68bb      	ldr	r3, [r7, #8]
 801bb0a:	b29a      	uxth	r2, r3
 801bb0c:	687b      	ldr	r3, [r7, #4]
 801bb0e:	801a      	strh	r2, [r3, #0]
        }
        if(pu16OtaHifInfo)
 801bb10:	683b      	ldr	r3, [r7, #0]
 801bb12:	2b00      	cmp	r3, #0
 801bb14:	d004      	beq.n	801bb20 <nm_get_hif_info+0x48>
        {
            *pu16OtaHifInfo = (uint16)(reg>>16);
 801bb16:	68bb      	ldr	r3, [r7, #8]
 801bb18:	0c1b      	lsrs	r3, r3, #16
 801bb1a:	b29a      	uxth	r2, r3
 801bb1c:	683b      	ldr	r3, [r7, #0]
 801bb1e:	801a      	strh	r2, [r3, #0]
        }
    }
    return ret;
 801bb20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bb24:	4618      	mov	r0, r3
 801bb26:	3710      	adds	r7, #16
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	bd80      	pop	{r7, pc}
 801bb2c:	000207ac 	.word	0x000207ac

0801bb30 <nm_get_firmware_full_info>:
 *  @brief      Get Firmware version info
 *  @param[out] M2mRev
 *                  Pointer holds address of structure @ref tstrM2mRev that contains the firmware version parameters
 */
sint8 nm_get_firmware_full_info(tstrM2mRev *pstrRev)
{
 801bb30:	b580      	push	{r7, lr}
 801bb32:	b086      	sub	sp, #24
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	6078      	str	r0, [r7, #4]
    uint16  fw_hif_info = 0;
 801bb38:	2300      	movs	r3, #0
 801bb3a:	82bb      	strh	r3, [r7, #20]
    uint32  reg = 0;
 801bb3c:	2300      	movs	r3, #0
 801bb3e:	613b      	str	r3, [r7, #16]
    sint8   ret = M2M_SUCCESS;
 801bb40:	2300      	movs	r3, #0
 801bb42:	75fb      	strb	r3, [r7, #23]
    tstrGpRegs strgp = {0};
 801bb44:	f107 0308 	add.w	r3, r7, #8
 801bb48:	2200      	movs	r2, #0
 801bb4a:	601a      	str	r2, [r3, #0]
 801bb4c:	605a      	str	r2, [r3, #4]

    m2m_memset((uint8*)pstrRev, 0, sizeof(tstrM2mRev));
 801bb4e:	221c      	movs	r2, #28
 801bb50:	2100      	movs	r1, #0
 801bb52:	6878      	ldr	r0, [r7, #4]
 801bb54:	f7fd f9ea 	bl	8018f2c <m2m_memset>
    nm_get_hif_info(&fw_hif_info, NULL);
 801bb58:	f107 0314 	add.w	r3, r7, #20
 801bb5c:	2100      	movs	r1, #0
 801bb5e:	4618      	mov	r0, r3
 801bb60:	f7ff ffba 	bl	801bad8 <nm_get_hif_info>

    M2M_INFO("Fw HIF: %04x\n", fw_hif_info);
 801bb64:	4858      	ldr	r0, [pc, #352]	; (801bcc8 <nm_get_firmware_full_info+0x198>)
 801bb66:	f002 fced 	bl	801e544 <iprintf>
 801bb6a:	8abb      	ldrh	r3, [r7, #20]
 801bb6c:	4619      	mov	r1, r3
 801bb6e:	4857      	ldr	r0, [pc, #348]	; (801bccc <nm_get_firmware_full_info+0x19c>)
 801bb70:	f002 fce8 	bl	801e544 <iprintf>
 801bb74:	200d      	movs	r0, #13
 801bb76:	f002 fcfd 	bl	801e574 <putchar>
    if(M2M_GET_HIF_BLOCK(fw_hif_info) == M2M_HIF_BLOCK_VALUE)
 801bb7a:	8abb      	ldrh	r3, [r7, #20]
 801bb7c:	0b9b      	lsrs	r3, r3, #14
 801bb7e:	b29b      	uxth	r3, r3
 801bb80:	b2db      	uxtb	r3, r3
 801bb82:	f003 0303 	and.w	r3, r3, #3
 801bb86:	2b02      	cmp	r3, #2
 801bb88:	f040 8087 	bne.w	801bc9a <nm_get_firmware_full_info+0x16a>
    {
        ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &reg);
 801bb8c:	f107 0310 	add.w	r3, r7, #16
 801bb90:	4619      	mov	r1, r3
 801bb92:	f241 409c 	movw	r0, #5276	; 0x149c
 801bb96:	f7ff fecb 	bl	801b930 <nm_read_reg_with_ret>
 801bb9a:	4603      	mov	r3, r0
 801bb9c:	75fb      	strb	r3, [r7, #23]
        if(ret == M2M_SUCCESS)
 801bb9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d17b      	bne.n	801bc9e <nm_get_firmware_full_info+0x16e>
        {
            if(reg != 0)
 801bba6:	693b      	ldr	r3, [r7, #16]
 801bba8:	2b00      	cmp	r3, #0
 801bbaa:	d073      	beq.n	801bc94 <nm_get_firmware_full_info+0x164>
            {
                ret = nm_read_block(reg|0x30000, (uint8*)&strgp, sizeof(tstrGpRegs));
 801bbac:	693b      	ldr	r3, [r7, #16]
 801bbae:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801bbb2:	f107 0108 	add.w	r1, r7, #8
 801bbb6:	2208      	movs	r2, #8
 801bbb8:	4618      	mov	r0, r3
 801bbba:	f7ff fee7 	bl	801b98c <nm_read_block>
 801bbbe:	4603      	mov	r3, r0
 801bbc0:	75fb      	strb	r3, [r7, #23]
                if(ret == M2M_SUCCESS)
 801bbc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d169      	bne.n	801bc9e <nm_get_firmware_full_info+0x16e>
                {
                    reg = strgp.u32Firmware_Ota_rev;
 801bbca:	68fb      	ldr	r3, [r7, #12]
 801bbcc:	613b      	str	r3, [r7, #16]
                    reg &= 0x0000ffff;
 801bbce:	693b      	ldr	r3, [r7, #16]
 801bbd0:	b29b      	uxth	r3, r3
 801bbd2:	613b      	str	r3, [r7, #16]
                    if(reg != 0)
 801bbd4:	693b      	ldr	r3, [r7, #16]
 801bbd6:	2b00      	cmp	r3, #0
 801bbd8:	d059      	beq.n	801bc8e <nm_get_firmware_full_info+0x15e>
                    {
                        ret = nm_read_block(reg|0x30000, (uint8*)pstrRev, sizeof(tstrM2mRev));
 801bbda:	693b      	ldr	r3, [r7, #16]
 801bbdc:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801bbe0:	221c      	movs	r2, #28
 801bbe2:	6879      	ldr	r1, [r7, #4]
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	f7ff fed1 	bl	801b98c <nm_read_block>
 801bbea:	4603      	mov	r3, r0
 801bbec:	75fb      	strb	r3, [r7, #23]
                        if(ret == M2M_SUCCESS)
 801bbee:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bbf2:	2b00      	cmp	r3, #0
 801bbf4:	d153      	bne.n	801bc9e <nm_get_firmware_full_info+0x16e>
                        {
                            M2M_INFO("Firmware HIF (%u) : %u.%u \n", M2M_GET_HIF_BLOCK(pstrRev->u16FirmwareHifInfo), M2M_GET_HIF_MAJOR(pstrRev->u16FirmwareHifInfo), M2M_GET_HIF_MINOR(pstrRev->u16FirmwareHifInfo));
 801bbf6:	4834      	ldr	r0, [pc, #208]	; (801bcc8 <nm_get_firmware_full_info+0x198>)
 801bbf8:	f002 fca4 	bl	801e544 <iprintf>
 801bbfc:	687b      	ldr	r3, [r7, #4]
 801bbfe:	881b      	ldrh	r3, [r3, #0]
 801bc00:	0b9b      	lsrs	r3, r3, #14
 801bc02:	b29b      	uxth	r3, r3
 801bc04:	b2db      	uxtb	r3, r3
 801bc06:	f003 0103 	and.w	r1, r3, #3
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	881b      	ldrh	r3, [r3, #0]
 801bc0e:	0a1b      	lsrs	r3, r3, #8
 801bc10:	b29b      	uxth	r3, r3
 801bc12:	b2db      	uxtb	r3, r3
 801bc14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bc18:	687b      	ldr	r3, [r7, #4]
 801bc1a:	881b      	ldrh	r3, [r3, #0]
 801bc1c:	b2db      	uxtb	r3, r3
 801bc1e:	482c      	ldr	r0, [pc, #176]	; (801bcd0 <nm_get_firmware_full_info+0x1a0>)
 801bc20:	f002 fc90 	bl	801e544 <iprintf>
 801bc24:	200d      	movs	r0, #13
 801bc26:	f002 fca5 	bl	801e574 <putchar>
                            M2M_INFO("Firmware ver   : %u.%u.%u \n", pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor, pstrRev->u8FirmwarePatch);
 801bc2a:	4827      	ldr	r0, [pc, #156]	; (801bcc8 <nm_get_firmware_full_info+0x198>)
 801bc2c:	f002 fc8a 	bl	801e544 <iprintf>
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	789b      	ldrb	r3, [r3, #2]
 801bc34:	4619      	mov	r1, r3
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	791b      	ldrb	r3, [r3, #4]
 801bc3a:	461a      	mov	r2, r3
 801bc3c:	687b      	ldr	r3, [r7, #4]
 801bc3e:	795b      	ldrb	r3, [r3, #5]
 801bc40:	4824      	ldr	r0, [pc, #144]	; (801bcd4 <nm_get_firmware_full_info+0x1a4>)
 801bc42:	f002 fc7f 	bl	801e544 <iprintf>
 801bc46:	200d      	movs	r0, #13
 801bc48:	f002 fc94 	bl	801e574 <putchar>
                            M2M_INFO("Firmware Build %s Time %s\n", pstrRev->BuildDate, pstrRev->BuildTime);
 801bc4c:	481e      	ldr	r0, [pc, #120]	; (801bcc8 <nm_get_firmware_full_info+0x198>)
 801bc4e:	f002 fc79 	bl	801e544 <iprintf>
 801bc52:	687b      	ldr	r3, [r7, #4]
 801bc54:	1d99      	adds	r1, r3, #6
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	3312      	adds	r3, #18
 801bc5a:	461a      	mov	r2, r3
 801bc5c:	481e      	ldr	r0, [pc, #120]	; (801bcd8 <nm_get_firmware_full_info+0x1a8>)
 801bc5e:	f002 fc71 	bl	801e544 <iprintf>
 801bc62:	200d      	movs	r0, #13
 801bc64:	f002 fc86 	bl	801e574 <putchar>

                            /* Check Hif info is consistent */
                            if(fw_hif_info != pstrRev->u16FirmwareHifInfo)
 801bc68:	687b      	ldr	r3, [r7, #4]
 801bc6a:	881a      	ldrh	r2, [r3, #0]
 801bc6c:	8abb      	ldrh	r3, [r7, #20]
 801bc6e:	429a      	cmp	r2, r3
 801bc70:	d015      	beq.n	801bc9e <nm_get_firmware_full_info+0x16e>
                            {
                                ret = M2M_ERR_FAIL;
 801bc72:	23f4      	movs	r3, #244	; 0xf4
 801bc74:	75fb      	strb	r3, [r7, #23]
                                M2M_ERR("Inconsistent Firmware Version\n");
 801bc76:	2276      	movs	r2, #118	; 0x76
 801bc78:	4918      	ldr	r1, [pc, #96]	; (801bcdc <nm_get_firmware_full_info+0x1ac>)
 801bc7a:	4819      	ldr	r0, [pc, #100]	; (801bce0 <nm_get_firmware_full_info+0x1b0>)
 801bc7c:	f002 fc62 	bl	801e544 <iprintf>
 801bc80:	4818      	ldr	r0, [pc, #96]	; (801bce4 <nm_get_firmware_full_info+0x1b4>)
 801bc82:	f002 fcfb 	bl	801e67c <puts>
 801bc86:	200d      	movs	r0, #13
 801bc88:	f002 fc74 	bl	801e574 <putchar>
 801bc8c:	e007      	b.n	801bc9e <nm_get_firmware_full_info+0x16e>
                            }
                        }
                    }
                    else
                    {
                        ret = M2M_ERR_FAIL;
 801bc8e:	23f4      	movs	r3, #244	; 0xf4
 801bc90:	75fb      	strb	r3, [r7, #23]
 801bc92:	e004      	b.n	801bc9e <nm_get_firmware_full_info+0x16e>
                    }
                }
            }
            else
            {
                ret = M2M_ERR_FAIL;
 801bc94:	23f4      	movs	r3, #244	; 0xf4
 801bc96:	75fb      	strb	r3, [r7, #23]
 801bc98:	e001      	b.n	801bc9e <nm_get_firmware_full_info+0x16e>
            }
        }
    }
    else
    {
        ret = M2M_ERR_FAIL;
 801bc9a:	23f4      	movs	r3, #244	; 0xf4
 801bc9c:	75fb      	strb	r3, [r7, #23]
    }
    if(ret != M2M_SUCCESS)
 801bc9e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bca2:	2b00      	cmp	r3, #0
 801bca4:	d00a      	beq.n	801bcbc <nm_get_firmware_full_info+0x18c>
    {
        M2M_ERR("Unknown Firmware Version\n");
 801bca6:	228c      	movs	r2, #140	; 0x8c
 801bca8:	490c      	ldr	r1, [pc, #48]	; (801bcdc <nm_get_firmware_full_info+0x1ac>)
 801bcaa:	480d      	ldr	r0, [pc, #52]	; (801bce0 <nm_get_firmware_full_info+0x1b0>)
 801bcac:	f002 fc4a 	bl	801e544 <iprintf>
 801bcb0:	480d      	ldr	r0, [pc, #52]	; (801bce8 <nm_get_firmware_full_info+0x1b8>)
 801bcb2:	f002 fce3 	bl	801e67c <puts>
 801bcb6:	200d      	movs	r0, #13
 801bcb8:	f002 fc5c 	bl	801e574 <putchar>
    }
    return ret;
 801bcbc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801bcc0:	4618      	mov	r0, r3
 801bcc2:	3718      	adds	r7, #24
 801bcc4:	46bd      	mov	sp, r7
 801bcc6:	bd80      	pop	{r7, pc}
 801bcc8:	08020f1c 	.word	0x08020f1c
 801bccc:	08020f28 	.word	0x08020f28
 801bcd0:	08020f38 	.word	0x08020f38
 801bcd4:	08020f54 	.word	0x08020f54
 801bcd8:	08020f70 	.word	0x08020f70
 801bcdc:	0802914c 	.word	0x0802914c
 801bce0:	08020f8c 	.word	0x08020f8c
 801bce4:	08020fa0 	.word	0x08020fa0
 801bce8:	08020fc0 	.word	0x08020fc0

0801bcec <nm_get_ota_firmware_info>:
 *  @brief      Get Firmware version info
 *  @param[out] M2mRev
 *  Pointer holds address of structure @ref tstrM2mRev that contains the firmware version parameters
 */
sint8 nm_get_ota_firmware_info(tstrM2mRev *pstrRev)
{
 801bcec:	b580      	push	{r7, lr}
 801bcee:	b086      	sub	sp, #24
 801bcf0:	af00      	add	r7, sp, #0
 801bcf2:	6078      	str	r0, [r7, #4]
    uint16  ota_hif_info = 0;
 801bcf4:	2300      	movs	r3, #0
 801bcf6:	82bb      	strh	r3, [r7, #20]
    uint32  reg = 0;
 801bcf8:	2300      	movs	r3, #0
 801bcfa:	613b      	str	r3, [r7, #16]
    sint8   ret = M2M_SUCCESS;
 801bcfc:	2300      	movs	r3, #0
 801bcfe:	75fb      	strb	r3, [r7, #23]
    tstrGpRegs strgp = {0};
 801bd00:	f107 0308 	add.w	r3, r7, #8
 801bd04:	2200      	movs	r2, #0
 801bd06:	601a      	str	r2, [r3, #0]
 801bd08:	605a      	str	r2, [r3, #4]

    m2m_memset((uint8*)pstrRev, 0, sizeof(tstrM2mRev));
 801bd0a:	221c      	movs	r2, #28
 801bd0c:	2100      	movs	r1, #0
 801bd0e:	6878      	ldr	r0, [r7, #4]
 801bd10:	f7fd f90c 	bl	8018f2c <m2m_memset>
    nm_get_hif_info(NULL, &ota_hif_info);
 801bd14:	f107 0314 	add.w	r3, r7, #20
 801bd18:	4619      	mov	r1, r3
 801bd1a:	2000      	movs	r0, #0
 801bd1c:	f7ff fedc 	bl	801bad8 <nm_get_hif_info>

    M2M_INFO("Ota HIF: %04x\n", ota_hif_info);
 801bd20:	4857      	ldr	r0, [pc, #348]	; (801be80 <nm_get_ota_firmware_info+0x194>)
 801bd22:	f002 fc0f 	bl	801e544 <iprintf>
 801bd26:	8abb      	ldrh	r3, [r7, #20]
 801bd28:	4619      	mov	r1, r3
 801bd2a:	4856      	ldr	r0, [pc, #344]	; (801be84 <nm_get_ota_firmware_info+0x198>)
 801bd2c:	f002 fc0a 	bl	801e544 <iprintf>
 801bd30:	200d      	movs	r0, #13
 801bd32:	f002 fc1f 	bl	801e574 <putchar>
    if(M2M_GET_HIF_BLOCK(ota_hif_info) == M2M_HIF_BLOCK_VALUE)
 801bd36:	8abb      	ldrh	r3, [r7, #20]
 801bd38:	0b9b      	lsrs	r3, r3, #14
 801bd3a:	b29b      	uxth	r3, r3
 801bd3c:	b2db      	uxtb	r3, r3
 801bd3e:	f003 0303 	and.w	r3, r3, #3
 801bd42:	2b02      	cmp	r3, #2
 801bd44:	f040 8087 	bne.w	801be56 <nm_get_ota_firmware_info+0x16a>
    {
        ret = nm_read_reg_with_ret(rNMI_GP_REG_0, &reg);
 801bd48:	f107 0310 	add.w	r3, r7, #16
 801bd4c:	4619      	mov	r1, r3
 801bd4e:	f241 409c 	movw	r0, #5276	; 0x149c
 801bd52:	f7ff fded 	bl	801b930 <nm_read_reg_with_ret>
 801bd56:	4603      	mov	r3, r0
 801bd58:	75fb      	strb	r3, [r7, #23]
        if(ret == M2M_SUCCESS)
 801bd5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d17b      	bne.n	801be5a <nm_get_ota_firmware_info+0x16e>
        {
            if(reg != 0)
 801bd62:	693b      	ldr	r3, [r7, #16]
 801bd64:	2b00      	cmp	r3, #0
 801bd66:	d073      	beq.n	801be50 <nm_get_ota_firmware_info+0x164>
            {
                ret = nm_read_block(reg|0x30000, (uint8*)&strgp, sizeof(tstrGpRegs));
 801bd68:	693b      	ldr	r3, [r7, #16]
 801bd6a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801bd6e:	f107 0108 	add.w	r1, r7, #8
 801bd72:	2208      	movs	r2, #8
 801bd74:	4618      	mov	r0, r3
 801bd76:	f7ff fe09 	bl	801b98c <nm_read_block>
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	75fb      	strb	r3, [r7, #23]
                if(ret == M2M_SUCCESS)
 801bd7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d169      	bne.n	801be5a <nm_get_ota_firmware_info+0x16e>
                {
                    reg = strgp.u32Firmware_Ota_rev;
 801bd86:	68fb      	ldr	r3, [r7, #12]
 801bd88:	613b      	str	r3, [r7, #16]
                    reg >>= 16;
 801bd8a:	693b      	ldr	r3, [r7, #16]
 801bd8c:	0c1b      	lsrs	r3, r3, #16
 801bd8e:	613b      	str	r3, [r7, #16]
                    if(reg != 0)
 801bd90:	693b      	ldr	r3, [r7, #16]
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d059      	beq.n	801be4a <nm_get_ota_firmware_info+0x15e>
                    {
                        ret = nm_read_block(reg|0x30000, (uint8*)pstrRev, sizeof(tstrM2mRev));
 801bd96:	693b      	ldr	r3, [r7, #16]
 801bd98:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 801bd9c:	221c      	movs	r2, #28
 801bd9e:	6879      	ldr	r1, [r7, #4]
 801bda0:	4618      	mov	r0, r3
 801bda2:	f7ff fdf3 	bl	801b98c <nm_read_block>
 801bda6:	4603      	mov	r3, r0
 801bda8:	75fb      	strb	r3, [r7, #23]
                        if(ret == M2M_SUCCESS)
 801bdaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801bdae:	2b00      	cmp	r3, #0
 801bdb0:	d153      	bne.n	801be5a <nm_get_ota_firmware_info+0x16e>
                        {
                            M2M_INFO("OTA HIF (%u) : %u.%u \n", M2M_GET_HIF_BLOCK(pstrRev->u16FirmwareHifInfo), M2M_GET_HIF_MAJOR(pstrRev->u16FirmwareHifInfo), M2M_GET_HIF_MINOR(pstrRev->u16FirmwareHifInfo));
 801bdb2:	4833      	ldr	r0, [pc, #204]	; (801be80 <nm_get_ota_firmware_info+0x194>)
 801bdb4:	f002 fbc6 	bl	801e544 <iprintf>
 801bdb8:	687b      	ldr	r3, [r7, #4]
 801bdba:	881b      	ldrh	r3, [r3, #0]
 801bdbc:	0b9b      	lsrs	r3, r3, #14
 801bdbe:	b29b      	uxth	r3, r3
 801bdc0:	b2db      	uxtb	r3, r3
 801bdc2:	f003 0103 	and.w	r1, r3, #3
 801bdc6:	687b      	ldr	r3, [r7, #4]
 801bdc8:	881b      	ldrh	r3, [r3, #0]
 801bdca:	0a1b      	lsrs	r3, r3, #8
 801bdcc:	b29b      	uxth	r3, r3
 801bdce:	b2db      	uxtb	r3, r3
 801bdd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801bdd4:	687b      	ldr	r3, [r7, #4]
 801bdd6:	881b      	ldrh	r3, [r3, #0]
 801bdd8:	b2db      	uxtb	r3, r3
 801bdda:	482b      	ldr	r0, [pc, #172]	; (801be88 <nm_get_ota_firmware_info+0x19c>)
 801bddc:	f002 fbb2 	bl	801e544 <iprintf>
 801bde0:	200d      	movs	r0, #13
 801bde2:	f002 fbc7 	bl	801e574 <putchar>
                            M2M_INFO("OTA ver   : %u.%u.%u \n", pstrRev->u8FirmwareMajor, pstrRev->u8FirmwareMinor, pstrRev->u8FirmwarePatch);
 801bde6:	4826      	ldr	r0, [pc, #152]	; (801be80 <nm_get_ota_firmware_info+0x194>)
 801bde8:	f002 fbac 	bl	801e544 <iprintf>
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	789b      	ldrb	r3, [r3, #2]
 801bdf0:	4619      	mov	r1, r3
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	791b      	ldrb	r3, [r3, #4]
 801bdf6:	461a      	mov	r2, r3
 801bdf8:	687b      	ldr	r3, [r7, #4]
 801bdfa:	795b      	ldrb	r3, [r3, #5]
 801bdfc:	4823      	ldr	r0, [pc, #140]	; (801be8c <nm_get_ota_firmware_info+0x1a0>)
 801bdfe:	f002 fba1 	bl	801e544 <iprintf>
 801be02:	200d      	movs	r0, #13
 801be04:	f002 fbb6 	bl	801e574 <putchar>
                            M2M_INFO("OTA Build %s Time %s\n", pstrRev->BuildDate, pstrRev->BuildTime);
 801be08:	481d      	ldr	r0, [pc, #116]	; (801be80 <nm_get_ota_firmware_info+0x194>)
 801be0a:	f002 fb9b 	bl	801e544 <iprintf>
 801be0e:	687b      	ldr	r3, [r7, #4]
 801be10:	1d99      	adds	r1, r3, #6
 801be12:	687b      	ldr	r3, [r7, #4]
 801be14:	3312      	adds	r3, #18
 801be16:	461a      	mov	r2, r3
 801be18:	481d      	ldr	r0, [pc, #116]	; (801be90 <nm_get_ota_firmware_info+0x1a4>)
 801be1a:	f002 fb93 	bl	801e544 <iprintf>
 801be1e:	200d      	movs	r0, #13
 801be20:	f002 fba8 	bl	801e574 <putchar>

                            /* Check Hif info is consistent */
                            if(ota_hif_info != pstrRev->u16FirmwareHifInfo)
 801be24:	687b      	ldr	r3, [r7, #4]
 801be26:	881a      	ldrh	r2, [r3, #0]
 801be28:	8abb      	ldrh	r3, [r7, #20]
 801be2a:	429a      	cmp	r2, r3
 801be2c:	d015      	beq.n	801be5a <nm_get_ota_firmware_info+0x16e>
                            {
                                ret = M2M_ERR_FAIL;
 801be2e:	23f4      	movs	r3, #244	; 0xf4
 801be30:	75fb      	strb	r3, [r7, #23]
                                M2M_ERR("Inconsistent OTA Version\n");
 801be32:	22ba      	movs	r2, #186	; 0xba
 801be34:	4917      	ldr	r1, [pc, #92]	; (801be94 <nm_get_ota_firmware_info+0x1a8>)
 801be36:	4818      	ldr	r0, [pc, #96]	; (801be98 <nm_get_ota_firmware_info+0x1ac>)
 801be38:	f002 fb84 	bl	801e544 <iprintf>
 801be3c:	4817      	ldr	r0, [pc, #92]	; (801be9c <nm_get_ota_firmware_info+0x1b0>)
 801be3e:	f002 fc1d 	bl	801e67c <puts>
 801be42:	200d      	movs	r0, #13
 801be44:	f002 fb96 	bl	801e574 <putchar>
 801be48:	e007      	b.n	801be5a <nm_get_ota_firmware_info+0x16e>
                            }
                        }
                    }
                    else
                    {
                        ret = M2M_ERR_FAIL;
 801be4a:	23f4      	movs	r3, #244	; 0xf4
 801be4c:	75fb      	strb	r3, [r7, #23]
 801be4e:	e004      	b.n	801be5a <nm_get_ota_firmware_info+0x16e>
                    }
                }
            }
            else
            {
                ret = M2M_ERR_FAIL;
 801be50:	23f4      	movs	r3, #244	; 0xf4
 801be52:	75fb      	strb	r3, [r7, #23]
 801be54:	e001      	b.n	801be5a <nm_get_ota_firmware_info+0x16e>
            }
        }
    }
    else
    {
        ret = M2M_ERR_FAIL;
 801be56:	23f4      	movs	r3, #244	; 0xf4
 801be58:	75fb      	strb	r3, [r7, #23]
    }
    if(ret != M2M_SUCCESS)
 801be5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801be5e:	2b00      	cmp	r3, #0
 801be60:	d008      	beq.n	801be74 <nm_get_ota_firmware_info+0x188>
    {
        M2M_INFO("No valid Ota image\n");
 801be62:	4807      	ldr	r0, [pc, #28]	; (801be80 <nm_get_ota_firmware_info+0x194>)
 801be64:	f002 fb6e 	bl	801e544 <iprintf>
 801be68:	480d      	ldr	r0, [pc, #52]	; (801bea0 <nm_get_ota_firmware_info+0x1b4>)
 801be6a:	f002 fc07 	bl	801e67c <puts>
 801be6e:	200d      	movs	r0, #13
 801be70:	f002 fb80 	bl	801e574 <putchar>
    }
    return ret;
 801be74:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801be78:	4618      	mov	r0, r3
 801be7a:	3718      	adds	r7, #24
 801be7c:	46bd      	mov	sp, r7
 801be7e:	bd80      	pop	{r7, pc}
 801be80:	08020f1c 	.word	0x08020f1c
 801be84:	08020fdc 	.word	0x08020fdc
 801be88:	08020fec 	.word	0x08020fec
 801be8c:	08021004 	.word	0x08021004
 801be90:	0802101c 	.word	0x0802101c
 801be94:	08029168 	.word	0x08029168
 801be98:	08020f8c 	.word	0x08020f8c
 801be9c:	08021034 	.word	0x08021034
 801bea0:	08021050 	.word	0x08021050

0801bea4 <nm_drv_init_hold>:
ERR1:
    return ret;
}

sint8 nm_drv_init_hold(uint32 req_serial_number)
{
 801bea4:	b580      	push	{r7, lr}
 801bea6:	b084      	sub	sp, #16
 801bea8:	af00      	add	r7, sp, #0
 801beaa:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801beac:	2300      	movs	r3, #0
 801beae:	73fb      	strb	r3, [r7, #15]

    ret = nm_bus_iface_init(NULL, req_serial_number);
 801beb0:	6879      	ldr	r1, [r7, #4]
 801beb2:	2000      	movs	r0, #0
 801beb4:	f7ff fd0e 	bl	801b8d4 <nm_bus_iface_init>
 801beb8:	4603      	mov	r3, r0
 801beba:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bec0:	2b00      	cmp	r3, #0
 801bec2:	d00e      	beq.n	801bee2 <nm_drv_init_hold+0x3e>
        M2M_ERR("[nmi start]: fail init bus\n");
 801bec4:	22fc      	movs	r2, #252	; 0xfc
 801bec6:	4914      	ldr	r1, [pc, #80]	; (801bf18 <nm_drv_init_hold+0x74>)
 801bec8:	4814      	ldr	r0, [pc, #80]	; (801bf1c <nm_drv_init_hold+0x78>)
 801beca:	f002 fb3b 	bl	801e544 <iprintf>
 801bece:	4814      	ldr	r0, [pc, #80]	; (801bf20 <nm_drv_init_hold+0x7c>)
 801bed0:	f002 fbd4 	bl	801e67c <puts>
 801bed4:	200d      	movs	r0, #13
 801bed6:	f002 fb4d 	bl	801e574 <putchar>
        goto ERR1;
 801beda:	bf00      	nop
#ifdef NO_HW_CHIP_EN
ERR2:
    nm_bus_iface_deinit();
#endif
ERR1:
    return ret;
 801bedc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bee0:	e015      	b.n	801bf0e <nm_drv_init_hold+0x6a>
    M2M_INFO("Chip ID %lx\n", nmi_get_chipid());
 801bee2:	4810      	ldr	r0, [pc, #64]	; (801bf24 <nm_drv_init_hold+0x80>)
 801bee4:	f002 fb2e 	bl	801e544 <iprintf>
 801bee8:	f7ff f914 	bl	801b114 <nmi_get_chipid>
 801beec:	4603      	mov	r3, r0
 801beee:	4619      	mov	r1, r3
 801bef0:	480d      	ldr	r0, [pc, #52]	; (801bf28 <nm_drv_init_hold+0x84>)
 801bef2:	f002 fb27 	bl	801e544 <iprintf>
 801bef6:	200d      	movs	r0, #13
 801bef8:	f002 fb3c 	bl	801e574 <putchar>
    nm_spi_init();
 801befc:	f000 fea6 	bl	801cc4c <nm_spi_init>
    chip_idle();
 801bf00:	f7ff f803 	bl	801af0a <chip_idle>
    genuNmState = NM_STATE_INIT;
 801bf04:	4b09      	ldr	r3, [pc, #36]	; (801bf2c <nm_drv_init_hold+0x88>)
 801bf06:	2201      	movs	r2, #1
 801bf08:	701a      	strb	r2, [r3, #0]
    return ret;
 801bf0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bf0e:	4618      	mov	r0, r3
 801bf10:	3710      	adds	r7, #16
 801bf12:	46bd      	mov	sp, r7
 801bf14:	bd80      	pop	{r7, pc}
 801bf16:	bf00      	nop
 801bf18:	08029184 	.word	0x08029184
 801bf1c:	08020f8c 	.word	0x08020f8c
 801bf20:	08021064 	.word	0x08021064
 801bf24:	08020f1c 	.word	0x08020f1c
 801bf28:	08021080 	.word	0x08021080
 801bf2c:	2001df04 	.word	0x2001df04

0801bf30 <nm_drv_init_start>:

sint8 nm_drv_init_start(void * arg)
{
 801bf30:	b580      	push	{r7, lr}
 801bf32:	b084      	sub	sp, #16
 801bf34:	af00      	add	r7, sp, #0
 801bf36:	6078      	str	r0, [r7, #4]
    sint8 ret = M2M_SUCCESS;
 801bf38:	2300      	movs	r3, #0
 801bf3a:	73fb      	strb	r3, [r7, #15]
    uint8 u8Mode = M2M_WIFI_MODE_NORMAL;
 801bf3c:	2301      	movs	r3, #1
 801bf3e:	73bb      	strb	r3, [r7, #14]

    if(NULL != arg)
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	2b00      	cmp	r3, #0
 801bf44:	d00a      	beq.n	801bf5c <nm_drv_init_start+0x2c>
    {
        u8Mode = *((uint8 *)arg);
 801bf46:	687b      	ldr	r3, [r7, #4]
 801bf48:	781b      	ldrb	r3, [r3, #0]
 801bf4a:	73bb      	strb	r3, [r7, #14]
        if(u8Mode < M2M_WIFI_MODE_NORMAL || u8Mode >= M2M_WIFI_MODE_MAX)
 801bf4c:	7bbb      	ldrb	r3, [r7, #14]
 801bf4e:	2b00      	cmp	r3, #0
 801bf50:	d002      	beq.n	801bf58 <nm_drv_init_start+0x28>
 801bf52:	7bbb      	ldrb	r3, [r7, #14]
 801bf54:	2b03      	cmp	r3, #3
 801bf56:	d901      	bls.n	801bf5c <nm_drv_init_start+0x2c>
            u8Mode = M2M_WIFI_MODE_NORMAL;
 801bf58:	2301      	movs	r3, #1
 801bf5a:	73bb      	strb	r3, [r7, #14]
    }

    ret = cpu_start();
 801bf5c:	f7ff f842 	bl	801afe4 <cpu_start>
 801bf60:	4603      	mov	r3, r0
 801bf62:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bf64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf68:	2b00      	cmp	r3, #0
 801bf6a:	d131      	bne.n	801bfd0 <nm_drv_init_start+0xa0>
        goto ERR2;
    }
    ret = wait_for_bootrom(u8Mode);
 801bf6c:	7bbb      	ldrb	r3, [r7, #14]
 801bf6e:	4618      	mov	r0, r3
 801bf70:	f7ff fa6e 	bl	801b450 <wait_for_bootrom>
 801bf74:	4603      	mov	r3, r0
 801bf76:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bf78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d129      	bne.n	801bfd4 <nm_drv_init_start+0xa4>
        goto ERR2;
    }

    ret = wait_for_firmware_start(u8Mode);
 801bf80:	7bbb      	ldrb	r3, [r7, #14]
 801bf82:	4618      	mov	r0, r3
 801bf84:	f7ff fad6 	bl	801b534 <wait_for_firmware_start>
 801bf88:	4603      	mov	r3, r0
 801bf8a:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bf8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d121      	bne.n	801bfd8 <nm_drv_init_start+0xa8>
        goto ERR2;
    }

    if(M2M_WIFI_MODE_CONFIG == u8Mode) {
 801bf94:	7bbb      	ldrb	r3, [r7, #14]
 801bf96:	2b02      	cmp	r3, #2
 801bf98:	d024      	beq.n	801bfe4 <nm_drv_init_start+0xb4>
        goto ERR1;
    } else {
        /*continue running*/
    }

    ret = enable_interrupts();
 801bf9a:	f7fe ffd2 	bl	801af42 <enable_interrupts>
 801bf9e:	4603      	mov	r3, r0
 801bfa0:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801bfa2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfa6:	2b00      	cmp	r3, #0
 801bfa8:	d00c      	beq.n	801bfc4 <nm_drv_init_start+0x94>
        M2M_ERR("failed to enable interrupts..\n");
 801bfaa:	f240 1249 	movw	r2, #329	; 0x149
 801bfae:	4911      	ldr	r1, [pc, #68]	; (801bff4 <nm_drv_init_start+0xc4>)
 801bfb0:	4811      	ldr	r0, [pc, #68]	; (801bff8 <nm_drv_init_start+0xc8>)
 801bfb2:	f002 fac7 	bl	801e544 <iprintf>
 801bfb6:	4811      	ldr	r0, [pc, #68]	; (801bffc <nm_drv_init_start+0xcc>)
 801bfb8:	f002 fb60 	bl	801e67c <puts>
 801bfbc:	200d      	movs	r0, #13
 801bfbe:	f002 fad9 	bl	801e574 <putchar>
        goto ERR2;
 801bfc2:	e00a      	b.n	801bfda <nm_drv_init_start+0xaa>
    }

    genuNmState = NM_STATE_START;
 801bfc4:	4b0e      	ldr	r3, [pc, #56]	; (801c000 <nm_drv_init_start+0xd0>)
 801bfc6:	2202      	movs	r2, #2
 801bfc8:	701a      	strb	r2, [r3, #0]

    return ret;
 801bfca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bfce:	e00c      	b.n	801bfea <nm_drv_init_start+0xba>
        goto ERR2;
 801bfd0:	bf00      	nop
 801bfd2:	e002      	b.n	801bfda <nm_drv_init_start+0xaa>
        goto ERR2;
 801bfd4:	bf00      	nop
 801bfd6:	e000      	b.n	801bfda <nm_drv_init_start+0xaa>
        goto ERR2;
 801bfd8:	bf00      	nop
ERR2:
    nm_bus_iface_deinit();
 801bfda:	f7ff fc8e 	bl	801b8fa <nm_bus_iface_deinit>
#ifdef CONF_WINC_USE_SPI
    nm_spi_deinit();
 801bfde:	f000 fec5 	bl	801cd6c <nm_spi_deinit>
 801bfe2:	e000      	b.n	801bfe6 <nm_drv_init_start+0xb6>
        goto ERR1;
 801bfe4:	bf00      	nop
#endif
ERR1:
    return ret;
 801bfe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bfea:	4618      	mov	r0, r3
 801bfec:	3710      	adds	r7, #16
 801bfee:	46bd      	mov	sp, r7
 801bff0:	bd80      	pop	{r7, pc}
 801bff2:	bf00      	nop
 801bff4:	08029198 	.word	0x08029198
 801bff8:	08020f8c 	.word	0x08020f8c
 801bffc:	08021090 	.word	0x08021090
 801c000:	2001df04 	.word	0x2001df04

0801c004 <nm_drv_deinit>:
/**
 *  @fn         nm_drv_deinit
 *  @brief      Deinitialize NMC1000 driver
 */
sint8 nm_drv_deinit(void* arg)
{
 801c004:	b580      	push	{r7, lr}
 801c006:	b084      	sub	sp, #16
 801c008:	af00      	add	r7, sp, #0
 801c00a:	6078      	str	r0, [r7, #4]
    sint8 ret;

    ret = chip_deinit();
 801c00c:	f7ff fae4 	bl	801b5d8 <chip_deinit>
 801c010:	4603      	mov	r3, r0
 801c012:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801c014:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c018:	2b00      	cmp	r3, #0
 801c01a:	d00c      	beq.n	801c036 <nm_drv_deinit+0x32>
        M2M_ERR("[nmi stop]: chip_deinit fail\n");
 801c01c:	f44f 72bb 	mov.w	r2, #374	; 0x176
 801c020:	4915      	ldr	r1, [pc, #84]	; (801c078 <nm_drv_deinit+0x74>)
 801c022:	4816      	ldr	r0, [pc, #88]	; (801c07c <nm_drv_deinit+0x78>)
 801c024:	f002 fa8e 	bl	801e544 <iprintf>
 801c028:	4815      	ldr	r0, [pc, #84]	; (801c080 <nm_drv_deinit+0x7c>)
 801c02a:	f002 fb27 	bl	801e67c <puts>
 801c02e:	200d      	movs	r0, #13
 801c030:	f002 faa0 	bl	801e574 <putchar>
        goto ERR1;
 801c034:	e016      	b.n	801c064 <nm_drv_deinit+0x60>
    }

    ret = nm_bus_iface_deinit();
 801c036:	f7ff fc60 	bl	801b8fa <nm_bus_iface_deinit>
 801c03a:	4603      	mov	r3, r0
 801c03c:	73fb      	strb	r3, [r7, #15]
    if(M2M_SUCCESS != ret) {
 801c03e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801c042:	2b00      	cmp	r3, #0
 801c044:	d00c      	beq.n	801c060 <nm_drv_deinit+0x5c>
        M2M_ERR("[nmi stop]: fail init bus\n");
 801c046:	f44f 72be 	mov.w	r2, #380	; 0x17c
 801c04a:	490b      	ldr	r1, [pc, #44]	; (801c078 <nm_drv_deinit+0x74>)
 801c04c:	480b      	ldr	r0, [pc, #44]	; (801c07c <nm_drv_deinit+0x78>)
 801c04e:	f002 fa79 	bl	801e544 <iprintf>
 801c052:	480c      	ldr	r0, [pc, #48]	; (801c084 <nm_drv_deinit+0x80>)
 801c054:	f002 fb12 	bl	801e67c <puts>
 801c058:	200d      	movs	r0, #13
 801c05a:	f002 fa8b 	bl	801e574 <putchar>
        goto ERR1;
 801c05e:	e001      	b.n	801c064 <nm_drv_deinit+0x60>
    }
#ifdef CONF_WINC_USE_SPI
    /* Must do this after global reset to set SPI data packet size. */
    nm_spi_deinit();
 801c060:	f000 fe84 	bl	801cd6c <nm_spi_deinit>
#endif

ERR1:
    genuNmState = NM_STATE_DEINIT;
 801c064:	4b08      	ldr	r3, [pc, #32]	; (801c088 <nm_drv_deinit+0x84>)
 801c066:	2200      	movs	r2, #0
 801c068:	701a      	strb	r2, [r3, #0]

    return ret;
 801c06a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c06e:	4618      	mov	r0, r3
 801c070:	3710      	adds	r7, #16
 801c072:	46bd      	mov	sp, r7
 801c074:	bd80      	pop	{r7, pc}
 801c076:	bf00      	nop
 801c078:	080291ac 	.word	0x080291ac
 801c07c:	08020f8c 	.word	0x08020f8c
 801c080:	080210b0 	.word	0x080210b0
 801c084:	080210d0 	.word	0x080210d0
 801c088:	2001df04 	.word	0x2001df04

0801c08c <nm_get_state>:
 *  @fn         nm_get_state(void)
 *  @brief      Get the current state of the WINC module
 *  @return     The current state of the WINC module
 */
tenuNmState nm_get_state(void)
{
 801c08c:	b480      	push	{r7}
 801c08e:	af00      	add	r7, sp, #0
    return genuNmState;
 801c090:	4b03      	ldr	r3, [pc, #12]	; (801c0a0 <nm_get_state+0x14>)
 801c092:	781b      	ldrb	r3, [r3, #0]
}
 801c094:	4618      	mov	r0, r3
 801c096:	46bd      	mov	sp, r7
 801c098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c09c:	4770      	bx	lr
 801c09e:	bf00      	nop
 801c0a0:	2001df04 	.word	0x2001df04

0801c0a4 <nmi_spi_read>:
#define DATA_PKT_SZ             DATA_PKT_SZ_8K

static uint8    gu8Crc_off  =   0;

static sint8 nmi_spi_read(uint8* b, uint16 sz)
{
 801c0a4:	b580      	push	{r7, lr}
 801c0a6:	b086      	sub	sp, #24
 801c0a8:	af00      	add	r7, sp, #0
 801c0aa:	6078      	str	r0, [r7, #4]
 801c0ac:	460b      	mov	r3, r1
 801c0ae:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = NULL;
 801c0b0:	2300      	movs	r3, #0
 801c0b2:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = b;
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 801c0b8:	887b      	ldrh	r3, [r7, #2]
 801c0ba:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 801c0bc:	f107 030c 	add.w	r3, r7, #12
 801c0c0:	4619      	mov	r1, r3
 801c0c2:	2003      	movs	r0, #3
 801c0c4:	f7fc fed6 	bl	8018e74 <nm_bus_ioctl>
 801c0c8:	4603      	mov	r3, r0
}
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	3718      	adds	r7, #24
 801c0ce:	46bd      	mov	sp, r7
 801c0d0:	bd80      	pop	{r7, pc}

0801c0d2 <nmi_spi_write>:

static sint8 nmi_spi_write(uint8* b, uint16 sz)
{
 801c0d2:	b580      	push	{r7, lr}
 801c0d4:	b086      	sub	sp, #24
 801c0d6:	af00      	add	r7, sp, #0
 801c0d8:	6078      	str	r0, [r7, #4]
 801c0da:	460b      	mov	r3, r1
 801c0dc:	807b      	strh	r3, [r7, #2]
	tstrNmSpiRw spi;
	spi.pu8InBuf = b;
 801c0de:	687b      	ldr	r3, [r7, #4]
 801c0e0:	60fb      	str	r3, [r7, #12]
	spi.pu8OutBuf = NULL;
 801c0e2:	2300      	movs	r3, #0
 801c0e4:	613b      	str	r3, [r7, #16]
	spi.u16Sz = sz;
 801c0e6:	887b      	ldrh	r3, [r7, #2]
 801c0e8:	82bb      	strh	r3, [r7, #20]
	return nm_bus_ioctl(NM_BUS_IOCTL_RW, &spi);
 801c0ea:	f107 030c 	add.w	r3, r7, #12
 801c0ee:	4619      	mov	r1, r3
 801c0f0:	2003      	movs	r0, #3
 801c0f2:	f7fc febf 	bl	8018e74 <nm_bus_ioctl>
 801c0f6:	4603      	mov	r3, r0
}
 801c0f8:	4618      	mov	r0, r3
 801c0fa:	3718      	adds	r7, #24
 801c0fc:	46bd      	mov	sp, r7
 801c0fe:	bd80      	pop	{r7, pc}

0801c100 <crc7_byte>:
    0x46, 0x4f, 0x54, 0x5d, 0x62, 0x6b, 0x70, 0x79
};


static inline uint8 crc7_byte(uint8 crc, uint8 data)
{
 801c100:	b480      	push	{r7}
 801c102:	b083      	sub	sp, #12
 801c104:	af00      	add	r7, sp, #0
 801c106:	4603      	mov	r3, r0
 801c108:	460a      	mov	r2, r1
 801c10a:	71fb      	strb	r3, [r7, #7]
 801c10c:	4613      	mov	r3, r2
 801c10e:	71bb      	strb	r3, [r7, #6]
    return crc7_syndrome_table[(crc << 1) ^ data];
 801c110:	79fb      	ldrb	r3, [r7, #7]
 801c112:	005a      	lsls	r2, r3, #1
 801c114:	79bb      	ldrb	r3, [r7, #6]
 801c116:	4053      	eors	r3, r2
 801c118:	4a03      	ldr	r2, [pc, #12]	; (801c128 <crc7_byte+0x28>)
 801c11a:	5cd3      	ldrb	r3, [r2, r3]
}
 801c11c:	4618      	mov	r0, r3
 801c11e:	370c      	adds	r7, #12
 801c120:	46bd      	mov	sp, r7
 801c122:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c126:	4770      	bx	lr
 801c128:	080291bc 	.word	0x080291bc

0801c12c <crc7>:

static inline uint8 crc7(uint8 crc, const uint8 *buffer, uint32 len)
{
 801c12c:	b580      	push	{r7, lr}
 801c12e:	b084      	sub	sp, #16
 801c130:	af00      	add	r7, sp, #0
 801c132:	4603      	mov	r3, r0
 801c134:	60b9      	str	r1, [r7, #8]
 801c136:	607a      	str	r2, [r7, #4]
 801c138:	73fb      	strb	r3, [r7, #15]
    while(len--)
 801c13a:	e00a      	b.n	801c152 <crc7+0x26>
        crc = crc7_byte(crc, *buffer++);
 801c13c:	68bb      	ldr	r3, [r7, #8]
 801c13e:	1c5a      	adds	r2, r3, #1
 801c140:	60ba      	str	r2, [r7, #8]
 801c142:	781a      	ldrb	r2, [r3, #0]
 801c144:	7bfb      	ldrb	r3, [r7, #15]
 801c146:	4611      	mov	r1, r2
 801c148:	4618      	mov	r0, r3
 801c14a:	f7ff ffd9 	bl	801c100 <crc7_byte>
 801c14e:	4603      	mov	r3, r0
 801c150:	73fb      	strb	r3, [r7, #15]
    while(len--)
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	1e5a      	subs	r2, r3, #1
 801c156:	607a      	str	r2, [r7, #4]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d1ef      	bne.n	801c13c <crc7+0x10>
    return crc;
 801c15c:	7bfb      	ldrb	r3, [r7, #15]
}
 801c15e:	4618      	mov	r0, r3
 801c160:	3710      	adds	r7, #16
 801c162:	46bd      	mov	sp, r7
 801c164:	bd80      	pop	{r7, pc}
	...

0801c168 <spi_cmd>:
    Spi protocol Function

********************************************/

static sint8 spi_cmd(uint8 cmd, uint32 adr, uint32 u32data, uint32 sz, uint8 clockless)
{
 801c168:	b580      	push	{r7, lr}
 801c16a:	b088      	sub	sp, #32
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	60b9      	str	r1, [r7, #8]
 801c170:	607a      	str	r2, [r7, #4]
 801c172:	603b      	str	r3, [r7, #0]
 801c174:	4603      	mov	r3, r0
 801c176:	73fb      	strb	r3, [r7, #15]
    uint8 bc[9];
    uint8 len = 5;
 801c178:	2305      	movs	r3, #5
 801c17a:	77fb      	strb	r3, [r7, #31]
    sint8 result = N_OK;
 801c17c:	2300      	movs	r3, #0
 801c17e:	77bb      	strb	r3, [r7, #30]

    bc[0] = cmd;
 801c180:	7bfb      	ldrb	r3, [r7, #15]
 801c182:	753b      	strb	r3, [r7, #20]
    switch(cmd) {
 801c184:	7bfb      	ldrb	r3, [r7, #15]
 801c186:	3bc3      	subs	r3, #195	; 0xc3
 801c188:	2b0c      	cmp	r3, #12
 801c18a:	f200 80a1 	bhi.w	801c2d0 <spi_cmd+0x168>
 801c18e:	a201      	add	r2, pc, #4	; (adr r2, 801c194 <spi_cmd+0x2c>)
 801c190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c194:	0801c253 	.word	0x0801c253
 801c198:	0801c1e5 	.word	0x0801c1e5
 801c19c:	0801c2d1 	.word	0x0801c2d1
 801c1a0:	0801c2d1 	.word	0x0801c2d1
 801c1a4:	0801c221 	.word	0x0801c221
 801c1a8:	0801c221 	.word	0x0801c221
 801c1ac:	0801c297 	.word	0x0801c297
 801c1b0:	0801c1c9 	.word	0x0801c1c9
 801c1b4:	0801c2d1 	.word	0x0801c2d1
 801c1b8:	0801c2d1 	.word	0x0801c2d1
 801c1bc:	0801c2d1 	.word	0x0801c2d1
 801c1c0:	0801c2d1 	.word	0x0801c2d1
 801c1c4:	0801c20f 	.word	0x0801c20f
        case CMD_SINGLE_READ:               /* single word (4 bytes) read */
            bc[1] = (uint8)(adr >> 16);
 801c1c8:	68bb      	ldr	r3, [r7, #8]
 801c1ca:	0c1b      	lsrs	r3, r3, #16
 801c1cc:	b2db      	uxtb	r3, r3
 801c1ce:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)(adr >> 8);
 801c1d0:	68bb      	ldr	r3, [r7, #8]
 801c1d2:	0a1b      	lsrs	r3, r3, #8
 801c1d4:	b2db      	uxtb	r3, r3
 801c1d6:	75bb      	strb	r3, [r7, #22]
            bc[3] = (uint8)adr;
 801c1d8:	68bb      	ldr	r3, [r7, #8]
 801c1da:	b2db      	uxtb	r3, r3
 801c1dc:	75fb      	strb	r3, [r7, #23]
            len = 5;
 801c1de:	2305      	movs	r3, #5
 801c1e0:	77fb      	strb	r3, [r7, #31]
            break;
 801c1e2:	e078      	b.n	801c2d6 <spi_cmd+0x16e>
        case CMD_INTERNAL_READ:         /* internal register read */
            bc[1] = (uint8)(adr >> 8);
 801c1e4:	68bb      	ldr	r3, [r7, #8]
 801c1e6:	0a1b      	lsrs	r3, r3, #8
 801c1e8:	b2db      	uxtb	r3, r3
 801c1ea:	757b      	strb	r3, [r7, #21]
            if(clockless)  bc[1] |= (1 << 7);
 801c1ec:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d004      	beq.n	801c1fe <spi_cmd+0x96>
 801c1f4:	7d7b      	ldrb	r3, [r7, #21]
 801c1f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c1fa:	b2db      	uxtb	r3, r3
 801c1fc:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)adr;
 801c1fe:	68bb      	ldr	r3, [r7, #8]
 801c200:	b2db      	uxtb	r3, r3
 801c202:	75bb      	strb	r3, [r7, #22]
            bc[3] = 0x00;
 801c204:	2300      	movs	r3, #0
 801c206:	75fb      	strb	r3, [r7, #23]
            len = 5;
 801c208:	2305      	movs	r3, #5
 801c20a:	77fb      	strb	r3, [r7, #31]
            break;
 801c20c:	e063      	b.n	801c2d6 <spi_cmd+0x16e>
            bc[3] = 0x00;
            len = 5;
            break;
#endif
        case CMD_RESET:                         /* reset */
            bc[1] = 0xff;
 801c20e:	23ff      	movs	r3, #255	; 0xff
 801c210:	757b      	strb	r3, [r7, #21]
            bc[2] = 0xff;
 801c212:	23ff      	movs	r3, #255	; 0xff
 801c214:	75bb      	strb	r3, [r7, #22]
            bc[3] = 0xff;
 801c216:	23ff      	movs	r3, #255	; 0xff
 801c218:	75fb      	strb	r3, [r7, #23]
            len = 5;
 801c21a:	2305      	movs	r3, #5
 801c21c:	77fb      	strb	r3, [r7, #31]
            break;
 801c21e:	e05a      	b.n	801c2d6 <spi_cmd+0x16e>
            len = 7;
            break;
#endif
        case CMD_DMA_EXT_WRITE:     /* dma extended write */
        case CMD_DMA_EXT_READ:          /* dma extended read */
            bc[1] = (uint8)(adr >> 16);
 801c220:	68bb      	ldr	r3, [r7, #8]
 801c222:	0c1b      	lsrs	r3, r3, #16
 801c224:	b2db      	uxtb	r3, r3
 801c226:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)(adr >> 8);
 801c228:	68bb      	ldr	r3, [r7, #8]
 801c22a:	0a1b      	lsrs	r3, r3, #8
 801c22c:	b2db      	uxtb	r3, r3
 801c22e:	75bb      	strb	r3, [r7, #22]
            bc[3] = (uint8)adr;
 801c230:	68bb      	ldr	r3, [r7, #8]
 801c232:	b2db      	uxtb	r3, r3
 801c234:	75fb      	strb	r3, [r7, #23]
            bc[4] = (uint8)(sz >> 16);
 801c236:	683b      	ldr	r3, [r7, #0]
 801c238:	0c1b      	lsrs	r3, r3, #16
 801c23a:	b2db      	uxtb	r3, r3
 801c23c:	763b      	strb	r3, [r7, #24]
            bc[5] = (uint8)(sz >> 8);
 801c23e:	683b      	ldr	r3, [r7, #0]
 801c240:	0a1b      	lsrs	r3, r3, #8
 801c242:	b2db      	uxtb	r3, r3
 801c244:	767b      	strb	r3, [r7, #25]
            bc[6] = (uint8)(sz);
 801c246:	683b      	ldr	r3, [r7, #0]
 801c248:	b2db      	uxtb	r3, r3
 801c24a:	76bb      	strb	r3, [r7, #26]
            len = 8;
 801c24c:	2308      	movs	r3, #8
 801c24e:	77fb      	strb	r3, [r7, #31]
            break;
 801c250:	e041      	b.n	801c2d6 <spi_cmd+0x16e>
        case CMD_INTERNAL_WRITE:        /* internal register write */
            bc[1] = (uint8)(adr >> 8);
 801c252:	68bb      	ldr	r3, [r7, #8]
 801c254:	0a1b      	lsrs	r3, r3, #8
 801c256:	b2db      	uxtb	r3, r3
 801c258:	757b      	strb	r3, [r7, #21]
            if(clockless)  bc[1] |= (1 << 7);
 801c25a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801c25e:	2b00      	cmp	r3, #0
 801c260:	d004      	beq.n	801c26c <spi_cmd+0x104>
 801c262:	7d7b      	ldrb	r3, [r7, #21]
 801c264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801c268:	b2db      	uxtb	r3, r3
 801c26a:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)(adr);
 801c26c:	68bb      	ldr	r3, [r7, #8]
 801c26e:	b2db      	uxtb	r3, r3
 801c270:	75bb      	strb	r3, [r7, #22]
            bc[3] = (uint8)(u32data >> 24);
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	0e1b      	lsrs	r3, r3, #24
 801c276:	b2db      	uxtb	r3, r3
 801c278:	75fb      	strb	r3, [r7, #23]
            bc[4] = (uint8)(u32data >> 16);
 801c27a:	687b      	ldr	r3, [r7, #4]
 801c27c:	0c1b      	lsrs	r3, r3, #16
 801c27e:	b2db      	uxtb	r3, r3
 801c280:	763b      	strb	r3, [r7, #24]
            bc[5] = (uint8)(u32data >> 8);
 801c282:	687b      	ldr	r3, [r7, #4]
 801c284:	0a1b      	lsrs	r3, r3, #8
 801c286:	b2db      	uxtb	r3, r3
 801c288:	767b      	strb	r3, [r7, #25]
            bc[6] = (uint8)(u32data);
 801c28a:	687b      	ldr	r3, [r7, #4]
 801c28c:	b2db      	uxtb	r3, r3
 801c28e:	76bb      	strb	r3, [r7, #26]
            len = 8;
 801c290:	2308      	movs	r3, #8
 801c292:	77fb      	strb	r3, [r7, #31]
            break;
 801c294:	e01f      	b.n	801c2d6 <spi_cmd+0x16e>
        case CMD_SINGLE_WRITE:          /* single word write */
            bc[1] = (uint8)(adr >> 16);
 801c296:	68bb      	ldr	r3, [r7, #8]
 801c298:	0c1b      	lsrs	r3, r3, #16
 801c29a:	b2db      	uxtb	r3, r3
 801c29c:	757b      	strb	r3, [r7, #21]
            bc[2] = (uint8)(adr >> 8);
 801c29e:	68bb      	ldr	r3, [r7, #8]
 801c2a0:	0a1b      	lsrs	r3, r3, #8
 801c2a2:	b2db      	uxtb	r3, r3
 801c2a4:	75bb      	strb	r3, [r7, #22]
            bc[3] = (uint8)(adr);
 801c2a6:	68bb      	ldr	r3, [r7, #8]
 801c2a8:	b2db      	uxtb	r3, r3
 801c2aa:	75fb      	strb	r3, [r7, #23]
            bc[4] = (uint8)(u32data >> 24);
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	0e1b      	lsrs	r3, r3, #24
 801c2b0:	b2db      	uxtb	r3, r3
 801c2b2:	763b      	strb	r3, [r7, #24]
            bc[5] = (uint8)(u32data >> 16);
 801c2b4:	687b      	ldr	r3, [r7, #4]
 801c2b6:	0c1b      	lsrs	r3, r3, #16
 801c2b8:	b2db      	uxtb	r3, r3
 801c2ba:	767b      	strb	r3, [r7, #25]
            bc[6] = (uint8)(u32data >> 8);
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	0a1b      	lsrs	r3, r3, #8
 801c2c0:	b2db      	uxtb	r3, r3
 801c2c2:	76bb      	strb	r3, [r7, #26]
            bc[7] = (uint8)(u32data);
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	b2db      	uxtb	r3, r3
 801c2c8:	76fb      	strb	r3, [r7, #27]
            len = 9;
 801c2ca:	2309      	movs	r3, #9
 801c2cc:	77fb      	strb	r3, [r7, #31]
            break;
 801c2ce:	e002      	b.n	801c2d6 <spi_cmd+0x16e>
        default:
            result = N_FAIL;
 801c2d0:	23ff      	movs	r3, #255	; 0xff
 801c2d2:	77bb      	strb	r3, [r7, #30]
            break;
 801c2d4:	bf00      	nop
    }

    if(result == N_OK) {
 801c2d6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 801c2da:	2b00      	cmp	r3, #0
 801c2dc:	d133      	bne.n	801c346 <spi_cmd+0x1de>
        if(!gu8Crc_off)
 801c2de:	4b1d      	ldr	r3, [pc, #116]	; (801c354 <spi_cmd+0x1ec>)
 801c2e0:	781b      	ldrb	r3, [r3, #0]
 801c2e2:	2b00      	cmp	r3, #0
 801c2e4:	d113      	bne.n	801c30e <spi_cmd+0x1a6>
            bc[len-1] = (crc7(0x7f, (const uint8 *)&bc[0], len-1)) << 1;
 801c2e6:	7ffb      	ldrb	r3, [r7, #31]
 801c2e8:	3b01      	subs	r3, #1
 801c2ea:	461a      	mov	r2, r3
 801c2ec:	f107 0314 	add.w	r3, r7, #20
 801c2f0:	4619      	mov	r1, r3
 801c2f2:	207f      	movs	r0, #127	; 0x7f
 801c2f4:	f7ff ff1a 	bl	801c12c <crc7>
 801c2f8:	4603      	mov	r3, r0
 801c2fa:	461a      	mov	r2, r3
 801c2fc:	7ffb      	ldrb	r3, [r7, #31]
 801c2fe:	3b01      	subs	r3, #1
 801c300:	0052      	lsls	r2, r2, #1
 801c302:	b2d2      	uxtb	r2, r2
 801c304:	3320      	adds	r3, #32
 801c306:	443b      	add	r3, r7
 801c308:	f803 2c0c 	strb.w	r2, [r3, #-12]
 801c30c:	e002      	b.n	801c314 <spi_cmd+0x1ac>
        else
            len-=1;
 801c30e:	7ffb      	ldrb	r3, [r7, #31]
 801c310:	3b01      	subs	r3, #1
 801c312:	77fb      	strb	r3, [r7, #31]

        if(M2M_SUCCESS != nmi_spi_write(bc, len)) {
 801c314:	7ffb      	ldrb	r3, [r7, #31]
 801c316:	b29a      	uxth	r2, r3
 801c318:	f107 0314 	add.w	r3, r7, #20
 801c31c:	4611      	mov	r1, r2
 801c31e:	4618      	mov	r0, r3
 801c320:	f7ff fed7 	bl	801c0d2 <nmi_spi_write>
 801c324:	4603      	mov	r3, r0
 801c326:	2b00      	cmp	r3, #0
 801c328:	d00d      	beq.n	801c346 <spi_cmd+0x1de>
            M2M_ERR("[nmi spi]: Failed cmd write, bus error...\n");
 801c32a:	f240 1217 	movw	r2, #279	; 0x117
 801c32e:	490a      	ldr	r1, [pc, #40]	; (801c358 <spi_cmd+0x1f0>)
 801c330:	480a      	ldr	r0, [pc, #40]	; (801c35c <spi_cmd+0x1f4>)
 801c332:	f002 f907 	bl	801e544 <iprintf>
 801c336:	480a      	ldr	r0, [pc, #40]	; (801c360 <spi_cmd+0x1f8>)
 801c338:	f002 f9a0 	bl	801e67c <puts>
 801c33c:	200d      	movs	r0, #13
 801c33e:	f002 f919 	bl	801e574 <putchar>
            result = N_FAIL;
 801c342:	23ff      	movs	r3, #255	; 0xff
 801c344:	77bb      	strb	r3, [r7, #30]
        }
    }

    return result;
 801c346:	f997 301e 	ldrsb.w	r3, [r7, #30]
}
 801c34a:	4618      	mov	r0, r3
 801c34c:	3720      	adds	r7, #32
 801c34e:	46bd      	mov	sp, r7
 801c350:	bd80      	pop	{r7, pc}
 801c352:	bf00      	nop
 801c354:	2001df05 	.word	0x2001df05
 801c358:	080292bc 	.word	0x080292bc
 801c35c:	080210ec 	.word	0x080210ec
 801c360:	08021100 	.word	0x08021100

0801c364 <spi_cmd_rsp>:

    return result;
}

static sint8 spi_cmd_rsp(uint8 cmd)
{
 801c364:	b580      	push	{r7, lr}
 801c366:	b084      	sub	sp, #16
 801c368:	af00      	add	r7, sp, #0
 801c36a:	4603      	mov	r3, r0
 801c36c:	71fb      	strb	r3, [r7, #7]
    uint8 rsp;
    sint8 result = N_OK;
 801c36e:	2300      	movs	r3, #0
 801c370:	73fb      	strb	r3, [r7, #15]
        }
    }
#endif

    /* wait for response */
    s8RetryCnt = 10;
 801c372:	230a      	movs	r3, #10
 801c374:	73bb      	strb	r3, [r7, #14]
    do
    {
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 801c376:	f107 030d 	add.w	r3, r7, #13
 801c37a:	2101      	movs	r1, #1
 801c37c:	4618      	mov	r0, r3
 801c37e:	f7ff fe91 	bl	801c0a4 <nmi_spi_read>
 801c382:	4603      	mov	r3, r0
 801c384:	2b00      	cmp	r3, #0
 801c386:	d00e      	beq.n	801c3a6 <spi_cmd_rsp+0x42>
            M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 801c388:	f44f 72ad 	mov.w	r2, #346	; 0x15a
 801c38c:	4935      	ldr	r1, [pc, #212]	; (801c464 <spi_cmd_rsp+0x100>)
 801c38e:	4836      	ldr	r0, [pc, #216]	; (801c468 <spi_cmd_rsp+0x104>)
 801c390:	f002 f8d8 	bl	801e544 <iprintf>
 801c394:	4835      	ldr	r0, [pc, #212]	; (801c46c <spi_cmd_rsp+0x108>)
 801c396:	f002 f971 	bl	801e67c <puts>
 801c39a:	200d      	movs	r0, #13
 801c39c:	f002 f8ea 	bl	801e574 <putchar>
            result = N_FAIL;
 801c3a0:	23ff      	movs	r3, #255	; 0xff
 801c3a2:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 801c3a4:	e057      	b.n	801c456 <spi_cmd_rsp+0xf2>
        }
    } while((rsp != cmd) && (s8RetryCnt-- >0));
 801c3a6:	7b7b      	ldrb	r3, [r7, #13]
 801c3a8:	79fa      	ldrb	r2, [r7, #7]
 801c3aa:	429a      	cmp	r2, r3
 801c3ac:	d007      	beq.n	801c3be <spi_cmd_rsp+0x5a>
 801c3ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c3b2:	b2da      	uxtb	r2, r3
 801c3b4:	3a01      	subs	r2, #1
 801c3b6:	b2d2      	uxtb	r2, r2
 801c3b8:	73ba      	strb	r2, [r7, #14]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	dcdb      	bgt.n	801c376 <spi_cmd_rsp+0x12>
    if(s8RetryCnt < 0)
 801c3be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c3c2:	2b00      	cmp	r3, #0
 801c3c4:	da0e      	bge.n	801c3e4 <spi_cmd_rsp+0x80>
    {
        M2M_ERR("[nmi spi]: Failed cmd response read\n");
 801c3c6:	f240 1261 	movw	r2, #353	; 0x161
 801c3ca:	4926      	ldr	r1, [pc, #152]	; (801c464 <spi_cmd_rsp+0x100>)
 801c3cc:	4826      	ldr	r0, [pc, #152]	; (801c468 <spi_cmd_rsp+0x104>)
 801c3ce:	f002 f8b9 	bl	801e544 <iprintf>
 801c3d2:	4827      	ldr	r0, [pc, #156]	; (801c470 <spi_cmd_rsp+0x10c>)
 801c3d4:	f002 f952 	bl	801e67c <puts>
 801c3d8:	200d      	movs	r0, #13
 801c3da:	f002 f8cb 	bl	801e574 <putchar>
        result = N_FAIL;
 801c3de:	23ff      	movs	r3, #255	; 0xff
 801c3e0:	73fb      	strb	r3, [r7, #15]
        goto _fail_;
 801c3e2:	e038      	b.n	801c456 <spi_cmd_rsp+0xf2>
    }
    /**
        State response
    **/
    /* wait for response */
    s8RetryCnt = 10;
 801c3e4:	230a      	movs	r3, #10
 801c3e6:	73bb      	strb	r3, [r7, #14]
    do
    {
        if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 801c3e8:	f107 030d 	add.w	r3, r7, #13
 801c3ec:	2101      	movs	r1, #1
 801c3ee:	4618      	mov	r0, r3
 801c3f0:	f7ff fe58 	bl	801c0a4 <nmi_spi_read>
 801c3f4:	4603      	mov	r3, r0
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d00e      	beq.n	801c418 <spi_cmd_rsp+0xb4>
            M2M_ERR("[nmi spi]: Failed cmd response read, bus error...\n");
 801c3fa:	f240 126d 	movw	r2, #365	; 0x16d
 801c3fe:	4919      	ldr	r1, [pc, #100]	; (801c464 <spi_cmd_rsp+0x100>)
 801c400:	4819      	ldr	r0, [pc, #100]	; (801c468 <spi_cmd_rsp+0x104>)
 801c402:	f002 f89f 	bl	801e544 <iprintf>
 801c406:	4819      	ldr	r0, [pc, #100]	; (801c46c <spi_cmd_rsp+0x108>)
 801c408:	f002 f938 	bl	801e67c <puts>
 801c40c:	200d      	movs	r0, #13
 801c40e:	f002 f8b1 	bl	801e574 <putchar>
            result = N_FAIL;
 801c412:	23ff      	movs	r3, #255	; 0xff
 801c414:	73fb      	strb	r3, [r7, #15]
            goto _fail_;
 801c416:	e01e      	b.n	801c456 <spi_cmd_rsp+0xf2>
        }
    } while((rsp != 0x00) && (s8RetryCnt-- >0));
 801c418:	7b7b      	ldrb	r3, [r7, #13]
 801c41a:	2b00      	cmp	r3, #0
 801c41c:	d007      	beq.n	801c42e <spi_cmd_rsp+0xca>
 801c41e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c422:	b2da      	uxtb	r2, r3
 801c424:	3a01      	subs	r2, #1
 801c426:	b2d2      	uxtb	r2, r2
 801c428:	73ba      	strb	r2, [r7, #14]
 801c42a:	2b00      	cmp	r3, #0
 801c42c:	dcdc      	bgt.n	801c3e8 <spi_cmd_rsp+0x84>
    if(s8RetryCnt < 0)
 801c42e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c432:	2b00      	cmp	r3, #0
 801c434:	da0e      	bge.n	801c454 <spi_cmd_rsp+0xf0>
    {
        M2M_ERR("[nmi spi]: Failed cmd response read\n");
 801c436:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801c43a:	490a      	ldr	r1, [pc, #40]	; (801c464 <spi_cmd_rsp+0x100>)
 801c43c:	480a      	ldr	r0, [pc, #40]	; (801c468 <spi_cmd_rsp+0x104>)
 801c43e:	f002 f881 	bl	801e544 <iprintf>
 801c442:	480b      	ldr	r0, [pc, #44]	; (801c470 <spi_cmd_rsp+0x10c>)
 801c444:	f002 f91a 	bl	801e67c <puts>
 801c448:	200d      	movs	r0, #13
 801c44a:	f002 f893 	bl	801e574 <putchar>
        result = N_FAIL;
 801c44e:	23ff      	movs	r3, #255	; 0xff
 801c450:	73fb      	strb	r3, [r7, #15]
        goto _fail_;
 801c452:	e000      	b.n	801c456 <spi_cmd_rsp+0xf2>
    }
_fail_:
 801c454:	bf00      	nop

    return result;
 801c456:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c45a:	4618      	mov	r0, r3
 801c45c:	3710      	adds	r7, #16
 801c45e:	46bd      	mov	sp, r7
 801c460:	bd80      	pop	{r7, pc}
 801c462:	bf00      	nop
 801c464:	080292c4 	.word	0x080292c4
 801c468:	080210ec 	.word	0x080210ec
 801c46c:	0802117c 	.word	0x0802117c
 801c470:	080211b0 	.word	0x080211b0

0801c474 <spi_data_read>:
    }
    return N_OK;
}

static sint8 spi_data_read(uint8 *b, uint16 sz, uint8 clockless)
{
 801c474:	b580      	push	{r7, lr}
 801c476:	b086      	sub	sp, #24
 801c478:	af00      	add	r7, sp, #0
 801c47a:	6078      	str	r0, [r7, #4]
 801c47c:	460b      	mov	r3, r1
 801c47e:	807b      	strh	r3, [r7, #2]
 801c480:	4613      	mov	r3, r2
 801c482:	707b      	strb	r3, [r7, #1]
    sint16 retry, ix, nbytes;
    sint8 result = N_OK;
 801c484:	2300      	movs	r3, #0
 801c486:	747b      	strb	r3, [r7, #17]
    uint8 rsp;

    /**
        Data
    **/
    ix = 0;
 801c488:	2300      	movs	r3, #0
 801c48a:	82bb      	strh	r3, [r7, #20]
    do {
        if(sz <= DATA_PKT_SZ)
 801c48c:	887b      	ldrh	r3, [r7, #2]
 801c48e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c492:	d802      	bhi.n	801c49a <spi_data_read+0x26>
            nbytes = sz;
 801c494:	887b      	ldrh	r3, [r7, #2]
 801c496:	827b      	strh	r3, [r7, #18]
 801c498:	e002      	b.n	801c4a0 <spi_data_read+0x2c>
        else
            nbytes = DATA_PKT_SZ;
 801c49a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c49e:	827b      	strh	r3, [r7, #18]

        /**
            Data Response header
        **/
        retry = 10;
 801c4a0:	230a      	movs	r3, #10
 801c4a2:	82fb      	strh	r3, [r7, #22]
        do {
            if(M2M_SUCCESS != nmi_spi_read(&rsp, 1)) {
 801c4a4:	f107 030b 	add.w	r3, r7, #11
 801c4a8:	2101      	movs	r1, #1
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	f7ff fdfa 	bl	801c0a4 <nmi_spi_read>
 801c4b0:	4603      	mov	r3, r0
 801c4b2:	2b00      	cmp	r3, #0
 801c4b4:	d00e      	beq.n	801c4d4 <spi_data_read+0x60>
                M2M_ERR("[nmi spi]: Failed data response read, bus error...\n");
 801c4b6:	f44f 72d4 	mov.w	r2, #424	; 0x1a8
 801c4ba:	4942      	ldr	r1, [pc, #264]	; (801c5c4 <spi_data_read+0x150>)
 801c4bc:	4842      	ldr	r0, [pc, #264]	; (801c5c8 <spi_data_read+0x154>)
 801c4be:	f002 f841 	bl	801e544 <iprintf>
 801c4c2:	4842      	ldr	r0, [pc, #264]	; (801c5cc <spi_data_read+0x158>)
 801c4c4:	f002 f8da 	bl	801e67c <puts>
 801c4c8:	200d      	movs	r0, #13
 801c4ca:	f002 f853 	bl	801e574 <putchar>
                result = N_FAIL;
 801c4ce:	23ff      	movs	r3, #255	; 0xff
 801c4d0:	747b      	strb	r3, [r7, #17]
                break;
 801c4d2:	e00e      	b.n	801c4f2 <spi_data_read+0x7e>
            }
            //if (((rsp >> 4) & 0xf) == 0xf)
            if((rsp & 0xf0) == 0xf0)
 801c4d4:	7afb      	ldrb	r3, [r7, #11]
 801c4d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c4da:	2bf0      	cmp	r3, #240	; 0xf0
 801c4dc:	d008      	beq.n	801c4f0 <spi_data_read+0x7c>
                break;
        } while(retry--);
 801c4de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c4e2:	b29a      	uxth	r2, r3
 801c4e4:	3a01      	subs	r2, #1
 801c4e6:	b292      	uxth	r2, r2
 801c4e8:	82fa      	strh	r2, [r7, #22]
 801c4ea:	2b00      	cmp	r3, #0
 801c4ec:	d1da      	bne.n	801c4a4 <spi_data_read+0x30>
 801c4ee:	e000      	b.n	801c4f2 <spi_data_read+0x7e>
                break;
 801c4f0:	bf00      	nop

        if(result == N_FAIL)
 801c4f2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 801c4f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c4fa:	d05c      	beq.n	801c5b6 <spi_data_read+0x142>
            break;

        if(retry <= 0) {
 801c4fc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c500:	2b00      	cmp	r3, #0
 801c502:	dc10      	bgt.n	801c526 <spi_data_read+0xb2>
            M2M_ERR("[nmi spi]: Failed data response read...(%02x)\n", rsp);
 801c504:	f240 12b5 	movw	r2, #437	; 0x1b5
 801c508:	492e      	ldr	r1, [pc, #184]	; (801c5c4 <spi_data_read+0x150>)
 801c50a:	482f      	ldr	r0, [pc, #188]	; (801c5c8 <spi_data_read+0x154>)
 801c50c:	f002 f81a 	bl	801e544 <iprintf>
 801c510:	7afb      	ldrb	r3, [r7, #11]
 801c512:	4619      	mov	r1, r3
 801c514:	482e      	ldr	r0, [pc, #184]	; (801c5d0 <spi_data_read+0x15c>)
 801c516:	f002 f815 	bl	801e544 <iprintf>
 801c51a:	200d      	movs	r0, #13
 801c51c:	f002 f82a 	bl	801e574 <putchar>
            result = N_FAIL;
 801c520:	23ff      	movs	r3, #255	; 0xff
 801c522:	747b      	strb	r3, [r7, #17]
            break;
 801c524:	e048      	b.n	801c5b8 <spi_data_read+0x144>
        }

        /**
            Read bytes
        **/
        if(M2M_SUCCESS != nmi_spi_read(&b[ix], nbytes)) {
 801c526:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801c52a:	687a      	ldr	r2, [r7, #4]
 801c52c:	4413      	add	r3, r2
 801c52e:	8a7a      	ldrh	r2, [r7, #18]
 801c530:	4611      	mov	r1, r2
 801c532:	4618      	mov	r0, r3
 801c534:	f7ff fdb6 	bl	801c0a4 <nmi_spi_read>
 801c538:	4603      	mov	r3, r0
 801c53a:	2b00      	cmp	r3, #0
 801c53c:	d00e      	beq.n	801c55c <spi_data_read+0xe8>
            M2M_ERR("[nmi spi]: Failed data block read, bus error...\n");
 801c53e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801c542:	4920      	ldr	r1, [pc, #128]	; (801c5c4 <spi_data_read+0x150>)
 801c544:	4820      	ldr	r0, [pc, #128]	; (801c5c8 <spi_data_read+0x154>)
 801c546:	f001 fffd 	bl	801e544 <iprintf>
 801c54a:	4822      	ldr	r0, [pc, #136]	; (801c5d4 <spi_data_read+0x160>)
 801c54c:	f002 f896 	bl	801e67c <puts>
 801c550:	200d      	movs	r0, #13
 801c552:	f002 f80f 	bl	801e574 <putchar>
            result = N_FAIL;
 801c556:	23ff      	movs	r3, #255	; 0xff
 801c558:	747b      	strb	r3, [r7, #17]
            break;
 801c55a:	e02d      	b.n	801c5b8 <spi_data_read+0x144>
        }
        if(!clockless)
 801c55c:	787b      	ldrb	r3, [r7, #1]
 801c55e:	2b00      	cmp	r3, #0
 801c560:	d11b      	bne.n	801c59a <spi_data_read+0x126>
        {
            /**
            Read Crc
            **/
            if(!gu8Crc_off) {
 801c562:	4b1d      	ldr	r3, [pc, #116]	; (801c5d8 <spi_data_read+0x164>)
 801c564:	781b      	ldrb	r3, [r3, #0]
 801c566:	2b00      	cmp	r3, #0
 801c568:	d117      	bne.n	801c59a <spi_data_read+0x126>
                if(M2M_SUCCESS != nmi_spi_read(crc, 2)) {
 801c56a:	f107 030c 	add.w	r3, r7, #12
 801c56e:	2102      	movs	r1, #2
 801c570:	4618      	mov	r0, r3
 801c572:	f7ff fd97 	bl	801c0a4 <nmi_spi_read>
 801c576:	4603      	mov	r3, r0
 801c578:	2b00      	cmp	r3, #0
 801c57a:	d00e      	beq.n	801c59a <spi_data_read+0x126>
                    M2M_ERR("[nmi spi]: Failed data block crc read, bus error...\n");
 801c57c:	f240 12c9 	movw	r2, #457	; 0x1c9
 801c580:	4910      	ldr	r1, [pc, #64]	; (801c5c4 <spi_data_read+0x150>)
 801c582:	4811      	ldr	r0, [pc, #68]	; (801c5c8 <spi_data_read+0x154>)
 801c584:	f001 ffde 	bl	801e544 <iprintf>
 801c588:	4814      	ldr	r0, [pc, #80]	; (801c5dc <spi_data_read+0x168>)
 801c58a:	f002 f877 	bl	801e67c <puts>
 801c58e:	200d      	movs	r0, #13
 801c590:	f001 fff0 	bl	801e574 <putchar>
                    result = N_FAIL;
 801c594:	23ff      	movs	r3, #255	; 0xff
 801c596:	747b      	strb	r3, [r7, #17]
                    break;
 801c598:	e00e      	b.n	801c5b8 <spi_data_read+0x144>
                }
            }
        }
        ix += nbytes;
 801c59a:	8aba      	ldrh	r2, [r7, #20]
 801c59c:	8a7b      	ldrh	r3, [r7, #18]
 801c59e:	4413      	add	r3, r2
 801c5a0:	b29b      	uxth	r3, r3
 801c5a2:	82bb      	strh	r3, [r7, #20]
        sz -= nbytes;
 801c5a4:	8a7b      	ldrh	r3, [r7, #18]
 801c5a6:	887a      	ldrh	r2, [r7, #2]
 801c5a8:	1ad3      	subs	r3, r2, r3
 801c5aa:	807b      	strh	r3, [r7, #2]

    } while(sz);
 801c5ac:	887b      	ldrh	r3, [r7, #2]
 801c5ae:	2b00      	cmp	r3, #0
 801c5b0:	f47f af6c 	bne.w	801c48c <spi_data_read+0x18>
 801c5b4:	e000      	b.n	801c5b8 <spi_data_read+0x144>
            break;
 801c5b6:	bf00      	nop

    return result;
 801c5b8:	f997 3011 	ldrsb.w	r3, [r7, #17]
}
 801c5bc:	4618      	mov	r0, r3
 801c5be:	3718      	adds	r7, #24
 801c5c0:	46bd      	mov	sp, r7
 801c5c2:	bd80      	pop	{r7, pc}
 801c5c4:	080292d0 	.word	0x080292d0
 801c5c8:	080210ec 	.word	0x080210ec
 801c5cc:	08021234 	.word	0x08021234
 801c5d0:	08021268 	.word	0x08021268
 801c5d4:	08021298 	.word	0x08021298
 801c5d8:	2001df05 	.word	0x2001df05
 801c5dc:	080212c8 	.word	0x080212c8

0801c5e0 <spi_data_write>:

static sint8 spi_data_write(uint8 *b, uint16 sz)
{
 801c5e0:	b580      	push	{r7, lr}
 801c5e2:	b086      	sub	sp, #24
 801c5e4:	af00      	add	r7, sp, #0
 801c5e6:	6078      	str	r0, [r7, #4]
 801c5e8:	460b      	mov	r3, r1
 801c5ea:	807b      	strh	r3, [r7, #2]
    sint16 ix = 0;
 801c5ec:	2300      	movs	r3, #0
 801c5ee:	82fb      	strh	r3, [r7, #22]
    uint16 nbytes;
    sint8 result = N_OK;
 801c5f0:	2300      	movs	r3, #0
 801c5f2:	74fb      	strb	r3, [r7, #19]
    uint8 cmd, order, crc[2] = {0};
 801c5f4:	2300      	movs	r3, #0
 801c5f6:	81bb      	strh	r3, [r7, #12]

    /**
        Data
    **/
    do {
        if(sz <= DATA_PKT_SZ)
 801c5f8:	887b      	ldrh	r3, [r7, #2]
 801c5fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c5fe:	d802      	bhi.n	801c606 <spi_data_write+0x26>
            nbytes = sz;
 801c600:	887b      	ldrh	r3, [r7, #2]
 801c602:	82bb      	strh	r3, [r7, #20]
 801c604:	e002      	b.n	801c60c <spi_data_write+0x2c>
        else
            nbytes = DATA_PKT_SZ;
 801c606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801c60a:	82bb      	strh	r3, [r7, #20]

        /**
            Write command
        **/
        cmd = 0xf0;
 801c60c:	23f0      	movs	r3, #240	; 0xf0
 801c60e:	747b      	strb	r3, [r7, #17]
        if(ix == 0)  {
 801c610:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c614:	2b00      	cmp	r3, #0
 801c616:	d109      	bne.n	801c62c <spi_data_write+0x4c>
            if(sz <= DATA_PKT_SZ)
 801c618:	887b      	ldrh	r3, [r7, #2]
 801c61a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c61e:	d802      	bhi.n	801c626 <spi_data_write+0x46>
                order = 0x3;
 801c620:	2303      	movs	r3, #3
 801c622:	74bb      	strb	r3, [r7, #18]
 801c624:	e00b      	b.n	801c63e <spi_data_write+0x5e>
            else
                order = 0x1;
 801c626:	2301      	movs	r3, #1
 801c628:	74bb      	strb	r3, [r7, #18]
 801c62a:	e008      	b.n	801c63e <spi_data_write+0x5e>
        } else {
            if(sz <= DATA_PKT_SZ)
 801c62c:	887b      	ldrh	r3, [r7, #2]
 801c62e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801c632:	d802      	bhi.n	801c63a <spi_data_write+0x5a>
                order = 0x3;
 801c634:	2303      	movs	r3, #3
 801c636:	74bb      	strb	r3, [r7, #18]
 801c638:	e001      	b.n	801c63e <spi_data_write+0x5e>
            else
                order = 0x2;
 801c63a:	2302      	movs	r3, #2
 801c63c:	74bb      	strb	r3, [r7, #18]
        }
        cmd |= order;
 801c63e:	7c7a      	ldrb	r2, [r7, #17]
 801c640:	7cbb      	ldrb	r3, [r7, #18]
 801c642:	4313      	orrs	r3, r2
 801c644:	b2db      	uxtb	r3, r3
 801c646:	747b      	strb	r3, [r7, #17]
        if(M2M_SUCCESS != nmi_spi_write(&cmd, 1)) {
 801c648:	f107 0311 	add.w	r3, r7, #17
 801c64c:	2101      	movs	r1, #1
 801c64e:	4618      	mov	r0, r3
 801c650:	f7ff fd3f 	bl	801c0d2 <nmi_spi_write>
 801c654:	4603      	mov	r3, r0
 801c656:	2b00      	cmp	r3, #0
 801c658:	d00e      	beq.n	801c678 <spi_data_write+0x98>
            M2M_ERR("[nmi spi]: Failed data block cmd write, bus error...\n");
 801c65a:	f240 12f9 	movw	r2, #505	; 0x1f9
 801c65e:	492b      	ldr	r1, [pc, #172]	; (801c70c <spi_data_write+0x12c>)
 801c660:	482b      	ldr	r0, [pc, #172]	; (801c710 <spi_data_write+0x130>)
 801c662:	f001 ff6f 	bl	801e544 <iprintf>
 801c666:	482b      	ldr	r0, [pc, #172]	; (801c714 <spi_data_write+0x134>)
 801c668:	f002 f808 	bl	801e67c <puts>
 801c66c:	200d      	movs	r0, #13
 801c66e:	f001 ff81 	bl	801e574 <putchar>
            result = N_FAIL;
 801c672:	23ff      	movs	r3, #255	; 0xff
 801c674:	74fb      	strb	r3, [r7, #19]
            break;
 801c676:	e043      	b.n	801c700 <spi_data_write+0x120>
        }

        /**
            Write data
        **/
        if(M2M_SUCCESS != nmi_spi_write(&b[ix], nbytes)) {
 801c678:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801c67c:	687a      	ldr	r2, [r7, #4]
 801c67e:	4413      	add	r3, r2
 801c680:	8aba      	ldrh	r2, [r7, #20]
 801c682:	4611      	mov	r1, r2
 801c684:	4618      	mov	r0, r3
 801c686:	f7ff fd24 	bl	801c0d2 <nmi_spi_write>
 801c68a:	4603      	mov	r3, r0
 801c68c:	2b00      	cmp	r3, #0
 801c68e:	d00e      	beq.n	801c6ae <spi_data_write+0xce>
            M2M_ERR("[nmi spi]: Failed data block write, bus error...\n");
 801c690:	f240 2202 	movw	r2, #514	; 0x202
 801c694:	491d      	ldr	r1, [pc, #116]	; (801c70c <spi_data_write+0x12c>)
 801c696:	481e      	ldr	r0, [pc, #120]	; (801c710 <spi_data_write+0x130>)
 801c698:	f001 ff54 	bl	801e544 <iprintf>
 801c69c:	481e      	ldr	r0, [pc, #120]	; (801c718 <spi_data_write+0x138>)
 801c69e:	f001 ffed 	bl	801e67c <puts>
 801c6a2:	200d      	movs	r0, #13
 801c6a4:	f001 ff66 	bl	801e574 <putchar>
            result = N_FAIL;
 801c6a8:	23ff      	movs	r3, #255	; 0xff
 801c6aa:	74fb      	strb	r3, [r7, #19]
            break;
 801c6ac:	e028      	b.n	801c700 <spi_data_write+0x120>
        }

        /**
            Write Crc
        **/
        if(!gu8Crc_off) {
 801c6ae:	4b1b      	ldr	r3, [pc, #108]	; (801c71c <spi_data_write+0x13c>)
 801c6b0:	781b      	ldrb	r3, [r3, #0]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d117      	bne.n	801c6e6 <spi_data_write+0x106>
            if(M2M_SUCCESS != nmi_spi_write(crc, 2)) {
 801c6b6:	f107 030c 	add.w	r3, r7, #12
 801c6ba:	2102      	movs	r1, #2
 801c6bc:	4618      	mov	r0, r3
 801c6be:	f7ff fd08 	bl	801c0d2 <nmi_spi_write>
 801c6c2:	4603      	mov	r3, r0
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	d00e      	beq.n	801c6e6 <spi_data_write+0x106>
                M2M_ERR("[nmi spi]: Failed data block crc write, bus error...\n");
 801c6c8:	f44f 7203 	mov.w	r2, #524	; 0x20c
 801c6cc:	490f      	ldr	r1, [pc, #60]	; (801c70c <spi_data_write+0x12c>)
 801c6ce:	4810      	ldr	r0, [pc, #64]	; (801c710 <spi_data_write+0x130>)
 801c6d0:	f001 ff38 	bl	801e544 <iprintf>
 801c6d4:	4812      	ldr	r0, [pc, #72]	; (801c720 <spi_data_write+0x140>)
 801c6d6:	f001 ffd1 	bl	801e67c <puts>
 801c6da:	200d      	movs	r0, #13
 801c6dc:	f001 ff4a 	bl	801e574 <putchar>
                result = N_FAIL;
 801c6e0:	23ff      	movs	r3, #255	; 0xff
 801c6e2:	74fb      	strb	r3, [r7, #19]
                break;
 801c6e4:	e00c      	b.n	801c700 <spi_data_write+0x120>
            }
        }

        ix += nbytes;
 801c6e6:	8afa      	ldrh	r2, [r7, #22]
 801c6e8:	8abb      	ldrh	r3, [r7, #20]
 801c6ea:	4413      	add	r3, r2
 801c6ec:	b29b      	uxth	r3, r3
 801c6ee:	82fb      	strh	r3, [r7, #22]
        sz -= nbytes;
 801c6f0:	887a      	ldrh	r2, [r7, #2]
 801c6f2:	8abb      	ldrh	r3, [r7, #20]
 801c6f4:	1ad3      	subs	r3, r2, r3
 801c6f6:	807b      	strh	r3, [r7, #2]
    } while(sz);
 801c6f8:	887b      	ldrh	r3, [r7, #2]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	f47f af7c 	bne.w	801c5f8 <spi_data_write+0x18>


    return result;
 801c700:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801c704:	4618      	mov	r0, r3
 801c706:	3718      	adds	r7, #24
 801c708:	46bd      	mov	sp, r7
 801c70a:	bd80      	pop	{r7, pc}
 801c70c:	080292e0 	.word	0x080292e0
 801c710:	080210ec 	.word	0x080210ec
 801c714:	080212fc 	.word	0x080212fc
 801c718:	08021334 	.word	0x08021334
 801c71c:	2001df05 	.word	0x2001df05
 801c720:	08021368 	.word	0x08021368

0801c724 <nm_spi_write_reg>:
 *  @param[in]  u32Val
 *                  Value to be written to the register
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_reg(uint32 addr, uint32 u32data)
{
 801c724:	b580      	push	{r7, lr}
 801c726:	b086      	sub	sp, #24
 801c728:	af02      	add	r7, sp, #8
 801c72a:	6078      	str	r0, [r7, #4]
 801c72c:	6039      	str	r1, [r7, #0]
    uint8 retry = SPI_RETRY_COUNT;
 801c72e:	230a      	movs	r3, #10
 801c730:	73fb      	strb	r3, [r7, #15]
    sint8 result = N_OK;
 801c732:	2300      	movs	r3, #0
 801c734:	73bb      	strb	r3, [r7, #14]
    uint8 cmd = CMD_SINGLE_WRITE;
 801c736:	23c9      	movs	r3, #201	; 0xc9
 801c738:	737b      	strb	r3, [r7, #13]
    uint8 clockless = 0;
 801c73a:	2300      	movs	r3, #0
 801c73c:	733b      	strb	r3, [r7, #12]

_RETRY_:
    if(addr <= 0x30)
 801c73e:	687b      	ldr	r3, [r7, #4]
 801c740:	2b30      	cmp	r3, #48	; 0x30
 801c742:	d803      	bhi.n	801c74c <nm_spi_write_reg+0x28>
    {
        /**
        NMC1000 clockless registers.
        **/
        cmd = CMD_INTERNAL_WRITE;
 801c744:	23c3      	movs	r3, #195	; 0xc3
 801c746:	737b      	strb	r3, [r7, #13]
        clockless = 1;
 801c748:	2301      	movs	r3, #1
 801c74a:	733b      	strb	r3, [r7, #12]
    //  cmd = CMD_SINGLE_WRITE;
    //  clockless = 0;
    //}

#if defined USE_OLD_SPI_SW
    result = spi_cmd(cmd, addr, u32data, 4, clockless);
 801c74c:	7b78      	ldrb	r0, [r7, #13]
 801c74e:	7b3b      	ldrb	r3, [r7, #12]
 801c750:	9300      	str	r3, [sp, #0]
 801c752:	2304      	movs	r3, #4
 801c754:	683a      	ldr	r2, [r7, #0]
 801c756:	6879      	ldr	r1, [r7, #4]
 801c758:	f7ff fd06 	bl	801c168 <spi_cmd>
 801c75c:	4603      	mov	r3, r0
 801c75e:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801c760:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c764:	2b00      	cmp	r3, #0
 801c766:	d00d      	beq.n	801c784 <nm_spi_write_reg+0x60>
        M2M_ERR("[nmi spi]: Failed cmd, write reg (%08x)...\n", (unsigned int)addr);
 801c768:	f44f 7212 	mov.w	r2, #584	; 0x248
 801c76c:	492a      	ldr	r1, [pc, #168]	; (801c818 <nm_spi_write_reg+0xf4>)
 801c76e:	482b      	ldr	r0, [pc, #172]	; (801c81c <nm_spi_write_reg+0xf8>)
 801c770:	f001 fee8 	bl	801e544 <iprintf>
 801c774:	6879      	ldr	r1, [r7, #4]
 801c776:	482a      	ldr	r0, [pc, #168]	; (801c820 <nm_spi_write_reg+0xfc>)
 801c778:	f001 fee4 	bl	801e544 <iprintf>
 801c77c:	200d      	movs	r0, #13
 801c77e:	f001 fef9 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c782:	e018      	b.n	801c7b6 <nm_spi_write_reg+0x92>
#endif
    }

    result = spi_cmd_rsp(cmd);
 801c784:	7b7b      	ldrb	r3, [r7, #13]
 801c786:	4618      	mov	r0, r3
 801c788:	f7ff fdec 	bl	801c364 <spi_cmd_rsp>
 801c78c:	4603      	mov	r3, r0
 801c78e:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801c790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c794:	2b00      	cmp	r3, #0
 801c796:	d00d      	beq.n	801c7b4 <nm_spi_write_reg+0x90>
        M2M_ERR("[nmi spi]: Failed cmd response, write reg (%08x)...\n", (unsigned int)addr);
 801c798:	f240 2252 	movw	r2, #594	; 0x252
 801c79c:	491e      	ldr	r1, [pc, #120]	; (801c818 <nm_spi_write_reg+0xf4>)
 801c79e:	481f      	ldr	r0, [pc, #124]	; (801c81c <nm_spi_write_reg+0xf8>)
 801c7a0:	f001 fed0 	bl	801e544 <iprintf>
 801c7a4:	6879      	ldr	r1, [r7, #4]
 801c7a6:	481f      	ldr	r0, [pc, #124]	; (801c824 <nm_spi_write_reg+0x100>)
 801c7a8:	f001 fecc 	bl	801e544 <iprintf>
 801c7ac:	200d      	movs	r0, #13
 801c7ae:	f001 fee1 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c7b2:	e000      	b.n	801c7b6 <nm_spi_write_reg+0x92>
		goto _FAIL_;
#endif
    }

#endif
_FAIL_:
 801c7b4:	bf00      	nop
    if(result != N_OK)
 801c7b6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d026      	beq.n	801c80c <nm_spi_write_reg+0xe8>
    {
        nm_bsp_sleep(1);
 801c7be:	2001      	movs	r0, #1
 801c7c0:	f7fc faa0 	bl	8018d04 <nm_bsp_sleep>
        spi_cmd(CMD_RESET, 0, 0, 0, 0);
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	9300      	str	r3, [sp, #0]
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	2100      	movs	r1, #0
 801c7ce:	20cf      	movs	r0, #207	; 0xcf
 801c7d0:	f7ff fcca 	bl	801c168 <spi_cmd>
        spi_cmd_rsp(CMD_RESET);
 801c7d4:	20cf      	movs	r0, #207	; 0xcf
 801c7d6:	f7ff fdc5 	bl	801c364 <spi_cmd_rsp>
        M2M_ERR("Reset and retry %d %lx %lx\n", retry, addr, u32data);
 801c7da:	f240 226d 	movw	r2, #621	; 0x26d
 801c7de:	490e      	ldr	r1, [pc, #56]	; (801c818 <nm_spi_write_reg+0xf4>)
 801c7e0:	480e      	ldr	r0, [pc, #56]	; (801c81c <nm_spi_write_reg+0xf8>)
 801c7e2:	f001 feaf 	bl	801e544 <iprintf>
 801c7e6:	7bf9      	ldrb	r1, [r7, #15]
 801c7e8:	683b      	ldr	r3, [r7, #0]
 801c7ea:	687a      	ldr	r2, [r7, #4]
 801c7ec:	480e      	ldr	r0, [pc, #56]	; (801c828 <nm_spi_write_reg+0x104>)
 801c7ee:	f001 fea9 	bl	801e544 <iprintf>
 801c7f2:	200d      	movs	r0, #13
 801c7f4:	f001 febe 	bl	801e574 <putchar>
        nm_bsp_sleep(1);
 801c7f8:	2001      	movs	r0, #1
 801c7fa:	f7fc fa83 	bl	8018d04 <nm_bsp_sleep>
        retry--;
 801c7fe:	7bfb      	ldrb	r3, [r7, #15]
 801c800:	3b01      	subs	r3, #1
 801c802:	73fb      	strb	r3, [r7, #15]
        if(retry) goto _RETRY_;
 801c804:	7bfb      	ldrb	r3, [r7, #15]
 801c806:	2b00      	cmp	r3, #0
 801c808:	d000      	beq.n	801c80c <nm_spi_write_reg+0xe8>
 801c80a:	e798      	b.n	801c73e <nm_spi_write_reg+0x1a>
    }

    return result;
 801c80c:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 801c810:	4618      	mov	r0, r3
 801c812:	3710      	adds	r7, #16
 801c814:	46bd      	mov	sp, r7
 801c816:	bd80      	pop	{r7, pc}
 801c818:	080292f0 	.word	0x080292f0
 801c81c:	080210ec 	.word	0x080210ec
 801c820:	080213a0 	.word	0x080213a0
 801c824:	080213cc 	.word	0x080213cc
 801c828:	08021404 	.word	0x08021404

0801c82c <nm_spi_write_block>:
 *  @param[in]  u16Sz
 *                  Number of bytes to write. The buffer size must be >= u16Sz
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_write_block(uint32 addr, uint8 *buf, uint16 size)
{
 801c82c:	b580      	push	{r7, lr}
 801c82e:	b088      	sub	sp, #32
 801c830:	af02      	add	r7, sp, #8
 801c832:	60f8      	str	r0, [r7, #12]
 801c834:	60b9      	str	r1, [r7, #8]
 801c836:	4613      	mov	r3, r2
 801c838:	80fb      	strh	r3, [r7, #6]
    sint8 result;
    uint8 retry = SPI_RETRY_COUNT;
 801c83a:	230a      	movs	r3, #10
 801c83c:	75bb      	strb	r3, [r7, #22]
    uint8 cmd = CMD_DMA_EXT_WRITE;
 801c83e:	23c7      	movs	r3, #199	; 0xc7
 801c840:	757b      	strb	r3, [r7, #21]
    /**
        Command
    **/
#if defined USE_OLD_SPI_SW
    //Workaround hardware problem with single byte transfers over SPI bus
    if(size == 1)
 801c842:	88fb      	ldrh	r3, [r7, #6]
 801c844:	2b01      	cmp	r3, #1
 801c846:	d101      	bne.n	801c84c <nm_spi_write_block+0x20>
        size = 2;
 801c848:	2302      	movs	r3, #2
 801c84a:	80fb      	strh	r3, [r7, #6]

    result = spi_cmd(cmd, addr, 0, size, 0);
 801c84c:	88fb      	ldrh	r3, [r7, #6]
 801c84e:	7d78      	ldrb	r0, [r7, #21]
 801c850:	2200      	movs	r2, #0
 801c852:	9200      	str	r2, [sp, #0]
 801c854:	2200      	movs	r2, #0
 801c856:	68f9      	ldr	r1, [r7, #12]
 801c858:	f7ff fc86 	bl	801c168 <spi_cmd>
 801c85c:	4603      	mov	r3, r0
 801c85e:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801c860:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c864:	2b00      	cmp	r3, #0
 801c866:	d00d      	beq.n	801c884 <nm_spi_write_block+0x58>
        M2M_ERR("[nmi spi]: Failed cmd, write block (%08x)...\n", (unsigned int)addr);
 801c868:	f240 2293 	movw	r2, #659	; 0x293
 801c86c:	4936      	ldr	r1, [pc, #216]	; (801c948 <nm_spi_write_block+0x11c>)
 801c86e:	4837      	ldr	r0, [pc, #220]	; (801c94c <nm_spi_write_block+0x120>)
 801c870:	f001 fe68 	bl	801e544 <iprintf>
 801c874:	68f9      	ldr	r1, [r7, #12]
 801c876:	4836      	ldr	r0, [pc, #216]	; (801c950 <nm_spi_write_block+0x124>)
 801c878:	f001 fe64 	bl	801e544 <iprintf>
 801c87c:	200d      	movs	r0, #13
 801c87e:	f001 fe79 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c882:	e030      	b.n	801c8e6 <nm_spi_write_block+0xba>
#endif
    }

    result = spi_cmd_rsp(cmd);
 801c884:	7d7b      	ldrb	r3, [r7, #21]
 801c886:	4618      	mov	r0, r3
 801c888:	f7ff fd6c 	bl	801c364 <spi_cmd_rsp>
 801c88c:	4603      	mov	r3, r0
 801c88e:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801c890:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d00d      	beq.n	801c8b4 <nm_spi_write_block+0x88>
        M2M_ERR("[nmi spi ]: Failed cmd response, write block (%08x)...\n", (unsigned int)addr);
 801c898:	f240 229d 	movw	r2, #669	; 0x29d
 801c89c:	492a      	ldr	r1, [pc, #168]	; (801c948 <nm_spi_write_block+0x11c>)
 801c89e:	482b      	ldr	r0, [pc, #172]	; (801c94c <nm_spi_write_block+0x120>)
 801c8a0:	f001 fe50 	bl	801e544 <iprintf>
 801c8a4:	68f9      	ldr	r1, [r7, #12]
 801c8a6:	482b      	ldr	r0, [pc, #172]	; (801c954 <nm_spi_write_block+0x128>)
 801c8a8:	f001 fe4c 	bl	801e544 <iprintf>
 801c8ac:	200d      	movs	r0, #13
 801c8ae:	f001 fe61 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c8b2:	e018      	b.n	801c8e6 <nm_spi_write_block+0xba>
#endif

    /**
        Data
    **/
    result = spi_data_write(buf, size);
 801c8b4:	88fb      	ldrh	r3, [r7, #6]
 801c8b6:	4619      	mov	r1, r3
 801c8b8:	68b8      	ldr	r0, [r7, #8]
 801c8ba:	f7ff fe91 	bl	801c5e0 <spi_data_write>
 801c8be:	4603      	mov	r3, r0
 801c8c0:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801c8c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	d00c      	beq.n	801c8e4 <nm_spi_write_block+0xb8>
        M2M_ERR("[nmi spi]: Failed block data write...\n");
 801c8ca:	f240 22b5 	movw	r2, #693	; 0x2b5
 801c8ce:	491e      	ldr	r1, [pc, #120]	; (801c948 <nm_spi_write_block+0x11c>)
 801c8d0:	481e      	ldr	r0, [pc, #120]	; (801c94c <nm_spi_write_block+0x120>)
 801c8d2:	f001 fe37 	bl	801e544 <iprintf>
 801c8d6:	4820      	ldr	r0, [pc, #128]	; (801c958 <nm_spi_write_block+0x12c>)
 801c8d8:	f001 fed0 	bl	801e67c <puts>
 801c8dc:	200d      	movs	r0, #13
 801c8de:	f001 fe49 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c8e2:	e000      	b.n	801c8e6 <nm_spi_write_block+0xba>
        M2M_ERR("[nmi spi]: Failed block data write...\n");
		goto _FAIL_;
    }
#endif

_FAIL_:
 801c8e4:	bf00      	nop
    if(result != N_OK)
 801c8e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d026      	beq.n	801c93c <nm_spi_write_block+0x110>
    {
        nm_bsp_sleep(1);
 801c8ee:	2001      	movs	r0, #1
 801c8f0:	f7fc fa08 	bl	8018d04 <nm_bsp_sleep>
        spi_cmd(CMD_RESET, 0, 0, 0, 0);
 801c8f4:	2300      	movs	r3, #0
 801c8f6:	9300      	str	r3, [sp, #0]
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	2100      	movs	r1, #0
 801c8fe:	20cf      	movs	r0, #207	; 0xcf
 801c900:	f7ff fc32 	bl	801c168 <spi_cmd>
        spi_cmd_rsp(CMD_RESET);
 801c904:	20cf      	movs	r0, #207	; 0xcf
 801c906:	f7ff fd2d 	bl	801c364 <spi_cmd_rsp>
        M2M_ERR("Reset and retry %d %lx %d\n", retry, addr, size);
 801c90a:	f240 22cd 	movw	r2, #717	; 0x2cd
 801c90e:	490e      	ldr	r1, [pc, #56]	; (801c948 <nm_spi_write_block+0x11c>)
 801c910:	480e      	ldr	r0, [pc, #56]	; (801c94c <nm_spi_write_block+0x120>)
 801c912:	f001 fe17 	bl	801e544 <iprintf>
 801c916:	7db9      	ldrb	r1, [r7, #22]
 801c918:	88fb      	ldrh	r3, [r7, #6]
 801c91a:	68fa      	ldr	r2, [r7, #12]
 801c91c:	480f      	ldr	r0, [pc, #60]	; (801c95c <nm_spi_write_block+0x130>)
 801c91e:	f001 fe11 	bl	801e544 <iprintf>
 801c922:	200d      	movs	r0, #13
 801c924:	f001 fe26 	bl	801e574 <putchar>
        nm_bsp_sleep(1);
 801c928:	2001      	movs	r0, #1
 801c92a:	f7fc f9eb 	bl	8018d04 <nm_bsp_sleep>
        retry--;
 801c92e:	7dbb      	ldrb	r3, [r7, #22]
 801c930:	3b01      	subs	r3, #1
 801c932:	75bb      	strb	r3, [r7, #22]
        if(retry) goto _RETRY_;
 801c934:	7dbb      	ldrb	r3, [r7, #22]
 801c936:	2b00      	cmp	r3, #0
 801c938:	d000      	beq.n	801c93c <nm_spi_write_block+0x110>
 801c93a:	e782      	b.n	801c842 <nm_spi_write_block+0x16>
    }


    return result;
 801c93c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801c940:	4618      	mov	r0, r3
 801c942:	3718      	adds	r7, #24
 801c944:	46bd      	mov	sp, r7
 801c946:	bd80      	pop	{r7, pc}
 801c948:	08029304 	.word	0x08029304
 801c94c:	080210ec 	.word	0x080210ec
 801c950:	08021420 	.word	0x08021420
 801c954:	08021450 	.word	0x08021450
 801c958:	08021488 	.word	0x08021488
 801c95c:	080214b0 	.word	0x080214b0

0801c960 <nm_spi_read_reg_with_ret>:
 *  @param[out] pu32RetVal
 *                  Pointer to u32 variable used to return the read value
 *  @return     @ref M2M_SUCCESS in case of success and M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_reg_with_ret(uint32 addr, uint32 *u32data)
{
 801c960:	b580      	push	{r7, lr}
 801c962:	b086      	sub	sp, #24
 801c964:	af02      	add	r7, sp, #8
 801c966:	6078      	str	r0, [r7, #4]
 801c968:	6039      	str	r1, [r7, #0]
    uint8 retry = SPI_RETRY_COUNT;
 801c96a:	230a      	movs	r3, #10
 801c96c:	73fb      	strb	r3, [r7, #15]
    sint8 result = N_OK;
 801c96e:	2300      	movs	r3, #0
 801c970:	73bb      	strb	r3, [r7, #14]
    uint8 cmd = CMD_SINGLE_READ;
 801c972:	23ca      	movs	r3, #202	; 0xca
 801c974:	737b      	strb	r3, [r7, #13]
    uint8 tmp[4];
    uint8 clockless = 0;
 801c976:	2300      	movs	r3, #0
 801c978:	733b      	strb	r3, [r7, #12]

_RETRY_:

    if(addr <= 0xff)
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	2bff      	cmp	r3, #255	; 0xff
 801c97e:	d803      	bhi.n	801c988 <nm_spi_read_reg_with_ret+0x28>
    {
        /**
        NMC1000 clockless registers.
        **/
        cmd = CMD_INTERNAL_READ;
 801c980:	23c4      	movs	r3, #196	; 0xc4
 801c982:	737b      	strb	r3, [r7, #13]
        clockless = 1;
 801c984:	2301      	movs	r3, #1
 801c986:	733b      	strb	r3, [r7, #12]
    }

#if defined USE_OLD_SPI_SW
    result = spi_cmd(cmd, addr, 0, 4, clockless);
 801c988:	7b78      	ldrb	r0, [r7, #13]
 801c98a:	7b3b      	ldrb	r3, [r7, #12]
 801c98c:	9300      	str	r3, [sp, #0]
 801c98e:	2304      	movs	r3, #4
 801c990:	2200      	movs	r2, #0
 801c992:	6879      	ldr	r1, [r7, #4]
 801c994:	f7ff fbe8 	bl	801c168 <spi_cmd>
 801c998:	4603      	mov	r3, r0
 801c99a:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801c99c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c9a0:	2b00      	cmp	r3, #0
 801c9a2:	d00d      	beq.n	801c9c0 <nm_spi_read_reg_with_ret+0x60>
        M2M_ERR("[nmi spi]: Failed cmd, read reg (%08x)...\n", (unsigned int)addr);
 801c9a4:	f240 22f6 	movw	r2, #758	; 0x2f6
 801c9a8:	493d      	ldr	r1, [pc, #244]	; (801caa0 <nm_spi_read_reg_with_ret+0x140>)
 801c9aa:	483e      	ldr	r0, [pc, #248]	; (801caa4 <nm_spi_read_reg_with_ret+0x144>)
 801c9ac:	f001 fdca 	bl	801e544 <iprintf>
 801c9b0:	6879      	ldr	r1, [r7, #4]
 801c9b2:	483d      	ldr	r0, [pc, #244]	; (801caa8 <nm_spi_read_reg_with_ret+0x148>)
 801c9b4:	f001 fdc6 	bl	801e544 <iprintf>
 801c9b8:	200d      	movs	r0, #13
 801c9ba:	f001 fddb 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c9be:	e03e      	b.n	801ca3e <nm_spi_read_reg_with_ret+0xde>
#endif
    }

    result = spi_cmd_rsp(cmd);
 801c9c0:	7b7b      	ldrb	r3, [r7, #13]
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	f7ff fcce 	bl	801c364 <spi_cmd_rsp>
 801c9c8:	4603      	mov	r3, r0
 801c9ca:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801c9cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d00d      	beq.n	801c9f0 <nm_spi_read_reg_with_ret+0x90>
        M2M_ERR("[nmi spi]: Failed cmd response, read reg (%08x)...\n", (unsigned int)addr);
 801c9d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 801c9d8:	4931      	ldr	r1, [pc, #196]	; (801caa0 <nm_spi_read_reg_with_ret+0x140>)
 801c9da:	4832      	ldr	r0, [pc, #200]	; (801caa4 <nm_spi_read_reg_with_ret+0x144>)
 801c9dc:	f001 fdb2 	bl	801e544 <iprintf>
 801c9e0:	6879      	ldr	r1, [r7, #4]
 801c9e2:	4832      	ldr	r0, [pc, #200]	; (801caac <nm_spi_read_reg_with_ret+0x14c>)
 801c9e4:	f001 fdae 	bl	801e544 <iprintf>
 801c9e8:	200d      	movs	r0, #13
 801c9ea:	f001 fdc3 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801c9ee:	e026      	b.n	801ca3e <nm_spi_read_reg_with_ret+0xde>
#endif
    }

    /* to avoid endianess issues */
    result = spi_data_read(tmp, 4, clockless);
 801c9f0:	7b3a      	ldrb	r2, [r7, #12]
 801c9f2:	f107 0308 	add.w	r3, r7, #8
 801c9f6:	2104      	movs	r1, #4
 801c9f8:	4618      	mov	r0, r3
 801c9fa:	f7ff fd3b 	bl	801c474 <spi_data_read>
 801c9fe:	4603      	mov	r3, r0
 801ca00:	73bb      	strb	r3, [r7, #14]
    if(result != N_OK) {
 801ca02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca06:	2b00      	cmp	r3, #0
 801ca08:	d00c      	beq.n	801ca24 <nm_spi_read_reg_with_ret+0xc4>
        M2M_ERR("[nmi spi]: Failed data read...\n");
 801ca0a:	f240 320b 	movw	r2, #779	; 0x30b
 801ca0e:	4924      	ldr	r1, [pc, #144]	; (801caa0 <nm_spi_read_reg_with_ret+0x140>)
 801ca10:	4824      	ldr	r0, [pc, #144]	; (801caa4 <nm_spi_read_reg_with_ret+0x144>)
 801ca12:	f001 fd97 	bl	801e544 <iprintf>
 801ca16:	4826      	ldr	r0, [pc, #152]	; (801cab0 <nm_spi_read_reg_with_ret+0x150>)
 801ca18:	f001 fe30 	bl	801e67c <puts>
 801ca1c:	200d      	movs	r0, #13
 801ca1e:	f001 fda9 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801ca22:	e00c      	b.n	801ca3e <nm_spi_read_reg_with_ret+0xde>
#endif
    }

#endif

    *u32data = tmp[0] |
 801ca24:	7a3b      	ldrb	r3, [r7, #8]
 801ca26:	461a      	mov	r2, r3
               ((uint32)tmp[1] << 8) |
 801ca28:	7a7b      	ldrb	r3, [r7, #9]
 801ca2a:	021b      	lsls	r3, r3, #8
    *u32data = tmp[0] |
 801ca2c:	431a      	orrs	r2, r3
               ((uint32)tmp[2] << 16) |
 801ca2e:	7abb      	ldrb	r3, [r7, #10]
 801ca30:	041b      	lsls	r3, r3, #16
               ((uint32)tmp[1] << 8) |
 801ca32:	431a      	orrs	r2, r3
               ((uint32)tmp[3] << 24);
 801ca34:	7afb      	ldrb	r3, [r7, #11]
 801ca36:	061b      	lsls	r3, r3, #24
               ((uint32)tmp[2] << 16) |
 801ca38:	431a      	orrs	r2, r3
    *u32data = tmp[0] |
 801ca3a:	683b      	ldr	r3, [r7, #0]
 801ca3c:	601a      	str	r2, [r3, #0]

_FAIL_:
    if(result != N_OK)
 801ca3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801ca42:	2b00      	cmp	r3, #0
 801ca44:	d026      	beq.n	801ca94 <nm_spi_read_reg_with_ret+0x134>
    {
        nm_bsp_sleep(1);
 801ca46:	2001      	movs	r0, #1
 801ca48:	f7fc f95c 	bl	8018d04 <nm_bsp_sleep>
        spi_cmd(CMD_RESET, 0, 0, 0, 0);
 801ca4c:	2300      	movs	r3, #0
 801ca4e:	9300      	str	r3, [sp, #0]
 801ca50:	2300      	movs	r3, #0
 801ca52:	2200      	movs	r2, #0
 801ca54:	2100      	movs	r1, #0
 801ca56:	20cf      	movs	r0, #207	; 0xcf
 801ca58:	f7ff fb86 	bl	801c168 <spi_cmd>
        spi_cmd_rsp(CMD_RESET);
 801ca5c:	20cf      	movs	r0, #207	; 0xcf
 801ca5e:	f7ff fc81 	bl	801c364 <spi_cmd_rsp>
        M2M_ERR("Reset and retry %d %lx\n", retry, addr);
 801ca62:	f240 322a 	movw	r2, #810	; 0x32a
 801ca66:	490e      	ldr	r1, [pc, #56]	; (801caa0 <nm_spi_read_reg_with_ret+0x140>)
 801ca68:	480e      	ldr	r0, [pc, #56]	; (801caa4 <nm_spi_read_reg_with_ret+0x144>)
 801ca6a:	f001 fd6b 	bl	801e544 <iprintf>
 801ca6e:	7bfb      	ldrb	r3, [r7, #15]
 801ca70:	687a      	ldr	r2, [r7, #4]
 801ca72:	4619      	mov	r1, r3
 801ca74:	480f      	ldr	r0, [pc, #60]	; (801cab4 <nm_spi_read_reg_with_ret+0x154>)
 801ca76:	f001 fd65 	bl	801e544 <iprintf>
 801ca7a:	200d      	movs	r0, #13
 801ca7c:	f001 fd7a 	bl	801e574 <putchar>
        nm_bsp_sleep(1);
 801ca80:	2001      	movs	r0, #1
 801ca82:	f7fc f93f 	bl	8018d04 <nm_bsp_sleep>
        retry--;
 801ca86:	7bfb      	ldrb	r3, [r7, #15]
 801ca88:	3b01      	subs	r3, #1
 801ca8a:	73fb      	strb	r3, [r7, #15]
        if(retry) goto _RETRY_;
 801ca8c:	7bfb      	ldrb	r3, [r7, #15]
 801ca8e:	2b00      	cmp	r3, #0
 801ca90:	d000      	beq.n	801ca94 <nm_spi_read_reg_with_ret+0x134>
 801ca92:	e772      	b.n	801c97a <nm_spi_read_reg_with_ret+0x1a>
    }

    return result;
 801ca94:	f997 300e 	ldrsb.w	r3, [r7, #14]
}
 801ca98:	4618      	mov	r0, r3
 801ca9a:	3710      	adds	r7, #16
 801ca9c:	46bd      	mov	sp, r7
 801ca9e:	bd80      	pop	{r7, pc}
 801caa0:	08029318 	.word	0x08029318
 801caa4:	080210ec 	.word	0x080210ec
 801caa8:	080214cc 	.word	0x080214cc
 801caac:	080214f8 	.word	0x080214f8
 801cab0:	0802152c 	.word	0x0802152c
 801cab4:	0802154c 	.word	0x0802154c

0801cab8 <nm_spi_read_block>:
 *  @param[in]  u16Sz
 *                  Number of bytes to read. The buffer size must be >= u16Sz
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_read_block(uint32 addr, uint8 *buf, uint16 size)
{
 801cab8:	b580      	push	{r7, lr}
 801caba:	b088      	sub	sp, #32
 801cabc:	af02      	add	r7, sp, #8
 801cabe:	60f8      	str	r0, [r7, #12]
 801cac0:	60b9      	str	r1, [r7, #8]
 801cac2:	4613      	mov	r3, r2
 801cac4:	80fb      	strh	r3, [r7, #6]
    uint8 cmd = CMD_DMA_EXT_READ;
 801cac6:	23c8      	movs	r3, #200	; 0xc8
 801cac8:	753b      	strb	r3, [r7, #20]
    sint8 result;
    uint8 retry = SPI_RETRY_COUNT;
 801caca:	230a      	movs	r3, #10
 801cacc:	75bb      	strb	r3, [r7, #22]
#if defined USE_OLD_SPI_SW
    uint8 tmp[2];
    uint8 single_byte_workaround = 0;
 801cace:	2300      	movs	r3, #0
 801cad0:	757b      	strb	r3, [r7, #21]

    /**
        Command
    **/
#if defined USE_OLD_SPI_SW
    if(size == 1)
 801cad2:	88fb      	ldrh	r3, [r7, #6]
 801cad4:	2b01      	cmp	r3, #1
 801cad6:	d103      	bne.n	801cae0 <nm_spi_read_block+0x28>
    {
        //Workaround hardware problem with single byte transfers over SPI bus
        size = 2;
 801cad8:	2302      	movs	r3, #2
 801cada:	80fb      	strh	r3, [r7, #6]
        single_byte_workaround = 1;
 801cadc:	2301      	movs	r3, #1
 801cade:	757b      	strb	r3, [r7, #21]
    }
    result = spi_cmd(cmd, addr, 0, size, 0);
 801cae0:	88fb      	ldrh	r3, [r7, #6]
 801cae2:	7d38      	ldrb	r0, [r7, #20]
 801cae4:	2200      	movs	r2, #0
 801cae6:	9200      	str	r2, [sp, #0]
 801cae8:	2200      	movs	r2, #0
 801caea:	68f9      	ldr	r1, [r7, #12]
 801caec:	f7ff fb3c 	bl	801c168 <spi_cmd>
 801caf0:	4603      	mov	r3, r0
 801caf2:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801caf4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d00d      	beq.n	801cb18 <nm_spi_read_block+0x60>
        M2M_ERR("[nmi spi]: Failed cmd, read block (%08x)...\n", (unsigned int)addr);
 801cafc:	f240 3256 	movw	r2, #854	; 0x356
 801cb00:	493f      	ldr	r1, [pc, #252]	; (801cc00 <nm_spi_read_block+0x148>)
 801cb02:	4840      	ldr	r0, [pc, #256]	; (801cc04 <nm_spi_read_block+0x14c>)
 801cb04:	f001 fd1e 	bl	801e544 <iprintf>
 801cb08:	68f9      	ldr	r1, [r7, #12]
 801cb0a:	483f      	ldr	r0, [pc, #252]	; (801cc08 <nm_spi_read_block+0x150>)
 801cb0c:	f001 fd1a 	bl	801e544 <iprintf>
 801cb10:	200d      	movs	r0, #13
 801cb12:	f001 fd2f 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801cb16:	e041      	b.n	801cb9c <nm_spi_read_block+0xe4>
#endif
    }

    result = spi_cmd_rsp(cmd);
 801cb18:	7d3b      	ldrb	r3, [r7, #20]
 801cb1a:	4618      	mov	r0, r3
 801cb1c:	f7ff fc22 	bl	801c364 <spi_cmd_rsp>
 801cb20:	4603      	mov	r3, r0
 801cb22:	75fb      	strb	r3, [r7, #23]
    if(result != N_OK) {
 801cb24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d00d      	beq.n	801cb48 <nm_spi_read_block+0x90>
        M2M_ERR("[nmi spi]: Failed cmd response, read block (%08x)...\n", (unsigned int)addr);
 801cb2c:	f44f 7258 	mov.w	r2, #864	; 0x360
 801cb30:	4933      	ldr	r1, [pc, #204]	; (801cc00 <nm_spi_read_block+0x148>)
 801cb32:	4834      	ldr	r0, [pc, #208]	; (801cc04 <nm_spi_read_block+0x14c>)
 801cb34:	f001 fd06 	bl	801e544 <iprintf>
 801cb38:	68f9      	ldr	r1, [r7, #12]
 801cb3a:	4834      	ldr	r0, [pc, #208]	; (801cc0c <nm_spi_read_block+0x154>)
 801cb3c:	f001 fd02 	bl	801e544 <iprintf>
 801cb40:	200d      	movs	r0, #13
 801cb42:	f001 fd17 	bl	801e574 <putchar>
#if (defined XDMAC_SPI) && ((defined __SAME70Q21__) || (defined __SAME70Q21B__))
		return N_FAIL;
#else
		goto _FAIL_;
 801cb46:	e029      	b.n	801cb9c <nm_spi_read_block+0xe4>
    }

    /**
        Data
    **/
    if(single_byte_workaround)
 801cb48:	7d7b      	ldrb	r3, [r7, #21]
 801cb4a:	2b00      	cmp	r3, #0
 801cb4c:	d00c      	beq.n	801cb68 <nm_spi_read_block+0xb0>
    {
        result = spi_data_read(tmp, size, 0);
 801cb4e:	88f9      	ldrh	r1, [r7, #6]
 801cb50:	f107 0310 	add.w	r3, r7, #16
 801cb54:	2200      	movs	r2, #0
 801cb56:	4618      	mov	r0, r3
 801cb58:	f7ff fc8c 	bl	801c474 <spi_data_read>
 801cb5c:	4603      	mov	r3, r0
 801cb5e:	75fb      	strb	r3, [r7, #23]
        buf[0] = tmp[0];
 801cb60:	7c3a      	ldrb	r2, [r7, #16]
 801cb62:	68bb      	ldr	r3, [r7, #8]
 801cb64:	701a      	strb	r2, [r3, #0]
 801cb66:	e007      	b.n	801cb78 <nm_spi_read_block+0xc0>
    }
    else
        result = spi_data_read(buf, size, 0);
 801cb68:	88fb      	ldrh	r3, [r7, #6]
 801cb6a:	2200      	movs	r2, #0
 801cb6c:	4619      	mov	r1, r3
 801cb6e:	68b8      	ldr	r0, [r7, #8]
 801cb70:	f7ff fc80 	bl	801c474 <spi_data_read>
 801cb74:	4603      	mov	r3, r0
 801cb76:	75fb      	strb	r3, [r7, #23]

    if(result != N_OK) {
 801cb78:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cb7c:	2b00      	cmp	r3, #0
 801cb7e:	d00c      	beq.n	801cb9a <nm_spi_read_block+0xe2>
        M2M_ERR("[nmi spi]: Failed block data read...\n");
 801cb80:	f44f 725d 	mov.w	r2, #884	; 0x374
 801cb84:	491e      	ldr	r1, [pc, #120]	; (801cc00 <nm_spi_read_block+0x148>)
 801cb86:	481f      	ldr	r0, [pc, #124]	; (801cc04 <nm_spi_read_block+0x14c>)
 801cb88:	f001 fcdc 	bl	801e544 <iprintf>
 801cb8c:	4820      	ldr	r0, [pc, #128]	; (801cc10 <nm_spi_read_block+0x158>)
 801cb8e:	f001 fd75 	bl	801e67c <puts>
 801cb92:	200d      	movs	r0, #13
 801cb94:	f001 fcee 	bl	801e574 <putchar>
        goto _FAIL_;
 801cb98:	e000      	b.n	801cb9c <nm_spi_read_block+0xe4>
		goto _FAIL_;
#endif
    }
#endif

_FAIL_:
 801cb9a:	bf00      	nop
    if(result != N_OK)
 801cb9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	d026      	beq.n	801cbf2 <nm_spi_read_block+0x13a>
    {
        nm_bsp_sleep(1);
 801cba4:	2001      	movs	r0, #1
 801cba6:	f7fc f8ad 	bl	8018d04 <nm_bsp_sleep>
        spi_cmd(CMD_RESET, 0, 0, 0, 0);
 801cbaa:	2300      	movs	r3, #0
 801cbac:	9300      	str	r3, [sp, #0]
 801cbae:	2300      	movs	r3, #0
 801cbb0:	2200      	movs	r2, #0
 801cbb2:	2100      	movs	r1, #0
 801cbb4:	20cf      	movs	r0, #207	; 0xcf
 801cbb6:	f7ff fad7 	bl	801c168 <spi_cmd>
        spi_cmd_rsp(CMD_RESET);
 801cbba:	20cf      	movs	r0, #207	; 0xcf
 801cbbc:	f7ff fbd2 	bl	801c364 <spi_cmd_rsp>
        M2M_ERR("Reset and retry %d %lx %d\n", retry, addr, size);
 801cbc0:	f240 3289 	movw	r2, #905	; 0x389
 801cbc4:	490e      	ldr	r1, [pc, #56]	; (801cc00 <nm_spi_read_block+0x148>)
 801cbc6:	480f      	ldr	r0, [pc, #60]	; (801cc04 <nm_spi_read_block+0x14c>)
 801cbc8:	f001 fcbc 	bl	801e544 <iprintf>
 801cbcc:	7db9      	ldrb	r1, [r7, #22]
 801cbce:	88fb      	ldrh	r3, [r7, #6]
 801cbd0:	68fa      	ldr	r2, [r7, #12]
 801cbd2:	4810      	ldr	r0, [pc, #64]	; (801cc14 <nm_spi_read_block+0x15c>)
 801cbd4:	f001 fcb6 	bl	801e544 <iprintf>
 801cbd8:	200d      	movs	r0, #13
 801cbda:	f001 fccb 	bl	801e574 <putchar>
        nm_bsp_sleep(1);
 801cbde:	2001      	movs	r0, #1
 801cbe0:	f7fc f890 	bl	8018d04 <nm_bsp_sleep>
        retry--;
 801cbe4:	7dbb      	ldrb	r3, [r7, #22]
 801cbe6:	3b01      	subs	r3, #1
 801cbe8:	75bb      	strb	r3, [r7, #22]
        if(retry) goto _RETRY_;
 801cbea:	7dbb      	ldrb	r3, [r7, #22]
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d000      	beq.n	801cbf2 <nm_spi_read_block+0x13a>
 801cbf0:	e76f      	b.n	801cad2 <nm_spi_read_block+0x1a>
    }

    return result;
 801cbf2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801cbf6:	4618      	mov	r0, r3
 801cbf8:	3718      	adds	r7, #24
 801cbfa:	46bd      	mov	sp, r7
 801cbfc:	bd80      	pop	{r7, pc}
 801cbfe:	bf00      	nop
 801cc00:	08029334 	.word	0x08029334
 801cc04:	080210ec 	.word	0x080210ec
 801cc08:	08021564 	.word	0x08021564
 801cc0c:	08021594 	.word	0x08021594
 801cc10:	080215cc 	.word	0x080215cc
 801cc14:	080214b0 	.word	0x080214b0

0801cc18 <spi_init_pkt_sz>:
    Bus interfaces

********************************************/

static void spi_init_pkt_sz(void)
{
 801cc18:	b580      	push	{r7, lr}
 801cc1a:	b082      	sub	sp, #8
 801cc1c:	af00      	add	r7, sp, #0
    uint32 val32;

    /* Make sure SPI max. packet size fits the defined DATA_PKT_SZ.  */
    val32 = nm_spi_read_reg(SPI_BASE+0x24);
 801cc1e:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cc22:	f000 f8b1 	bl	801cd88 <nm_spi_read_reg>
 801cc26:	6078      	str	r0, [r7, #4]
    val32 &= ~(0x7 << 4);
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801cc2e:	607b      	str	r3, [r7, #4]
            break;
        case 4096:
            val32 |= (4 << 4);
            break;
        case 8192:
            val32 |= (5 << 4);
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801cc36:	607b      	str	r3, [r7, #4]
            break;
 801cc38:	bf00      	nop
    }
    nm_spi_write_reg(SPI_BASE+0x24, val32);
 801cc3a:	6879      	ldr	r1, [r7, #4]
 801cc3c:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cc40:	f7ff fd70 	bl	801c724 <nm_spi_write_reg>
}
 801cc44:	bf00      	nop
 801cc46:	3708      	adds	r7, #8
 801cc48:	46bd      	mov	sp, r7
 801cc4a:	bd80      	pop	{r7, pc}

0801cc4c <nm_spi_init>:
 *  @fn         nm_spi_init
 *  @brief      Initialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_init(void)
{
 801cc4c:	b580      	push	{r7, lr}
 801cc4e:	b082      	sub	sp, #8
 801cc50:	af00      	add	r7, sp, #0
    uint32 chipid;
    uint32 reg =0;
 801cc52:	2300      	movs	r3, #0
 801cc54:	603b      	str	r3, [r7, #0]

    /**
        configure protocol
    **/
    gu8Crc_off = 0;
 801cc56:	4b3e      	ldr	r3, [pc, #248]	; (801cd50 <nm_spi_init+0x104>)
 801cc58:	2200      	movs	r2, #0
 801cc5a:	701a      	strb	r2, [r3, #0]

    if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 801cc5c:	463b      	mov	r3, r7
 801cc5e:	4619      	mov	r1, r3
 801cc60:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cc64:	f7ff fe7c 	bl	801c960 <nm_spi_read_reg_with_ret>
 801cc68:	4603      	mov	r3, r0
 801cc6a:	2b00      	cmp	r3, #0
 801cc6c:	d026      	beq.n	801ccbc <nm_spi_init+0x70>
        /* Read failed. Try with CRC off. This might happen when module
        is removed but chip isn't reset*/
        gu8Crc_off = 1;
 801cc6e:	4b38      	ldr	r3, [pc, #224]	; (801cd50 <nm_spi_init+0x104>)
 801cc70:	2201      	movs	r2, #1
 801cc72:	701a      	strb	r2, [r3, #0]
        M2M_ERR("[nmi spi]: Failed internal read protocol with CRC on, retrying with CRC off...\n");
 801cc74:	f240 32ca 	movw	r2, #970	; 0x3ca
 801cc78:	4936      	ldr	r1, [pc, #216]	; (801cd54 <nm_spi_init+0x108>)
 801cc7a:	4837      	ldr	r0, [pc, #220]	; (801cd58 <nm_spi_init+0x10c>)
 801cc7c:	f001 fc62 	bl	801e544 <iprintf>
 801cc80:	4836      	ldr	r0, [pc, #216]	; (801cd5c <nm_spi_init+0x110>)
 801cc82:	f001 fcfb 	bl	801e67c <puts>
 801cc86:	200d      	movs	r0, #13
 801cc88:	f001 fc74 	bl	801e574 <putchar>
        if(nm_spi_read_reg_with_ret(NMI_SPI_PROTOCOL_CONFIG, &reg) != M2M_SUCCESS) {
 801cc8c:	463b      	mov	r3, r7
 801cc8e:	4619      	mov	r1, r3
 801cc90:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cc94:	f7ff fe64 	bl	801c960 <nm_spi_read_reg_with_ret>
 801cc98:	4603      	mov	r3, r0
 801cc9a:	2b00      	cmp	r3, #0
 801cc9c:	d00e      	beq.n	801ccbc <nm_spi_init+0x70>
            // Read failed with both CRC on and off, something went bad
            M2M_ERR("[nmi spi]: Failed internal read protocol...\n");
 801cc9e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801cca2:	492c      	ldr	r1, [pc, #176]	; (801cd54 <nm_spi_init+0x108>)
 801cca4:	482c      	ldr	r0, [pc, #176]	; (801cd58 <nm_spi_init+0x10c>)
 801cca6:	f001 fc4d 	bl	801e544 <iprintf>
 801ccaa:	482d      	ldr	r0, [pc, #180]	; (801cd60 <nm_spi_init+0x114>)
 801ccac:	f001 fce6 	bl	801e67c <puts>
 801ccb0:	200d      	movs	r0, #13
 801ccb2:	f001 fc5f 	bl	801e574 <putchar>
            return M2M_ERR_BUS_FAIL;
 801ccb6:	f06f 0305 	mvn.w	r3, #5
 801ccba:	e045      	b.n	801cd48 <nm_spi_init+0xfc>
        }
    }
    if(gu8Crc_off == 0)
 801ccbc:	4b24      	ldr	r3, [pc, #144]	; (801cd50 <nm_spi_init+0x104>)
 801ccbe:	781b      	ldrb	r3, [r3, #0]
 801ccc0:	2b00      	cmp	r3, #0
 801ccc2:	d126      	bne.n	801cd12 <nm_spi_init+0xc6>
    {
        reg &= ~0xc;    /* disable crc checking */
 801ccc4:	683b      	ldr	r3, [r7, #0]
 801ccc6:	f023 030c 	bic.w	r3, r3, #12
 801ccca:	603b      	str	r3, [r7, #0]
        reg &= ~0x70;
 801cccc:	683b      	ldr	r3, [r7, #0]
 801ccce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801ccd2:	603b      	str	r3, [r7, #0]
        reg |= (0x5 << 4);
 801ccd4:	683b      	ldr	r3, [r7, #0]
 801ccd6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 801ccda:	603b      	str	r3, [r7, #0]
        if(nm_spi_write_reg(NMI_SPI_PROTOCOL_CONFIG, reg) != M2M_SUCCESS) {
 801ccdc:	683b      	ldr	r3, [r7, #0]
 801ccde:	4619      	mov	r1, r3
 801cce0:	f64e 0024 	movw	r0, #59428	; 0xe824
 801cce4:	f7ff fd1e 	bl	801c724 <nm_spi_write_reg>
 801cce8:	4603      	mov	r3, r0
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d00e      	beq.n	801cd0c <nm_spi_init+0xc0>
            M2M_ERR("[nmi spi]: Failed internal write protocol reg...\n");
 801ccee:	f240 32d7 	movw	r2, #983	; 0x3d7
 801ccf2:	4918      	ldr	r1, [pc, #96]	; (801cd54 <nm_spi_init+0x108>)
 801ccf4:	4818      	ldr	r0, [pc, #96]	; (801cd58 <nm_spi_init+0x10c>)
 801ccf6:	f001 fc25 	bl	801e544 <iprintf>
 801ccfa:	481a      	ldr	r0, [pc, #104]	; (801cd64 <nm_spi_init+0x118>)
 801ccfc:	f001 fcbe 	bl	801e67c <puts>
 801cd00:	200d      	movs	r0, #13
 801cd02:	f001 fc37 	bl	801e574 <putchar>
            return M2M_ERR_BUS_FAIL;
 801cd06:	f06f 0305 	mvn.w	r3, #5
 801cd0a:	e01d      	b.n	801cd48 <nm_spi_init+0xfc>
        }
        gu8Crc_off = 1;
 801cd0c:	4b10      	ldr	r3, [pc, #64]	; (801cd50 <nm_spi_init+0x104>)
 801cd0e:	2201      	movs	r2, #1
 801cd10:	701a      	strb	r2, [r3, #0]
    }

    /**
        make sure can read back chip id correctly
    **/
    if(nm_spi_read_reg_with_ret(0x1000, &chipid) != M2M_SUCCESS) {
 801cd12:	1d3b      	adds	r3, r7, #4
 801cd14:	4619      	mov	r1, r3
 801cd16:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 801cd1a:	f7ff fe21 	bl	801c960 <nm_spi_read_reg_with_ret>
 801cd1e:	4603      	mov	r3, r0
 801cd20:	2b00      	cmp	r3, #0
 801cd22:	d00e      	beq.n	801cd42 <nm_spi_init+0xf6>
        M2M_ERR("[nmi spi]: Fail cmd read chip id...\n");
 801cd24:	f240 32e1 	movw	r2, #993	; 0x3e1
 801cd28:	490a      	ldr	r1, [pc, #40]	; (801cd54 <nm_spi_init+0x108>)
 801cd2a:	480b      	ldr	r0, [pc, #44]	; (801cd58 <nm_spi_init+0x10c>)
 801cd2c:	f001 fc0a 	bl	801e544 <iprintf>
 801cd30:	480d      	ldr	r0, [pc, #52]	; (801cd68 <nm_spi_init+0x11c>)
 801cd32:	f001 fca3 	bl	801e67c <puts>
 801cd36:	200d      	movs	r0, #13
 801cd38:	f001 fc1c 	bl	801e574 <putchar>
        return M2M_ERR_BUS_FAIL;
 801cd3c:	f06f 0305 	mvn.w	r3, #5
 801cd40:	e002      	b.n	801cd48 <nm_spi_init+0xfc>
    }

    M2M_DBG("[nmi spi]: chipid (%08x)\n", (unsigned int)chipid);
    spi_init_pkt_sz();
 801cd42:	f7ff ff69 	bl	801cc18 <spi_init_pkt_sz>

    return M2M_SUCCESS;
 801cd46:	2300      	movs	r3, #0
}
 801cd48:	4618      	mov	r0, r3
 801cd4a:	3708      	adds	r7, #8
 801cd4c:	46bd      	mov	sp, r7
 801cd4e:	bd80      	pop	{r7, pc}
 801cd50:	2001df05 	.word	0x2001df05
 801cd54:	08029348 	.word	0x08029348
 801cd58:	080210ec 	.word	0x080210ec
 801cd5c:	080215f4 	.word	0x080215f4
 801cd60:	08021644 	.word	0x08021644
 801cd64:	08021670 	.word	0x08021670
 801cd68:	080216a4 	.word	0x080216a4

0801cd6c <nm_spi_deinit>:
 *  @fn         nm_spi_init
 *  @brief      DeInitialize the SPI
 *  @return     @ref M2M_SUCCESS in case of success and @ref M2M_ERR_BUS_FAIL in case of failure
 */
sint8 nm_spi_deinit(void)
{
 801cd6c:	b480      	push	{r7}
 801cd6e:	af00      	add	r7, sp, #0
    gu8Crc_off = 0;
 801cd70:	4b04      	ldr	r3, [pc, #16]	; (801cd84 <nm_spi_deinit+0x18>)
 801cd72:	2200      	movs	r2, #0
 801cd74:	701a      	strb	r2, [r3, #0]
    return M2M_SUCCESS;
 801cd76:	2300      	movs	r3, #0
}
 801cd78:	4618      	mov	r0, r3
 801cd7a:	46bd      	mov	sp, r7
 801cd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd80:	4770      	bx	lr
 801cd82:	bf00      	nop
 801cd84:	2001df05 	.word	0x2001df05

0801cd88 <nm_spi_read_reg>:
*   @param [in] u32Addr
*               Register address
*   @return Register value
*/
uint32 nm_spi_read_reg(uint32 u32Addr)
{
 801cd88:	b580      	push	{r7, lr}
 801cd8a:	b084      	sub	sp, #16
 801cd8c:	af00      	add	r7, sp, #0
 801cd8e:	6078      	str	r0, [r7, #4]
    uint32 u32Val;

    nm_spi_read_reg_with_ret(u32Addr, &u32Val);
 801cd90:	f107 030c 	add.w	r3, r7, #12
 801cd94:	4619      	mov	r1, r3
 801cd96:	6878      	ldr	r0, [r7, #4]
 801cd98:	f7ff fde2 	bl	801c960 <nm_spi_read_reg_with_ret>

    return u32Val;
 801cd9c:	68fb      	ldr	r3, [r7, #12]
}
 801cd9e:	4618      	mov	r0, r3
 801cda0:	3710      	adds	r7, #16
 801cda2:	46bd      	mov	sp, r7
 801cda4:	bd80      	pop	{r7, pc}
	...

0801cda8 <Socket_ReadSocketData>:
Return
        None.
*********************************************************************/
NMI_API void Socket_ReadSocketData(SOCKET sock, tstrSocketRecvMsg *pstrRecv, uint8 u8SocketMsg,
                                   uint32 u32StartAddress, uint16 u16ReadCount)
{
 801cda8:	b580      	push	{r7, lr}
 801cdaa:	b088      	sub	sp, #32
 801cdac:	af00      	add	r7, sp, #0
 801cdae:	60b9      	str	r1, [r7, #8]
 801cdb0:	607b      	str	r3, [r7, #4]
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	73fb      	strb	r3, [r7, #15]
 801cdb6:	4613      	mov	r3, r2
 801cdb8:	73bb      	strb	r3, [r7, #14]
    uint32  u32Address = u32StartAddress;
 801cdba:	687b      	ldr	r3, [r7, #4]
 801cdbc:	61bb      	str	r3, [r7, #24]
    uint16  u16Read;
    sint16  s16Diff;

    pstrRecv->u16RemainingSize = u16ReadCount;
 801cdbe:	68bb      	ldr	r3, [r7, #8]
 801cdc0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801cdc2:	80da      	strh	r2, [r3, #6]
    if((u16ReadCount > 0) && (gastrSockets[sock].pu8UserBuffer != NULL) && (gastrSockets[sock].u16UserBufferSize > 0) && (gastrSockets[sock].bIsUsed == 1))
 801cdc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	f000 8093 	beq.w	801cef2 <Socket_ReadSocketData+0x14a>
 801cdcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cdd0:	4a4a      	ldr	r2, [pc, #296]	; (801cefc <Socket_ReadSocketData+0x154>)
 801cdd2:	011b      	lsls	r3, r3, #4
 801cdd4:	4413      	add	r3, r2
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	2b00      	cmp	r3, #0
 801cdda:	f000 808a 	beq.w	801cef2 <Socket_ReadSocketData+0x14a>
 801cdde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cde2:	4a46      	ldr	r2, [pc, #280]	; (801cefc <Socket_ReadSocketData+0x154>)
 801cde4:	011b      	lsls	r3, r3, #4
 801cde6:	4413      	add	r3, r2
 801cde8:	3304      	adds	r3, #4
 801cdea:	881b      	ldrh	r3, [r3, #0]
 801cdec:	b29b      	uxth	r3, r3
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	d07f      	beq.n	801cef2 <Socket_ReadSocketData+0x14a>
 801cdf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cdf6:	4a41      	ldr	r2, [pc, #260]	; (801cefc <Socket_ReadSocketData+0x154>)
 801cdf8:	011b      	lsls	r3, r3, #4
 801cdfa:	4413      	add	r3, r2
 801cdfc:	330a      	adds	r3, #10
 801cdfe:	781b      	ldrb	r3, [r3, #0]
 801ce00:	b2db      	uxtb	r3, r3
 801ce02:	2b01      	cmp	r3, #1
 801ce04:	d175      	bne.n	801cef2 <Socket_ReadSocketData+0x14a>
    {
        u16Read = u16ReadCount;
 801ce06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801ce08:	83fb      	strh	r3, [r7, #30]
        s16Diff = u16Read - gastrSockets[sock].u16UserBufferSize;
 801ce0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce0e:	4a3b      	ldr	r2, [pc, #236]	; (801cefc <Socket_ReadSocketData+0x154>)
 801ce10:	011b      	lsls	r3, r3, #4
 801ce12:	4413      	add	r3, r2
 801ce14:	3304      	adds	r3, #4
 801ce16:	881b      	ldrh	r3, [r3, #0]
 801ce18:	b29b      	uxth	r3, r3
 801ce1a:	8bfa      	ldrh	r2, [r7, #30]
 801ce1c:	1ad3      	subs	r3, r2, r3
 801ce1e:	b29b      	uxth	r3, r3
 801ce20:	82fb      	strh	r3, [r7, #22]
        if(s16Diff > 0)
 801ce22:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	dd07      	ble.n	801ce3a <Socket_ReadSocketData+0x92>
            u16Read = gastrSockets[sock].u16UserBufferSize;
 801ce2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce2e:	4a33      	ldr	r2, [pc, #204]	; (801cefc <Socket_ReadSocketData+0x154>)
 801ce30:	011b      	lsls	r3, r3, #4
 801ce32:	4413      	add	r3, r2
 801ce34:	3304      	adds	r3, #4
 801ce36:	881b      	ldrh	r3, [r3, #0]
 801ce38:	83fb      	strh	r3, [r7, #30]

        if(hif_receive(u32Address, gastrSockets[sock].pu8UserBuffer, u16Read, 1) == M2M_SUCCESS)
 801ce3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce3e:	4a2f      	ldr	r2, [pc, #188]	; (801cefc <Socket_ReadSocketData+0x154>)
 801ce40:	011b      	lsls	r3, r3, #4
 801ce42:	4413      	add	r3, r2
 801ce44:	6819      	ldr	r1, [r3, #0]
 801ce46:	8bfa      	ldrh	r2, [r7, #30]
 801ce48:	2301      	movs	r3, #1
 801ce4a:	69b8      	ldr	r0, [r7, #24]
 801ce4c:	f7fc ff38 	bl	8019cc0 <hif_receive>
 801ce50:	4603      	mov	r3, r0
 801ce52:	2b00      	cmp	r3, #0
 801ce54:	d142      	bne.n	801cedc <Socket_ReadSocketData+0x134>
        {
            pstrRecv->pu8Buffer         = gastrSockets[sock].pu8UserBuffer;
 801ce56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce5a:	4a28      	ldr	r2, [pc, #160]	; (801cefc <Socket_ReadSocketData+0x154>)
 801ce5c:	011b      	lsls	r3, r3, #4
 801ce5e:	4413      	add	r3, r2
 801ce60:	681a      	ldr	r2, [r3, #0]
 801ce62:	68bb      	ldr	r3, [r7, #8]
 801ce64:	601a      	str	r2, [r3, #0]
            pstrRecv->s16BufferSize     = u16Read;
 801ce66:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 801ce6a:	68bb      	ldr	r3, [r7, #8]
 801ce6c:	809a      	strh	r2, [r3, #4]
            pstrRecv->u16RemainingSize  -= u16Read;
 801ce6e:	68bb      	ldr	r3, [r7, #8]
 801ce70:	88da      	ldrh	r2, [r3, #6]
 801ce72:	8bfb      	ldrh	r3, [r7, #30]
 801ce74:	1ad3      	subs	r3, r2, r3
 801ce76:	b29a      	uxth	r2, r3
 801ce78:	68bb      	ldr	r3, [r7, #8]
 801ce7a:	80da      	strh	r2, [r3, #6]

            gastrSockets[sock].u16UserBufferSize -= u16Read;
 801ce7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce80:	4a1e      	ldr	r2, [pc, #120]	; (801cefc <Socket_ReadSocketData+0x154>)
 801ce82:	011b      	lsls	r3, r3, #4
 801ce84:	4413      	add	r3, r2
 801ce86:	3304      	adds	r3, #4
 801ce88:	881b      	ldrh	r3, [r3, #0]
 801ce8a:	b299      	uxth	r1, r3
 801ce8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ce90:	8bfa      	ldrh	r2, [r7, #30]
 801ce92:	1a8a      	subs	r2, r1, r2
 801ce94:	b291      	uxth	r1, r2
 801ce96:	4a19      	ldr	r2, [pc, #100]	; (801cefc <Socket_ReadSocketData+0x154>)
 801ce98:	011b      	lsls	r3, r3, #4
 801ce9a:	4413      	add	r3, r2
 801ce9c:	3304      	adds	r3, #4
 801ce9e:	460a      	mov	r2, r1
 801cea0:	801a      	strh	r2, [r3, #0]
            if(gastrSockets[sock].u16UserBufferSize == 0)
 801cea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801cea6:	4a15      	ldr	r2, [pc, #84]	; (801cefc <Socket_ReadSocketData+0x154>)
 801cea8:	011b      	lsls	r3, r3, #4
 801ceaa:	4413      	add	r3, r2
 801ceac:	3304      	adds	r3, #4
 801ceae:	881b      	ldrh	r3, [r3, #0]
 801ceb0:	b29b      	uxth	r3, r3
 801ceb2:	2b00      	cmp	r3, #0
 801ceb4:	d106      	bne.n	801cec4 <Socket_ReadSocketData+0x11c>
                gastrSockets[sock].pu8UserBuffer = NULL;
 801ceb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801ceba:	4a10      	ldr	r2, [pc, #64]	; (801cefc <Socket_ReadSocketData+0x154>)
 801cebc:	011b      	lsls	r3, r3, #4
 801cebe:	4413      	add	r3, r2
 801cec0:	2200      	movs	r2, #0
 801cec2:	601a      	str	r2, [r3, #0]

            if(gpfAppSocketCb)
 801cec4:	4b0e      	ldr	r3, [pc, #56]	; (801cf00 <Socket_ReadSocketData+0x158>)
 801cec6:	681b      	ldr	r3, [r3, #0]
 801cec8:	2b00      	cmp	r3, #0
 801ceca:	d012      	beq.n	801cef2 <Socket_ReadSocketData+0x14a>
                gpfAppSocketCb(sock, u8SocketMsg, pstrRecv);
 801cecc:	4b0c      	ldr	r3, [pc, #48]	; (801cf00 <Socket_ReadSocketData+0x158>)
 801cece:	681b      	ldr	r3, [r3, #0]
 801ced0:	7bb9      	ldrb	r1, [r7, #14]
 801ced2:	f997 000f 	ldrsb.w	r0, [r7, #15]
 801ced6:	68ba      	ldr	r2, [r7, #8]
 801ced8:	4798      	blx	r3
        else
        {
            M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
        }
    }
}
 801ceda:	e00a      	b.n	801cef2 <Socket_ReadSocketData+0x14a>
            M2M_INFO("(ERRR)Current <%d>\n", u16ReadCount);
 801cedc:	4809      	ldr	r0, [pc, #36]	; (801cf04 <Socket_ReadSocketData+0x15c>)
 801cede:	f001 fb31 	bl	801e544 <iprintf>
 801cee2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801cee4:	4619      	mov	r1, r3
 801cee6:	4808      	ldr	r0, [pc, #32]	; (801cf08 <Socket_ReadSocketData+0x160>)
 801cee8:	f001 fb2c 	bl	801e544 <iprintf>
 801ceec:	200d      	movs	r0, #13
 801ceee:	f001 fb41 	bl	801e574 <putchar>
}
 801cef2:	bf00      	nop
 801cef4:	3720      	adds	r7, #32
 801cef6:	46bd      	mov	sp, r7
 801cef8:	bd80      	pop	{r7, pc}
 801cefa:	bf00      	nop
 801cefc:	2001df08 	.word	0x2001df08
 801cf00:	2001dfcc 	.word	0x2001dfcc
 801cf04:	080216c8 	.word	0x080216c8
 801cf08:	080216d4 	.word	0x080216d4

0801cf0c <m2m_ip_cb>:

Return
        None.
*********************************************************************/
static void m2m_ip_cb(uint8 u8OpCode, uint16 u16BufferSize, uint32 u32Address)
{
 801cf0c:	b590      	push	{r4, r7, lr}
 801cf0e:	b0c5      	sub	sp, #276	; 0x114
 801cf10:	af02      	add	r7, sp, #8
 801cf12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801cf1a:	601a      	str	r2, [r3, #0]
 801cf1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf20:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801cf24:	4602      	mov	r2, r0
 801cf26:	701a      	strb	r2, [r3, #0]
 801cf28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf2c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801cf30:	460a      	mov	r2, r1
 801cf32:	801a      	strh	r2, [r3, #0]
    if(u8OpCode == SOCKET_CMD_BIND)
 801cf34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf38:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801cf3c:	781b      	ldrb	r3, [r3, #0]
 801cf3e:	2b41      	cmp	r3, #65	; 0x41
 801cf40:	d120      	bne.n	801cf84 <m2m_ip_cb+0x78>
    {
        tstrBindReply       strBindReply;
        tstrSocketBindMsg   strBind;

        if(hif_receive(u32Address, (uint8*)&strBindReply, sizeof(tstrBindReply), 0) == M2M_SUCCESS)
 801cf42:	f107 01f0 	add.w	r1, r7, #240	; 0xf0
 801cf46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf4a:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801cf4e:	2300      	movs	r3, #0
 801cf50:	2204      	movs	r2, #4
 801cf52:	6800      	ldr	r0, [r0, #0]
 801cf54:	f7fc feb4 	bl	8019cc0 <hif_receive>
 801cf58:	4603      	mov	r3, r0
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	f040 8296 	bne.w	801d48c <m2m_ip_cb+0x580>
        {
            strBind.status = strBindReply.s8Status;
 801cf60:	f997 30f1 	ldrsb.w	r3, [r7, #241]	; 0xf1
 801cf64:	f887 30ec 	strb.w	r3, [r7, #236]	; 0xec
            if(gpfAppSocketCb)
 801cf68:	4ba4      	ldr	r3, [pc, #656]	; (801d1fc <m2m_ip_cb+0x2f0>)
 801cf6a:	681b      	ldr	r3, [r3, #0]
 801cf6c:	2b00      	cmp	r3, #0
 801cf6e:	f000 828d 	beq.w	801d48c <m2m_ip_cb+0x580>
                gpfAppSocketCb(strBindReply.sock, SOCKET_MSG_BIND, &strBind);
 801cf72:	4ba2      	ldr	r3, [pc, #648]	; (801d1fc <m2m_ip_cb+0x2f0>)
 801cf74:	681b      	ldr	r3, [r3, #0]
 801cf76:	f997 00f0 	ldrsb.w	r0, [r7, #240]	; 0xf0
 801cf7a:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 801cf7e:	2101      	movs	r1, #1
 801cf80:	4798      	blx	r3
            {
                gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
            }
        }
    }
}
 801cf82:	e283      	b.n	801d48c <m2m_ip_cb+0x580>
    else if(u8OpCode == SOCKET_CMD_LISTEN)
 801cf84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf88:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801cf8c:	781b      	ldrb	r3, [r3, #0]
 801cf8e:	2b42      	cmp	r3, #66	; 0x42
 801cf90:	d120      	bne.n	801cfd4 <m2m_ip_cb+0xc8>
        if(hif_receive(u32Address, (uint8*)&strListenReply, sizeof(tstrListenReply), 0) == M2M_SUCCESS)
 801cf92:	f107 01e8 	add.w	r1, r7, #232	; 0xe8
 801cf96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cf9a:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801cf9e:	2300      	movs	r3, #0
 801cfa0:	2204      	movs	r2, #4
 801cfa2:	6800      	ldr	r0, [r0, #0]
 801cfa4:	f7fc fe8c 	bl	8019cc0 <hif_receive>
 801cfa8:	4603      	mov	r3, r0
 801cfaa:	2b00      	cmp	r3, #0
 801cfac:	f040 826e 	bne.w	801d48c <m2m_ip_cb+0x580>
            strListen.status = strListenReply.s8Status;
 801cfb0:	f997 30e9 	ldrsb.w	r3, [r7, #233]	; 0xe9
 801cfb4:	f887 30e4 	strb.w	r3, [r7, #228]	; 0xe4
            if(gpfAppSocketCb)
 801cfb8:	4b90      	ldr	r3, [pc, #576]	; (801d1fc <m2m_ip_cb+0x2f0>)
 801cfba:	681b      	ldr	r3, [r3, #0]
 801cfbc:	2b00      	cmp	r3, #0
 801cfbe:	f000 8265 	beq.w	801d48c <m2m_ip_cb+0x580>
                gpfAppSocketCb(strListenReply.sock, SOCKET_MSG_LISTEN, &strListen);
 801cfc2:	4b8e      	ldr	r3, [pc, #568]	; (801d1fc <m2m_ip_cb+0x2f0>)
 801cfc4:	681b      	ldr	r3, [r3, #0]
 801cfc6:	f997 00e8 	ldrsb.w	r0, [r7, #232]	; 0xe8
 801cfca:	f107 02e4 	add.w	r2, r7, #228	; 0xe4
 801cfce:	2102      	movs	r1, #2
 801cfd0:	4798      	blx	r3
}
 801cfd2:	e25b      	b.n	801d48c <m2m_ip_cb+0x580>
    else if(u8OpCode == SOCKET_CMD_ACCEPT)
 801cfd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cfd8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801cfdc:	781b      	ldrb	r3, [r3, #0]
 801cfde:	2b43      	cmp	r3, #67	; 0x43
 801cfe0:	d15e      	bne.n	801d0a0 <m2m_ip_cb+0x194>
        if(hif_receive(u32Address, (uint8*)&strAcceptReply, sizeof(tstrAcceptReply), 0) == M2M_SUCCESS)
 801cfe2:	f107 01d8 	add.w	r1, r7, #216	; 0xd8
 801cfe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801cfea:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801cfee:	2300      	movs	r3, #0
 801cff0:	220c      	movs	r2, #12
 801cff2:	6800      	ldr	r0, [r0, #0]
 801cff4:	f7fc fe64 	bl	8019cc0 <hif_receive>
 801cff8:	4603      	mov	r3, r0
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	f040 8246 	bne.w	801d48c <m2m_ip_cb+0x580>
            if(strAcceptReply.sConnectedSock >= 0)
 801d000:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d004:	2b00      	cmp	r3, #0
 801d006:	db2e      	blt.n	801d066 <m2m_ip_cb+0x15a>
                gastrSockets[strAcceptReply.sConnectedSock].u8SSLFlags  = 0;
 801d008:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d00c:	4a7c      	ldr	r2, [pc, #496]	; (801d200 <m2m_ip_cb+0x2f4>)
 801d00e:	011b      	lsls	r3, r3, #4
 801d010:	4413      	add	r3, r2
 801d012:	330b      	adds	r3, #11
 801d014:	2200      	movs	r2, #0
 801d016:	701a      	strb	r2, [r3, #0]
                gastrSockets[strAcceptReply.sConnectedSock].bIsUsed     = 1;
 801d018:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d01c:	4a78      	ldr	r2, [pc, #480]	; (801d200 <m2m_ip_cb+0x2f4>)
 801d01e:	011b      	lsls	r3, r3, #4
 801d020:	4413      	add	r3, r2
 801d022:	330a      	adds	r3, #10
 801d024:	2201      	movs	r2, #1
 801d026:	701a      	strb	r2, [r3, #0]
                ++gu16SessionID;
 801d028:	4b76      	ldr	r3, [pc, #472]	; (801d204 <m2m_ip_cb+0x2f8>)
 801d02a:	881b      	ldrh	r3, [r3, #0]
 801d02c:	b29b      	uxth	r3, r3
 801d02e:	3301      	adds	r3, #1
 801d030:	b29a      	uxth	r2, r3
 801d032:	4b74      	ldr	r3, [pc, #464]	; (801d204 <m2m_ip_cb+0x2f8>)
 801d034:	801a      	strh	r2, [r3, #0]
                if(gu16SessionID == 0)
 801d036:	4b73      	ldr	r3, [pc, #460]	; (801d204 <m2m_ip_cb+0x2f8>)
 801d038:	881b      	ldrh	r3, [r3, #0]
 801d03a:	b29b      	uxth	r3, r3
 801d03c:	2b00      	cmp	r3, #0
 801d03e:	d106      	bne.n	801d04e <m2m_ip_cb+0x142>
                    ++gu16SessionID;
 801d040:	4b70      	ldr	r3, [pc, #448]	; (801d204 <m2m_ip_cb+0x2f8>)
 801d042:	881b      	ldrh	r3, [r3, #0]
 801d044:	b29b      	uxth	r3, r3
 801d046:	3301      	adds	r3, #1
 801d048:	b29a      	uxth	r2, r3
 801d04a:	4b6e      	ldr	r3, [pc, #440]	; (801d204 <m2m_ip_cb+0x2f8>)
 801d04c:	801a      	strh	r2, [r3, #0]
                gastrSockets[strAcceptReply.sConnectedSock].u16SessionID = gu16SessionID;
 801d04e:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d052:	4618      	mov	r0, r3
 801d054:	4b6b      	ldr	r3, [pc, #428]	; (801d204 <m2m_ip_cb+0x2f8>)
 801d056:	881b      	ldrh	r3, [r3, #0]
 801d058:	b299      	uxth	r1, r3
 801d05a:	4a69      	ldr	r2, [pc, #420]	; (801d200 <m2m_ip_cb+0x2f4>)
 801d05c:	0103      	lsls	r3, r0, #4
 801d05e:	4413      	add	r3, r2
 801d060:	3306      	adds	r3, #6
 801d062:	460a      	mov	r2, r1
 801d064:	801a      	strh	r2, [r3, #0]
            strAccept.sock = strAcceptReply.sConnectedSock;
 801d066:	f997 30e1 	ldrsb.w	r3, [r7, #225]	; 0xe1
 801d06a:	f887 30c4 	strb.w	r3, [r7, #196]	; 0xc4
            strAccept.strAddr.sin_family        = AF_INET;
 801d06e:	2302      	movs	r3, #2
 801d070:	f8a7 30c8 	strh.w	r3, [r7, #200]	; 0xc8
            strAccept.strAddr.sin_port = strAcceptReply.strAddr.u16Port;
 801d074:	f8b7 30da 	ldrh.w	r3, [r7, #218]	; 0xda
 801d078:	f8a7 30ca 	strh.w	r3, [r7, #202]	; 0xca
            strAccept.strAddr.sin_addr.s_addr = strAcceptReply.strAddr.u32IPAddr;
 801d07c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801d080:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            if(gpfAppSocketCb)
 801d084:	4b5d      	ldr	r3, [pc, #372]	; (801d1fc <m2m_ip_cb+0x2f0>)
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	2b00      	cmp	r3, #0
 801d08a:	f000 81ff 	beq.w	801d48c <m2m_ip_cb+0x580>
                gpfAppSocketCb(strAcceptReply.sListenSock, SOCKET_MSG_ACCEPT, &strAccept);
 801d08e:	4b5b      	ldr	r3, [pc, #364]	; (801d1fc <m2m_ip_cb+0x2f0>)
 801d090:	681b      	ldr	r3, [r3, #0]
 801d092:	f997 00e0 	ldrsb.w	r0, [r7, #224]	; 0xe0
 801d096:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 801d09a:	2104      	movs	r1, #4
 801d09c:	4798      	blx	r3
}
 801d09e:	e1f5      	b.n	801d48c <m2m_ip_cb+0x580>
    else if((u8OpCode == SOCKET_CMD_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT) || (u8OpCode == SOCKET_CMD_SSL_CONNECT_ALPN))
 801d0a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0a4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d0a8:	781b      	ldrb	r3, [r3, #0]
 801d0aa:	2b44      	cmp	r3, #68	; 0x44
 801d0ac:	d00d      	beq.n	801d0ca <m2m_ip_cb+0x1be>
 801d0ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0b2:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d0b6:	781b      	ldrb	r3, [r3, #0]
 801d0b8:	2b4b      	cmp	r3, #75	; 0x4b
 801d0ba:	d006      	beq.n	801d0ca <m2m_ip_cb+0x1be>
 801d0bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0c0:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d0c4:	781b      	ldrb	r3, [r3, #0]
 801d0c6:	2b53      	cmp	r3, #83	; 0x53
 801d0c8:	d167      	bne.n	801d19a <m2m_ip_cb+0x28e>
        tstrConnectAlpnReply    strConnectAlpnReply = {{0}};
 801d0ca:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801d0ce:	2200      	movs	r2, #0
 801d0d0:	601a      	str	r2, [r3, #0]
 801d0d2:	605a      	str	r2, [r3, #4]
        uint16                  u16HifSz = sizeof(tstrConnectAlpnReply);
 801d0d4:	2308      	movs	r3, #8
 801d0d6:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
        if(u8OpCode != SOCKET_CMD_SSL_CONNECT_ALPN)
 801d0da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0de:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d0e2:	781b      	ldrb	r3, [r3, #0]
 801d0e4:	2b53      	cmp	r3, #83	; 0x53
 801d0e6:	d002      	beq.n	801d0ee <m2m_ip_cb+0x1e2>
            u16HifSz = sizeof(tstrConnectReply);
 801d0e8:	2304      	movs	r3, #4
 801d0ea:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
        if(hif_receive(u32Address, (uint8*)&strConnectAlpnReply, u16HifSz, 0) == M2M_SUCCESS)
 801d0ee:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 801d0f2:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 801d0f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d0fa:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d0fe:	2300      	movs	r3, #0
 801d100:	6800      	ldr	r0, [r0, #0]
 801d102:	f7fc fddd 	bl	8019cc0 <hif_receive>
 801d106:	4603      	mov	r3, r0
 801d108:	2b00      	cmp	r3, #0
 801d10a:	f040 81ba 	bne.w	801d482 <m2m_ip_cb+0x576>
            strConnMsg.sock     = strConnectAlpnReply.strConnReply.sock;
 801d10e:	f997 30bc 	ldrsb.w	r3, [r7, #188]	; 0xbc
 801d112:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
            strConnMsg.s8Error  = strConnectAlpnReply.strConnReply.s8Error;
 801d116:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 801d11a:	f887 30b9 	strb.w	r3, [r7, #185]	; 0xb9
            if(strConnectAlpnReply.strConnReply.s8Error == SOCK_ERR_NO_ERROR)
 801d11e:	f997 30bd 	ldrsb.w	r3, [r7, #189]	; 0xbd
 801d122:	2b00      	cmp	r3, #0
 801d124:	d117      	bne.n	801d156 <m2m_ip_cb+0x24a>
                gastrSockets[strConnMsg.sock].u16DataOffset = strConnectAlpnReply.strConnReply.u16AppDataOffset - M2M_HIF_HDR_OFFSET;
 801d126:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801d12a:	f997 20b8 	ldrsb.w	r2, [r7, #184]	; 0xb8
 801d12e:	4610      	mov	r0, r2
 801d130:	3b08      	subs	r3, #8
 801d132:	b299      	uxth	r1, r3
 801d134:	4a32      	ldr	r2, [pc, #200]	; (801d200 <m2m_ip_cb+0x2f4>)
 801d136:	0103      	lsls	r3, r0, #4
 801d138:	4413      	add	r3, r2
 801d13a:	3308      	adds	r3, #8
 801d13c:	460a      	mov	r2, r1
 801d13e:	801a      	strh	r2, [r3, #0]
                gastrSockets[strConnMsg.sock].u8AlpnStatus = strConnectAlpnReply.u8AppProtocolIdx;
 801d140:	f997 30b8 	ldrsb.w	r3, [r7, #184]	; 0xb8
 801d144:	f897 10c0 	ldrb.w	r1, [r7, #192]	; 0xc0
 801d148:	4a2d      	ldr	r2, [pc, #180]	; (801d200 <m2m_ip_cb+0x2f4>)
 801d14a:	011b      	lsls	r3, r3, #4
 801d14c:	4413      	add	r3, r2
 801d14e:	330d      	adds	r3, #13
 801d150:	460a      	mov	r2, r1
 801d152:	701a      	strb	r2, [r3, #0]
 801d154:	e013      	b.n	801d17e <m2m_ip_cb+0x272>
                gastrSockets[strConnMsg.sock].u8ErrSource = strConnectAlpnReply.strConnReply.u8ErrSource;
 801d156:	f997 30b8 	ldrsb.w	r3, [r7, #184]	; 0xb8
 801d15a:	f897 10be 	ldrb.w	r1, [r7, #190]	; 0xbe
 801d15e:	4a28      	ldr	r2, [pc, #160]	; (801d200 <m2m_ip_cb+0x2f4>)
 801d160:	011b      	lsls	r3, r3, #4
 801d162:	4413      	add	r3, r2
 801d164:	330e      	adds	r3, #14
 801d166:	460a      	mov	r2, r1
 801d168:	701a      	strb	r2, [r3, #0]
                gastrSockets[strConnMsg.sock].u8ErrCode = strConnectAlpnReply.strConnReply.u8ErrCode;
 801d16a:	f997 30b8 	ldrsb.w	r3, [r7, #184]	; 0xb8
 801d16e:	f897 10bf 	ldrb.w	r1, [r7, #191]	; 0xbf
 801d172:	4a23      	ldr	r2, [pc, #140]	; (801d200 <m2m_ip_cb+0x2f4>)
 801d174:	011b      	lsls	r3, r3, #4
 801d176:	4413      	add	r3, r2
 801d178:	330f      	adds	r3, #15
 801d17a:	460a      	mov	r2, r1
 801d17c:	701a      	strb	r2, [r3, #0]
            if(gpfAppSocketCb)
 801d17e:	4b1f      	ldr	r3, [pc, #124]	; (801d1fc <m2m_ip_cb+0x2f0>)
 801d180:	681b      	ldr	r3, [r3, #0]
 801d182:	2b00      	cmp	r3, #0
 801d184:	f000 817d 	beq.w	801d482 <m2m_ip_cb+0x576>
                gpfAppSocketCb(strConnMsg.sock, SOCKET_MSG_CONNECT, &strConnMsg);
 801d188:	4b1c      	ldr	r3, [pc, #112]	; (801d1fc <m2m_ip_cb+0x2f0>)
 801d18a:	681b      	ldr	r3, [r3, #0]
 801d18c:	f997 00b8 	ldrsb.w	r0, [r7, #184]	; 0xb8
 801d190:	f107 02b8 	add.w	r2, r7, #184	; 0xb8
 801d194:	2105      	movs	r1, #5
 801d196:	4798      	blx	r3
    {
 801d198:	e173      	b.n	801d482 <m2m_ip_cb+0x576>
    else if(u8OpCode == SOCKET_CMD_DNS_RESOLVE)
 801d19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d19e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d1a2:	781b      	ldrb	r3, [r3, #0]
 801d1a4:	2b4a      	cmp	r3, #74	; 0x4a
 801d1a6:	d131      	bne.n	801d20c <m2m_ip_cb+0x300>
        if(hif_receive(u32Address, (uint8*)&strDnsReply, sizeof(tstrDnsReply), 0) == M2M_SUCCESS)
 801d1a8:	f107 0108 	add.w	r1, r7, #8
 801d1ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d1b0:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d1b4:	2300      	movs	r3, #0
 801d1b6:	2268      	movs	r2, #104	; 0x68
 801d1b8:	6800      	ldr	r0, [r0, #0]
 801d1ba:	f7fc fd81 	bl	8019cc0 <hif_receive>
 801d1be:	4603      	mov	r3, r0
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	f040 8163 	bne.w	801d48c <m2m_ip_cb+0x580>
            strDnsReply.u32HostIP = strDnsReply.u32HostIP;
 801d1c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d1ca:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801d1ce:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 801d1d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d1d4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 801d1d8:	665a      	str	r2, [r3, #100]	; 0x64
            if(gpfAppResolveCb)
 801d1da:	4b0b      	ldr	r3, [pc, #44]	; (801d208 <m2m_ip_cb+0x2fc>)
 801d1dc:	681b      	ldr	r3, [r3, #0]
 801d1de:	2b00      	cmp	r3, #0
 801d1e0:	f000 8154 	beq.w	801d48c <m2m_ip_cb+0x580>
                gpfAppResolveCb((uint8*)strDnsReply.acHostName, strDnsReply.u32HostIP);
 801d1e4:	4b08      	ldr	r3, [pc, #32]	; (801d208 <m2m_ip_cb+0x2fc>)
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	f507 7284 	add.w	r2, r7, #264	; 0x108
 801d1ec:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 801d1f0:	6e51      	ldr	r1, [r2, #100]	; 0x64
 801d1f2:	f107 0208 	add.w	r2, r7, #8
 801d1f6:	4610      	mov	r0, r2
 801d1f8:	4798      	blx	r3
}
 801d1fa:	e147      	b.n	801d48c <m2m_ip_cb+0x580>
 801d1fc:	2001dfcc 	.word	0x2001dfcc
 801d200:	2001df08 	.word	0x2001df08
 801d204:	2001dfc8 	.word	0x2001dfc8
 801d208:	2001dfd0 	.word	0x2001dfd0
    else if((u8OpCode == SOCKET_CMD_RECV) || (u8OpCode == SOCKET_CMD_RECVFROM) || (u8OpCode == SOCKET_CMD_SSL_RECV))
 801d20c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d210:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d214:	781b      	ldrb	r3, [r3, #0]
 801d216:	2b46      	cmp	r3, #70	; 0x46
 801d218:	d00e      	beq.n	801d238 <m2m_ip_cb+0x32c>
 801d21a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d21e:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d222:	781b      	ldrb	r3, [r3, #0]
 801d224:	2b48      	cmp	r3, #72	; 0x48
 801d226:	d007      	beq.n	801d238 <m2m_ip_cb+0x32c>
 801d228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d22c:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d230:	781b      	ldrb	r3, [r3, #0]
 801d232:	2b4d      	cmp	r3, #77	; 0x4d
 801d234:	f040 80a6 	bne.w	801d384 <m2m_ip_cb+0x478>
        uint8               u8CallbackMsgID = SOCKET_MSG_RECV;
 801d238:	2306      	movs	r3, #6
 801d23a:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
        if(u8OpCode == SOCKET_CMD_RECVFROM)
 801d23e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d242:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d246:	781b      	ldrb	r3, [r3, #0]
 801d248:	2b48      	cmp	r3, #72	; 0x48
 801d24a:	d102      	bne.n	801d252 <m2m_ip_cb+0x346>
            u8CallbackMsgID = SOCKET_MSG_RECVFROM;
 801d24c:	2309      	movs	r3, #9
 801d24e:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
        u16ReadSize = sizeof(tstrRecvReply);
 801d252:	2310      	movs	r3, #16
 801d254:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
        if(hif_receive(u32Address, (uint8*)&strRecvReply, u16ReadSize, 0) == M2M_SUCCESS)
 801d258:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 801d25c:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 801d260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d264:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d268:	2300      	movs	r3, #0
 801d26a:	6800      	ldr	r0, [r0, #0]
 801d26c:	f7fc fd28 	bl	8019cc0 <hif_receive>
 801d270:	4603      	mov	r3, r0
 801d272:	2b00      	cmp	r3, #0
 801d274:	f040 8107 	bne.w	801d486 <m2m_ip_cb+0x57a>
            uint16 u16SessionID = 0;
 801d278:	2300      	movs	r3, #0
 801d27a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
            sock            = strRecvReply.sock;
 801d27e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 801d282:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
            u16SessionID = strRecvReply.u16SessionID;
 801d286:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 801d28a:	f8a7 30fc 	strh.w	r3, [r7, #252]	; 0xfc
            gastrSockets[sock].bIsRecvPending = 0;
 801d28e:	f997 30fb 	ldrsb.w	r3, [r7, #251]	; 0xfb
 801d292:	4a81      	ldr	r2, [pc, #516]	; (801d498 <m2m_ip_cb+0x58c>)
 801d294:	011b      	lsls	r3, r3, #4
 801d296:	4413      	add	r3, r2
 801d298:	330c      	adds	r3, #12
 801d29a:	2200      	movs	r2, #0
 801d29c:	701a      	strb	r2, [r3, #0]
            s16RecvStatus   = NM_BSP_B_L_16(strRecvReply.s16RecvStatus);
 801d29e:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 801d2a2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
            u16DataOffset   = NM_BSP_B_L_16(strRecvReply.u16DataOffset);
 801d2a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801d2aa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
            strRecvMsg.strRemoteAddr.sin_port           = strRecvReply.strRemoteAddr.u16Port;
 801d2ae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801d2b2:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
            strRecvMsg.strRemoteAddr.sin_addr.s_addr    = strRecvReply.strRemoteAddr.u32IPAddr;
 801d2b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801d2ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
            if(u16SessionID == gastrSockets[sock].u16SessionID)
 801d2be:	f997 30fb 	ldrsb.w	r3, [r7, #251]	; 0xfb
 801d2c2:	4a75      	ldr	r2, [pc, #468]	; (801d498 <m2m_ip_cb+0x58c>)
 801d2c4:	011b      	lsls	r3, r3, #4
 801d2c6:	4413      	add	r3, r2
 801d2c8:	3306      	adds	r3, #6
 801d2ca:	881b      	ldrh	r3, [r3, #0]
 801d2cc:	b29b      	uxth	r3, r3
 801d2ce:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
 801d2d2:	429a      	cmp	r2, r3
 801d2d4:	d145      	bne.n	801d362 <m2m_ip_cb+0x456>
                if((s16RecvStatus > 0) && (s16RecvStatus < u16BufferSize))
 801d2d6:	f9b7 30f8 	ldrsh.w	r3, [r7, #248]	; 0xf8
 801d2da:	2b00      	cmp	r3, #0
 801d2dc:	dd2b      	ble.n	801d336 <m2m_ip_cb+0x42a>
 801d2de:	f9b7 20f8 	ldrsh.w	r2, [r7, #248]	; 0xf8
 801d2e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d2e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801d2ea:	881b      	ldrh	r3, [r3, #0]
 801d2ec:	429a      	cmp	r2, r3
 801d2ee:	da22      	bge.n	801d336 <m2m_ip_cb+0x42a>
                    u32Address += u16DataOffset;
 801d2f0:	f8b7 20f6 	ldrh.w	r2, [r7, #246]	; 0xf6
 801d2f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d2f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801d2fc:	f507 7184 	add.w	r1, r7, #264	; 0x108
 801d300:	f5a1 7184 	sub.w	r1, r1, #264	; 0x108
 801d304:	6809      	ldr	r1, [r1, #0]
 801d306:	440a      	add	r2, r1
 801d308:	601a      	str	r2, [r3, #0]
                    u16ReadSize = (uint16)s16RecvStatus;
 801d30a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 801d30e:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
                    Socket_ReadSocketData(sock, &strRecvMsg, u8CallbackMsgID, u32Address, u16ReadSize);
 801d312:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d316:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 801d31a:	f897 4105 	ldrb.w	r4, [r7, #261]	; 0x105
 801d31e:	f107 0190 	add.w	r1, r7, #144	; 0x90
 801d322:	f997 00fb 	ldrsb.w	r0, [r7, #251]	; 0xfb
 801d326:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 801d32a:	9200      	str	r2, [sp, #0]
 801d32c:	681b      	ldr	r3, [r3, #0]
 801d32e:	4622      	mov	r2, r4
 801d330:	f7ff fd3a 	bl	801cda8 <Socket_ReadSocketData>
    {
 801d334:	e0a7      	b.n	801d486 <m2m_ip_cb+0x57a>
                    strRecvMsg.s16BufferSize    = s16RecvStatus;
 801d336:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 801d33a:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
                    strRecvMsg.pu8Buffer        = NULL;
 801d33e:	2300      	movs	r3, #0
 801d340:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    if(gpfAppSocketCb)
 801d344:	4b55      	ldr	r3, [pc, #340]	; (801d49c <m2m_ip_cb+0x590>)
 801d346:	681b      	ldr	r3, [r3, #0]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	f000 809c 	beq.w	801d486 <m2m_ip_cb+0x57a>
                        gpfAppSocketCb(sock, u8CallbackMsgID, &strRecvMsg);
 801d34e:	4b53      	ldr	r3, [pc, #332]	; (801d49c <m2m_ip_cb+0x590>)
 801d350:	681b      	ldr	r3, [r3, #0]
 801d352:	f107 0290 	add.w	r2, r7, #144	; 0x90
 801d356:	f897 1105 	ldrb.w	r1, [r7, #261]	; 0x105
 801d35a:	f997 00fb 	ldrsb.w	r0, [r7, #251]	; 0xfb
 801d35e:	4798      	blx	r3
    {
 801d360:	e091      	b.n	801d486 <m2m_ip_cb+0x57a>
                if(u16ReadSize < u16BufferSize)
 801d362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d366:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 801d36a:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 801d36e:	881b      	ldrh	r3, [r3, #0]
 801d370:	429a      	cmp	r2, r3
 801d372:	f080 8088 	bcs.w	801d486 <m2m_ip_cb+0x57a>
                    hif_receive(0, NULL, 0, 1);
 801d376:	2301      	movs	r3, #1
 801d378:	2200      	movs	r2, #0
 801d37a:	2100      	movs	r1, #0
 801d37c:	2000      	movs	r0, #0
 801d37e:	f7fc fc9f 	bl	8019cc0 <hif_receive>
    {
 801d382:	e080      	b.n	801d486 <m2m_ip_cb+0x57a>
    else if((u8OpCode == SOCKET_CMD_SEND) || (u8OpCode == SOCKET_CMD_SENDTO) || (u8OpCode == SOCKET_CMD_SSL_SEND))
 801d384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d388:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d38c:	781b      	ldrb	r3, [r3, #0]
 801d38e:	2b45      	cmp	r3, #69	; 0x45
 801d390:	d00d      	beq.n	801d3ae <m2m_ip_cb+0x4a2>
 801d392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d396:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d39a:	781b      	ldrb	r3, [r3, #0]
 801d39c:	2b47      	cmp	r3, #71	; 0x47
 801d39e:	d006      	beq.n	801d3ae <m2m_ip_cb+0x4a2>
 801d3a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d3a4:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d3a8:	781b      	ldrb	r3, [r3, #0]
 801d3aa:	2b4c      	cmp	r3, #76	; 0x4c
 801d3ac:	d143      	bne.n	801d436 <m2m_ip_cb+0x52a>
        uint8           u8CallbackMsgID = SOCKET_MSG_SEND;
 801d3ae:	2307      	movs	r3, #7
 801d3b0:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
        if(u8OpCode == SOCKET_CMD_SENDTO)
 801d3b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d3b8:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d3bc:	781b      	ldrb	r3, [r3, #0]
 801d3be:	2b47      	cmp	r3, #71	; 0x47
 801d3c0:	d102      	bne.n	801d3c8 <m2m_ip_cb+0x4bc>
            u8CallbackMsgID = SOCKET_MSG_SENDTO;
 801d3c2:	2308      	movs	r3, #8
 801d3c4:	f887 3104 	strb.w	r3, [r7, #260]	; 0x104
        if(hif_receive(u32Address, (uint8*)&strReply, sizeof(tstrSendReply), 0) == M2M_SUCCESS)
 801d3c8:	f107 0184 	add.w	r1, r7, #132	; 0x84
 801d3cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d3d0:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d3d4:	2300      	movs	r3, #0
 801d3d6:	2208      	movs	r2, #8
 801d3d8:	6800      	ldr	r0, [r0, #0]
 801d3da:	f7fc fc71 	bl	8019cc0 <hif_receive>
 801d3de:	4603      	mov	r3, r0
 801d3e0:	2b00      	cmp	r3, #0
 801d3e2:	d152      	bne.n	801d48a <m2m_ip_cb+0x57e>
            uint16 u16SessionID = 0;
 801d3e4:	2300      	movs	r3, #0
 801d3e6:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
            sock = strReply.sock;
 801d3ea:	f897 3084 	ldrb.w	r3, [r7, #132]	; 0x84
 801d3ee:	f887 3101 	strb.w	r3, [r7, #257]	; 0x101
            u16SessionID = strReply.u16SessionID;
 801d3f2:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 801d3f6:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
            s16Rcvd = NM_BSP_B_L_16(strReply.s16SentBytes);
 801d3fa:	f9b7 3086 	ldrsh.w	r3, [r7, #134]	; 0x86
 801d3fe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
            if(u16SessionID == gastrSockets[sock].u16SessionID)
 801d402:	f997 3101 	ldrsb.w	r3, [r7, #257]	; 0x101
 801d406:	4a24      	ldr	r2, [pc, #144]	; (801d498 <m2m_ip_cb+0x58c>)
 801d408:	011b      	lsls	r3, r3, #4
 801d40a:	4413      	add	r3, r2
 801d40c:	3306      	adds	r3, #6
 801d40e:	881b      	ldrh	r3, [r3, #0]
 801d410:	b29b      	uxth	r3, r3
 801d412:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 801d416:	429a      	cmp	r2, r3
 801d418:	d137      	bne.n	801d48a <m2m_ip_cb+0x57e>
                if(gpfAppSocketCb)
 801d41a:	4b20      	ldr	r3, [pc, #128]	; (801d49c <m2m_ip_cb+0x590>)
 801d41c:	681b      	ldr	r3, [r3, #0]
 801d41e:	2b00      	cmp	r3, #0
 801d420:	d033      	beq.n	801d48a <m2m_ip_cb+0x57e>
                    gpfAppSocketCb(sock, u8CallbackMsgID, &s16Rcvd);
 801d422:	4b1e      	ldr	r3, [pc, #120]	; (801d49c <m2m_ip_cb+0x590>)
 801d424:	681b      	ldr	r3, [r3, #0]
 801d426:	f107 028e 	add.w	r2, r7, #142	; 0x8e
 801d42a:	f897 1104 	ldrb.w	r1, [r7, #260]	; 0x104
 801d42e:	f997 0101 	ldrsb.w	r0, [r7, #257]	; 0x101
 801d432:	4798      	blx	r3
    {
 801d434:	e029      	b.n	801d48a <m2m_ip_cb+0x57e>
    else if(u8OpCode == SOCKET_CMD_PING)
 801d436:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d43a:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 801d43e:	781b      	ldrb	r3, [r3, #0]
 801d440:	2b52      	cmp	r3, #82	; 0x52
 801d442:	d123      	bne.n	801d48c <m2m_ip_cb+0x580>
        if(hif_receive(u32Address, (uint8*)&strPingReply, sizeof(tstrPingReply), 1) == M2M_SUCCESS)
 801d444:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801d448:	f507 7384 	add.w	r3, r7, #264	; 0x108
 801d44c:	f5a3 7084 	sub.w	r0, r3, #264	; 0x108
 801d450:	2301      	movs	r3, #1
 801d452:	2214      	movs	r2, #20
 801d454:	6800      	ldr	r0, [r0, #0]
 801d456:	f7fc fc33 	bl	8019cc0 <hif_receive>
 801d45a:	4603      	mov	r3, r0
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d115      	bne.n	801d48c <m2m_ip_cb+0x580>
            if((gu32PingId == strPingReply.u32CmdPrivate) && (gfpPingCb != NULL))
 801d460:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801d462:	4b0f      	ldr	r3, [pc, #60]	; (801d4a0 <m2m_ip_cb+0x594>)
 801d464:	681b      	ldr	r3, [r3, #0]
 801d466:	429a      	cmp	r2, r3
 801d468:	d110      	bne.n	801d48c <m2m_ip_cb+0x580>
 801d46a:	4b0e      	ldr	r3, [pc, #56]	; (801d4a4 <m2m_ip_cb+0x598>)
 801d46c:	681b      	ldr	r3, [r3, #0]
 801d46e:	2b00      	cmp	r3, #0
 801d470:	d00c      	beq.n	801d48c <m2m_ip_cb+0x580>
                gfpPingCb(strPingReply.u32IPAddr, strPingReply.u32RTT, strPingReply.u8ErrorCode);
 801d472:	4b0c      	ldr	r3, [pc, #48]	; (801d4a4 <m2m_ip_cb+0x598>)
 801d474:	681b      	ldr	r3, [r3, #0]
 801d476:	6f38      	ldr	r0, [r7, #112]	; 0x70
 801d478:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 801d47a:	f897 2080 	ldrb.w	r2, [r7, #128]	; 0x80
 801d47e:	4798      	blx	r3
}
 801d480:	e004      	b.n	801d48c <m2m_ip_cb+0x580>
    {
 801d482:	bf00      	nop
 801d484:	e002      	b.n	801d48c <m2m_ip_cb+0x580>
    {
 801d486:	bf00      	nop
 801d488:	e000      	b.n	801d48c <m2m_ip_cb+0x580>
    {
 801d48a:	bf00      	nop
}
 801d48c:	bf00      	nop
 801d48e:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 801d492:	46bd      	mov	sp, r7
 801d494:	bd90      	pop	{r4, r7, pc}
 801d496:	bf00      	nop
 801d498:	2001df08 	.word	0x2001df08
 801d49c:	2001dfcc 	.word	0x2001dfcc
 801d4a0:	2001dfdc 	.word	0x2001dfdc
 801d4a4:	2001dfd8 	.word	0x2001dfd8

0801d4a8 <socketInit>:

Return
        None.
*********************************************************************/
void socketInit(void)
{
 801d4a8:	b580      	push	{r7, lr}
 801d4aa:	af00      	add	r7, sp, #0
    if(gbSocketInit==0)
 801d4ac:	4b0a      	ldr	r3, [pc, #40]	; (801d4d8 <socketInit+0x30>)
 801d4ae:	781b      	ldrb	r3, [r3, #0]
 801d4b0:	b2db      	uxtb	r3, r3
 801d4b2:	2b00      	cmp	r3, #0
 801d4b4:	d10e      	bne.n	801d4d4 <socketInit+0x2c>
    {
        m2m_memset((uint8*)gastrSockets, 0, MAX_SOCKET * sizeof(tstrSocket));
 801d4b6:	22c0      	movs	r2, #192	; 0xc0
 801d4b8:	2100      	movs	r1, #0
 801d4ba:	4808      	ldr	r0, [pc, #32]	; (801d4dc <socketInit+0x34>)
 801d4bc:	f7fb fd36 	bl	8018f2c <m2m_memset>
        hif_register_cb(M2M_REQ_GROUP_IP, m2m_ip_cb);
 801d4c0:	4907      	ldr	r1, [pc, #28]	; (801d4e0 <socketInit+0x38>)
 801d4c2:	2002      	movs	r0, #2
 801d4c4:	f7fc fca4 	bl	8019e10 <hif_register_cb>
        gbSocketInit=1;
 801d4c8:	4b03      	ldr	r3, [pc, #12]	; (801d4d8 <socketInit+0x30>)
 801d4ca:	2201      	movs	r2, #1
 801d4cc:	701a      	strb	r2, [r3, #0]
        gu16SessionID = 0;
 801d4ce:	4b05      	ldr	r3, [pc, #20]	; (801d4e4 <socketInit+0x3c>)
 801d4d0:	2200      	movs	r2, #0
 801d4d2:	801a      	strh	r2, [r3, #0]
    }
}
 801d4d4:	bf00      	nop
 801d4d6:	bd80      	pop	{r7, pc}
 801d4d8:	2001dfd4 	.word	0x2001dfd4
 801d4dc:	2001df08 	.word	0x2001df08
 801d4e0:	0801cf0d 	.word	0x0801cf0d
 801d4e4:	2001dfc8 	.word	0x2001dfc8

0801d4e8 <registerSocketCallback>:

Return
        None.
*********************************************************************/
void registerSocketCallback(tpfAppSocketCb pfAppSocketCb, tpfAppResolveCb pfAppResolveCb)
{
 801d4e8:	b480      	push	{r7}
 801d4ea:	b083      	sub	sp, #12
 801d4ec:	af00      	add	r7, sp, #0
 801d4ee:	6078      	str	r0, [r7, #4]
 801d4f0:	6039      	str	r1, [r7, #0]
    gpfAppSocketCb = pfAppSocketCb;
 801d4f2:	4a06      	ldr	r2, [pc, #24]	; (801d50c <registerSocketCallback+0x24>)
 801d4f4:	687b      	ldr	r3, [r7, #4]
 801d4f6:	6013      	str	r3, [r2, #0]
    gpfAppResolveCb = pfAppResolveCb;
 801d4f8:	4a05      	ldr	r2, [pc, #20]	; (801d510 <registerSocketCallback+0x28>)
 801d4fa:	683b      	ldr	r3, [r7, #0]
 801d4fc:	6013      	str	r3, [r2, #0]
}
 801d4fe:	bf00      	nop
 801d500:	370c      	adds	r7, #12
 801d502:	46bd      	mov	sp, r7
 801d504:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d508:	4770      	bx	lr
 801d50a:	bf00      	nop
 801d50c:	2001dfcc 	.word	0x2001dfcc
 801d510:	2001dfd0 	.word	0x2001dfd0

0801d514 <socket>:
Return
        - Negative value for error.
        - ZERO or positive value as a socket ID if successful.
*********************************************************************/
SOCKET socket(uint16 u16Domain, uint8 u8Type, uint8 u8Flags)
{
 801d514:	b580      	push	{r7, lr}
 801d516:	b08c      	sub	sp, #48	; 0x30
 801d518:	af04      	add	r7, sp, #16
 801d51a:	4603      	mov	r3, r0
 801d51c:	80fb      	strh	r3, [r7, #6]
 801d51e:	460b      	mov	r3, r1
 801d520:	717b      	strb	r3, [r7, #5]
 801d522:	4613      	mov	r3, r2
 801d524:	713b      	strb	r3, [r7, #4]
    SOCKET                  sock = -1;
 801d526:	23ff      	movs	r3, #255	; 0xff
 801d528:	77fb      	strb	r3, [r7, #31]
    volatile tstrSocket     *pstrSock;
    static volatile uint8   u8NextTcpSock   = 0;
    static volatile uint8   u8NextUdpSock   = 0;

    /* The only supported family is the AF_INET for UDP and TCP transport layer protocols. */
    if(u16Domain == AF_INET)
 801d52a:	88fb      	ldrh	r3, [r7, #6]
 801d52c:	2b02      	cmp	r3, #2
 801d52e:	f040 80c9 	bne.w	801d6c4 <socket+0x1b0>
    {
        if(u8Type == SOCK_STREAM)
 801d532:	797b      	ldrb	r3, [r7, #5]
 801d534:	2b01      	cmp	r3, #1
 801d536:	d149      	bne.n	801d5cc <socket+0xb8>
        {
            for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 801d538:	2300      	movs	r3, #0
 801d53a:	77bb      	strb	r3, [r7, #30]
 801d53c:	e042      	b.n	801d5c4 <socket+0xb0>
            {
                u8SockID    = u8NextTcpSock;
 801d53e:	4b64      	ldr	r3, [pc, #400]	; (801d6d0 <socket+0x1bc>)
 801d540:	781b      	ldrb	r3, [r3, #0]
 801d542:	74fb      	strb	r3, [r7, #19]
                pstrSock    = &gastrSockets[u8NextTcpSock];
 801d544:	4b62      	ldr	r3, [pc, #392]	; (801d6d0 <socket+0x1bc>)
 801d546:	781b      	ldrb	r3, [r3, #0]
 801d548:	b2db      	uxtb	r3, r3
 801d54a:	011b      	lsls	r3, r3, #4
 801d54c:	4a61      	ldr	r2, [pc, #388]	; (801d6d4 <socket+0x1c0>)
 801d54e:	4413      	add	r3, r2
 801d550:	61bb      	str	r3, [r7, #24]
                u8NextTcpSock = (u8NextTcpSock + 1) % TCP_SOCK_MAX;
 801d552:	4b5f      	ldr	r3, [pc, #380]	; (801d6d0 <socket+0x1bc>)
 801d554:	781b      	ldrb	r3, [r3, #0]
 801d556:	b2db      	uxtb	r3, r3
 801d558:	1c5a      	adds	r2, r3, #1
 801d55a:	4b5f      	ldr	r3, [pc, #380]	; (801d6d8 <socket+0x1c4>)
 801d55c:	fb83 1302 	smull	r1, r3, r3, r2
 801d560:	4413      	add	r3, r2
 801d562:	1099      	asrs	r1, r3, #2
 801d564:	17d3      	asrs	r3, r2, #31
 801d566:	1ac9      	subs	r1, r1, r3
 801d568:	460b      	mov	r3, r1
 801d56a:	00db      	lsls	r3, r3, #3
 801d56c:	1a5b      	subs	r3, r3, r1
 801d56e:	1ad1      	subs	r1, r2, r3
 801d570:	b2ca      	uxtb	r2, r1
 801d572:	4b57      	ldr	r3, [pc, #348]	; (801d6d0 <socket+0x1bc>)
 801d574:	701a      	strb	r2, [r3, #0]
                if(!pstrSock->bIsUsed)
 801d576:	69bb      	ldr	r3, [r7, #24]
 801d578:	7a9b      	ldrb	r3, [r3, #10]
 801d57a:	b2db      	uxtb	r3, r3
 801d57c:	2b00      	cmp	r3, #0
 801d57e:	d11e      	bne.n	801d5be <socket+0xaa>
                {
                    sock = (SOCKET)u8SockID;
 801d580:	7cfb      	ldrb	r3, [r7, #19]
 801d582:	77fb      	strb	r3, [r7, #31]
                    m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 801d584:	2210      	movs	r2, #16
 801d586:	2100      	movs	r1, #0
 801d588:	69b8      	ldr	r0, [r7, #24]
 801d58a:	f7fb fccf 	bl	8018f2c <m2m_memset>
                    /* In the current implementation, SSL flags only have meaning for the TCP socket case. */
                    if(u8Flags & SOCKET_FLAGS_SSL)
 801d58e:	793b      	ldrb	r3, [r7, #4]
 801d590:	f003 0301 	and.w	r3, r3, #1
 801d594:	2b00      	cmp	r3, #0
 801d596:	d066      	beq.n	801d666 <socket+0x152>
                    {
                        tstrSSLSocketCreateCmd  strSSLCreate;
                        strSSLCreate.sslSock = sock;
 801d598:	7ffb      	ldrb	r3, [r7, #31]
 801d59a:	733b      	strb	r3, [r7, #12]
                        pstrSock->u8SSLFlags = SSL_FLAGS_ACTIVE;
 801d59c:	69bb      	ldr	r3, [r7, #24]
 801d59e:	2201      	movs	r2, #1
 801d5a0:	72da      	strb	r2, [r3, #11]
                        SOCKET_REQUEST(SOCKET_CMD_SSL_CREATE, (uint8*)&strSSLCreate, sizeof(tstrSSLSocketCreateCmd), 0, 0, 0);
 801d5a2:	f107 020c 	add.w	r2, r7, #12
 801d5a6:	2300      	movs	r3, #0
 801d5a8:	9302      	str	r3, [sp, #8]
 801d5aa:	2300      	movs	r3, #0
 801d5ac:	9301      	str	r3, [sp, #4]
 801d5ae:	2300      	movs	r3, #0
 801d5b0:	9300      	str	r3, [sp, #0]
 801d5b2:	2304      	movs	r3, #4
 801d5b4:	2150      	movs	r1, #80	; 0x50
 801d5b6:	2002      	movs	r0, #2
 801d5b8:	f7fb ff38 	bl	801942c <hif_send>
                    }
                    break;
 801d5bc:	e053      	b.n	801d666 <socket+0x152>
            for(u8Count = 0; u8Count < TCP_SOCK_MAX; u8Count ++)
 801d5be:	7fbb      	ldrb	r3, [r7, #30]
 801d5c0:	3301      	adds	r3, #1
 801d5c2:	77bb      	strb	r3, [r7, #30]
 801d5c4:	7fbb      	ldrb	r3, [r7, #30]
 801d5c6:	2b06      	cmp	r3, #6
 801d5c8:	d9b9      	bls.n	801d53e <socket+0x2a>
 801d5ca:	e04d      	b.n	801d668 <socket+0x154>
                }
            }
        }
        else if(u8Type == SOCK_DGRAM)
 801d5cc:	797b      	ldrb	r3, [r7, #5]
 801d5ce:	2b02      	cmp	r3, #2
 801d5d0:	d132      	bne.n	801d638 <socket+0x124>
        {
            volatile tstrSocket *pastrUDPSockets = &gastrSockets[TCP_SOCK_MAX];
 801d5d2:	4b42      	ldr	r3, [pc, #264]	; (801d6dc <socket+0x1c8>)
 801d5d4:	617b      	str	r3, [r7, #20]
            for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	77bb      	strb	r3, [r7, #30]
 801d5da:	e029      	b.n	801d630 <socket+0x11c>
            {
                u8SockID        = u8NextUdpSock;
 801d5dc:	4b40      	ldr	r3, [pc, #256]	; (801d6e0 <socket+0x1cc>)
 801d5de:	781b      	ldrb	r3, [r3, #0]
 801d5e0:	74fb      	strb	r3, [r7, #19]
                pstrSock        = &pastrUDPSockets[u8NextUdpSock];
 801d5e2:	4b3f      	ldr	r3, [pc, #252]	; (801d6e0 <socket+0x1cc>)
 801d5e4:	781b      	ldrb	r3, [r3, #0]
 801d5e6:	b2db      	uxtb	r3, r3
 801d5e8:	011b      	lsls	r3, r3, #4
 801d5ea:	697a      	ldr	r2, [r7, #20]
 801d5ec:	4413      	add	r3, r2
 801d5ee:	61bb      	str	r3, [r7, #24]
                u8NextUdpSock   = (u8NextUdpSock + 1) % UDP_SOCK_MAX;
 801d5f0:	4b3b      	ldr	r3, [pc, #236]	; (801d6e0 <socket+0x1cc>)
 801d5f2:	781b      	ldrb	r3, [r3, #0]
 801d5f4:	b2db      	uxtb	r3, r3
 801d5f6:	3301      	adds	r3, #1
 801d5f8:	425a      	negs	r2, r3
 801d5fa:	f003 0303 	and.w	r3, r3, #3
 801d5fe:	f002 0203 	and.w	r2, r2, #3
 801d602:	bf58      	it	pl
 801d604:	4253      	negpl	r3, r2
 801d606:	b2da      	uxtb	r2, r3
 801d608:	4b35      	ldr	r3, [pc, #212]	; (801d6e0 <socket+0x1cc>)
 801d60a:	701a      	strb	r2, [r3, #0]
                if(!pstrSock->bIsUsed)
 801d60c:	69bb      	ldr	r3, [r7, #24]
 801d60e:	7a9b      	ldrb	r3, [r3, #10]
 801d610:	b2db      	uxtb	r3, r3
 801d612:	2b00      	cmp	r3, #0
 801d614:	d109      	bne.n	801d62a <socket+0x116>
                {
                    sock = (SOCKET)(u8SockID + TCP_SOCK_MAX);
 801d616:	7cfb      	ldrb	r3, [r7, #19]
 801d618:	3307      	adds	r3, #7
 801d61a:	b2db      	uxtb	r3, r3
 801d61c:	77fb      	strb	r3, [r7, #31]
                    m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 801d61e:	2210      	movs	r2, #16
 801d620:	2100      	movs	r1, #0
 801d622:	69b8      	ldr	r0, [r7, #24]
 801d624:	f7fb fc82 	bl	8018f2c <m2m_memset>
                    break;
 801d628:	e01e      	b.n	801d668 <socket+0x154>
            for(u8Count = 0; u8Count < UDP_SOCK_MAX; u8Count ++)
 801d62a:	7fbb      	ldrb	r3, [r7, #30]
 801d62c:	3301      	adds	r3, #1
 801d62e:	77bb      	strb	r3, [r7, #30]
 801d630:	7fbb      	ldrb	r3, [r7, #30]
 801d632:	2b03      	cmp	r3, #3
 801d634:	d9d2      	bls.n	801d5dc <socket+0xc8>
 801d636:	e017      	b.n	801d668 <socket+0x154>
                }
            }
        }
        else if(u8Type == SOCK_RAW)
 801d638:	797b      	ldrb	r3, [r7, #5]
 801d63a:	2b03      	cmp	r3, #3
 801d63c:	d114      	bne.n	801d668 <socket+0x154>
        {
            /* Only raw IP packets are supported */
            if(u8Flags & SOCKET_FLAGS_IPPROTO_RAW)
 801d63e:	793b      	ldrb	r3, [r7, #4]
 801d640:	f003 0302 	and.w	r3, r3, #2
 801d644:	2b00      	cmp	r3, #0
 801d646:	d00f      	beq.n	801d668 <socket+0x154>
            {
                pstrSock = &gastrSockets[RAW_SOCK_ID];
 801d648:	4b26      	ldr	r3, [pc, #152]	; (801d6e4 <socket+0x1d0>)
 801d64a:	61bb      	str	r3, [r7, #24]
                if(!pstrSock->bIsUsed)
 801d64c:	69bb      	ldr	r3, [r7, #24]
 801d64e:	7a9b      	ldrb	r3, [r3, #10]
 801d650:	b2db      	uxtb	r3, r3
 801d652:	2b00      	cmp	r3, #0
 801d654:	d108      	bne.n	801d668 <socket+0x154>
                {
                    /* Socket identified by RAW_SOCK_ID is reserved */
                    sock = (SOCKET)RAW_SOCK_ID;
 801d656:	230b      	movs	r3, #11
 801d658:	77fb      	strb	r3, [r7, #31]
                    m2m_memset((uint8*)pstrSock, 0, sizeof(tstrSocket));
 801d65a:	2210      	movs	r2, #16
 801d65c:	2100      	movs	r1, #0
 801d65e:	69b8      	ldr	r0, [r7, #24]
 801d660:	f7fb fc64 	bl	8018f2c <m2m_memset>
 801d664:	e000      	b.n	801d668 <socket+0x154>
                    break;
 801d666:	bf00      	nop
                }
            }
        }

        if(sock >= 0)
 801d668:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801d66c:	2b00      	cmp	r3, #0
 801d66e:	db29      	blt.n	801d6c4 <socket+0x1b0>
        {
            pstrSock->bIsUsed = 1;
 801d670:	69bb      	ldr	r3, [r7, #24]
 801d672:	2201      	movs	r2, #1
 801d674:	729a      	strb	r2, [r3, #10]

            /* The session ID is used to distinguish different socket connections
                by comparing the assigned session ID to the one reported by the firmware*/
            ++gu16SessionID;
 801d676:	4b1c      	ldr	r3, [pc, #112]	; (801d6e8 <socket+0x1d4>)
 801d678:	881b      	ldrh	r3, [r3, #0]
 801d67a:	b29b      	uxth	r3, r3
 801d67c:	3301      	adds	r3, #1
 801d67e:	b29a      	uxth	r2, r3
 801d680:	4b19      	ldr	r3, [pc, #100]	; (801d6e8 <socket+0x1d4>)
 801d682:	801a      	strh	r2, [r3, #0]
            if(gu16SessionID == 0)
 801d684:	4b18      	ldr	r3, [pc, #96]	; (801d6e8 <socket+0x1d4>)
 801d686:	881b      	ldrh	r3, [r3, #0]
 801d688:	b29b      	uxth	r3, r3
 801d68a:	2b00      	cmp	r3, #0
 801d68c:	d106      	bne.n	801d69c <socket+0x188>
                ++gu16SessionID;
 801d68e:	4b16      	ldr	r3, [pc, #88]	; (801d6e8 <socket+0x1d4>)
 801d690:	881b      	ldrh	r3, [r3, #0]
 801d692:	b29b      	uxth	r3, r3
 801d694:	3301      	adds	r3, #1
 801d696:	b29a      	uxth	r2, r3
 801d698:	4b13      	ldr	r3, [pc, #76]	; (801d6e8 <socket+0x1d4>)
 801d69a:	801a      	strh	r2, [r3, #0]

            pstrSock->u16SessionID = gu16SessionID;
 801d69c:	4b12      	ldr	r3, [pc, #72]	; (801d6e8 <socket+0x1d4>)
 801d69e:	881b      	ldrh	r3, [r3, #0]
 801d6a0:	b29a      	uxth	r2, r3
 801d6a2:	69bb      	ldr	r3, [r7, #24]
 801d6a4:	80da      	strh	r2, [r3, #6]
            M2M_INFO("Socket %d session ID = %d\r\n", sock, gu16SessionID);
 801d6a6:	4811      	ldr	r0, [pc, #68]	; (801d6ec <socket+0x1d8>)
 801d6a8:	f000 ff4c 	bl	801e544 <iprintf>
 801d6ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801d6b0:	4a0d      	ldr	r2, [pc, #52]	; (801d6e8 <socket+0x1d4>)
 801d6b2:	8812      	ldrh	r2, [r2, #0]
 801d6b4:	b292      	uxth	r2, r2
 801d6b6:	4619      	mov	r1, r3
 801d6b8:	480d      	ldr	r0, [pc, #52]	; (801d6f0 <socket+0x1dc>)
 801d6ba:	f000 ff43 	bl	801e544 <iprintf>
 801d6be:	200d      	movs	r0, #13
 801d6c0:	f000 ff58 	bl	801e574 <putchar>
        }
    }
    return sock;
 801d6c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801d6c8:	4618      	mov	r0, r3
 801d6ca:	3720      	adds	r7, #32
 801d6cc:	46bd      	mov	sp, r7
 801d6ce:	bd80      	pop	{r7, pc}
 801d6d0:	2001dfe0 	.word	0x2001dfe0
 801d6d4:	2001df08 	.word	0x2001df08
 801d6d8:	92492493 	.word	0x92492493
 801d6dc:	2001df78 	.word	0x2001df78
 801d6e0:	2001dfe1 	.word	0x2001dfe1
 801d6e4:	2001dfb8 	.word	0x2001dfb8
 801d6e8:	2001dfc8 	.word	0x2001dfc8
 801d6ec:	080216c8 	.word	0x080216c8
 801d6f0:	080216e8 	.word	0x080216e8

0801d6f4 <connect>:
        Connect to a remote TCP Server.

Return
*********************************************************************/
sint8 connect(SOCKET sock, struct sockaddr *pstrAddr, uint8 u8AddrLen)
{
 801d6f4:	b580      	push	{r7, lr}
 801d6f6:	b08a      	sub	sp, #40	; 0x28
 801d6f8:	af04      	add	r7, sp, #16
 801d6fa:	4603      	mov	r3, r0
 801d6fc:	6039      	str	r1, [r7, #0]
 801d6fe:	71fb      	strb	r3, [r7, #7]
 801d700:	4613      	mov	r3, r2
 801d702:	71bb      	strb	r3, [r7, #6]
    sint8   s8Ret = SOCK_ERR_INVALID_ARG;
 801d704:	23fa      	movs	r3, #250	; 0xfa
 801d706:	75fb      	strb	r3, [r7, #23]
    if((sock >= 0) && (pstrAddr != NULL) && (gastrSockets[sock].bIsUsed == 1) && (u8AddrLen != 0))
 801d708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d70c:	2b00      	cmp	r3, #0
 801d70e:	db4f      	blt.n	801d7b0 <connect+0xbc>
 801d710:	683b      	ldr	r3, [r7, #0]
 801d712:	2b00      	cmp	r3, #0
 801d714:	d04c      	beq.n	801d7b0 <connect+0xbc>
 801d716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d71a:	4a28      	ldr	r2, [pc, #160]	; (801d7bc <connect+0xc8>)
 801d71c:	011b      	lsls	r3, r3, #4
 801d71e:	4413      	add	r3, r2
 801d720:	330a      	adds	r3, #10
 801d722:	781b      	ldrb	r3, [r3, #0]
 801d724:	b2db      	uxtb	r3, r3
 801d726:	2b01      	cmp	r3, #1
 801d728:	d142      	bne.n	801d7b0 <connect+0xbc>
 801d72a:	79bb      	ldrb	r3, [r7, #6]
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	d03f      	beq.n	801d7b0 <connect+0xbc>
    {
        tstrConnectCmd  strConnect;
        uint8           u8Cmd = SOCKET_CMD_CONNECT;
 801d730:	2344      	movs	r3, #68	; 0x44
 801d732:	75bb      	strb	r3, [r7, #22]
        if((gastrSockets[sock].u8SSLFlags) & SSL_FLAGS_ACTIVE)
 801d734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d738:	4a20      	ldr	r2, [pc, #128]	; (801d7bc <connect+0xc8>)
 801d73a:	011b      	lsls	r3, r3, #4
 801d73c:	4413      	add	r3, r2
 801d73e:	330b      	adds	r3, #11
 801d740:	781b      	ldrb	r3, [r3, #0]
 801d742:	b2db      	uxtb	r3, r3
 801d744:	f003 0301 	and.w	r3, r3, #1
 801d748:	2b00      	cmp	r3, #0
 801d74a:	d00a      	beq.n	801d762 <connect+0x6e>
        {
            u8Cmd = SOCKET_CMD_SSL_CONNECT;
 801d74c:	234b      	movs	r3, #75	; 0x4b
 801d74e:	75bb      	strb	r3, [r7, #22]
            strConnect.u8SslFlags = gastrSockets[sock].u8SSLFlags;
 801d750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d754:	4a19      	ldr	r2, [pc, #100]	; (801d7bc <connect+0xc8>)
 801d756:	011b      	lsls	r3, r3, #4
 801d758:	4413      	add	r3, r2
 801d75a:	330b      	adds	r3, #11
 801d75c:	781b      	ldrb	r3, [r3, #0]
 801d75e:	b2db      	uxtb	r3, r3
 801d760:	747b      	strb	r3, [r7, #17]
        }
        strConnect.sock = sock;
 801d762:	79fb      	ldrb	r3, [r7, #7]
 801d764:	743b      	strb	r3, [r7, #16]
        m2m_memcpy((uint8 *)&strConnect.strAddr, (uint8 *)pstrAddr, sizeof(tstrSockAddr));
 801d766:	f107 0308 	add.w	r3, r7, #8
 801d76a:	2208      	movs	r2, #8
 801d76c:	6839      	ldr	r1, [r7, #0]
 801d76e:	4618      	mov	r0, r3
 801d770:	f7fb fbbc 	bl	8018eec <m2m_memcpy>

        strConnect.u16SessionID     = gastrSockets[sock].u16SessionID;
 801d774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d778:	4a10      	ldr	r2, [pc, #64]	; (801d7bc <connect+0xc8>)
 801d77a:	011b      	lsls	r3, r3, #4
 801d77c:	4413      	add	r3, r2
 801d77e:	3306      	adds	r3, #6
 801d780:	881b      	ldrh	r3, [r3, #0]
 801d782:	b29b      	uxth	r3, r3
 801d784:	827b      	strh	r3, [r7, #18]
        s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strConnect, sizeof(tstrConnectCmd), NULL, 0, 0);
 801d786:	f107 0208 	add.w	r2, r7, #8
 801d78a:	7db9      	ldrb	r1, [r7, #22]
 801d78c:	2300      	movs	r3, #0
 801d78e:	9302      	str	r3, [sp, #8]
 801d790:	2300      	movs	r3, #0
 801d792:	9301      	str	r3, [sp, #4]
 801d794:	2300      	movs	r3, #0
 801d796:	9300      	str	r3, [sp, #0]
 801d798:	230c      	movs	r3, #12
 801d79a:	2002      	movs	r0, #2
 801d79c:	f7fb fe46 	bl	801942c <hif_send>
 801d7a0:	4603      	mov	r3, r0
 801d7a2:	75fb      	strb	r3, [r7, #23]
        if(s8Ret != SOCK_ERR_NO_ERROR)
 801d7a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d001      	beq.n	801d7b0 <connect+0xbc>
        {
            s8Ret = SOCK_ERR_INVALID;
 801d7ac:	23f7      	movs	r3, #247	; 0xf7
 801d7ae:	75fb      	strb	r3, [r7, #23]
        }
    }
    return s8Ret;
 801d7b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801d7b4:	4618      	mov	r0, r3
 801d7b6:	3718      	adds	r7, #24
 801d7b8:	46bd      	mov	sp, r7
 801d7ba:	bd80      	pop	{r7, pc}
 801d7bc:	2001df08 	.word	0x2001df08

0801d7c0 <send>:
Description

Return
*********************************************************************/
sint16 send(SOCKET sock, void *pvSendBuffer, uint16 u16SendLength, uint16 flags)
{
 801d7c0:	b580      	push	{r7, lr}
 801d7c2:	b08e      	sub	sp, #56	; 0x38
 801d7c4:	af04      	add	r7, sp, #16
 801d7c6:	60b9      	str	r1, [r7, #8]
 801d7c8:	4611      	mov	r1, r2
 801d7ca:	461a      	mov	r2, r3
 801d7cc:	4603      	mov	r3, r0
 801d7ce:	73fb      	strb	r3, [r7, #15]
 801d7d0:	460b      	mov	r3, r1
 801d7d2:	81bb      	strh	r3, [r7, #12]
 801d7d4:	4613      	mov	r3, r2
 801d7d6:	80fb      	strh	r3, [r7, #6]
    sint16  s16Ret = SOCK_ERR_INVALID_ARG;
 801d7d8:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 801d7dc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if((sock >= 0) && (pvSendBuffer != NULL) && (u16SendLength <= SOCKET_BUFFER_MAX_LENGTH) && (gastrSockets[sock].bIsUsed == 1))
 801d7de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d7e2:	2b00      	cmp	r3, #0
 801d7e4:	db59      	blt.n	801d89a <send+0xda>
 801d7e6:	68bb      	ldr	r3, [r7, #8]
 801d7e8:	2b00      	cmp	r3, #0
 801d7ea:	d056      	beq.n	801d89a <send+0xda>
 801d7ec:	89bb      	ldrh	r3, [r7, #12]
 801d7ee:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 801d7f2:	d852      	bhi.n	801d89a <send+0xda>
 801d7f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d7f8:	4a2b      	ldr	r2, [pc, #172]	; (801d8a8 <send+0xe8>)
 801d7fa:	011b      	lsls	r3, r3, #4
 801d7fc:	4413      	add	r3, r2
 801d7fe:	330a      	adds	r3, #10
 801d800:	781b      	ldrb	r3, [r3, #0]
 801d802:	b2db      	uxtb	r3, r3
 801d804:	2b01      	cmp	r3, #1
 801d806:	d148      	bne.n	801d89a <send+0xda>
    {
        uint16          u16DataOffset;
        tstrSendCmd     strSend;
        uint8           u8Cmd;

        u8Cmd           = SOCKET_CMD_SEND;
 801d808:	2345      	movs	r3, #69	; 0x45
 801d80a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        u16DataOffset   = TCP_TX_PACKET_OFFSET;
 801d80e:	2350      	movs	r3, #80	; 0x50
 801d810:	84bb      	strh	r3, [r7, #36]	; 0x24

        strSend.sock        = sock;
 801d812:	7bfb      	ldrb	r3, [r7, #15]
 801d814:	743b      	strb	r3, [r7, #16]
        strSend.u16DataSize = NM_BSP_B_L_16(u16SendLength);
 801d816:	89bb      	ldrh	r3, [r7, #12]
 801d818:	827b      	strh	r3, [r7, #18]
        strSend.u16SessionID        = gastrSockets[sock].u16SessionID;
 801d81a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d81e:	4a22      	ldr	r2, [pc, #136]	; (801d8a8 <send+0xe8>)
 801d820:	011b      	lsls	r3, r3, #4
 801d822:	4413      	add	r3, r2
 801d824:	3306      	adds	r3, #6
 801d826:	881b      	ldrh	r3, [r3, #0]
 801d828:	b29b      	uxth	r3, r3
 801d82a:	83bb      	strh	r3, [r7, #28]

        if(sock >= TCP_SOCK_MAX)
 801d82c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d830:	2b06      	cmp	r3, #6
 801d832:	dd01      	ble.n	801d838 <send+0x78>
        {
            u16DataOffset = UDP_TX_PACKET_OFFSET;
 801d834:	2344      	movs	r3, #68	; 0x44
 801d836:	84bb      	strh	r3, [r7, #36]	; 0x24
        }
        if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 801d838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d83c:	4a1a      	ldr	r2, [pc, #104]	; (801d8a8 <send+0xe8>)
 801d83e:	011b      	lsls	r3, r3, #4
 801d840:	4413      	add	r3, r2
 801d842:	330b      	adds	r3, #11
 801d844:	781b      	ldrb	r3, [r3, #0]
 801d846:	b2db      	uxtb	r3, r3
 801d848:	f003 0301 	and.w	r3, r3, #1
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d00a      	beq.n	801d866 <send+0xa6>
        {
            u8Cmd           = SOCKET_CMD_SSL_SEND;
 801d850:	234c      	movs	r3, #76	; 0x4c
 801d852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            u16DataOffset   = gastrSockets[sock].u16DataOffset;
 801d856:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d85a:	4a13      	ldr	r2, [pc, #76]	; (801d8a8 <send+0xe8>)
 801d85c:	011b      	lsls	r3, r3, #4
 801d85e:	4413      	add	r3, r2
 801d860:	3308      	adds	r3, #8
 801d862:	881b      	ldrh	r3, [r3, #0]
 801d864:	84bb      	strh	r3, [r7, #36]	; 0x24
        }

        s16Ret =  SOCKET_REQUEST(u8Cmd|M2M_REQ_DATA_PKT, (uint8*)&strSend, sizeof(tstrSendCmd), pvSendBuffer, u16SendLength, u16DataOffset);
 801d866:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d86a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801d86e:	b2d9      	uxtb	r1, r3
 801d870:	f107 0210 	add.w	r2, r7, #16
 801d874:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d876:	9302      	str	r3, [sp, #8]
 801d878:	89bb      	ldrh	r3, [r7, #12]
 801d87a:	9301      	str	r3, [sp, #4]
 801d87c:	68bb      	ldr	r3, [r7, #8]
 801d87e:	9300      	str	r3, [sp, #0]
 801d880:	2310      	movs	r3, #16
 801d882:	2002      	movs	r0, #2
 801d884:	f7fb fdd2 	bl	801942c <hif_send>
 801d888:	4603      	mov	r3, r0
 801d88a:	84fb      	strh	r3, [r7, #38]	; 0x26
        if(s16Ret != SOCK_ERR_NO_ERROR)
 801d88c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801d890:	2b00      	cmp	r3, #0
 801d892:	d002      	beq.n	801d89a <send+0xda>
        {
            s16Ret = SOCK_ERR_BUFFER_FULL;
 801d894:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 801d898:	84fb      	strh	r3, [r7, #38]	; 0x26
        }
    }
    return s16Ret;
 801d89a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
}
 801d89e:	4618      	mov	r0, r3
 801d8a0:	3728      	adds	r7, #40	; 0x28
 801d8a2:	46bd      	mov	sp, r7
 801d8a4:	bd80      	pop	{r7, pc}
 801d8a6:	bf00      	nop
 801d8a8:	2001df08 	.word	0x2001df08

0801d8ac <recv>:

Return

*********************************************************************/
sint16 recv(SOCKET sock, void *pvRecvBuf, uint16 u16BufLen, uint32 u32Timeoutmsec)
{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b08c      	sub	sp, #48	; 0x30
 801d8b0:	af04      	add	r7, sp, #16
 801d8b2:	60b9      	str	r1, [r7, #8]
 801d8b4:	607b      	str	r3, [r7, #4]
 801d8b6:	4603      	mov	r3, r0
 801d8b8:	73fb      	strb	r3, [r7, #15]
 801d8ba:	4613      	mov	r3, r2
 801d8bc:	81bb      	strh	r3, [r7, #12]
    sint16  s16Ret = SOCK_ERR_INVALID_ARG;
 801d8be:	f64f 73fa 	movw	r3, #65530	; 0xfffa
 801d8c2:	83fb      	strh	r3, [r7, #30]

    if((sock >= 0) && (pvRecvBuf != NULL) && (u16BufLen != 0) && (gastrSockets[sock].bIsUsed == 1))
 801d8c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d8c8:	2b00      	cmp	r3, #0
 801d8ca:	db6e      	blt.n	801d9aa <recv+0xfe>
 801d8cc:	68bb      	ldr	r3, [r7, #8]
 801d8ce:	2b00      	cmp	r3, #0
 801d8d0:	d06b      	beq.n	801d9aa <recv+0xfe>
 801d8d2:	89bb      	ldrh	r3, [r7, #12]
 801d8d4:	2b00      	cmp	r3, #0
 801d8d6:	d068      	beq.n	801d9aa <recv+0xfe>
 801d8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d8dc:	4a36      	ldr	r2, [pc, #216]	; (801d9b8 <recv+0x10c>)
 801d8de:	011b      	lsls	r3, r3, #4
 801d8e0:	4413      	add	r3, r2
 801d8e2:	330a      	adds	r3, #10
 801d8e4:	781b      	ldrb	r3, [r3, #0]
 801d8e6:	b2db      	uxtb	r3, r3
 801d8e8:	2b01      	cmp	r3, #1
 801d8ea:	d15e      	bne.n	801d9aa <recv+0xfe>
    {
        s16Ret = SOCK_ERR_NO_ERROR;
 801d8ec:	2300      	movs	r3, #0
 801d8ee:	83fb      	strh	r3, [r7, #30]
        gastrSockets[sock].pu8UserBuffer        = (uint8*)pvRecvBuf;
 801d8f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d8f4:	4a30      	ldr	r2, [pc, #192]	; (801d9b8 <recv+0x10c>)
 801d8f6:	011b      	lsls	r3, r3, #4
 801d8f8:	4413      	add	r3, r2
 801d8fa:	68ba      	ldr	r2, [r7, #8]
 801d8fc:	601a      	str	r2, [r3, #0]
        gastrSockets[sock].u16UserBufferSize    = u16BufLen;
 801d8fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d902:	4a2d      	ldr	r2, [pc, #180]	; (801d9b8 <recv+0x10c>)
 801d904:	011b      	lsls	r3, r3, #4
 801d906:	4413      	add	r3, r2
 801d908:	3304      	adds	r3, #4
 801d90a:	89ba      	ldrh	r2, [r7, #12]
 801d90c:	801a      	strh	r2, [r3, #0]

        if(!gastrSockets[sock].bIsRecvPending)
 801d90e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d912:	4a29      	ldr	r2, [pc, #164]	; (801d9b8 <recv+0x10c>)
 801d914:	011b      	lsls	r3, r3, #4
 801d916:	4413      	add	r3, r2
 801d918:	330c      	adds	r3, #12
 801d91a:	781b      	ldrb	r3, [r3, #0]
 801d91c:	b2db      	uxtb	r3, r3
 801d91e:	2b00      	cmp	r3, #0
 801d920:	d143      	bne.n	801d9aa <recv+0xfe>
        {
            tstrRecvCmd strRecv;
            uint8       u8Cmd = SOCKET_CMD_RECV;
 801d922:	2346      	movs	r3, #70	; 0x46
 801d924:	777b      	strb	r3, [r7, #29]

            gastrSockets[sock].bIsRecvPending = 1;
 801d926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d92a:	4a23      	ldr	r2, [pc, #140]	; (801d9b8 <recv+0x10c>)
 801d92c:	011b      	lsls	r3, r3, #4
 801d92e:	4413      	add	r3, r2
 801d930:	330c      	adds	r3, #12
 801d932:	2201      	movs	r2, #1
 801d934:	701a      	strb	r2, [r3, #0]
            if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 801d936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d93a:	4a1f      	ldr	r2, [pc, #124]	; (801d9b8 <recv+0x10c>)
 801d93c:	011b      	lsls	r3, r3, #4
 801d93e:	4413      	add	r3, r2
 801d940:	330b      	adds	r3, #11
 801d942:	781b      	ldrb	r3, [r3, #0]
 801d944:	b2db      	uxtb	r3, r3
 801d946:	f003 0301 	and.w	r3, r3, #1
 801d94a:	2b00      	cmp	r3, #0
 801d94c:	d001      	beq.n	801d952 <recv+0xa6>
            {
                u8Cmd = SOCKET_CMD_SSL_RECV;
 801d94e:	234d      	movs	r3, #77	; 0x4d
 801d950:	777b      	strb	r3, [r7, #29]
            }

            /* Check the timeout value. */
            if(u32Timeoutmsec == 0)
 801d952:	687b      	ldr	r3, [r7, #4]
 801d954:	2b00      	cmp	r3, #0
 801d956:	d103      	bne.n	801d960 <recv+0xb4>
                strRecv.u32Timeoutmsec = 0xFFFFFFFF;
 801d958:	f04f 33ff 	mov.w	r3, #4294967295
 801d95c:	613b      	str	r3, [r7, #16]
 801d95e:	e001      	b.n	801d964 <recv+0xb8>
            else
                strRecv.u32Timeoutmsec = NM_BSP_B_L_32(u32Timeoutmsec);
 801d960:	687b      	ldr	r3, [r7, #4]
 801d962:	613b      	str	r3, [r7, #16]
            strRecv.sock = sock;
 801d964:	7bfb      	ldrb	r3, [r7, #15]
 801d966:	753b      	strb	r3, [r7, #20]
            strRecv.u16SessionID        = gastrSockets[sock].u16SessionID;
 801d968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d96c:	4a12      	ldr	r2, [pc, #72]	; (801d9b8 <recv+0x10c>)
 801d96e:	011b      	lsls	r3, r3, #4
 801d970:	4413      	add	r3, r2
 801d972:	3306      	adds	r3, #6
 801d974:	881b      	ldrh	r3, [r3, #0]
 801d976:	b29b      	uxth	r3, r3
 801d978:	82fb      	strh	r3, [r7, #22]
            strRecv.u16BufLen           = u16BufLen;
 801d97a:	89bb      	ldrh	r3, [r7, #12]
 801d97c:	833b      	strh	r3, [r7, #24]

            s16Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strRecv, sizeof(tstrRecvCmd), NULL, 0, 0);
 801d97e:	f107 0210 	add.w	r2, r7, #16
 801d982:	7f79      	ldrb	r1, [r7, #29]
 801d984:	2300      	movs	r3, #0
 801d986:	9302      	str	r3, [sp, #8]
 801d988:	2300      	movs	r3, #0
 801d98a:	9301      	str	r3, [sp, #4]
 801d98c:	2300      	movs	r3, #0
 801d98e:	9300      	str	r3, [sp, #0]
 801d990:	230c      	movs	r3, #12
 801d992:	2002      	movs	r0, #2
 801d994:	f7fb fd4a 	bl	801942c <hif_send>
 801d998:	4603      	mov	r3, r0
 801d99a:	83fb      	strh	r3, [r7, #30]
            if(s16Ret != SOCK_ERR_NO_ERROR)
 801d99c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801d9a0:	2b00      	cmp	r3, #0
 801d9a2:	d002      	beq.n	801d9aa <recv+0xfe>
            {
                s16Ret = SOCK_ERR_BUFFER_FULL;
 801d9a4:	f64f 73f2 	movw	r3, #65522	; 0xfff2
 801d9a8:	83fb      	strh	r3, [r7, #30]
            }
        }
    }
    return s16Ret;
 801d9aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 801d9ae:	4618      	mov	r0, r3
 801d9b0:	3720      	adds	r7, #32
 801d9b2:	46bd      	mov	sp, r7
 801d9b4:	bd80      	pop	{r7, pc}
 801d9b6:	bf00      	nop
 801d9b8:	2001df08 	.word	0x2001df08

0801d9bc <close>:

Return
        None.
*********************************************************************/
sint8 close(SOCKET sock)
{
 801d9bc:	b580      	push	{r7, lr}
 801d9be:	b088      	sub	sp, #32
 801d9c0:	af04      	add	r7, sp, #16
 801d9c2:	4603      	mov	r3, r0
 801d9c4:	71fb      	strb	r3, [r7, #7]
    sint8   s8Ret = SOCK_ERR_INVALID_ARG;
 801d9c6:	23fa      	movs	r3, #250	; 0xfa
 801d9c8:	73fb      	strb	r3, [r7, #15]

    M2M_INFO("Sock to delete <%d> (used %u)\n", sock, gastrSockets[sock].bIsUsed);
 801d9ca:	4831      	ldr	r0, [pc, #196]	; (801da90 <close+0xd4>)
 801d9cc:	f000 fdba 	bl	801e544 <iprintf>
 801d9d0:	f997 1007 	ldrsb.w	r1, [r7, #7]
 801d9d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d9d8:	4a2e      	ldr	r2, [pc, #184]	; (801da94 <close+0xd8>)
 801d9da:	011b      	lsls	r3, r3, #4
 801d9dc:	4413      	add	r3, r2
 801d9de:	330a      	adds	r3, #10
 801d9e0:	781b      	ldrb	r3, [r3, #0]
 801d9e2:	b2db      	uxtb	r3, r3
 801d9e4:	461a      	mov	r2, r3
 801d9e6:	482c      	ldr	r0, [pc, #176]	; (801da98 <close+0xdc>)
 801d9e8:	f000 fdac 	bl	801e544 <iprintf>
 801d9ec:	200d      	movs	r0, #13
 801d9ee:	f000 fdc1 	bl	801e574 <putchar>

    if(sock >= 0 && (gastrSockets[sock].bIsUsed == 1))
 801d9f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d9f6:	2b00      	cmp	r3, #0
 801d9f8:	db43      	blt.n	801da82 <close+0xc6>
 801d9fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801d9fe:	4a25      	ldr	r2, [pc, #148]	; (801da94 <close+0xd8>)
 801da00:	011b      	lsls	r3, r3, #4
 801da02:	4413      	add	r3, r2
 801da04:	330a      	adds	r3, #10
 801da06:	781b      	ldrb	r3, [r3, #0]
 801da08:	b2db      	uxtb	r3, r3
 801da0a:	2b01      	cmp	r3, #1
 801da0c:	d139      	bne.n	801da82 <close+0xc6>
    {
        uint8   u8Cmd = SOCKET_CMD_CLOSE;
 801da0e:	2349      	movs	r3, #73	; 0x49
 801da10:	73bb      	strb	r3, [r7, #14]
        tstrCloseCmd strclose;
        strclose.sock = sock;
 801da12:	79fb      	ldrb	r3, [r7, #7]
 801da14:	723b      	strb	r3, [r7, #8]
        strclose.u16SessionID       = gastrSockets[sock].u16SessionID;
 801da16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da1a:	4a1e      	ldr	r2, [pc, #120]	; (801da94 <close+0xd8>)
 801da1c:	011b      	lsls	r3, r3, #4
 801da1e:	4413      	add	r3, r2
 801da20:	3306      	adds	r3, #6
 801da22:	881b      	ldrh	r3, [r3, #0]
 801da24:	b29b      	uxth	r3, r3
 801da26:	817b      	strh	r3, [r7, #10]

        if(gastrSockets[sock].u8SSLFlags & SSL_FLAGS_ACTIVE)
 801da28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da2c:	4a19      	ldr	r2, [pc, #100]	; (801da94 <close+0xd8>)
 801da2e:	011b      	lsls	r3, r3, #4
 801da30:	4413      	add	r3, r2
 801da32:	330b      	adds	r3, #11
 801da34:	781b      	ldrb	r3, [r3, #0]
 801da36:	b2db      	uxtb	r3, r3
 801da38:	f003 0301 	and.w	r3, r3, #1
 801da3c:	2b00      	cmp	r3, #0
 801da3e:	d001      	beq.n	801da44 <close+0x88>
        {
            u8Cmd = SOCKET_CMD_SSL_CLOSE;
 801da40:	234e      	movs	r3, #78	; 0x4e
 801da42:	73bb      	strb	r3, [r7, #14]
        }
        s8Ret = SOCKET_REQUEST(u8Cmd, (uint8*)&strclose, sizeof(tstrCloseCmd), NULL, 0, 0);
 801da44:	f107 0208 	add.w	r2, r7, #8
 801da48:	7bb9      	ldrb	r1, [r7, #14]
 801da4a:	2300      	movs	r3, #0
 801da4c:	9302      	str	r3, [sp, #8]
 801da4e:	2300      	movs	r3, #0
 801da50:	9301      	str	r3, [sp, #4]
 801da52:	2300      	movs	r3, #0
 801da54:	9300      	str	r3, [sp, #0]
 801da56:	2304      	movs	r3, #4
 801da58:	2002      	movs	r0, #2
 801da5a:	f7fb fce7 	bl	801942c <hif_send>
 801da5e:	4603      	mov	r3, r0
 801da60:	73fb      	strb	r3, [r7, #15]
        if(s8Ret != SOCK_ERR_NO_ERROR)
 801da62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801da66:	2b00      	cmp	r3, #0
 801da68:	d001      	beq.n	801da6e <close+0xb2>
        {
            s8Ret = SOCK_ERR_INVALID;
 801da6a:	23f7      	movs	r3, #247	; 0xf7
 801da6c:	73fb      	strb	r3, [r7, #15]
        }
        m2m_memset((uint8*)&gastrSockets[sock], 0, sizeof(tstrSocket));
 801da6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801da72:	011b      	lsls	r3, r3, #4
 801da74:	4a07      	ldr	r2, [pc, #28]	; (801da94 <close+0xd8>)
 801da76:	4413      	add	r3, r2
 801da78:	2210      	movs	r2, #16
 801da7a:	2100      	movs	r1, #0
 801da7c:	4618      	mov	r0, r3
 801da7e:	f7fb fa55 	bl	8018f2c <m2m_memset>
    }
    return s8Ret;
 801da82:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801da86:	4618      	mov	r0, r3
 801da88:	3710      	adds	r7, #16
 801da8a:	46bd      	mov	sp, r7
 801da8c:	bd80      	pop	{r7, pc}
 801da8e:	bf00      	nop
 801da90:	080216c8 	.word	0x080216c8
 801da94:	2001df08 	.word	0x2001df08
 801da98:	08021704 	.word	0x08021704

0801da9c <gethostbyname>:

Return
        None.
*********************************************************************/
sint8 gethostbyname(uint8 *pcHostName)
{
 801da9c:	b580      	push	{r7, lr}
 801da9e:	b088      	sub	sp, #32
 801daa0:	af04      	add	r7, sp, #16
 801daa2:	6078      	str	r0, [r7, #4]
    sint8   s8Err = SOCK_ERR_INVALID_ARG;
 801daa4:	23fa      	movs	r3, #250	; 0xfa
 801daa6:	73fb      	strb	r3, [r7, #15]
    uint8   u8HostNameSize = (uint8)m2m_strlen(pcHostName);
 801daa8:	6878      	ldr	r0, [r7, #4]
 801daaa:	f7fb fa5c 	bl	8018f66 <m2m_strlen>
 801daae:	4603      	mov	r3, r0
 801dab0:	73bb      	strb	r3, [r7, #14]
    if(u8HostNameSize <= HOSTNAME_MAX_SIZE)
 801dab2:	7bbb      	ldrb	r3, [r7, #14]
 801dab4:	2b64      	cmp	r3, #100	; 0x64
 801dab6:	d816      	bhi.n	801dae6 <gethostbyname+0x4a>
    {
        s8Err = SOCKET_REQUEST(SOCKET_CMD_DNS_RESOLVE|M2M_REQ_DATA_PKT, (uint8*)pcHostName, u8HostNameSize + 1, NULL, 0, 0);
 801dab8:	7bbb      	ldrb	r3, [r7, #14]
 801daba:	b29b      	uxth	r3, r3
 801dabc:	3301      	adds	r3, #1
 801dabe:	b29b      	uxth	r3, r3
 801dac0:	2200      	movs	r2, #0
 801dac2:	9202      	str	r2, [sp, #8]
 801dac4:	2200      	movs	r2, #0
 801dac6:	9201      	str	r2, [sp, #4]
 801dac8:	2200      	movs	r2, #0
 801daca:	9200      	str	r2, [sp, #0]
 801dacc:	687a      	ldr	r2, [r7, #4]
 801dace:	21ca      	movs	r1, #202	; 0xca
 801dad0:	2002      	movs	r0, #2
 801dad2:	f7fb fcab 	bl	801942c <hif_send>
 801dad6:	4603      	mov	r3, r0
 801dad8:	73fb      	strb	r3, [r7, #15]
        if(s8Err != SOCK_ERR_NO_ERROR)
 801dada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801dade:	2b00      	cmp	r3, #0
 801dae0:	d001      	beq.n	801dae6 <gethostbyname+0x4a>
        {
            s8Err = SOCK_ERR_INVALID;
 801dae2:	23f7      	movs	r3, #247	; 0xf7
 801dae4:	73fb      	strb	r3, [r7, #15]
        }
    }
    return s8Err;
 801dae6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801daea:	4618      	mov	r0, r3
 801daec:	3710      	adds	r7, #16
 801daee:	46bd      	mov	sp, r7
 801daf0:	bd80      	pop	{r7, pc}
	...

0801daf4 <event_post>:
    event->next = event_free_list;
    event_free_list = event;
}

void event_post(uint16_t msg_id, uint16_t src_id, void * data)
{
 801daf4:	b580      	push	{r7, lr}
 801daf6:	b084      	sub	sp, #16
 801daf8:	af00      	add	r7, sp, #0
 801dafa:	4603      	mov	r3, r0
 801dafc:	603a      	str	r2, [r7, #0]
 801dafe:	80fb      	strh	r3, [r7, #6]
 801db00:	460b      	mov	r3, r1
 801db02:	80bb      	strh	r3, [r7, #4]

    // get a free event object
    struct event* evt = event_free_list;
 801db04:	4b18      	ldr	r3, [pc, #96]	; (801db68 <event_post+0x74>)
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	60bb      	str	r3, [r7, #8]
    if(evt != NULL)
 801db0a:	68bb      	ldr	r3, [r7, #8]
 801db0c:	2b00      	cmp	r3, #0
 801db0e:	d027      	beq.n	801db60 <event_post+0x6c>
    {
        event_free_list = evt->next;
 801db10:	68bb      	ldr	r3, [r7, #8]
 801db12:	681b      	ldr	r3, [r3, #0]
 801db14:	4a14      	ldr	r2, [pc, #80]	; (801db68 <event_post+0x74>)
 801db16:	6013      	str	r3, [r2, #0]

        evt->next = NULL;
 801db18:	68bb      	ldr	r3, [r7, #8]
 801db1a:	2200      	movs	r2, #0
 801db1c:	601a      	str	r2, [r3, #0]
        evt->data = data;
 801db1e:	68bb      	ldr	r3, [r7, #8]
 801db20:	683a      	ldr	r2, [r7, #0]
 801db22:	609a      	str	r2, [r3, #8]
        evt->msg_id = msg_id;
 801db24:	68bb      	ldr	r3, [r7, #8]
 801db26:	88fa      	ldrh	r2, [r7, #6]
 801db28:	809a      	strh	r2, [r3, #4]
        evt->src_id = src_id;
 801db2a:	68bb      	ldr	r3, [r7, #8]
 801db2c:	88ba      	ldrh	r2, [r7, #4]
 801db2e:	80da      	strh	r2, [r3, #6]

        if(event_pending_list == NULL)
 801db30:	4b0e      	ldr	r3, [pc, #56]	; (801db6c <event_post+0x78>)
 801db32:	681b      	ldr	r3, [r3, #0]
 801db34:	2b00      	cmp	r3, #0
 801db36:	d103      	bne.n	801db40 <event_post+0x4c>
        {
            event_pending_list = evt;
 801db38:	4a0c      	ldr	r2, [pc, #48]	; (801db6c <event_post+0x78>)
 801db3a:	68bb      	ldr	r3, [r7, #8]
 801db3c:	6013      	str	r3, [r2, #0]
 801db3e:	e00d      	b.n	801db5c <event_post+0x68>
        }
        else
        {
            struct event* cur = event_pending_list;
 801db40:	4b0a      	ldr	r3, [pc, #40]	; (801db6c <event_post+0x78>)
 801db42:	681b      	ldr	r3, [r3, #0]
 801db44:	60fb      	str	r3, [r7, #12]
            while(cur->next != NULL)
 801db46:	e002      	b.n	801db4e <event_post+0x5a>
            {
                cur = cur->next;
 801db48:	68fb      	ldr	r3, [r7, #12]
 801db4a:	681b      	ldr	r3, [r3, #0]
 801db4c:	60fb      	str	r3, [r7, #12]
            while(cur->next != NULL)
 801db4e:	68fb      	ldr	r3, [r7, #12]
 801db50:	681b      	ldr	r3, [r3, #0]
 801db52:	2b00      	cmp	r3, #0
 801db54:	d1f8      	bne.n	801db48 <event_post+0x54>
            }
            cur->next = evt;
 801db56:	68fb      	ldr	r3, [r7, #12]
 801db58:	68ba      	ldr	r2, [r7, #8]
 801db5a:	601a      	str	r2, [r3, #0]
        }

        platform_event_signal();
 801db5c:	f000 fa58 	bl	801e010 <platform_event_signal>
    }
}
 801db60:	bf00      	nop
 801db62:	3710      	adds	r7, #16
 801db64:	46bd      	mov	sp, r7
 801db66:	bd80      	pop	{r7, pc}
 801db68:	2001dfe4 	.word	0x2001dfe4
 801db6c:	2001dfe8 	.word	0x2001dfe8

0801db70 <special_events_handler>:

    return evt_num;
}

uint32_t special_events_handler(uint16_t msg_id, uint16_t src_id, uint8_t* data)
{
 801db70:	b580      	push	{r7, lr}
 801db72:	b084      	sub	sp, #16
 801db74:	af00      	add	r7, sp, #0
 801db76:	4603      	mov	r3, r0
 801db78:	603a      	str	r2, [r7, #0]
 801db7a:	80fb      	strh	r3, [r7, #6]
 801db7c:	460b      	mov	r3, r1
 801db7e:	80bb      	strh	r3, [r7, #4]
    uint32_t consumed = 0;
 801db80:	2300      	movs	r3, #0
 801db82:	60fb      	str	r3, [r7, #12]

    if (msg_id == watched_event.msg_id
 801db84:	4b12      	ldr	r3, [pc, #72]	; (801dbd0 <special_events_handler+0x60>)
 801db86:	881b      	ldrh	r3, [r3, #0]
 801db88:	88fa      	ldrh	r2, [r7, #6]
 801db8a:	429a      	cmp	r2, r3
 801db8c:	d110      	bne.n	801dbb0 <special_events_handler+0x40>
    &&  src_id == watched_event.src_id)
 801db8e:	4b10      	ldr	r3, [pc, #64]	; (801dbd0 <special_events_handler+0x60>)
 801db90:	885b      	ldrh	r3, [r3, #2]
 801db92:	88ba      	ldrh	r2, [r7, #4]
 801db94:	429a      	cmp	r2, r3
 801db96:	d10b      	bne.n	801dbb0 <special_events_handler+0x40>
    {
        watched_event.msg_id = 0xFFFF;
 801db98:	4b0d      	ldr	r3, [pc, #52]	; (801dbd0 <special_events_handler+0x60>)
 801db9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801db9e:	801a      	strh	r2, [r3, #0]
        watched_event.params = data;
 801dba0:	4a0b      	ldr	r2, [pc, #44]	; (801dbd0 <special_events_handler+0x60>)
 801dba2:	683b      	ldr	r3, [r7, #0]
 801dba4:	6053      	str	r3, [r2, #4]
        platform_cmd_cmpl_signal();
 801dba6:	f000 fa27 	bl	801dff8 <platform_cmd_cmpl_signal>

        consumed = 1;
 801dbaa:	2301      	movs	r3, #1
 801dbac:	60fb      	str	r3, [r7, #12]
 801dbae:	e009      	b.n	801dbc4 <special_events_handler+0x54>
    }
    else if(msg_id == GAPC_CONNECTION_REQ_IND)
 801dbb0:	88fb      	ldrh	r3, [r7, #6]
 801dbb2:	f643 0201 	movw	r2, #14337	; 0x3801
 801dbb6:	4293      	cmp	r3, r2
 801dbb8:	d104      	bne.n	801dbc4 <special_events_handler+0x54>
    {
        gapc_con_req_ind(data);
 801dbba:	6838      	ldr	r0, [r7, #0]
 801dbbc:	f000 f8aa 	bl	801dd14 <gapc_con_req_ind>
        consumed = 1;
 801dbc0:	2301      	movs	r3, #1
 801dbc2:	60fb      	str	r3, [r7, #12]
    }

    return consumed;
 801dbc4:	68fb      	ldr	r3, [r7, #12]
}
 801dbc6:	4618      	mov	r0, r3
 801dbc8:	3710      	adds	r7, #16
 801dbca:	46bd      	mov	sp, r7
 801dbcc:	bd80      	pop	{r7, pc}
 801dbce:	bf00      	nop
 801dbd0:	2001dfec 	.word	0x2001dfec

0801dbd4 <gapc_connection_cfm_handler>:
}

at_ble_status_t gapc_connection_cfm_handler(uint8_t *lcsrk,  uint32_t local_signcntr, uint8_t *rcsrk,
                                 uint32_t remote_signcntr, uint8_t auth, uint8_t authorize,
                                 uint16_t handle)
{
 801dbd4:	b580      	push	{r7, lr}
 801dbd6:	b086      	sub	sp, #24
 801dbd8:	af00      	add	r7, sp, #0
 801dbda:	60f8      	str	r0, [r7, #12]
 801dbdc:	60b9      	str	r1, [r7, #8]
 801dbde:	607a      	str	r2, [r7, #4]
 801dbe0:	603b      	str	r3, [r7, #0]
	at_ble_status_t status;
    
	INTERFACE_MSG_INIT(GAPC_CONNECTION_CFM,  KE_BUILD_ID(TASK_GAPC, handle));
 801dbe2:	4b4a      	ldr	r3, [pc, #296]	; (801dd0c <gapc_connection_cfm_handler+0x138>)
 801dbe4:	617b      	str	r3, [r7, #20]
 801dbe6:	697b      	ldr	r3, [r7, #20]
 801dbe8:	1c5a      	adds	r2, r3, #1
 801dbea:	617a      	str	r2, [r7, #20]
 801dbec:	2205      	movs	r2, #5
 801dbee:	701a      	strb	r2, [r3, #0]
 801dbf0:	697b      	ldr	r3, [r7, #20]
 801dbf2:	1c5a      	adds	r2, r3, #1
 801dbf4:	617a      	str	r2, [r7, #20]
 801dbf6:	2202      	movs	r2, #2
 801dbf8:	701a      	strb	r2, [r3, #0]
 801dbfa:	697b      	ldr	r3, [r7, #20]
 801dbfc:	1c5a      	adds	r2, r3, #1
 801dbfe:	617a      	str	r2, [r7, #20]
 801dc00:	2238      	movs	r2, #56	; 0x38
 801dc02:	701a      	strb	r2, [r3, #0]
 801dc04:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dc06:	021b      	lsls	r3, r3, #8
 801dc08:	b25b      	sxtb	r3, r3
 801dc0a:	f043 030e 	orr.w	r3, r3, #14
 801dc0e:	b259      	sxtb	r1, r3
 801dc10:	697b      	ldr	r3, [r7, #20]
 801dc12:	1c5a      	adds	r2, r3, #1
 801dc14:	617a      	str	r2, [r7, #20]
 801dc16:	b2ca      	uxtb	r2, r1
 801dc18:	701a      	strb	r2, [r3, #0]
 801dc1a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801dc1c:	021b      	lsls	r3, r3, #8
 801dc1e:	b29b      	uxth	r3, r3
 801dc20:	0a1b      	lsrs	r3, r3, #8
 801dc22:	b299      	uxth	r1, r3
 801dc24:	697b      	ldr	r3, [r7, #20]
 801dc26:	1c5a      	adds	r2, r3, #1
 801dc28:	617a      	str	r2, [r7, #20]
 801dc2a:	b2ca      	uxtb	r2, r1
 801dc2c:	701a      	strb	r2, [r3, #0]
 801dc2e:	697b      	ldr	r3, [r7, #20]
 801dc30:	1c5a      	adds	r2, r3, #1
 801dc32:	617a      	str	r2, [r7, #20]
 801dc34:	223f      	movs	r2, #63	; 0x3f
 801dc36:	701a      	strb	r2, [r3, #0]
 801dc38:	697b      	ldr	r3, [r7, #20]
 801dc3a:	1c5a      	adds	r2, r3, #1
 801dc3c:	617a      	str	r2, [r7, #20]
 801dc3e:	2200      	movs	r2, #0
 801dc40:	701a      	strb	r2, [r3, #0]
 801dc42:	697b      	ldr	r3, [r7, #20]
 801dc44:	3302      	adds	r3, #2
 801dc46:	617b      	str	r3, [r7, #20]
    INTERFACE_PACK_ARG_BLOCK(lcsrk, KEY_LEN);
 801dc48:	2210      	movs	r2, #16
 801dc4a:	68f9      	ldr	r1, [r7, #12]
 801dc4c:	6978      	ldr	r0, [r7, #20]
 801dc4e:	f000 fb69 	bl	801e324 <memcpy>
 801dc52:	697b      	ldr	r3, [r7, #20]
 801dc54:	3310      	adds	r3, #16
 801dc56:	617b      	str	r3, [r7, #20]
    INTERFACE_PACK_ARG_UINT32(local_signcntr);
 801dc58:	697b      	ldr	r3, [r7, #20]
 801dc5a:	1c5a      	adds	r2, r3, #1
 801dc5c:	617a      	str	r2, [r7, #20]
 801dc5e:	68ba      	ldr	r2, [r7, #8]
 801dc60:	b2d2      	uxtb	r2, r2
 801dc62:	701a      	strb	r2, [r3, #0]
 801dc64:	68bb      	ldr	r3, [r7, #8]
 801dc66:	0a19      	lsrs	r1, r3, #8
 801dc68:	697b      	ldr	r3, [r7, #20]
 801dc6a:	1c5a      	adds	r2, r3, #1
 801dc6c:	617a      	str	r2, [r7, #20]
 801dc6e:	b2ca      	uxtb	r2, r1
 801dc70:	701a      	strb	r2, [r3, #0]
 801dc72:	68bb      	ldr	r3, [r7, #8]
 801dc74:	0c19      	lsrs	r1, r3, #16
 801dc76:	697b      	ldr	r3, [r7, #20]
 801dc78:	1c5a      	adds	r2, r3, #1
 801dc7a:	617a      	str	r2, [r7, #20]
 801dc7c:	b2ca      	uxtb	r2, r1
 801dc7e:	701a      	strb	r2, [r3, #0]
 801dc80:	68bb      	ldr	r3, [r7, #8]
 801dc82:	0e19      	lsrs	r1, r3, #24
 801dc84:	697b      	ldr	r3, [r7, #20]
 801dc86:	1c5a      	adds	r2, r3, #1
 801dc88:	617a      	str	r2, [r7, #20]
 801dc8a:	b2ca      	uxtb	r2, r1
 801dc8c:	701a      	strb	r2, [r3, #0]
    INTERFACE_PACK_ARG_BLOCK(rcsrk, KEY_LEN);
 801dc8e:	2210      	movs	r2, #16
 801dc90:	6879      	ldr	r1, [r7, #4]
 801dc92:	6978      	ldr	r0, [r7, #20]
 801dc94:	f000 fb46 	bl	801e324 <memcpy>
 801dc98:	697b      	ldr	r3, [r7, #20]
 801dc9a:	3310      	adds	r3, #16
 801dc9c:	617b      	str	r3, [r7, #20]
    INTERFACE_PACK_ARG_UINT32(remote_signcntr);
 801dc9e:	697b      	ldr	r3, [r7, #20]
 801dca0:	1c5a      	adds	r2, r3, #1
 801dca2:	617a      	str	r2, [r7, #20]
 801dca4:	683a      	ldr	r2, [r7, #0]
 801dca6:	b2d2      	uxtb	r2, r2
 801dca8:	701a      	strb	r2, [r3, #0]
 801dcaa:	683b      	ldr	r3, [r7, #0]
 801dcac:	0a19      	lsrs	r1, r3, #8
 801dcae:	697b      	ldr	r3, [r7, #20]
 801dcb0:	1c5a      	adds	r2, r3, #1
 801dcb2:	617a      	str	r2, [r7, #20]
 801dcb4:	b2ca      	uxtb	r2, r1
 801dcb6:	701a      	strb	r2, [r3, #0]
 801dcb8:	683b      	ldr	r3, [r7, #0]
 801dcba:	0c19      	lsrs	r1, r3, #16
 801dcbc:	697b      	ldr	r3, [r7, #20]
 801dcbe:	1c5a      	adds	r2, r3, #1
 801dcc0:	617a      	str	r2, [r7, #20]
 801dcc2:	b2ca      	uxtb	r2, r1
 801dcc4:	701a      	strb	r2, [r3, #0]
 801dcc6:	683b      	ldr	r3, [r7, #0]
 801dcc8:	0e19      	lsrs	r1, r3, #24
 801dcca:	697b      	ldr	r3, [r7, #20]
 801dccc:	1c5a      	adds	r2, r3, #1
 801dcce:	617a      	str	r2, [r7, #20]
 801dcd0:	b2ca      	uxtb	r2, r1
 801dcd2:	701a      	strb	r2, [r3, #0]
    INTERFACE_PACK_ARG_UINT8(auth);
 801dcd4:	697b      	ldr	r3, [r7, #20]
 801dcd6:	1c5a      	adds	r2, r3, #1
 801dcd8:	617a      	str	r2, [r7, #20]
 801dcda:	f897 2020 	ldrb.w	r2, [r7, #32]
 801dcde:	701a      	strb	r2, [r3, #0]
    INTERFACE_PACK_ARG_UINT8(authorize);
 801dce0:	697b      	ldr	r3, [r7, #20]
 801dce2:	1c5a      	adds	r2, r3, #1
 801dce4:	617a      	str	r2, [r7, #20]
 801dce6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 801dcea:	701a      	strb	r2, [r3, #0]
    status = INTERFACE_SEND_NO_WAIT();
 801dcec:	697b      	ldr	r3, [r7, #20]
 801dcee:	4a08      	ldr	r2, [pc, #32]	; (801dd10 <gapc_connection_cfm_handler+0x13c>)
 801dcf0:	1a9b      	subs	r3, r3, r2
 801dcf2:	b29b      	uxth	r3, r3
 801dcf4:	4619      	mov	r1, r3
 801dcf6:	4805      	ldr	r0, [pc, #20]	; (801dd0c <gapc_connection_cfm_handler+0x138>)
 801dcf8:	f000 f93a 	bl	801df70 <interface_send>
 801dcfc:	4603      	mov	r3, r0
 801dcfe:	74fb      	strb	r3, [r7, #19]
    INTERFACE_MSG_DONE();
	
	return status;
 801dd00:	7cfb      	ldrb	r3, [r7, #19]
}
 801dd02:	4618      	mov	r0, r3
 801dd04:	3718      	adds	r7, #24
 801dd06:	46bd      	mov	sp, r7
 801dd08:	bd80      	pop	{r7, pc}
 801dd0a:	bf00      	nop
 801dd0c:	2001e0ac 	.word	0x2001e0ac
 801dd10:	2001e0b5 	.word	0x2001e0b5

0801dd14 <gapc_con_req_ind>:
	
	return status;
}

at_ble_status_t gapc_con_req_ind(uint8_t* data)
{
 801dd14:	b580      	push	{r7, lr}
 801dd16:	b088      	sub	sp, #32
 801dd18:	af04      	add	r7, sp, #16
 801dd1a:	6078      	str	r0, [r7, #4]
    static uint8_t dummy_key[KEY_LEN] =
        {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

    INTERFACE_UNPACK_INIT(data);
 801dd1c:	687b      	ldr	r3, [r7, #4]
 801dd1e:	60fb      	str	r3, [r7, #12]
    INTERFACE_UNPACK_UINT16(&(device.conn_handle));
 801dd20:	68fb      	ldr	r3, [r7, #12]
 801dd22:	781b      	ldrb	r3, [r3, #0]
 801dd24:	b21a      	sxth	r2, r3
 801dd26:	68fb      	ldr	r3, [r7, #12]
 801dd28:	3301      	adds	r3, #1
 801dd2a:	781b      	ldrb	r3, [r3, #0]
 801dd2c:	021b      	lsls	r3, r3, #8
 801dd2e:	b21b      	sxth	r3, r3
 801dd30:	4313      	orrs	r3, r2
 801dd32:	b21b      	sxth	r3, r3
 801dd34:	b29a      	uxth	r2, r3
 801dd36:	4b16      	ldr	r3, [pc, #88]	; (801dd90 <gapc_con_req_ind+0x7c>)
 801dd38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 801dd3c:	68fb      	ldr	r3, [r7, #12]
 801dd3e:	3302      	adds	r3, #2
 801dd40:	60fb      	str	r3, [r7, #12]
    INTERFACE_UNPACK_SKIP(7); //we are not interested in those params
 801dd42:	68fb      	ldr	r3, [r7, #12]
 801dd44:	3307      	adds	r3, #7
 801dd46:	60fb      	str	r3, [r7, #12]
    INTERFACE_UNPACK_UINT8(&(device.peer_addr.type));
 801dd48:	68fb      	ldr	r3, [r7, #12]
 801dd4a:	1c5a      	adds	r2, r3, #1
 801dd4c:	60fa      	str	r2, [r7, #12]
 801dd4e:	781a      	ldrb	r2, [r3, #0]
 801dd50:	4b0f      	ldr	r3, [pc, #60]	; (801dd90 <gapc_con_req_ind+0x7c>)
 801dd52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    INTERFACE_UNPACK_BLOCK(device.peer_addr.addr, AT_BLE_ADDR_LEN);
 801dd56:	4b0e      	ldr	r3, [pc, #56]	; (801dd90 <gapc_con_req_ind+0x7c>)
 801dd58:	68fa      	ldr	r2, [r7, #12]
 801dd5a:	334d      	adds	r3, #77	; 0x4d
 801dd5c:	6811      	ldr	r1, [r2, #0]
 801dd5e:	6019      	str	r1, [r3, #0]
 801dd60:	8892      	ldrh	r2, [r2, #4]
 801dd62:	809a      	strh	r2, [r3, #4]
 801dd64:	68fb      	ldr	r3, [r7, #12]
 801dd66:	3306      	adds	r3, #6
 801dd68:	60fb      	str	r3, [r7, #12]
    INTERFACE_UNPACK_DONE();

    return gapc_connection_cfm_handler(dummy_key, 0, dummy_key, 0, GAP_AUTH_REQ_NO_MITM_NO_BOND,
 801dd6a:	4b09      	ldr	r3, [pc, #36]	; (801dd90 <gapc_con_req_ind+0x7c>)
 801dd6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 801dd70:	9302      	str	r3, [sp, #8]
 801dd72:	2300      	movs	r3, #0
 801dd74:	9301      	str	r3, [sp, #4]
 801dd76:	2300      	movs	r3, #0
 801dd78:	9300      	str	r3, [sp, #0]
 801dd7a:	2300      	movs	r3, #0
 801dd7c:	4a05      	ldr	r2, [pc, #20]	; (801dd94 <gapc_con_req_ind+0x80>)
 801dd7e:	2100      	movs	r1, #0
 801dd80:	4804      	ldr	r0, [pc, #16]	; (801dd94 <gapc_con_req_ind+0x80>)
 801dd82:	f7ff ff27 	bl	801dbd4 <gapc_connection_cfm_handler>
 801dd86:	4603      	mov	r3, r0
                    GAP_AUTHZ_NOT_SET, device.conn_handle);
}
 801dd88:	4618      	mov	r0, r3
 801dd8a:	3710      	adds	r7, #16
 801dd8c:	46bd      	mov	sp, r7
 801dd8e:	bd80      	pop	{r7, pc}
 801dd90:	2001dff4 	.word	0x2001dff4
 801dd94:	2001e09c 	.word	0x2001e09c

0801dd98 <platform_interface_callback>:
#define NMI_BLE_WAITING                 0
#define NMI_BLE_COLLECTING_HDR          1
#define NMI_BLE_COLLECTING_PAYLOAD      2

void platform_interface_callback(uint8_t* data, uint32_t len)
{
 801dd98:	b580      	push	{r7, lr}
 801dd9a:	b084      	sub	sp, #16
 801dd9c:	af00      	add	r7, sp, #0
 801dd9e:	6078      	str	r0, [r7, #4]
 801dda0:	6039      	str	r1, [r7, #0]
    static uint32_t header_idx;
    static uint8_t buff[INTERFACE_RCV_BUFF_LEN];
    static uint32_t cur_msg_start = 0;
    static uint32_t write_ptr = 0;

    for(i=0; i<len; i++)
 801dda2:	2300      	movs	r3, #0
 801dda4:	60fb      	str	r3, [r7, #12]
 801dda6:	e0c6      	b.n	801df36 <platform_interface_callback+0x19e>
    {
        if(state == NMI_BLE_WAITING)
 801dda8:	4b68      	ldr	r3, [pc, #416]	; (801df4c <platform_interface_callback+0x1b4>)
 801ddaa:	681b      	ldr	r3, [r3, #0]
 801ddac:	2b00      	cmp	r3, #0
 801ddae:	d10d      	bne.n	801ddcc <platform_interface_callback+0x34>
        {
            if(data[i] == INTERFACE_API_PKT_ID)
 801ddb0:	687a      	ldr	r2, [r7, #4]
 801ddb2:	68fb      	ldr	r3, [r7, #12]
 801ddb4:	4413      	add	r3, r2
 801ddb6:	781b      	ldrb	r3, [r3, #0]
 801ddb8:	2b05      	cmp	r3, #5
 801ddba:	f040 80b6 	bne.w	801df2a <platform_interface_callback+0x192>
            {
                state = NMI_BLE_COLLECTING_HDR;
 801ddbe:	4b63      	ldr	r3, [pc, #396]	; (801df4c <platform_interface_callback+0x1b4>)
 801ddc0:	2201      	movs	r2, #1
 801ddc2:	601a      	str	r2, [r3, #0]
                header_idx = 0;
 801ddc4:	4b62      	ldr	r3, [pc, #392]	; (801df50 <platform_interface_callback+0x1b8>)
 801ddc6:	2200      	movs	r2, #0
 801ddc8:	601a      	str	r2, [r3, #0]
            }
            continue;
 801ddca:	e0ae      	b.n	801df2a <platform_interface_callback+0x192>
        }

        if(state == NMI_BLE_COLLECTING_HDR)
 801ddcc:	4b5f      	ldr	r3, [pc, #380]	; (801df4c <platform_interface_callback+0x1b4>)
 801ddce:	681b      	ldr	r3, [r3, #0]
 801ddd0:	2b01      	cmp	r3, #1
 801ddd2:	d173      	bne.n	801debc <platform_interface_callback+0x124>
        {
            header[header_idx] = data[i];
 801ddd4:	687a      	ldr	r2, [r7, #4]
 801ddd6:	68fb      	ldr	r3, [r7, #12]
 801ddd8:	441a      	add	r2, r3
 801ddda:	4b5d      	ldr	r3, [pc, #372]	; (801df50 <platform_interface_callback+0x1b8>)
 801dddc:	681b      	ldr	r3, [r3, #0]
 801ddde:	7811      	ldrb	r1, [r2, #0]
 801dde0:	4a5c      	ldr	r2, [pc, #368]	; (801df54 <platform_interface_callback+0x1bc>)
 801dde2:	54d1      	strb	r1, [r2, r3]
            header_idx++;
 801dde4:	4b5a      	ldr	r3, [pc, #360]	; (801df50 <platform_interface_callback+0x1b8>)
 801dde6:	681b      	ldr	r3, [r3, #0]
 801dde8:	3301      	adds	r3, #1
 801ddea:	4a59      	ldr	r2, [pc, #356]	; (801df50 <platform_interface_callback+0x1b8>)
 801ddec:	6013      	str	r3, [r2, #0]

            if(header_idx == INTERFACE_HDR_LENGTH - 1)
 801ddee:	4b58      	ldr	r3, [pc, #352]	; (801df50 <platform_interface_callback+0x1b8>)
 801ddf0:	681b      	ldr	r3, [r3, #0]
 801ddf2:	2b08      	cmp	r3, #8
 801ddf4:	f040 809b 	bne.w	801df2e <platform_interface_callback+0x196>
            {
                state = NMI_BLE_COLLECTING_PAYLOAD;
 801ddf8:	4b54      	ldr	r3, [pc, #336]	; (801df4c <platform_interface_callback+0x1b4>)
 801ddfa:	2202      	movs	r2, #2
 801ddfc:	601a      	str	r2, [r3, #0]

                INTERFACE_UNPACK_INIT(header);
 801ddfe:	4b55      	ldr	r3, [pc, #340]	; (801df54 <platform_interface_callback+0x1bc>)
 801de00:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_UINT16(&msg_id);
 801de02:	68bb      	ldr	r3, [r7, #8]
 801de04:	781b      	ldrb	r3, [r3, #0]
 801de06:	b21a      	sxth	r2, r3
 801de08:	68bb      	ldr	r3, [r7, #8]
 801de0a:	3301      	adds	r3, #1
 801de0c:	781b      	ldrb	r3, [r3, #0]
 801de0e:	021b      	lsls	r3, r3, #8
 801de10:	b21b      	sxth	r3, r3
 801de12:	4313      	orrs	r3, r2
 801de14:	b21b      	sxth	r3, r3
 801de16:	b29a      	uxth	r2, r3
 801de18:	4b4f      	ldr	r3, [pc, #316]	; (801df58 <platform_interface_callback+0x1c0>)
 801de1a:	801a      	strh	r2, [r3, #0]
 801de1c:	68bb      	ldr	r3, [r7, #8]
 801de1e:	3302      	adds	r3, #2
 801de20:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_SKIP(2); // not interested in destination (always EXT_APP)
 801de22:	68bb      	ldr	r3, [r7, #8]
 801de24:	3302      	adds	r3, #2
 801de26:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_UINT16(&src_id);
 801de28:	68bb      	ldr	r3, [r7, #8]
 801de2a:	781b      	ldrb	r3, [r3, #0]
 801de2c:	b21a      	sxth	r2, r3
 801de2e:	68bb      	ldr	r3, [r7, #8]
 801de30:	3301      	adds	r3, #1
 801de32:	781b      	ldrb	r3, [r3, #0]
 801de34:	021b      	lsls	r3, r3, #8
 801de36:	b21b      	sxth	r3, r3
 801de38:	4313      	orrs	r3, r2
 801de3a:	b21b      	sxth	r3, r3
 801de3c:	b29a      	uxth	r2, r3
 801de3e:	4b47      	ldr	r3, [pc, #284]	; (801df5c <platform_interface_callback+0x1c4>)
 801de40:	801a      	strh	r2, [r3, #0]
 801de42:	68bb      	ldr	r3, [r7, #8]
 801de44:	3302      	adds	r3, #2
 801de46:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_UINT16(&param_len);
 801de48:	68bb      	ldr	r3, [r7, #8]
 801de4a:	781b      	ldrb	r3, [r3, #0]
 801de4c:	b21a      	sxth	r2, r3
 801de4e:	68bb      	ldr	r3, [r7, #8]
 801de50:	3301      	adds	r3, #1
 801de52:	781b      	ldrb	r3, [r3, #0]
 801de54:	021b      	lsls	r3, r3, #8
 801de56:	b21b      	sxth	r3, r3
 801de58:	4313      	orrs	r3, r2
 801de5a:	b21b      	sxth	r3, r3
 801de5c:	b29a      	uxth	r2, r3
 801de5e:	4b40      	ldr	r3, [pc, #256]	; (801df60 <platform_interface_callback+0x1c8>)
 801de60:	801a      	strh	r2, [r3, #0]
 801de62:	68bb      	ldr	r3, [r7, #8]
 801de64:	3302      	adds	r3, #2
 801de66:	60bb      	str	r3, [r7, #8]
                INTERFACE_UNPACK_DONE();

                if(param_len == 0)
 801de68:	4b3d      	ldr	r3, [pc, #244]	; (801df60 <platform_interface_callback+0x1c8>)
 801de6a:	881b      	ldrh	r3, [r3, #0]
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d115      	bne.n	801de9c <platform_interface_callback+0x104>
                {
                    if(!special_events_handler(msg_id, src_id, NULL))
 801de70:	4b39      	ldr	r3, [pc, #228]	; (801df58 <platform_interface_callback+0x1c0>)
 801de72:	881b      	ldrh	r3, [r3, #0]
 801de74:	4a39      	ldr	r2, [pc, #228]	; (801df5c <platform_interface_callback+0x1c4>)
 801de76:	8811      	ldrh	r1, [r2, #0]
 801de78:	2200      	movs	r2, #0
 801de7a:	4618      	mov	r0, r3
 801de7c:	f7ff fe78 	bl	801db70 <special_events_handler>
 801de80:	4603      	mov	r3, r0
 801de82:	2b00      	cmp	r3, #0
 801de84:	d107      	bne.n	801de96 <platform_interface_callback+0xfe>
                    {
                        // post it into the event queue
                        event_post(msg_id, src_id, NULL);
 801de86:	4b34      	ldr	r3, [pc, #208]	; (801df58 <platform_interface_callback+0x1c0>)
 801de88:	881b      	ldrh	r3, [r3, #0]
 801de8a:	4a34      	ldr	r2, [pc, #208]	; (801df5c <platform_interface_callback+0x1c4>)
 801de8c:	8811      	ldrh	r1, [r2, #0]
 801de8e:	2200      	movs	r2, #0
 801de90:	4618      	mov	r0, r3
 801de92:	f7ff fe2f 	bl	801daf4 <event_post>
                    }
                    state = NMI_BLE_WAITING;
 801de96:	4b2d      	ldr	r3, [pc, #180]	; (801df4c <platform_interface_callback+0x1b4>)
 801de98:	2200      	movs	r2, #0
 801de9a:	601a      	str	r2, [r3, #0]
                }

                // make sure that we have room for params
                if(sizeof(buff) - write_ptr < param_len)
 801de9c:	4b31      	ldr	r3, [pc, #196]	; (801df64 <platform_interface_callback+0x1cc>)
 801de9e:	681b      	ldr	r3, [r3, #0]
 801dea0:	f5c3 73fa 	rsb	r3, r3, #500	; 0x1f4
 801dea4:	4a2e      	ldr	r2, [pc, #184]	; (801df60 <platform_interface_callback+0x1c8>)
 801dea6:	8812      	ldrh	r2, [r2, #0]
 801dea8:	4293      	cmp	r3, r2
 801deaa:	d202      	bcs.n	801deb2 <platform_interface_callback+0x11a>
                {
                    write_ptr = 0;
 801deac:	4b2d      	ldr	r3, [pc, #180]	; (801df64 <platform_interface_callback+0x1cc>)
 801deae:	2200      	movs	r2, #0
 801deb0:	601a      	str	r2, [r3, #0]
                }
                cur_msg_start = write_ptr;
 801deb2:	4b2c      	ldr	r3, [pc, #176]	; (801df64 <platform_interface_callback+0x1cc>)
 801deb4:	681b      	ldr	r3, [r3, #0]
 801deb6:	4a2c      	ldr	r2, [pc, #176]	; (801df68 <platform_interface_callback+0x1d0>)
 801deb8:	6013      	str	r3, [r2, #0]
            }
            continue;
 801deba:	e038      	b.n	801df2e <platform_interface_callback+0x196>
        }

        if(state == NMI_BLE_COLLECTING_PAYLOAD)
 801debc:	4b23      	ldr	r3, [pc, #140]	; (801df4c <platform_interface_callback+0x1b4>)
 801debe:	681b      	ldr	r3, [r3, #0]
 801dec0:	2b02      	cmp	r3, #2
 801dec2:	d135      	bne.n	801df30 <platform_interface_callback+0x198>
        {
            buff[write_ptr] = data[i];
 801dec4:	687a      	ldr	r2, [r7, #4]
 801dec6:	68fb      	ldr	r3, [r7, #12]
 801dec8:	441a      	add	r2, r3
 801deca:	4b26      	ldr	r3, [pc, #152]	; (801df64 <platform_interface_callback+0x1cc>)
 801decc:	681b      	ldr	r3, [r3, #0]
 801dece:	7811      	ldrb	r1, [r2, #0]
 801ded0:	4a26      	ldr	r2, [pc, #152]	; (801df6c <platform_interface_callback+0x1d4>)
 801ded2:	54d1      	strb	r1, [r2, r3]
            write_ptr++;
 801ded4:	4b23      	ldr	r3, [pc, #140]	; (801df64 <platform_interface_callback+0x1cc>)
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	3301      	adds	r3, #1
 801deda:	4a22      	ldr	r2, [pc, #136]	; (801df64 <platform_interface_callback+0x1cc>)
 801dedc:	6013      	str	r3, [r2, #0]

            if(write_ptr - cur_msg_start == param_len)
 801dede:	4b21      	ldr	r3, [pc, #132]	; (801df64 <platform_interface_callback+0x1cc>)
 801dee0:	681a      	ldr	r2, [r3, #0]
 801dee2:	4b21      	ldr	r3, [pc, #132]	; (801df68 <platform_interface_callback+0x1d0>)
 801dee4:	681b      	ldr	r3, [r3, #0]
 801dee6:	1ad3      	subs	r3, r2, r3
 801dee8:	4a1d      	ldr	r2, [pc, #116]	; (801df60 <platform_interface_callback+0x1c8>)
 801deea:	8812      	ldrh	r2, [r2, #0]
 801deec:	4293      	cmp	r3, r2
 801deee:	d11f      	bne.n	801df30 <platform_interface_callback+0x198>
            {
                // message fully received
                state = NMI_BLE_WAITING;
 801def0:	4b16      	ldr	r3, [pc, #88]	; (801df4c <platform_interface_callback+0x1b4>)
 801def2:	2200      	movs	r2, #0
 801def4:	601a      	str	r2, [r3, #0]

                // handle message
                if(!special_events_handler(msg_id, src_id, &buff[cur_msg_start]))
 801def6:	4b18      	ldr	r3, [pc, #96]	; (801df58 <platform_interface_callback+0x1c0>)
 801def8:	8818      	ldrh	r0, [r3, #0]
 801defa:	4b18      	ldr	r3, [pc, #96]	; (801df5c <platform_interface_callback+0x1c4>)
 801defc:	8819      	ldrh	r1, [r3, #0]
 801defe:	4b1a      	ldr	r3, [pc, #104]	; (801df68 <platform_interface_callback+0x1d0>)
 801df00:	681b      	ldr	r3, [r3, #0]
 801df02:	4a1a      	ldr	r2, [pc, #104]	; (801df6c <platform_interface_callback+0x1d4>)
 801df04:	4413      	add	r3, r2
 801df06:	461a      	mov	r2, r3
 801df08:	f7ff fe32 	bl	801db70 <special_events_handler>
 801df0c:	4603      	mov	r3, r0
 801df0e:	2b00      	cmp	r3, #0
 801df10:	d10e      	bne.n	801df30 <platform_interface_callback+0x198>
                {
                    // post it into the event queue
                    event_post(msg_id, src_id, &buff[cur_msg_start]);
 801df12:	4b11      	ldr	r3, [pc, #68]	; (801df58 <platform_interface_callback+0x1c0>)
 801df14:	8818      	ldrh	r0, [r3, #0]
 801df16:	4b11      	ldr	r3, [pc, #68]	; (801df5c <platform_interface_callback+0x1c4>)
 801df18:	8819      	ldrh	r1, [r3, #0]
 801df1a:	4b13      	ldr	r3, [pc, #76]	; (801df68 <platform_interface_callback+0x1d0>)
 801df1c:	681b      	ldr	r3, [r3, #0]
 801df1e:	4a13      	ldr	r2, [pc, #76]	; (801df6c <platform_interface_callback+0x1d4>)
 801df20:	4413      	add	r3, r2
 801df22:	461a      	mov	r2, r3
 801df24:	f7ff fde6 	bl	801daf4 <event_post>
 801df28:	e002      	b.n	801df30 <platform_interface_callback+0x198>
            continue;
 801df2a:	bf00      	nop
 801df2c:	e000      	b.n	801df30 <platform_interface_callback+0x198>
            continue;
 801df2e:	bf00      	nop
    for(i=0; i<len; i++)
 801df30:	68fb      	ldr	r3, [r7, #12]
 801df32:	3301      	adds	r3, #1
 801df34:	60fb      	str	r3, [r7, #12]
 801df36:	68fa      	ldr	r2, [r7, #12]
 801df38:	683b      	ldr	r3, [r7, #0]
 801df3a:	429a      	cmp	r2, r3
 801df3c:	f4ff af34 	bcc.w	801dda8 <platform_interface_callback+0x10>

            }

        }
    }
}
 801df40:	bf00      	nop
 801df42:	bf00      	nop
 801df44:	3710      	adds	r7, #16
 801df46:	46bd      	mov	sp, r7
 801df48:	bd80      	pop	{r7, pc}
 801df4a:	bf00      	nop
 801df4c:	2001e304 	.word	0x2001e304
 801df50:	2001e308 	.word	0x2001e308
 801df54:	2001e30c 	.word	0x2001e30c
 801df58:	2001e314 	.word	0x2001e314
 801df5c:	2001e316 	.word	0x2001e316
 801df60:	2001e318 	.word	0x2001e318
 801df64:	2001e31c 	.word	0x2001e31c
 801df68:	2001e320 	.word	0x2001e320
 801df6c:	2001e324 	.word	0x2001e324

0801df70 <interface_send>:

at_ble_status_t interface_send(uint8_t* msg, uint16_t u16TxLen)
{
 801df70:	b580      	push	{r7, lr}
 801df72:	b082      	sub	sp, #8
 801df74:	af00      	add	r7, sp, #0
 801df76:	6078      	str	r0, [r7, #4]
 801df78:	460b      	mov	r3, r1
 801df7a:	807b      	strh	r3, [r7, #2]
    msg[7] = u16TxLen & 0x00FF;
 801df7c:	687b      	ldr	r3, [r7, #4]
 801df7e:	3307      	adds	r3, #7
 801df80:	887a      	ldrh	r2, [r7, #2]
 801df82:	b2d2      	uxtb	r2, r2
 801df84:	701a      	strb	r2, [r3, #0]
    msg[8] = ((u16TxLen)>>8) & 0x00FF;
 801df86:	887b      	ldrh	r3, [r7, #2]
 801df88:	0a1b      	lsrs	r3, r3, #8
 801df8a:	b29a      	uxth	r2, r3
 801df8c:	687b      	ldr	r3, [r7, #4]
 801df8e:	3308      	adds	r3, #8
 801df90:	b2d2      	uxtb	r2, r2
 801df92:	701a      	strb	r2, [r3, #0]
    
    return platform_interface_send(msg, u16TxLen+INTERFACE_HDR_LENGTH);
 801df94:	887b      	ldrh	r3, [r7, #2]
 801df96:	3309      	adds	r3, #9
 801df98:	4619      	mov	r1, r3
 801df9a:	6878      	ldr	r0, [r7, #4]
 801df9c:	f000 f812 	bl	801dfc4 <platform_interface_send>
 801dfa0:	4603      	mov	r3, r0
}
 801dfa2:	4618      	mov	r0, r3
 801dfa4:	3708      	adds	r7, #8
 801dfa6:	46bd      	mov	sp, r7
 801dfa8:	bd80      	pop	{r7, pc}

0801dfaa <platform_receive>:
}

//Called from the app/wifi driver to inject a BLE blob received over the HIF into the bottom of the BLE API
//stack.
void platform_receive(uint8_t* data, uint32_t len)
{
 801dfaa:	b580      	push	{r7, lr}
 801dfac:	b082      	sub	sp, #8
 801dfae:	af00      	add	r7, sp, #0
 801dfb0:	6078      	str	r0, [r7, #4]
 801dfb2:	6039      	str	r1, [r7, #0]
    platform_interface_callback(data, len);
 801dfb4:	6839      	ldr	r1, [r7, #0]
 801dfb6:	6878      	ldr	r0, [r7, #4]
 801dfb8:	f7ff feee 	bl	801dd98 <platform_interface_callback>
}
 801dfbc:	bf00      	nop
 801dfbe:	3708      	adds	r7, #8
 801dfc0:	46bd      	mov	sp, r7
 801dfc2:	bd80      	pop	{r7, pc}

0801dfc4 <platform_interface_send>:
	return ret;
}

//Call the specified callback which will handle sending the BLE API blob over the HIF
at_ble_status_t platform_interface_send(uint8_t* data, uint32_t len)
{
 801dfc4:	b580      	push	{r7, lr}
 801dfc6:	b082      	sub	sp, #8
 801dfc8:	af00      	add	r7, sp, #0
 801dfca:	6078      	str	r0, [r7, #4]
 801dfcc:	6039      	str	r1, [r7, #0]
    if (plf_params.ble_write_cb && (plf_params.ble_write_cb(data, len) == 0))
 801dfce:	4b09      	ldr	r3, [pc, #36]	; (801dff4 <platform_interface_send+0x30>)
 801dfd0:	681b      	ldr	r3, [r3, #0]
 801dfd2:	2b00      	cmp	r3, #0
 801dfd4:	d009      	beq.n	801dfea <platform_interface_send+0x26>
 801dfd6:	4b07      	ldr	r3, [pc, #28]	; (801dff4 <platform_interface_send+0x30>)
 801dfd8:	681b      	ldr	r3, [r3, #0]
 801dfda:	6839      	ldr	r1, [r7, #0]
 801dfdc:	6878      	ldr	r0, [r7, #4]
 801dfde:	4798      	blx	r3
 801dfe0:	4603      	mov	r3, r0
 801dfe2:	2b00      	cmp	r3, #0
 801dfe4:	d101      	bne.n	801dfea <platform_interface_send+0x26>
		return AT_BLE_SUCCESS;
 801dfe6:	2300      	movs	r3, #0
 801dfe8:	e000      	b.n	801dfec <platform_interface_send+0x28>
	return AT_BLE_FAILURE;		
 801dfea:	2301      	movs	r3, #1
}
 801dfec:	4618      	mov	r0, r3
 801dfee:	3708      	adds	r7, #8
 801dff0:	46bd      	mov	sp, r7
 801dff2:	bd80      	pop	{r7, pc}
 801dff4:	2001e518 	.word	0x2001e518

0801dff8 <platform_cmd_cmpl_signal>:

static volatile uint32_t cmd_cmpl_flag = 0;
static volatile uint32_t event_flag = 0;

void platform_cmd_cmpl_signal()
{
 801dff8:	b480      	push	{r7}
 801dffa:	af00      	add	r7, sp, #0
    cmd_cmpl_flag = 1;
 801dffc:	4b03      	ldr	r3, [pc, #12]	; (801e00c <platform_cmd_cmpl_signal+0x14>)
 801dffe:	2201      	movs	r2, #1
 801e000:	601a      	str	r2, [r3, #0]
}
 801e002:	bf00      	nop
 801e004:	46bd      	mov	sp, r7
 801e006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e00a:	4770      	bx	lr
 801e00c:	2001e528 	.word	0x2001e528

0801e010 <platform_event_signal>:

    return AT_BLE_SUCCESS;
}

void platform_event_signal()
{
 801e010:	b480      	push	{r7}
 801e012:	af00      	add	r7, sp, #0
    event_flag = 1;
 801e014:	4b03      	ldr	r3, [pc, #12]	; (801e024 <platform_event_signal+0x14>)
 801e016:	2201      	movs	r2, #1
 801e018:	601a      	str	r2, [r3, #0]
}
 801e01a:	bf00      	nop
 801e01c:	46bd      	mov	sp, r7
 801e01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e022:	4770      	bx	lr
 801e024:	2001e52c 	.word	0x2001e52c

0801e028 <wifiprov_scan_list_ind_send>:
    INTERFACE_MSG_DONE();
    return status;
}

at_ble_status_t wifiprov_scan_list_ind_send(struct wifiprov_scanlist_ind *param)
{
 801e028:	b580      	push	{r7, lr}
 801e02a:	b084      	sub	sp, #16
 801e02c:	af00      	add	r7, sp, #0
 801e02e:	6078      	str	r0, [r7, #4]
    at_ble_status_t status;

    INTERFACE_MSG_INIT(WIFIPROV_SCANLIST_IND, TASK_WIFIPROV);
 801e030:	4b20      	ldr	r3, [pc, #128]	; (801e0b4 <wifiprov_scan_list_ind_send+0x8c>)
 801e032:	60fb      	str	r3, [r7, #12]
 801e034:	68fb      	ldr	r3, [r7, #12]
 801e036:	1c5a      	adds	r2, r3, #1
 801e038:	60fa      	str	r2, [r7, #12]
 801e03a:	2205      	movs	r2, #5
 801e03c:	701a      	strb	r2, [r3, #0]
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	1c5a      	adds	r2, r3, #1
 801e042:	60fa      	str	r2, [r7, #12]
 801e044:	2207      	movs	r2, #7
 801e046:	701a      	strb	r2, [r3, #0]
 801e048:	68fb      	ldr	r3, [r7, #12]
 801e04a:	1c5a      	adds	r2, r3, #1
 801e04c:	60fa      	str	r2, [r7, #12]
 801e04e:	22dc      	movs	r2, #220	; 0xdc
 801e050:	701a      	strb	r2, [r3, #0]
 801e052:	68fb      	ldr	r3, [r7, #12]
 801e054:	1c5a      	adds	r2, r3, #1
 801e056:	60fa      	str	r2, [r7, #12]
 801e058:	2237      	movs	r2, #55	; 0x37
 801e05a:	701a      	strb	r2, [r3, #0]
 801e05c:	68fb      	ldr	r3, [r7, #12]
 801e05e:	1c5a      	adds	r2, r3, #1
 801e060:	60fa      	str	r2, [r7, #12]
 801e062:	2200      	movs	r2, #0
 801e064:	701a      	strb	r2, [r3, #0]
 801e066:	68fb      	ldr	r3, [r7, #12]
 801e068:	1c5a      	adds	r2, r3, #1
 801e06a:	60fa      	str	r2, [r7, #12]
 801e06c:	223f      	movs	r2, #63	; 0x3f
 801e06e:	701a      	strb	r2, [r3, #0]
 801e070:	68fb      	ldr	r3, [r7, #12]
 801e072:	1c5a      	adds	r2, r3, #1
 801e074:	60fa      	str	r2, [r7, #12]
 801e076:	2200      	movs	r2, #0
 801e078:	701a      	strb	r2, [r3, #0]
 801e07a:	68fb      	ldr	r3, [r7, #12]
 801e07c:	3302      	adds	r3, #2
 801e07e:	60fb      	str	r3, [r7, #12]
    INTERFACE_PACK_ARG_BLOCK(param, sizeof(struct wifiprov_scanlist_ind));  // GTODO: Does this need to be 'repacked' using pack macros?
 801e080:	f240 12ff 	movw	r2, #511	; 0x1ff
 801e084:	6879      	ldr	r1, [r7, #4]
 801e086:	68f8      	ldr	r0, [r7, #12]
 801e088:	f000 f94c 	bl	801e324 <memcpy>
 801e08c:	68fb      	ldr	r3, [r7, #12]
 801e08e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801e092:	60fb      	str	r3, [r7, #12]
    status = INTERFACE_SEND_NO_WAIT();
 801e094:	68fb      	ldr	r3, [r7, #12]
 801e096:	4a08      	ldr	r2, [pc, #32]	; (801e0b8 <wifiprov_scan_list_ind_send+0x90>)
 801e098:	1a9b      	subs	r3, r3, r2
 801e09a:	b29b      	uxth	r3, r3
 801e09c:	4619      	mov	r1, r3
 801e09e:	4805      	ldr	r0, [pc, #20]	; (801e0b4 <wifiprov_scan_list_ind_send+0x8c>)
 801e0a0:	f7ff ff66 	bl	801df70 <interface_send>
 801e0a4:	4603      	mov	r3, r0
 801e0a6:	72fb      	strb	r3, [r7, #11]
    INTERFACE_MSG_DONE();
    return status;
 801e0a8:	7afb      	ldrb	r3, [r7, #11]
}
 801e0aa:	4618      	mov	r0, r3
 801e0ac:	3710      	adds	r7, #16
 801e0ae:	46bd      	mov	sp, r7
 801e0b0:	bd80      	pop	{r7, pc}
 801e0b2:	bf00      	nop
 801e0b4:	2001e0ac 	.word	0x2001e0ac
 801e0b8:	2001e0b5 	.word	0x2001e0b5

0801e0bc <__errno>:
 801e0bc:	4b01      	ldr	r3, [pc, #4]	; (801e0c4 <__errno+0x8>)
 801e0be:	6818      	ldr	r0, [r3, #0]
 801e0c0:	4770      	bx	lr
 801e0c2:	bf00      	nop
 801e0c4:	20000048 	.word	0x20000048

0801e0c8 <std>:
 801e0c8:	2300      	movs	r3, #0
 801e0ca:	b510      	push	{r4, lr}
 801e0cc:	4604      	mov	r4, r0
 801e0ce:	e9c0 3300 	strd	r3, r3, [r0]
 801e0d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e0d6:	6083      	str	r3, [r0, #8]
 801e0d8:	8181      	strh	r1, [r0, #12]
 801e0da:	6643      	str	r3, [r0, #100]	; 0x64
 801e0dc:	81c2      	strh	r2, [r0, #14]
 801e0de:	6183      	str	r3, [r0, #24]
 801e0e0:	4619      	mov	r1, r3
 801e0e2:	2208      	movs	r2, #8
 801e0e4:	305c      	adds	r0, #92	; 0x5c
 801e0e6:	f000 f945 	bl	801e374 <memset>
 801e0ea:	4b05      	ldr	r3, [pc, #20]	; (801e100 <std+0x38>)
 801e0ec:	6263      	str	r3, [r4, #36]	; 0x24
 801e0ee:	4b05      	ldr	r3, [pc, #20]	; (801e104 <std+0x3c>)
 801e0f0:	62a3      	str	r3, [r4, #40]	; 0x28
 801e0f2:	4b05      	ldr	r3, [pc, #20]	; (801e108 <std+0x40>)
 801e0f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e0f6:	4b05      	ldr	r3, [pc, #20]	; (801e10c <std+0x44>)
 801e0f8:	6224      	str	r4, [r4, #32]
 801e0fa:	6323      	str	r3, [r4, #48]	; 0x30
 801e0fc:	bd10      	pop	{r4, pc}
 801e0fe:	bf00      	nop
 801e100:	0801e7c1 	.word	0x0801e7c1
 801e104:	0801e7e3 	.word	0x0801e7e3
 801e108:	0801e81b 	.word	0x0801e81b
 801e10c:	0801e83f 	.word	0x0801e83f

0801e110 <_cleanup_r>:
 801e110:	4901      	ldr	r1, [pc, #4]	; (801e118 <_cleanup_r+0x8>)
 801e112:	f000 b8af 	b.w	801e274 <_fwalk_reent>
 801e116:	bf00      	nop
 801e118:	0801eb29 	.word	0x0801eb29

0801e11c <__sfmoreglue>:
 801e11c:	b570      	push	{r4, r5, r6, lr}
 801e11e:	2268      	movs	r2, #104	; 0x68
 801e120:	1e4d      	subs	r5, r1, #1
 801e122:	4355      	muls	r5, r2
 801e124:	460e      	mov	r6, r1
 801e126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e12a:	f000 f997 	bl	801e45c <_malloc_r>
 801e12e:	4604      	mov	r4, r0
 801e130:	b140      	cbz	r0, 801e144 <__sfmoreglue+0x28>
 801e132:	2100      	movs	r1, #0
 801e134:	e9c0 1600 	strd	r1, r6, [r0]
 801e138:	300c      	adds	r0, #12
 801e13a:	60a0      	str	r0, [r4, #8]
 801e13c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e140:	f000 f918 	bl	801e374 <memset>
 801e144:	4620      	mov	r0, r4
 801e146:	bd70      	pop	{r4, r5, r6, pc}

0801e148 <__sfp_lock_acquire>:
 801e148:	4801      	ldr	r0, [pc, #4]	; (801e150 <__sfp_lock_acquire+0x8>)
 801e14a:	f000 b8d8 	b.w	801e2fe <__retarget_lock_acquire_recursive>
 801e14e:	bf00      	nop
 801e150:	2001e531 	.word	0x2001e531

0801e154 <__sfp_lock_release>:
 801e154:	4801      	ldr	r0, [pc, #4]	; (801e15c <__sfp_lock_release+0x8>)
 801e156:	f000 b8d3 	b.w	801e300 <__retarget_lock_release_recursive>
 801e15a:	bf00      	nop
 801e15c:	2001e531 	.word	0x2001e531

0801e160 <__sinit_lock_acquire>:
 801e160:	4801      	ldr	r0, [pc, #4]	; (801e168 <__sinit_lock_acquire+0x8>)
 801e162:	f000 b8cc 	b.w	801e2fe <__retarget_lock_acquire_recursive>
 801e166:	bf00      	nop
 801e168:	2001e532 	.word	0x2001e532

0801e16c <__sinit_lock_release>:
 801e16c:	4801      	ldr	r0, [pc, #4]	; (801e174 <__sinit_lock_release+0x8>)
 801e16e:	f000 b8c7 	b.w	801e300 <__retarget_lock_release_recursive>
 801e172:	bf00      	nop
 801e174:	2001e532 	.word	0x2001e532

0801e178 <__sinit>:
 801e178:	b510      	push	{r4, lr}
 801e17a:	4604      	mov	r4, r0
 801e17c:	f7ff fff0 	bl	801e160 <__sinit_lock_acquire>
 801e180:	69a3      	ldr	r3, [r4, #24]
 801e182:	b11b      	cbz	r3, 801e18c <__sinit+0x14>
 801e184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e188:	f7ff bff0 	b.w	801e16c <__sinit_lock_release>
 801e18c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e190:	6523      	str	r3, [r4, #80]	; 0x50
 801e192:	4b13      	ldr	r3, [pc, #76]	; (801e1e0 <__sinit+0x68>)
 801e194:	4a13      	ldr	r2, [pc, #76]	; (801e1e4 <__sinit+0x6c>)
 801e196:	681b      	ldr	r3, [r3, #0]
 801e198:	62a2      	str	r2, [r4, #40]	; 0x28
 801e19a:	42a3      	cmp	r3, r4
 801e19c:	bf04      	itt	eq
 801e19e:	2301      	moveq	r3, #1
 801e1a0:	61a3      	streq	r3, [r4, #24]
 801e1a2:	4620      	mov	r0, r4
 801e1a4:	f000 f820 	bl	801e1e8 <__sfp>
 801e1a8:	6060      	str	r0, [r4, #4]
 801e1aa:	4620      	mov	r0, r4
 801e1ac:	f000 f81c 	bl	801e1e8 <__sfp>
 801e1b0:	60a0      	str	r0, [r4, #8]
 801e1b2:	4620      	mov	r0, r4
 801e1b4:	f000 f818 	bl	801e1e8 <__sfp>
 801e1b8:	2200      	movs	r2, #0
 801e1ba:	60e0      	str	r0, [r4, #12]
 801e1bc:	2104      	movs	r1, #4
 801e1be:	6860      	ldr	r0, [r4, #4]
 801e1c0:	f7ff ff82 	bl	801e0c8 <std>
 801e1c4:	68a0      	ldr	r0, [r4, #8]
 801e1c6:	2201      	movs	r2, #1
 801e1c8:	2109      	movs	r1, #9
 801e1ca:	f7ff ff7d 	bl	801e0c8 <std>
 801e1ce:	68e0      	ldr	r0, [r4, #12]
 801e1d0:	2202      	movs	r2, #2
 801e1d2:	2112      	movs	r1, #18
 801e1d4:	f7ff ff78 	bl	801e0c8 <std>
 801e1d8:	2301      	movs	r3, #1
 801e1da:	61a3      	str	r3, [r4, #24]
 801e1dc:	e7d2      	b.n	801e184 <__sinit+0xc>
 801e1de:	bf00      	nop
 801e1e0:	080293b4 	.word	0x080293b4
 801e1e4:	0801e111 	.word	0x0801e111

0801e1e8 <__sfp>:
 801e1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1ea:	4607      	mov	r7, r0
 801e1ec:	f7ff ffac 	bl	801e148 <__sfp_lock_acquire>
 801e1f0:	4b1e      	ldr	r3, [pc, #120]	; (801e26c <__sfp+0x84>)
 801e1f2:	681e      	ldr	r6, [r3, #0]
 801e1f4:	69b3      	ldr	r3, [r6, #24]
 801e1f6:	b913      	cbnz	r3, 801e1fe <__sfp+0x16>
 801e1f8:	4630      	mov	r0, r6
 801e1fa:	f7ff ffbd 	bl	801e178 <__sinit>
 801e1fe:	3648      	adds	r6, #72	; 0x48
 801e200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e204:	3b01      	subs	r3, #1
 801e206:	d503      	bpl.n	801e210 <__sfp+0x28>
 801e208:	6833      	ldr	r3, [r6, #0]
 801e20a:	b30b      	cbz	r3, 801e250 <__sfp+0x68>
 801e20c:	6836      	ldr	r6, [r6, #0]
 801e20e:	e7f7      	b.n	801e200 <__sfp+0x18>
 801e210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e214:	b9d5      	cbnz	r5, 801e24c <__sfp+0x64>
 801e216:	4b16      	ldr	r3, [pc, #88]	; (801e270 <__sfp+0x88>)
 801e218:	60e3      	str	r3, [r4, #12]
 801e21a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e21e:	6665      	str	r5, [r4, #100]	; 0x64
 801e220:	f000 f86c 	bl	801e2fc <__retarget_lock_init_recursive>
 801e224:	f7ff ff96 	bl	801e154 <__sfp_lock_release>
 801e228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e22c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e230:	6025      	str	r5, [r4, #0]
 801e232:	61a5      	str	r5, [r4, #24]
 801e234:	2208      	movs	r2, #8
 801e236:	4629      	mov	r1, r5
 801e238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e23c:	f000 f89a 	bl	801e374 <memset>
 801e240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e248:	4620      	mov	r0, r4
 801e24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e24c:	3468      	adds	r4, #104	; 0x68
 801e24e:	e7d9      	b.n	801e204 <__sfp+0x1c>
 801e250:	2104      	movs	r1, #4
 801e252:	4638      	mov	r0, r7
 801e254:	f7ff ff62 	bl	801e11c <__sfmoreglue>
 801e258:	4604      	mov	r4, r0
 801e25a:	6030      	str	r0, [r6, #0]
 801e25c:	2800      	cmp	r0, #0
 801e25e:	d1d5      	bne.n	801e20c <__sfp+0x24>
 801e260:	f7ff ff78 	bl	801e154 <__sfp_lock_release>
 801e264:	230c      	movs	r3, #12
 801e266:	603b      	str	r3, [r7, #0]
 801e268:	e7ee      	b.n	801e248 <__sfp+0x60>
 801e26a:	bf00      	nop
 801e26c:	080293b4 	.word	0x080293b4
 801e270:	ffff0001 	.word	0xffff0001

0801e274 <_fwalk_reent>:
 801e274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e278:	4606      	mov	r6, r0
 801e27a:	4688      	mov	r8, r1
 801e27c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e280:	2700      	movs	r7, #0
 801e282:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e286:	f1b9 0901 	subs.w	r9, r9, #1
 801e28a:	d505      	bpl.n	801e298 <_fwalk_reent+0x24>
 801e28c:	6824      	ldr	r4, [r4, #0]
 801e28e:	2c00      	cmp	r4, #0
 801e290:	d1f7      	bne.n	801e282 <_fwalk_reent+0xe>
 801e292:	4638      	mov	r0, r7
 801e294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e298:	89ab      	ldrh	r3, [r5, #12]
 801e29a:	2b01      	cmp	r3, #1
 801e29c:	d907      	bls.n	801e2ae <_fwalk_reent+0x3a>
 801e29e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e2a2:	3301      	adds	r3, #1
 801e2a4:	d003      	beq.n	801e2ae <_fwalk_reent+0x3a>
 801e2a6:	4629      	mov	r1, r5
 801e2a8:	4630      	mov	r0, r6
 801e2aa:	47c0      	blx	r8
 801e2ac:	4307      	orrs	r7, r0
 801e2ae:	3568      	adds	r5, #104	; 0x68
 801e2b0:	e7e9      	b.n	801e286 <_fwalk_reent+0x12>
	...

0801e2b4 <__libc_init_array>:
 801e2b4:	b570      	push	{r4, r5, r6, lr}
 801e2b6:	4d0d      	ldr	r5, [pc, #52]	; (801e2ec <__libc_init_array+0x38>)
 801e2b8:	4c0d      	ldr	r4, [pc, #52]	; (801e2f0 <__libc_init_array+0x3c>)
 801e2ba:	1b64      	subs	r4, r4, r5
 801e2bc:	10a4      	asrs	r4, r4, #2
 801e2be:	2600      	movs	r6, #0
 801e2c0:	42a6      	cmp	r6, r4
 801e2c2:	d109      	bne.n	801e2d8 <__libc_init_array+0x24>
 801e2c4:	4d0b      	ldr	r5, [pc, #44]	; (801e2f4 <__libc_init_array+0x40>)
 801e2c6:	4c0c      	ldr	r4, [pc, #48]	; (801e2f8 <__libc_init_array+0x44>)
 801e2c8:	f001 f9ec 	bl	801f6a4 <_init>
 801e2cc:	1b64      	subs	r4, r4, r5
 801e2ce:	10a4      	asrs	r4, r4, #2
 801e2d0:	2600      	movs	r6, #0
 801e2d2:	42a6      	cmp	r6, r4
 801e2d4:	d105      	bne.n	801e2e2 <__libc_init_array+0x2e>
 801e2d6:	bd70      	pop	{r4, r5, r6, pc}
 801e2d8:	f855 3b04 	ldr.w	r3, [r5], #4
 801e2dc:	4798      	blx	r3
 801e2de:	3601      	adds	r6, #1
 801e2e0:	e7ee      	b.n	801e2c0 <__libc_init_array+0xc>
 801e2e2:	f855 3b04 	ldr.w	r3, [r5], #4
 801e2e6:	4798      	blx	r3
 801e2e8:	3601      	adds	r6, #1
 801e2ea:	e7f2      	b.n	801e2d2 <__libc_init_array+0x1e>
 801e2ec:	080293f4 	.word	0x080293f4
 801e2f0:	080293f4 	.word	0x080293f4
 801e2f4:	080293f4 	.word	0x080293f4
 801e2f8:	080293f8 	.word	0x080293f8

0801e2fc <__retarget_lock_init_recursive>:
 801e2fc:	4770      	bx	lr

0801e2fe <__retarget_lock_acquire_recursive>:
 801e2fe:	4770      	bx	lr

0801e300 <__retarget_lock_release_recursive>:
 801e300:	4770      	bx	lr
	...

0801e304 <malloc>:
 801e304:	4b02      	ldr	r3, [pc, #8]	; (801e310 <malloc+0xc>)
 801e306:	4601      	mov	r1, r0
 801e308:	6818      	ldr	r0, [r3, #0]
 801e30a:	f000 b8a7 	b.w	801e45c <_malloc_r>
 801e30e:	bf00      	nop
 801e310:	20000048 	.word	0x20000048

0801e314 <free>:
 801e314:	4b02      	ldr	r3, [pc, #8]	; (801e320 <free+0xc>)
 801e316:	4601      	mov	r1, r0
 801e318:	6818      	ldr	r0, [r3, #0]
 801e31a:	f000 b833 	b.w	801e384 <_free_r>
 801e31e:	bf00      	nop
 801e320:	20000048 	.word	0x20000048

0801e324 <memcpy>:
 801e324:	440a      	add	r2, r1
 801e326:	4291      	cmp	r1, r2
 801e328:	f100 33ff 	add.w	r3, r0, #4294967295
 801e32c:	d100      	bne.n	801e330 <memcpy+0xc>
 801e32e:	4770      	bx	lr
 801e330:	b510      	push	{r4, lr}
 801e332:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e336:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e33a:	4291      	cmp	r1, r2
 801e33c:	d1f9      	bne.n	801e332 <memcpy+0xe>
 801e33e:	bd10      	pop	{r4, pc}

0801e340 <memmove>:
 801e340:	4288      	cmp	r0, r1
 801e342:	b510      	push	{r4, lr}
 801e344:	eb01 0402 	add.w	r4, r1, r2
 801e348:	d902      	bls.n	801e350 <memmove+0x10>
 801e34a:	4284      	cmp	r4, r0
 801e34c:	4623      	mov	r3, r4
 801e34e:	d807      	bhi.n	801e360 <memmove+0x20>
 801e350:	1e43      	subs	r3, r0, #1
 801e352:	42a1      	cmp	r1, r4
 801e354:	d008      	beq.n	801e368 <memmove+0x28>
 801e356:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e35a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e35e:	e7f8      	b.n	801e352 <memmove+0x12>
 801e360:	4402      	add	r2, r0
 801e362:	4601      	mov	r1, r0
 801e364:	428a      	cmp	r2, r1
 801e366:	d100      	bne.n	801e36a <memmove+0x2a>
 801e368:	bd10      	pop	{r4, pc}
 801e36a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e36e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e372:	e7f7      	b.n	801e364 <memmove+0x24>

0801e374 <memset>:
 801e374:	4402      	add	r2, r0
 801e376:	4603      	mov	r3, r0
 801e378:	4293      	cmp	r3, r2
 801e37a:	d100      	bne.n	801e37e <memset+0xa>
 801e37c:	4770      	bx	lr
 801e37e:	f803 1b01 	strb.w	r1, [r3], #1
 801e382:	e7f9      	b.n	801e378 <memset+0x4>

0801e384 <_free_r>:
 801e384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e386:	2900      	cmp	r1, #0
 801e388:	d044      	beq.n	801e414 <_free_r+0x90>
 801e38a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e38e:	9001      	str	r0, [sp, #4]
 801e390:	2b00      	cmp	r3, #0
 801e392:	f1a1 0404 	sub.w	r4, r1, #4
 801e396:	bfb8      	it	lt
 801e398:	18e4      	addlt	r4, r4, r3
 801e39a:	f000 fc79 	bl	801ec90 <__malloc_lock>
 801e39e:	4a1e      	ldr	r2, [pc, #120]	; (801e418 <_free_r+0x94>)
 801e3a0:	9801      	ldr	r0, [sp, #4]
 801e3a2:	6813      	ldr	r3, [r2, #0]
 801e3a4:	b933      	cbnz	r3, 801e3b4 <_free_r+0x30>
 801e3a6:	6063      	str	r3, [r4, #4]
 801e3a8:	6014      	str	r4, [r2, #0]
 801e3aa:	b003      	add	sp, #12
 801e3ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e3b0:	f000 bc74 	b.w	801ec9c <__malloc_unlock>
 801e3b4:	42a3      	cmp	r3, r4
 801e3b6:	d908      	bls.n	801e3ca <_free_r+0x46>
 801e3b8:	6825      	ldr	r5, [r4, #0]
 801e3ba:	1961      	adds	r1, r4, r5
 801e3bc:	428b      	cmp	r3, r1
 801e3be:	bf01      	itttt	eq
 801e3c0:	6819      	ldreq	r1, [r3, #0]
 801e3c2:	685b      	ldreq	r3, [r3, #4]
 801e3c4:	1949      	addeq	r1, r1, r5
 801e3c6:	6021      	streq	r1, [r4, #0]
 801e3c8:	e7ed      	b.n	801e3a6 <_free_r+0x22>
 801e3ca:	461a      	mov	r2, r3
 801e3cc:	685b      	ldr	r3, [r3, #4]
 801e3ce:	b10b      	cbz	r3, 801e3d4 <_free_r+0x50>
 801e3d0:	42a3      	cmp	r3, r4
 801e3d2:	d9fa      	bls.n	801e3ca <_free_r+0x46>
 801e3d4:	6811      	ldr	r1, [r2, #0]
 801e3d6:	1855      	adds	r5, r2, r1
 801e3d8:	42a5      	cmp	r5, r4
 801e3da:	d10b      	bne.n	801e3f4 <_free_r+0x70>
 801e3dc:	6824      	ldr	r4, [r4, #0]
 801e3de:	4421      	add	r1, r4
 801e3e0:	1854      	adds	r4, r2, r1
 801e3e2:	42a3      	cmp	r3, r4
 801e3e4:	6011      	str	r1, [r2, #0]
 801e3e6:	d1e0      	bne.n	801e3aa <_free_r+0x26>
 801e3e8:	681c      	ldr	r4, [r3, #0]
 801e3ea:	685b      	ldr	r3, [r3, #4]
 801e3ec:	6053      	str	r3, [r2, #4]
 801e3ee:	4421      	add	r1, r4
 801e3f0:	6011      	str	r1, [r2, #0]
 801e3f2:	e7da      	b.n	801e3aa <_free_r+0x26>
 801e3f4:	d902      	bls.n	801e3fc <_free_r+0x78>
 801e3f6:	230c      	movs	r3, #12
 801e3f8:	6003      	str	r3, [r0, #0]
 801e3fa:	e7d6      	b.n	801e3aa <_free_r+0x26>
 801e3fc:	6825      	ldr	r5, [r4, #0]
 801e3fe:	1961      	adds	r1, r4, r5
 801e400:	428b      	cmp	r3, r1
 801e402:	bf04      	itt	eq
 801e404:	6819      	ldreq	r1, [r3, #0]
 801e406:	685b      	ldreq	r3, [r3, #4]
 801e408:	6063      	str	r3, [r4, #4]
 801e40a:	bf04      	itt	eq
 801e40c:	1949      	addeq	r1, r1, r5
 801e40e:	6021      	streq	r1, [r4, #0]
 801e410:	6054      	str	r4, [r2, #4]
 801e412:	e7ca      	b.n	801e3aa <_free_r+0x26>
 801e414:	b003      	add	sp, #12
 801e416:	bd30      	pop	{r4, r5, pc}
 801e418:	2001e534 	.word	0x2001e534

0801e41c <sbrk_aligned>:
 801e41c:	b570      	push	{r4, r5, r6, lr}
 801e41e:	4e0e      	ldr	r6, [pc, #56]	; (801e458 <sbrk_aligned+0x3c>)
 801e420:	460c      	mov	r4, r1
 801e422:	6831      	ldr	r1, [r6, #0]
 801e424:	4605      	mov	r5, r0
 801e426:	b911      	cbnz	r1, 801e42e <sbrk_aligned+0x12>
 801e428:	f000 f99a 	bl	801e760 <_sbrk_r>
 801e42c:	6030      	str	r0, [r6, #0]
 801e42e:	4621      	mov	r1, r4
 801e430:	4628      	mov	r0, r5
 801e432:	f000 f995 	bl	801e760 <_sbrk_r>
 801e436:	1c43      	adds	r3, r0, #1
 801e438:	d00a      	beq.n	801e450 <sbrk_aligned+0x34>
 801e43a:	1cc4      	adds	r4, r0, #3
 801e43c:	f024 0403 	bic.w	r4, r4, #3
 801e440:	42a0      	cmp	r0, r4
 801e442:	d007      	beq.n	801e454 <sbrk_aligned+0x38>
 801e444:	1a21      	subs	r1, r4, r0
 801e446:	4628      	mov	r0, r5
 801e448:	f000 f98a 	bl	801e760 <_sbrk_r>
 801e44c:	3001      	adds	r0, #1
 801e44e:	d101      	bne.n	801e454 <sbrk_aligned+0x38>
 801e450:	f04f 34ff 	mov.w	r4, #4294967295
 801e454:	4620      	mov	r0, r4
 801e456:	bd70      	pop	{r4, r5, r6, pc}
 801e458:	2001e538 	.word	0x2001e538

0801e45c <_malloc_r>:
 801e45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e460:	1ccd      	adds	r5, r1, #3
 801e462:	f025 0503 	bic.w	r5, r5, #3
 801e466:	3508      	adds	r5, #8
 801e468:	2d0c      	cmp	r5, #12
 801e46a:	bf38      	it	cc
 801e46c:	250c      	movcc	r5, #12
 801e46e:	2d00      	cmp	r5, #0
 801e470:	4607      	mov	r7, r0
 801e472:	db01      	blt.n	801e478 <_malloc_r+0x1c>
 801e474:	42a9      	cmp	r1, r5
 801e476:	d905      	bls.n	801e484 <_malloc_r+0x28>
 801e478:	230c      	movs	r3, #12
 801e47a:	603b      	str	r3, [r7, #0]
 801e47c:	2600      	movs	r6, #0
 801e47e:	4630      	mov	r0, r6
 801e480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e484:	4e2e      	ldr	r6, [pc, #184]	; (801e540 <_malloc_r+0xe4>)
 801e486:	f000 fc03 	bl	801ec90 <__malloc_lock>
 801e48a:	6833      	ldr	r3, [r6, #0]
 801e48c:	461c      	mov	r4, r3
 801e48e:	bb34      	cbnz	r4, 801e4de <_malloc_r+0x82>
 801e490:	4629      	mov	r1, r5
 801e492:	4638      	mov	r0, r7
 801e494:	f7ff ffc2 	bl	801e41c <sbrk_aligned>
 801e498:	1c43      	adds	r3, r0, #1
 801e49a:	4604      	mov	r4, r0
 801e49c:	d14d      	bne.n	801e53a <_malloc_r+0xde>
 801e49e:	6834      	ldr	r4, [r6, #0]
 801e4a0:	4626      	mov	r6, r4
 801e4a2:	2e00      	cmp	r6, #0
 801e4a4:	d140      	bne.n	801e528 <_malloc_r+0xcc>
 801e4a6:	6823      	ldr	r3, [r4, #0]
 801e4a8:	4631      	mov	r1, r6
 801e4aa:	4638      	mov	r0, r7
 801e4ac:	eb04 0803 	add.w	r8, r4, r3
 801e4b0:	f000 f956 	bl	801e760 <_sbrk_r>
 801e4b4:	4580      	cmp	r8, r0
 801e4b6:	d13a      	bne.n	801e52e <_malloc_r+0xd2>
 801e4b8:	6821      	ldr	r1, [r4, #0]
 801e4ba:	3503      	adds	r5, #3
 801e4bc:	1a6d      	subs	r5, r5, r1
 801e4be:	f025 0503 	bic.w	r5, r5, #3
 801e4c2:	3508      	adds	r5, #8
 801e4c4:	2d0c      	cmp	r5, #12
 801e4c6:	bf38      	it	cc
 801e4c8:	250c      	movcc	r5, #12
 801e4ca:	4629      	mov	r1, r5
 801e4cc:	4638      	mov	r0, r7
 801e4ce:	f7ff ffa5 	bl	801e41c <sbrk_aligned>
 801e4d2:	3001      	adds	r0, #1
 801e4d4:	d02b      	beq.n	801e52e <_malloc_r+0xd2>
 801e4d6:	6823      	ldr	r3, [r4, #0]
 801e4d8:	442b      	add	r3, r5
 801e4da:	6023      	str	r3, [r4, #0]
 801e4dc:	e00e      	b.n	801e4fc <_malloc_r+0xa0>
 801e4de:	6822      	ldr	r2, [r4, #0]
 801e4e0:	1b52      	subs	r2, r2, r5
 801e4e2:	d41e      	bmi.n	801e522 <_malloc_r+0xc6>
 801e4e4:	2a0b      	cmp	r2, #11
 801e4e6:	d916      	bls.n	801e516 <_malloc_r+0xba>
 801e4e8:	1961      	adds	r1, r4, r5
 801e4ea:	42a3      	cmp	r3, r4
 801e4ec:	6025      	str	r5, [r4, #0]
 801e4ee:	bf18      	it	ne
 801e4f0:	6059      	strne	r1, [r3, #4]
 801e4f2:	6863      	ldr	r3, [r4, #4]
 801e4f4:	bf08      	it	eq
 801e4f6:	6031      	streq	r1, [r6, #0]
 801e4f8:	5162      	str	r2, [r4, r5]
 801e4fa:	604b      	str	r3, [r1, #4]
 801e4fc:	4638      	mov	r0, r7
 801e4fe:	f104 060b 	add.w	r6, r4, #11
 801e502:	f000 fbcb 	bl	801ec9c <__malloc_unlock>
 801e506:	f026 0607 	bic.w	r6, r6, #7
 801e50a:	1d23      	adds	r3, r4, #4
 801e50c:	1af2      	subs	r2, r6, r3
 801e50e:	d0b6      	beq.n	801e47e <_malloc_r+0x22>
 801e510:	1b9b      	subs	r3, r3, r6
 801e512:	50a3      	str	r3, [r4, r2]
 801e514:	e7b3      	b.n	801e47e <_malloc_r+0x22>
 801e516:	6862      	ldr	r2, [r4, #4]
 801e518:	42a3      	cmp	r3, r4
 801e51a:	bf0c      	ite	eq
 801e51c:	6032      	streq	r2, [r6, #0]
 801e51e:	605a      	strne	r2, [r3, #4]
 801e520:	e7ec      	b.n	801e4fc <_malloc_r+0xa0>
 801e522:	4623      	mov	r3, r4
 801e524:	6864      	ldr	r4, [r4, #4]
 801e526:	e7b2      	b.n	801e48e <_malloc_r+0x32>
 801e528:	4634      	mov	r4, r6
 801e52a:	6876      	ldr	r6, [r6, #4]
 801e52c:	e7b9      	b.n	801e4a2 <_malloc_r+0x46>
 801e52e:	230c      	movs	r3, #12
 801e530:	603b      	str	r3, [r7, #0]
 801e532:	4638      	mov	r0, r7
 801e534:	f000 fbb2 	bl	801ec9c <__malloc_unlock>
 801e538:	e7a1      	b.n	801e47e <_malloc_r+0x22>
 801e53a:	6025      	str	r5, [r4, #0]
 801e53c:	e7de      	b.n	801e4fc <_malloc_r+0xa0>
 801e53e:	bf00      	nop
 801e540:	2001e534 	.word	0x2001e534

0801e544 <iprintf>:
 801e544:	b40f      	push	{r0, r1, r2, r3}
 801e546:	4b0a      	ldr	r3, [pc, #40]	; (801e570 <iprintf+0x2c>)
 801e548:	b513      	push	{r0, r1, r4, lr}
 801e54a:	681c      	ldr	r4, [r3, #0]
 801e54c:	b124      	cbz	r4, 801e558 <iprintf+0x14>
 801e54e:	69a3      	ldr	r3, [r4, #24]
 801e550:	b913      	cbnz	r3, 801e558 <iprintf+0x14>
 801e552:	4620      	mov	r0, r4
 801e554:	f7ff fe10 	bl	801e178 <__sinit>
 801e558:	ab05      	add	r3, sp, #20
 801e55a:	9a04      	ldr	r2, [sp, #16]
 801e55c:	68a1      	ldr	r1, [r4, #8]
 801e55e:	9301      	str	r3, [sp, #4]
 801e560:	4620      	mov	r0, r4
 801e562:	f000 fd27 	bl	801efb4 <_vfiprintf_r>
 801e566:	b002      	add	sp, #8
 801e568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e56c:	b004      	add	sp, #16
 801e56e:	4770      	bx	lr
 801e570:	20000048 	.word	0x20000048

0801e574 <putchar>:
 801e574:	4b09      	ldr	r3, [pc, #36]	; (801e59c <putchar+0x28>)
 801e576:	b513      	push	{r0, r1, r4, lr}
 801e578:	681c      	ldr	r4, [r3, #0]
 801e57a:	4601      	mov	r1, r0
 801e57c:	b134      	cbz	r4, 801e58c <putchar+0x18>
 801e57e:	69a3      	ldr	r3, [r4, #24]
 801e580:	b923      	cbnz	r3, 801e58c <putchar+0x18>
 801e582:	9001      	str	r0, [sp, #4]
 801e584:	4620      	mov	r0, r4
 801e586:	f7ff fdf7 	bl	801e178 <__sinit>
 801e58a:	9901      	ldr	r1, [sp, #4]
 801e58c:	68a2      	ldr	r2, [r4, #8]
 801e58e:	4620      	mov	r0, r4
 801e590:	b002      	add	sp, #8
 801e592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e596:	f000 bfd1 	b.w	801f53c <_putc_r>
 801e59a:	bf00      	nop
 801e59c:	20000048 	.word	0x20000048

0801e5a0 <_puts_r>:
 801e5a0:	b570      	push	{r4, r5, r6, lr}
 801e5a2:	460e      	mov	r6, r1
 801e5a4:	4605      	mov	r5, r0
 801e5a6:	b118      	cbz	r0, 801e5b0 <_puts_r+0x10>
 801e5a8:	6983      	ldr	r3, [r0, #24]
 801e5aa:	b90b      	cbnz	r3, 801e5b0 <_puts_r+0x10>
 801e5ac:	f7ff fde4 	bl	801e178 <__sinit>
 801e5b0:	69ab      	ldr	r3, [r5, #24]
 801e5b2:	68ac      	ldr	r4, [r5, #8]
 801e5b4:	b913      	cbnz	r3, 801e5bc <_puts_r+0x1c>
 801e5b6:	4628      	mov	r0, r5
 801e5b8:	f7ff fdde 	bl	801e178 <__sinit>
 801e5bc:	4b2c      	ldr	r3, [pc, #176]	; (801e670 <_puts_r+0xd0>)
 801e5be:	429c      	cmp	r4, r3
 801e5c0:	d120      	bne.n	801e604 <_puts_r+0x64>
 801e5c2:	686c      	ldr	r4, [r5, #4]
 801e5c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e5c6:	07db      	lsls	r3, r3, #31
 801e5c8:	d405      	bmi.n	801e5d6 <_puts_r+0x36>
 801e5ca:	89a3      	ldrh	r3, [r4, #12]
 801e5cc:	0598      	lsls	r0, r3, #22
 801e5ce:	d402      	bmi.n	801e5d6 <_puts_r+0x36>
 801e5d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e5d2:	f7ff fe94 	bl	801e2fe <__retarget_lock_acquire_recursive>
 801e5d6:	89a3      	ldrh	r3, [r4, #12]
 801e5d8:	0719      	lsls	r1, r3, #28
 801e5da:	d51d      	bpl.n	801e618 <_puts_r+0x78>
 801e5dc:	6923      	ldr	r3, [r4, #16]
 801e5de:	b1db      	cbz	r3, 801e618 <_puts_r+0x78>
 801e5e0:	3e01      	subs	r6, #1
 801e5e2:	68a3      	ldr	r3, [r4, #8]
 801e5e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801e5e8:	3b01      	subs	r3, #1
 801e5ea:	60a3      	str	r3, [r4, #8]
 801e5ec:	bb39      	cbnz	r1, 801e63e <_puts_r+0x9e>
 801e5ee:	2b00      	cmp	r3, #0
 801e5f0:	da38      	bge.n	801e664 <_puts_r+0xc4>
 801e5f2:	4622      	mov	r2, r4
 801e5f4:	210a      	movs	r1, #10
 801e5f6:	4628      	mov	r0, r5
 801e5f8:	f000 f92e 	bl	801e858 <__swbuf_r>
 801e5fc:	3001      	adds	r0, #1
 801e5fe:	d011      	beq.n	801e624 <_puts_r+0x84>
 801e600:	250a      	movs	r5, #10
 801e602:	e011      	b.n	801e628 <_puts_r+0x88>
 801e604:	4b1b      	ldr	r3, [pc, #108]	; (801e674 <_puts_r+0xd4>)
 801e606:	429c      	cmp	r4, r3
 801e608:	d101      	bne.n	801e60e <_puts_r+0x6e>
 801e60a:	68ac      	ldr	r4, [r5, #8]
 801e60c:	e7da      	b.n	801e5c4 <_puts_r+0x24>
 801e60e:	4b1a      	ldr	r3, [pc, #104]	; (801e678 <_puts_r+0xd8>)
 801e610:	429c      	cmp	r4, r3
 801e612:	bf08      	it	eq
 801e614:	68ec      	ldreq	r4, [r5, #12]
 801e616:	e7d5      	b.n	801e5c4 <_puts_r+0x24>
 801e618:	4621      	mov	r1, r4
 801e61a:	4628      	mov	r0, r5
 801e61c:	f000 f980 	bl	801e920 <__swsetup_r>
 801e620:	2800      	cmp	r0, #0
 801e622:	d0dd      	beq.n	801e5e0 <_puts_r+0x40>
 801e624:	f04f 35ff 	mov.w	r5, #4294967295
 801e628:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e62a:	07da      	lsls	r2, r3, #31
 801e62c:	d405      	bmi.n	801e63a <_puts_r+0x9a>
 801e62e:	89a3      	ldrh	r3, [r4, #12]
 801e630:	059b      	lsls	r3, r3, #22
 801e632:	d402      	bmi.n	801e63a <_puts_r+0x9a>
 801e634:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e636:	f7ff fe63 	bl	801e300 <__retarget_lock_release_recursive>
 801e63a:	4628      	mov	r0, r5
 801e63c:	bd70      	pop	{r4, r5, r6, pc}
 801e63e:	2b00      	cmp	r3, #0
 801e640:	da04      	bge.n	801e64c <_puts_r+0xac>
 801e642:	69a2      	ldr	r2, [r4, #24]
 801e644:	429a      	cmp	r2, r3
 801e646:	dc06      	bgt.n	801e656 <_puts_r+0xb6>
 801e648:	290a      	cmp	r1, #10
 801e64a:	d004      	beq.n	801e656 <_puts_r+0xb6>
 801e64c:	6823      	ldr	r3, [r4, #0]
 801e64e:	1c5a      	adds	r2, r3, #1
 801e650:	6022      	str	r2, [r4, #0]
 801e652:	7019      	strb	r1, [r3, #0]
 801e654:	e7c5      	b.n	801e5e2 <_puts_r+0x42>
 801e656:	4622      	mov	r2, r4
 801e658:	4628      	mov	r0, r5
 801e65a:	f000 f8fd 	bl	801e858 <__swbuf_r>
 801e65e:	3001      	adds	r0, #1
 801e660:	d1bf      	bne.n	801e5e2 <_puts_r+0x42>
 801e662:	e7df      	b.n	801e624 <_puts_r+0x84>
 801e664:	6823      	ldr	r3, [r4, #0]
 801e666:	250a      	movs	r5, #10
 801e668:	1c5a      	adds	r2, r3, #1
 801e66a:	6022      	str	r2, [r4, #0]
 801e66c:	701d      	strb	r5, [r3, #0]
 801e66e:	e7db      	b.n	801e628 <_puts_r+0x88>
 801e670:	08029374 	.word	0x08029374
 801e674:	08029394 	.word	0x08029394
 801e678:	08029354 	.word	0x08029354

0801e67c <puts>:
 801e67c:	4b02      	ldr	r3, [pc, #8]	; (801e688 <puts+0xc>)
 801e67e:	4601      	mov	r1, r0
 801e680:	6818      	ldr	r0, [r3, #0]
 801e682:	f7ff bf8d 	b.w	801e5a0 <_puts_r>
 801e686:	bf00      	nop
 801e688:	20000048 	.word	0x20000048

0801e68c <cleanup_glue>:
 801e68c:	b538      	push	{r3, r4, r5, lr}
 801e68e:	460c      	mov	r4, r1
 801e690:	6809      	ldr	r1, [r1, #0]
 801e692:	4605      	mov	r5, r0
 801e694:	b109      	cbz	r1, 801e69a <cleanup_glue+0xe>
 801e696:	f7ff fff9 	bl	801e68c <cleanup_glue>
 801e69a:	4621      	mov	r1, r4
 801e69c:	4628      	mov	r0, r5
 801e69e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e6a2:	f7ff be6f 	b.w	801e384 <_free_r>
	...

0801e6a8 <_reclaim_reent>:
 801e6a8:	4b2c      	ldr	r3, [pc, #176]	; (801e75c <_reclaim_reent+0xb4>)
 801e6aa:	681b      	ldr	r3, [r3, #0]
 801e6ac:	4283      	cmp	r3, r0
 801e6ae:	b570      	push	{r4, r5, r6, lr}
 801e6b0:	4604      	mov	r4, r0
 801e6b2:	d051      	beq.n	801e758 <_reclaim_reent+0xb0>
 801e6b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801e6b6:	b143      	cbz	r3, 801e6ca <_reclaim_reent+0x22>
 801e6b8:	68db      	ldr	r3, [r3, #12]
 801e6ba:	2b00      	cmp	r3, #0
 801e6bc:	d14a      	bne.n	801e754 <_reclaim_reent+0xac>
 801e6be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e6c0:	6819      	ldr	r1, [r3, #0]
 801e6c2:	b111      	cbz	r1, 801e6ca <_reclaim_reent+0x22>
 801e6c4:	4620      	mov	r0, r4
 801e6c6:	f7ff fe5d 	bl	801e384 <_free_r>
 801e6ca:	6961      	ldr	r1, [r4, #20]
 801e6cc:	b111      	cbz	r1, 801e6d4 <_reclaim_reent+0x2c>
 801e6ce:	4620      	mov	r0, r4
 801e6d0:	f7ff fe58 	bl	801e384 <_free_r>
 801e6d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e6d6:	b111      	cbz	r1, 801e6de <_reclaim_reent+0x36>
 801e6d8:	4620      	mov	r0, r4
 801e6da:	f7ff fe53 	bl	801e384 <_free_r>
 801e6de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801e6e0:	b111      	cbz	r1, 801e6e8 <_reclaim_reent+0x40>
 801e6e2:	4620      	mov	r0, r4
 801e6e4:	f7ff fe4e 	bl	801e384 <_free_r>
 801e6e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801e6ea:	b111      	cbz	r1, 801e6f2 <_reclaim_reent+0x4a>
 801e6ec:	4620      	mov	r0, r4
 801e6ee:	f7ff fe49 	bl	801e384 <_free_r>
 801e6f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801e6f4:	b111      	cbz	r1, 801e6fc <_reclaim_reent+0x54>
 801e6f6:	4620      	mov	r0, r4
 801e6f8:	f7ff fe44 	bl	801e384 <_free_r>
 801e6fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801e6fe:	b111      	cbz	r1, 801e706 <_reclaim_reent+0x5e>
 801e700:	4620      	mov	r0, r4
 801e702:	f7ff fe3f 	bl	801e384 <_free_r>
 801e706:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801e708:	b111      	cbz	r1, 801e710 <_reclaim_reent+0x68>
 801e70a:	4620      	mov	r0, r4
 801e70c:	f7ff fe3a 	bl	801e384 <_free_r>
 801e710:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e712:	b111      	cbz	r1, 801e71a <_reclaim_reent+0x72>
 801e714:	4620      	mov	r0, r4
 801e716:	f7ff fe35 	bl	801e384 <_free_r>
 801e71a:	69a3      	ldr	r3, [r4, #24]
 801e71c:	b1e3      	cbz	r3, 801e758 <_reclaim_reent+0xb0>
 801e71e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801e720:	4620      	mov	r0, r4
 801e722:	4798      	blx	r3
 801e724:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801e726:	b1b9      	cbz	r1, 801e758 <_reclaim_reent+0xb0>
 801e728:	4620      	mov	r0, r4
 801e72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e72e:	f7ff bfad 	b.w	801e68c <cleanup_glue>
 801e732:	5949      	ldr	r1, [r1, r5]
 801e734:	b941      	cbnz	r1, 801e748 <_reclaim_reent+0xa0>
 801e736:	3504      	adds	r5, #4
 801e738:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e73a:	2d80      	cmp	r5, #128	; 0x80
 801e73c:	68d9      	ldr	r1, [r3, #12]
 801e73e:	d1f8      	bne.n	801e732 <_reclaim_reent+0x8a>
 801e740:	4620      	mov	r0, r4
 801e742:	f7ff fe1f 	bl	801e384 <_free_r>
 801e746:	e7ba      	b.n	801e6be <_reclaim_reent+0x16>
 801e748:	680e      	ldr	r6, [r1, #0]
 801e74a:	4620      	mov	r0, r4
 801e74c:	f7ff fe1a 	bl	801e384 <_free_r>
 801e750:	4631      	mov	r1, r6
 801e752:	e7ef      	b.n	801e734 <_reclaim_reent+0x8c>
 801e754:	2500      	movs	r5, #0
 801e756:	e7ef      	b.n	801e738 <_reclaim_reent+0x90>
 801e758:	bd70      	pop	{r4, r5, r6, pc}
 801e75a:	bf00      	nop
 801e75c:	20000048 	.word	0x20000048

0801e760 <_sbrk_r>:
 801e760:	b538      	push	{r3, r4, r5, lr}
 801e762:	4d06      	ldr	r5, [pc, #24]	; (801e77c <_sbrk_r+0x1c>)
 801e764:	2300      	movs	r3, #0
 801e766:	4604      	mov	r4, r0
 801e768:	4608      	mov	r0, r1
 801e76a:	602b      	str	r3, [r5, #0]
 801e76c:	f7e7 fe6c 	bl	8006448 <_sbrk>
 801e770:	1c43      	adds	r3, r0, #1
 801e772:	d102      	bne.n	801e77a <_sbrk_r+0x1a>
 801e774:	682b      	ldr	r3, [r5, #0]
 801e776:	b103      	cbz	r3, 801e77a <_sbrk_r+0x1a>
 801e778:	6023      	str	r3, [r4, #0]
 801e77a:	bd38      	pop	{r3, r4, r5, pc}
 801e77c:	2001e53c 	.word	0x2001e53c

0801e780 <siprintf>:
 801e780:	b40e      	push	{r1, r2, r3}
 801e782:	b500      	push	{lr}
 801e784:	b09c      	sub	sp, #112	; 0x70
 801e786:	ab1d      	add	r3, sp, #116	; 0x74
 801e788:	9002      	str	r0, [sp, #8]
 801e78a:	9006      	str	r0, [sp, #24]
 801e78c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801e790:	4809      	ldr	r0, [pc, #36]	; (801e7b8 <siprintf+0x38>)
 801e792:	9107      	str	r1, [sp, #28]
 801e794:	9104      	str	r1, [sp, #16]
 801e796:	4909      	ldr	r1, [pc, #36]	; (801e7bc <siprintf+0x3c>)
 801e798:	f853 2b04 	ldr.w	r2, [r3], #4
 801e79c:	9105      	str	r1, [sp, #20]
 801e79e:	6800      	ldr	r0, [r0, #0]
 801e7a0:	9301      	str	r3, [sp, #4]
 801e7a2:	a902      	add	r1, sp, #8
 801e7a4:	f000 fadc 	bl	801ed60 <_svfiprintf_r>
 801e7a8:	9b02      	ldr	r3, [sp, #8]
 801e7aa:	2200      	movs	r2, #0
 801e7ac:	701a      	strb	r2, [r3, #0]
 801e7ae:	b01c      	add	sp, #112	; 0x70
 801e7b0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e7b4:	b003      	add	sp, #12
 801e7b6:	4770      	bx	lr
 801e7b8:	20000048 	.word	0x20000048
 801e7bc:	ffff0208 	.word	0xffff0208

0801e7c0 <__sread>:
 801e7c0:	b510      	push	{r4, lr}
 801e7c2:	460c      	mov	r4, r1
 801e7c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7c8:	f000 ff00 	bl	801f5cc <_read_r>
 801e7cc:	2800      	cmp	r0, #0
 801e7ce:	bfab      	itete	ge
 801e7d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801e7d2:	89a3      	ldrhlt	r3, [r4, #12]
 801e7d4:	181b      	addge	r3, r3, r0
 801e7d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801e7da:	bfac      	ite	ge
 801e7dc:	6563      	strge	r3, [r4, #84]	; 0x54
 801e7de:	81a3      	strhlt	r3, [r4, #12]
 801e7e0:	bd10      	pop	{r4, pc}

0801e7e2 <__swrite>:
 801e7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7e6:	461f      	mov	r7, r3
 801e7e8:	898b      	ldrh	r3, [r1, #12]
 801e7ea:	05db      	lsls	r3, r3, #23
 801e7ec:	4605      	mov	r5, r0
 801e7ee:	460c      	mov	r4, r1
 801e7f0:	4616      	mov	r6, r2
 801e7f2:	d505      	bpl.n	801e800 <__swrite+0x1e>
 801e7f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7f8:	2302      	movs	r3, #2
 801e7fa:	2200      	movs	r2, #0
 801e7fc:	f000 f9d0 	bl	801eba0 <_lseek_r>
 801e800:	89a3      	ldrh	r3, [r4, #12]
 801e802:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e806:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801e80a:	81a3      	strh	r3, [r4, #12]
 801e80c:	4632      	mov	r2, r6
 801e80e:	463b      	mov	r3, r7
 801e810:	4628      	mov	r0, r5
 801e812:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e816:	f000 b871 	b.w	801e8fc <_write_r>

0801e81a <__sseek>:
 801e81a:	b510      	push	{r4, lr}
 801e81c:	460c      	mov	r4, r1
 801e81e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e822:	f000 f9bd 	bl	801eba0 <_lseek_r>
 801e826:	1c43      	adds	r3, r0, #1
 801e828:	89a3      	ldrh	r3, [r4, #12]
 801e82a:	bf15      	itete	ne
 801e82c:	6560      	strne	r0, [r4, #84]	; 0x54
 801e82e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801e832:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801e836:	81a3      	strheq	r3, [r4, #12]
 801e838:	bf18      	it	ne
 801e83a:	81a3      	strhne	r3, [r4, #12]
 801e83c:	bd10      	pop	{r4, pc}

0801e83e <__sclose>:
 801e83e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e842:	f000 b8db 	b.w	801e9fc <_close_r>

0801e846 <strcpy>:
 801e846:	4603      	mov	r3, r0
 801e848:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e84c:	f803 2b01 	strb.w	r2, [r3], #1
 801e850:	2a00      	cmp	r2, #0
 801e852:	d1f9      	bne.n	801e848 <strcpy+0x2>
 801e854:	4770      	bx	lr
	...

0801e858 <__swbuf_r>:
 801e858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e85a:	460e      	mov	r6, r1
 801e85c:	4614      	mov	r4, r2
 801e85e:	4605      	mov	r5, r0
 801e860:	b118      	cbz	r0, 801e86a <__swbuf_r+0x12>
 801e862:	6983      	ldr	r3, [r0, #24]
 801e864:	b90b      	cbnz	r3, 801e86a <__swbuf_r+0x12>
 801e866:	f7ff fc87 	bl	801e178 <__sinit>
 801e86a:	4b21      	ldr	r3, [pc, #132]	; (801e8f0 <__swbuf_r+0x98>)
 801e86c:	429c      	cmp	r4, r3
 801e86e:	d12b      	bne.n	801e8c8 <__swbuf_r+0x70>
 801e870:	686c      	ldr	r4, [r5, #4]
 801e872:	69a3      	ldr	r3, [r4, #24]
 801e874:	60a3      	str	r3, [r4, #8]
 801e876:	89a3      	ldrh	r3, [r4, #12]
 801e878:	071a      	lsls	r2, r3, #28
 801e87a:	d52f      	bpl.n	801e8dc <__swbuf_r+0x84>
 801e87c:	6923      	ldr	r3, [r4, #16]
 801e87e:	b36b      	cbz	r3, 801e8dc <__swbuf_r+0x84>
 801e880:	6923      	ldr	r3, [r4, #16]
 801e882:	6820      	ldr	r0, [r4, #0]
 801e884:	1ac0      	subs	r0, r0, r3
 801e886:	6963      	ldr	r3, [r4, #20]
 801e888:	b2f6      	uxtb	r6, r6
 801e88a:	4283      	cmp	r3, r0
 801e88c:	4637      	mov	r7, r6
 801e88e:	dc04      	bgt.n	801e89a <__swbuf_r+0x42>
 801e890:	4621      	mov	r1, r4
 801e892:	4628      	mov	r0, r5
 801e894:	f000 f948 	bl	801eb28 <_fflush_r>
 801e898:	bb30      	cbnz	r0, 801e8e8 <__swbuf_r+0x90>
 801e89a:	68a3      	ldr	r3, [r4, #8]
 801e89c:	3b01      	subs	r3, #1
 801e89e:	60a3      	str	r3, [r4, #8]
 801e8a0:	6823      	ldr	r3, [r4, #0]
 801e8a2:	1c5a      	adds	r2, r3, #1
 801e8a4:	6022      	str	r2, [r4, #0]
 801e8a6:	701e      	strb	r6, [r3, #0]
 801e8a8:	6963      	ldr	r3, [r4, #20]
 801e8aa:	3001      	adds	r0, #1
 801e8ac:	4283      	cmp	r3, r0
 801e8ae:	d004      	beq.n	801e8ba <__swbuf_r+0x62>
 801e8b0:	89a3      	ldrh	r3, [r4, #12]
 801e8b2:	07db      	lsls	r3, r3, #31
 801e8b4:	d506      	bpl.n	801e8c4 <__swbuf_r+0x6c>
 801e8b6:	2e0a      	cmp	r6, #10
 801e8b8:	d104      	bne.n	801e8c4 <__swbuf_r+0x6c>
 801e8ba:	4621      	mov	r1, r4
 801e8bc:	4628      	mov	r0, r5
 801e8be:	f000 f933 	bl	801eb28 <_fflush_r>
 801e8c2:	b988      	cbnz	r0, 801e8e8 <__swbuf_r+0x90>
 801e8c4:	4638      	mov	r0, r7
 801e8c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e8c8:	4b0a      	ldr	r3, [pc, #40]	; (801e8f4 <__swbuf_r+0x9c>)
 801e8ca:	429c      	cmp	r4, r3
 801e8cc:	d101      	bne.n	801e8d2 <__swbuf_r+0x7a>
 801e8ce:	68ac      	ldr	r4, [r5, #8]
 801e8d0:	e7cf      	b.n	801e872 <__swbuf_r+0x1a>
 801e8d2:	4b09      	ldr	r3, [pc, #36]	; (801e8f8 <__swbuf_r+0xa0>)
 801e8d4:	429c      	cmp	r4, r3
 801e8d6:	bf08      	it	eq
 801e8d8:	68ec      	ldreq	r4, [r5, #12]
 801e8da:	e7ca      	b.n	801e872 <__swbuf_r+0x1a>
 801e8dc:	4621      	mov	r1, r4
 801e8de:	4628      	mov	r0, r5
 801e8e0:	f000 f81e 	bl	801e920 <__swsetup_r>
 801e8e4:	2800      	cmp	r0, #0
 801e8e6:	d0cb      	beq.n	801e880 <__swbuf_r+0x28>
 801e8e8:	f04f 37ff 	mov.w	r7, #4294967295
 801e8ec:	e7ea      	b.n	801e8c4 <__swbuf_r+0x6c>
 801e8ee:	bf00      	nop
 801e8f0:	08029374 	.word	0x08029374
 801e8f4:	08029394 	.word	0x08029394
 801e8f8:	08029354 	.word	0x08029354

0801e8fc <_write_r>:
 801e8fc:	b538      	push	{r3, r4, r5, lr}
 801e8fe:	4d07      	ldr	r5, [pc, #28]	; (801e91c <_write_r+0x20>)
 801e900:	4604      	mov	r4, r0
 801e902:	4608      	mov	r0, r1
 801e904:	4611      	mov	r1, r2
 801e906:	2200      	movs	r2, #0
 801e908:	602a      	str	r2, [r5, #0]
 801e90a:	461a      	mov	r2, r3
 801e90c:	f7e7 fd4b 	bl	80063a6 <_write>
 801e910:	1c43      	adds	r3, r0, #1
 801e912:	d102      	bne.n	801e91a <_write_r+0x1e>
 801e914:	682b      	ldr	r3, [r5, #0]
 801e916:	b103      	cbz	r3, 801e91a <_write_r+0x1e>
 801e918:	6023      	str	r3, [r4, #0]
 801e91a:	bd38      	pop	{r3, r4, r5, pc}
 801e91c:	2001e53c 	.word	0x2001e53c

0801e920 <__swsetup_r>:
 801e920:	4b32      	ldr	r3, [pc, #200]	; (801e9ec <__swsetup_r+0xcc>)
 801e922:	b570      	push	{r4, r5, r6, lr}
 801e924:	681d      	ldr	r5, [r3, #0]
 801e926:	4606      	mov	r6, r0
 801e928:	460c      	mov	r4, r1
 801e92a:	b125      	cbz	r5, 801e936 <__swsetup_r+0x16>
 801e92c:	69ab      	ldr	r3, [r5, #24]
 801e92e:	b913      	cbnz	r3, 801e936 <__swsetup_r+0x16>
 801e930:	4628      	mov	r0, r5
 801e932:	f7ff fc21 	bl	801e178 <__sinit>
 801e936:	4b2e      	ldr	r3, [pc, #184]	; (801e9f0 <__swsetup_r+0xd0>)
 801e938:	429c      	cmp	r4, r3
 801e93a:	d10f      	bne.n	801e95c <__swsetup_r+0x3c>
 801e93c:	686c      	ldr	r4, [r5, #4]
 801e93e:	89a3      	ldrh	r3, [r4, #12]
 801e940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e944:	0719      	lsls	r1, r3, #28
 801e946:	d42c      	bmi.n	801e9a2 <__swsetup_r+0x82>
 801e948:	06dd      	lsls	r5, r3, #27
 801e94a:	d411      	bmi.n	801e970 <__swsetup_r+0x50>
 801e94c:	2309      	movs	r3, #9
 801e94e:	6033      	str	r3, [r6, #0]
 801e950:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e954:	81a3      	strh	r3, [r4, #12]
 801e956:	f04f 30ff 	mov.w	r0, #4294967295
 801e95a:	e03e      	b.n	801e9da <__swsetup_r+0xba>
 801e95c:	4b25      	ldr	r3, [pc, #148]	; (801e9f4 <__swsetup_r+0xd4>)
 801e95e:	429c      	cmp	r4, r3
 801e960:	d101      	bne.n	801e966 <__swsetup_r+0x46>
 801e962:	68ac      	ldr	r4, [r5, #8]
 801e964:	e7eb      	b.n	801e93e <__swsetup_r+0x1e>
 801e966:	4b24      	ldr	r3, [pc, #144]	; (801e9f8 <__swsetup_r+0xd8>)
 801e968:	429c      	cmp	r4, r3
 801e96a:	bf08      	it	eq
 801e96c:	68ec      	ldreq	r4, [r5, #12]
 801e96e:	e7e6      	b.n	801e93e <__swsetup_r+0x1e>
 801e970:	0758      	lsls	r0, r3, #29
 801e972:	d512      	bpl.n	801e99a <__swsetup_r+0x7a>
 801e974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e976:	b141      	cbz	r1, 801e98a <__swsetup_r+0x6a>
 801e978:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e97c:	4299      	cmp	r1, r3
 801e97e:	d002      	beq.n	801e986 <__swsetup_r+0x66>
 801e980:	4630      	mov	r0, r6
 801e982:	f7ff fcff 	bl	801e384 <_free_r>
 801e986:	2300      	movs	r3, #0
 801e988:	6363      	str	r3, [r4, #52]	; 0x34
 801e98a:	89a3      	ldrh	r3, [r4, #12]
 801e98c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e990:	81a3      	strh	r3, [r4, #12]
 801e992:	2300      	movs	r3, #0
 801e994:	6063      	str	r3, [r4, #4]
 801e996:	6923      	ldr	r3, [r4, #16]
 801e998:	6023      	str	r3, [r4, #0]
 801e99a:	89a3      	ldrh	r3, [r4, #12]
 801e99c:	f043 0308 	orr.w	r3, r3, #8
 801e9a0:	81a3      	strh	r3, [r4, #12]
 801e9a2:	6923      	ldr	r3, [r4, #16]
 801e9a4:	b94b      	cbnz	r3, 801e9ba <__swsetup_r+0x9a>
 801e9a6:	89a3      	ldrh	r3, [r4, #12]
 801e9a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e9ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e9b0:	d003      	beq.n	801e9ba <__swsetup_r+0x9a>
 801e9b2:	4621      	mov	r1, r4
 801e9b4:	4630      	mov	r0, r6
 801e9b6:	f000 f92b 	bl	801ec10 <__smakebuf_r>
 801e9ba:	89a0      	ldrh	r0, [r4, #12]
 801e9bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e9c0:	f010 0301 	ands.w	r3, r0, #1
 801e9c4:	d00a      	beq.n	801e9dc <__swsetup_r+0xbc>
 801e9c6:	2300      	movs	r3, #0
 801e9c8:	60a3      	str	r3, [r4, #8]
 801e9ca:	6963      	ldr	r3, [r4, #20]
 801e9cc:	425b      	negs	r3, r3
 801e9ce:	61a3      	str	r3, [r4, #24]
 801e9d0:	6923      	ldr	r3, [r4, #16]
 801e9d2:	b943      	cbnz	r3, 801e9e6 <__swsetup_r+0xc6>
 801e9d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e9d8:	d1ba      	bne.n	801e950 <__swsetup_r+0x30>
 801e9da:	bd70      	pop	{r4, r5, r6, pc}
 801e9dc:	0781      	lsls	r1, r0, #30
 801e9de:	bf58      	it	pl
 801e9e0:	6963      	ldrpl	r3, [r4, #20]
 801e9e2:	60a3      	str	r3, [r4, #8]
 801e9e4:	e7f4      	b.n	801e9d0 <__swsetup_r+0xb0>
 801e9e6:	2000      	movs	r0, #0
 801e9e8:	e7f7      	b.n	801e9da <__swsetup_r+0xba>
 801e9ea:	bf00      	nop
 801e9ec:	20000048 	.word	0x20000048
 801e9f0:	08029374 	.word	0x08029374
 801e9f4:	08029394 	.word	0x08029394
 801e9f8:	08029354 	.word	0x08029354

0801e9fc <_close_r>:
 801e9fc:	b538      	push	{r3, r4, r5, lr}
 801e9fe:	4d06      	ldr	r5, [pc, #24]	; (801ea18 <_close_r+0x1c>)
 801ea00:	2300      	movs	r3, #0
 801ea02:	4604      	mov	r4, r0
 801ea04:	4608      	mov	r0, r1
 801ea06:	602b      	str	r3, [r5, #0]
 801ea08:	f7e7 fce9 	bl	80063de <_close>
 801ea0c:	1c43      	adds	r3, r0, #1
 801ea0e:	d102      	bne.n	801ea16 <_close_r+0x1a>
 801ea10:	682b      	ldr	r3, [r5, #0]
 801ea12:	b103      	cbz	r3, 801ea16 <_close_r+0x1a>
 801ea14:	6023      	str	r3, [r4, #0]
 801ea16:	bd38      	pop	{r3, r4, r5, pc}
 801ea18:	2001e53c 	.word	0x2001e53c

0801ea1c <__sflush_r>:
 801ea1c:	898a      	ldrh	r2, [r1, #12]
 801ea1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea22:	4605      	mov	r5, r0
 801ea24:	0710      	lsls	r0, r2, #28
 801ea26:	460c      	mov	r4, r1
 801ea28:	d458      	bmi.n	801eadc <__sflush_r+0xc0>
 801ea2a:	684b      	ldr	r3, [r1, #4]
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	dc05      	bgt.n	801ea3c <__sflush_r+0x20>
 801ea30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ea32:	2b00      	cmp	r3, #0
 801ea34:	dc02      	bgt.n	801ea3c <__sflush_r+0x20>
 801ea36:	2000      	movs	r0, #0
 801ea38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ea3e:	2e00      	cmp	r6, #0
 801ea40:	d0f9      	beq.n	801ea36 <__sflush_r+0x1a>
 801ea42:	2300      	movs	r3, #0
 801ea44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ea48:	682f      	ldr	r7, [r5, #0]
 801ea4a:	602b      	str	r3, [r5, #0]
 801ea4c:	d032      	beq.n	801eab4 <__sflush_r+0x98>
 801ea4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ea50:	89a3      	ldrh	r3, [r4, #12]
 801ea52:	075a      	lsls	r2, r3, #29
 801ea54:	d505      	bpl.n	801ea62 <__sflush_r+0x46>
 801ea56:	6863      	ldr	r3, [r4, #4]
 801ea58:	1ac0      	subs	r0, r0, r3
 801ea5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ea5c:	b10b      	cbz	r3, 801ea62 <__sflush_r+0x46>
 801ea5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ea60:	1ac0      	subs	r0, r0, r3
 801ea62:	2300      	movs	r3, #0
 801ea64:	4602      	mov	r2, r0
 801ea66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ea68:	6a21      	ldr	r1, [r4, #32]
 801ea6a:	4628      	mov	r0, r5
 801ea6c:	47b0      	blx	r6
 801ea6e:	1c43      	adds	r3, r0, #1
 801ea70:	89a3      	ldrh	r3, [r4, #12]
 801ea72:	d106      	bne.n	801ea82 <__sflush_r+0x66>
 801ea74:	6829      	ldr	r1, [r5, #0]
 801ea76:	291d      	cmp	r1, #29
 801ea78:	d82c      	bhi.n	801ead4 <__sflush_r+0xb8>
 801ea7a:	4a2a      	ldr	r2, [pc, #168]	; (801eb24 <__sflush_r+0x108>)
 801ea7c:	40ca      	lsrs	r2, r1
 801ea7e:	07d6      	lsls	r6, r2, #31
 801ea80:	d528      	bpl.n	801ead4 <__sflush_r+0xb8>
 801ea82:	2200      	movs	r2, #0
 801ea84:	6062      	str	r2, [r4, #4]
 801ea86:	04d9      	lsls	r1, r3, #19
 801ea88:	6922      	ldr	r2, [r4, #16]
 801ea8a:	6022      	str	r2, [r4, #0]
 801ea8c:	d504      	bpl.n	801ea98 <__sflush_r+0x7c>
 801ea8e:	1c42      	adds	r2, r0, #1
 801ea90:	d101      	bne.n	801ea96 <__sflush_r+0x7a>
 801ea92:	682b      	ldr	r3, [r5, #0]
 801ea94:	b903      	cbnz	r3, 801ea98 <__sflush_r+0x7c>
 801ea96:	6560      	str	r0, [r4, #84]	; 0x54
 801ea98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ea9a:	602f      	str	r7, [r5, #0]
 801ea9c:	2900      	cmp	r1, #0
 801ea9e:	d0ca      	beq.n	801ea36 <__sflush_r+0x1a>
 801eaa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801eaa4:	4299      	cmp	r1, r3
 801eaa6:	d002      	beq.n	801eaae <__sflush_r+0x92>
 801eaa8:	4628      	mov	r0, r5
 801eaaa:	f7ff fc6b 	bl	801e384 <_free_r>
 801eaae:	2000      	movs	r0, #0
 801eab0:	6360      	str	r0, [r4, #52]	; 0x34
 801eab2:	e7c1      	b.n	801ea38 <__sflush_r+0x1c>
 801eab4:	6a21      	ldr	r1, [r4, #32]
 801eab6:	2301      	movs	r3, #1
 801eab8:	4628      	mov	r0, r5
 801eaba:	47b0      	blx	r6
 801eabc:	1c41      	adds	r1, r0, #1
 801eabe:	d1c7      	bne.n	801ea50 <__sflush_r+0x34>
 801eac0:	682b      	ldr	r3, [r5, #0]
 801eac2:	2b00      	cmp	r3, #0
 801eac4:	d0c4      	beq.n	801ea50 <__sflush_r+0x34>
 801eac6:	2b1d      	cmp	r3, #29
 801eac8:	d001      	beq.n	801eace <__sflush_r+0xb2>
 801eaca:	2b16      	cmp	r3, #22
 801eacc:	d101      	bne.n	801ead2 <__sflush_r+0xb6>
 801eace:	602f      	str	r7, [r5, #0]
 801ead0:	e7b1      	b.n	801ea36 <__sflush_r+0x1a>
 801ead2:	89a3      	ldrh	r3, [r4, #12]
 801ead4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ead8:	81a3      	strh	r3, [r4, #12]
 801eada:	e7ad      	b.n	801ea38 <__sflush_r+0x1c>
 801eadc:	690f      	ldr	r7, [r1, #16]
 801eade:	2f00      	cmp	r7, #0
 801eae0:	d0a9      	beq.n	801ea36 <__sflush_r+0x1a>
 801eae2:	0793      	lsls	r3, r2, #30
 801eae4:	680e      	ldr	r6, [r1, #0]
 801eae6:	bf08      	it	eq
 801eae8:	694b      	ldreq	r3, [r1, #20]
 801eaea:	600f      	str	r7, [r1, #0]
 801eaec:	bf18      	it	ne
 801eaee:	2300      	movne	r3, #0
 801eaf0:	eba6 0807 	sub.w	r8, r6, r7
 801eaf4:	608b      	str	r3, [r1, #8]
 801eaf6:	f1b8 0f00 	cmp.w	r8, #0
 801eafa:	dd9c      	ble.n	801ea36 <__sflush_r+0x1a>
 801eafc:	6a21      	ldr	r1, [r4, #32]
 801eafe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801eb00:	4643      	mov	r3, r8
 801eb02:	463a      	mov	r2, r7
 801eb04:	4628      	mov	r0, r5
 801eb06:	47b0      	blx	r6
 801eb08:	2800      	cmp	r0, #0
 801eb0a:	dc06      	bgt.n	801eb1a <__sflush_r+0xfe>
 801eb0c:	89a3      	ldrh	r3, [r4, #12]
 801eb0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801eb12:	81a3      	strh	r3, [r4, #12]
 801eb14:	f04f 30ff 	mov.w	r0, #4294967295
 801eb18:	e78e      	b.n	801ea38 <__sflush_r+0x1c>
 801eb1a:	4407      	add	r7, r0
 801eb1c:	eba8 0800 	sub.w	r8, r8, r0
 801eb20:	e7e9      	b.n	801eaf6 <__sflush_r+0xda>
 801eb22:	bf00      	nop
 801eb24:	20400001 	.word	0x20400001

0801eb28 <_fflush_r>:
 801eb28:	b538      	push	{r3, r4, r5, lr}
 801eb2a:	690b      	ldr	r3, [r1, #16]
 801eb2c:	4605      	mov	r5, r0
 801eb2e:	460c      	mov	r4, r1
 801eb30:	b913      	cbnz	r3, 801eb38 <_fflush_r+0x10>
 801eb32:	2500      	movs	r5, #0
 801eb34:	4628      	mov	r0, r5
 801eb36:	bd38      	pop	{r3, r4, r5, pc}
 801eb38:	b118      	cbz	r0, 801eb42 <_fflush_r+0x1a>
 801eb3a:	6983      	ldr	r3, [r0, #24]
 801eb3c:	b90b      	cbnz	r3, 801eb42 <_fflush_r+0x1a>
 801eb3e:	f7ff fb1b 	bl	801e178 <__sinit>
 801eb42:	4b14      	ldr	r3, [pc, #80]	; (801eb94 <_fflush_r+0x6c>)
 801eb44:	429c      	cmp	r4, r3
 801eb46:	d11b      	bne.n	801eb80 <_fflush_r+0x58>
 801eb48:	686c      	ldr	r4, [r5, #4]
 801eb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eb4e:	2b00      	cmp	r3, #0
 801eb50:	d0ef      	beq.n	801eb32 <_fflush_r+0xa>
 801eb52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801eb54:	07d0      	lsls	r0, r2, #31
 801eb56:	d404      	bmi.n	801eb62 <_fflush_r+0x3a>
 801eb58:	0599      	lsls	r1, r3, #22
 801eb5a:	d402      	bmi.n	801eb62 <_fflush_r+0x3a>
 801eb5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb5e:	f7ff fbce 	bl	801e2fe <__retarget_lock_acquire_recursive>
 801eb62:	4628      	mov	r0, r5
 801eb64:	4621      	mov	r1, r4
 801eb66:	f7ff ff59 	bl	801ea1c <__sflush_r>
 801eb6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801eb6c:	07da      	lsls	r2, r3, #31
 801eb6e:	4605      	mov	r5, r0
 801eb70:	d4e0      	bmi.n	801eb34 <_fflush_r+0xc>
 801eb72:	89a3      	ldrh	r3, [r4, #12]
 801eb74:	059b      	lsls	r3, r3, #22
 801eb76:	d4dd      	bmi.n	801eb34 <_fflush_r+0xc>
 801eb78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801eb7a:	f7ff fbc1 	bl	801e300 <__retarget_lock_release_recursive>
 801eb7e:	e7d9      	b.n	801eb34 <_fflush_r+0xc>
 801eb80:	4b05      	ldr	r3, [pc, #20]	; (801eb98 <_fflush_r+0x70>)
 801eb82:	429c      	cmp	r4, r3
 801eb84:	d101      	bne.n	801eb8a <_fflush_r+0x62>
 801eb86:	68ac      	ldr	r4, [r5, #8]
 801eb88:	e7df      	b.n	801eb4a <_fflush_r+0x22>
 801eb8a:	4b04      	ldr	r3, [pc, #16]	; (801eb9c <_fflush_r+0x74>)
 801eb8c:	429c      	cmp	r4, r3
 801eb8e:	bf08      	it	eq
 801eb90:	68ec      	ldreq	r4, [r5, #12]
 801eb92:	e7da      	b.n	801eb4a <_fflush_r+0x22>
 801eb94:	08029374 	.word	0x08029374
 801eb98:	08029394 	.word	0x08029394
 801eb9c:	08029354 	.word	0x08029354

0801eba0 <_lseek_r>:
 801eba0:	b538      	push	{r3, r4, r5, lr}
 801eba2:	4d07      	ldr	r5, [pc, #28]	; (801ebc0 <_lseek_r+0x20>)
 801eba4:	4604      	mov	r4, r0
 801eba6:	4608      	mov	r0, r1
 801eba8:	4611      	mov	r1, r2
 801ebaa:	2200      	movs	r2, #0
 801ebac:	602a      	str	r2, [r5, #0]
 801ebae:	461a      	mov	r2, r3
 801ebb0:	f7e7 fc3c 	bl	800642c <_lseek>
 801ebb4:	1c43      	adds	r3, r0, #1
 801ebb6:	d102      	bne.n	801ebbe <_lseek_r+0x1e>
 801ebb8:	682b      	ldr	r3, [r5, #0]
 801ebba:	b103      	cbz	r3, 801ebbe <_lseek_r+0x1e>
 801ebbc:	6023      	str	r3, [r4, #0]
 801ebbe:	bd38      	pop	{r3, r4, r5, pc}
 801ebc0:	2001e53c 	.word	0x2001e53c

0801ebc4 <__swhatbuf_r>:
 801ebc4:	b570      	push	{r4, r5, r6, lr}
 801ebc6:	460e      	mov	r6, r1
 801ebc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ebcc:	2900      	cmp	r1, #0
 801ebce:	b096      	sub	sp, #88	; 0x58
 801ebd0:	4614      	mov	r4, r2
 801ebd2:	461d      	mov	r5, r3
 801ebd4:	da08      	bge.n	801ebe8 <__swhatbuf_r+0x24>
 801ebd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801ebda:	2200      	movs	r2, #0
 801ebdc:	602a      	str	r2, [r5, #0]
 801ebde:	061a      	lsls	r2, r3, #24
 801ebe0:	d410      	bmi.n	801ec04 <__swhatbuf_r+0x40>
 801ebe2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801ebe6:	e00e      	b.n	801ec06 <__swhatbuf_r+0x42>
 801ebe8:	466a      	mov	r2, sp
 801ebea:	f000 fd01 	bl	801f5f0 <_fstat_r>
 801ebee:	2800      	cmp	r0, #0
 801ebf0:	dbf1      	blt.n	801ebd6 <__swhatbuf_r+0x12>
 801ebf2:	9a01      	ldr	r2, [sp, #4]
 801ebf4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801ebf8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801ebfc:	425a      	negs	r2, r3
 801ebfe:	415a      	adcs	r2, r3
 801ec00:	602a      	str	r2, [r5, #0]
 801ec02:	e7ee      	b.n	801ebe2 <__swhatbuf_r+0x1e>
 801ec04:	2340      	movs	r3, #64	; 0x40
 801ec06:	2000      	movs	r0, #0
 801ec08:	6023      	str	r3, [r4, #0]
 801ec0a:	b016      	add	sp, #88	; 0x58
 801ec0c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801ec10 <__smakebuf_r>:
 801ec10:	898b      	ldrh	r3, [r1, #12]
 801ec12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801ec14:	079d      	lsls	r5, r3, #30
 801ec16:	4606      	mov	r6, r0
 801ec18:	460c      	mov	r4, r1
 801ec1a:	d507      	bpl.n	801ec2c <__smakebuf_r+0x1c>
 801ec1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801ec20:	6023      	str	r3, [r4, #0]
 801ec22:	6123      	str	r3, [r4, #16]
 801ec24:	2301      	movs	r3, #1
 801ec26:	6163      	str	r3, [r4, #20]
 801ec28:	b002      	add	sp, #8
 801ec2a:	bd70      	pop	{r4, r5, r6, pc}
 801ec2c:	ab01      	add	r3, sp, #4
 801ec2e:	466a      	mov	r2, sp
 801ec30:	f7ff ffc8 	bl	801ebc4 <__swhatbuf_r>
 801ec34:	9900      	ldr	r1, [sp, #0]
 801ec36:	4605      	mov	r5, r0
 801ec38:	4630      	mov	r0, r6
 801ec3a:	f7ff fc0f 	bl	801e45c <_malloc_r>
 801ec3e:	b948      	cbnz	r0, 801ec54 <__smakebuf_r+0x44>
 801ec40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ec44:	059a      	lsls	r2, r3, #22
 801ec46:	d4ef      	bmi.n	801ec28 <__smakebuf_r+0x18>
 801ec48:	f023 0303 	bic.w	r3, r3, #3
 801ec4c:	f043 0302 	orr.w	r3, r3, #2
 801ec50:	81a3      	strh	r3, [r4, #12]
 801ec52:	e7e3      	b.n	801ec1c <__smakebuf_r+0xc>
 801ec54:	4b0d      	ldr	r3, [pc, #52]	; (801ec8c <__smakebuf_r+0x7c>)
 801ec56:	62b3      	str	r3, [r6, #40]	; 0x28
 801ec58:	89a3      	ldrh	r3, [r4, #12]
 801ec5a:	6020      	str	r0, [r4, #0]
 801ec5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ec60:	81a3      	strh	r3, [r4, #12]
 801ec62:	9b00      	ldr	r3, [sp, #0]
 801ec64:	6163      	str	r3, [r4, #20]
 801ec66:	9b01      	ldr	r3, [sp, #4]
 801ec68:	6120      	str	r0, [r4, #16]
 801ec6a:	b15b      	cbz	r3, 801ec84 <__smakebuf_r+0x74>
 801ec6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ec70:	4630      	mov	r0, r6
 801ec72:	f000 fccf 	bl	801f614 <_isatty_r>
 801ec76:	b128      	cbz	r0, 801ec84 <__smakebuf_r+0x74>
 801ec78:	89a3      	ldrh	r3, [r4, #12]
 801ec7a:	f023 0303 	bic.w	r3, r3, #3
 801ec7e:	f043 0301 	orr.w	r3, r3, #1
 801ec82:	81a3      	strh	r3, [r4, #12]
 801ec84:	89a0      	ldrh	r0, [r4, #12]
 801ec86:	4305      	orrs	r5, r0
 801ec88:	81a5      	strh	r5, [r4, #12]
 801ec8a:	e7cd      	b.n	801ec28 <__smakebuf_r+0x18>
 801ec8c:	0801e111 	.word	0x0801e111

0801ec90 <__malloc_lock>:
 801ec90:	4801      	ldr	r0, [pc, #4]	; (801ec98 <__malloc_lock+0x8>)
 801ec92:	f7ff bb34 	b.w	801e2fe <__retarget_lock_acquire_recursive>
 801ec96:	bf00      	nop
 801ec98:	2001e530 	.word	0x2001e530

0801ec9c <__malloc_unlock>:
 801ec9c:	4801      	ldr	r0, [pc, #4]	; (801eca4 <__malloc_unlock+0x8>)
 801ec9e:	f7ff bb2f 	b.w	801e300 <__retarget_lock_release_recursive>
 801eca2:	bf00      	nop
 801eca4:	2001e530 	.word	0x2001e530

0801eca8 <__ssputs_r>:
 801eca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ecac:	688e      	ldr	r6, [r1, #8]
 801ecae:	429e      	cmp	r6, r3
 801ecb0:	4682      	mov	sl, r0
 801ecb2:	460c      	mov	r4, r1
 801ecb4:	4690      	mov	r8, r2
 801ecb6:	461f      	mov	r7, r3
 801ecb8:	d838      	bhi.n	801ed2c <__ssputs_r+0x84>
 801ecba:	898a      	ldrh	r2, [r1, #12]
 801ecbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801ecc0:	d032      	beq.n	801ed28 <__ssputs_r+0x80>
 801ecc2:	6825      	ldr	r5, [r4, #0]
 801ecc4:	6909      	ldr	r1, [r1, #16]
 801ecc6:	eba5 0901 	sub.w	r9, r5, r1
 801ecca:	6965      	ldr	r5, [r4, #20]
 801eccc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ecd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ecd4:	3301      	adds	r3, #1
 801ecd6:	444b      	add	r3, r9
 801ecd8:	106d      	asrs	r5, r5, #1
 801ecda:	429d      	cmp	r5, r3
 801ecdc:	bf38      	it	cc
 801ecde:	461d      	movcc	r5, r3
 801ece0:	0553      	lsls	r3, r2, #21
 801ece2:	d531      	bpl.n	801ed48 <__ssputs_r+0xa0>
 801ece4:	4629      	mov	r1, r5
 801ece6:	f7ff fbb9 	bl	801e45c <_malloc_r>
 801ecea:	4606      	mov	r6, r0
 801ecec:	b950      	cbnz	r0, 801ed04 <__ssputs_r+0x5c>
 801ecee:	230c      	movs	r3, #12
 801ecf0:	f8ca 3000 	str.w	r3, [sl]
 801ecf4:	89a3      	ldrh	r3, [r4, #12]
 801ecf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ecfa:	81a3      	strh	r3, [r4, #12]
 801ecfc:	f04f 30ff 	mov.w	r0, #4294967295
 801ed00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ed04:	6921      	ldr	r1, [r4, #16]
 801ed06:	464a      	mov	r2, r9
 801ed08:	f7ff fb0c 	bl	801e324 <memcpy>
 801ed0c:	89a3      	ldrh	r3, [r4, #12]
 801ed0e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ed12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ed16:	81a3      	strh	r3, [r4, #12]
 801ed18:	6126      	str	r6, [r4, #16]
 801ed1a:	6165      	str	r5, [r4, #20]
 801ed1c:	444e      	add	r6, r9
 801ed1e:	eba5 0509 	sub.w	r5, r5, r9
 801ed22:	6026      	str	r6, [r4, #0]
 801ed24:	60a5      	str	r5, [r4, #8]
 801ed26:	463e      	mov	r6, r7
 801ed28:	42be      	cmp	r6, r7
 801ed2a:	d900      	bls.n	801ed2e <__ssputs_r+0x86>
 801ed2c:	463e      	mov	r6, r7
 801ed2e:	6820      	ldr	r0, [r4, #0]
 801ed30:	4632      	mov	r2, r6
 801ed32:	4641      	mov	r1, r8
 801ed34:	f7ff fb04 	bl	801e340 <memmove>
 801ed38:	68a3      	ldr	r3, [r4, #8]
 801ed3a:	1b9b      	subs	r3, r3, r6
 801ed3c:	60a3      	str	r3, [r4, #8]
 801ed3e:	6823      	ldr	r3, [r4, #0]
 801ed40:	4433      	add	r3, r6
 801ed42:	6023      	str	r3, [r4, #0]
 801ed44:	2000      	movs	r0, #0
 801ed46:	e7db      	b.n	801ed00 <__ssputs_r+0x58>
 801ed48:	462a      	mov	r2, r5
 801ed4a:	f000 fc73 	bl	801f634 <_realloc_r>
 801ed4e:	4606      	mov	r6, r0
 801ed50:	2800      	cmp	r0, #0
 801ed52:	d1e1      	bne.n	801ed18 <__ssputs_r+0x70>
 801ed54:	6921      	ldr	r1, [r4, #16]
 801ed56:	4650      	mov	r0, sl
 801ed58:	f7ff fb14 	bl	801e384 <_free_r>
 801ed5c:	e7c7      	b.n	801ecee <__ssputs_r+0x46>
	...

0801ed60 <_svfiprintf_r>:
 801ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed64:	4698      	mov	r8, r3
 801ed66:	898b      	ldrh	r3, [r1, #12]
 801ed68:	061b      	lsls	r3, r3, #24
 801ed6a:	b09d      	sub	sp, #116	; 0x74
 801ed6c:	4607      	mov	r7, r0
 801ed6e:	460d      	mov	r5, r1
 801ed70:	4614      	mov	r4, r2
 801ed72:	d50e      	bpl.n	801ed92 <_svfiprintf_r+0x32>
 801ed74:	690b      	ldr	r3, [r1, #16]
 801ed76:	b963      	cbnz	r3, 801ed92 <_svfiprintf_r+0x32>
 801ed78:	2140      	movs	r1, #64	; 0x40
 801ed7a:	f7ff fb6f 	bl	801e45c <_malloc_r>
 801ed7e:	6028      	str	r0, [r5, #0]
 801ed80:	6128      	str	r0, [r5, #16]
 801ed82:	b920      	cbnz	r0, 801ed8e <_svfiprintf_r+0x2e>
 801ed84:	230c      	movs	r3, #12
 801ed86:	603b      	str	r3, [r7, #0]
 801ed88:	f04f 30ff 	mov.w	r0, #4294967295
 801ed8c:	e0d1      	b.n	801ef32 <_svfiprintf_r+0x1d2>
 801ed8e:	2340      	movs	r3, #64	; 0x40
 801ed90:	616b      	str	r3, [r5, #20]
 801ed92:	2300      	movs	r3, #0
 801ed94:	9309      	str	r3, [sp, #36]	; 0x24
 801ed96:	2320      	movs	r3, #32
 801ed98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ed9c:	f8cd 800c 	str.w	r8, [sp, #12]
 801eda0:	2330      	movs	r3, #48	; 0x30
 801eda2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ef4c <_svfiprintf_r+0x1ec>
 801eda6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801edaa:	f04f 0901 	mov.w	r9, #1
 801edae:	4623      	mov	r3, r4
 801edb0:	469a      	mov	sl, r3
 801edb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801edb6:	b10a      	cbz	r2, 801edbc <_svfiprintf_r+0x5c>
 801edb8:	2a25      	cmp	r2, #37	; 0x25
 801edba:	d1f9      	bne.n	801edb0 <_svfiprintf_r+0x50>
 801edbc:	ebba 0b04 	subs.w	fp, sl, r4
 801edc0:	d00b      	beq.n	801edda <_svfiprintf_r+0x7a>
 801edc2:	465b      	mov	r3, fp
 801edc4:	4622      	mov	r2, r4
 801edc6:	4629      	mov	r1, r5
 801edc8:	4638      	mov	r0, r7
 801edca:	f7ff ff6d 	bl	801eca8 <__ssputs_r>
 801edce:	3001      	adds	r0, #1
 801edd0:	f000 80aa 	beq.w	801ef28 <_svfiprintf_r+0x1c8>
 801edd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801edd6:	445a      	add	r2, fp
 801edd8:	9209      	str	r2, [sp, #36]	; 0x24
 801edda:	f89a 3000 	ldrb.w	r3, [sl]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	f000 80a2 	beq.w	801ef28 <_svfiprintf_r+0x1c8>
 801ede4:	2300      	movs	r3, #0
 801ede6:	f04f 32ff 	mov.w	r2, #4294967295
 801edea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801edee:	f10a 0a01 	add.w	sl, sl, #1
 801edf2:	9304      	str	r3, [sp, #16]
 801edf4:	9307      	str	r3, [sp, #28]
 801edf6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801edfa:	931a      	str	r3, [sp, #104]	; 0x68
 801edfc:	4654      	mov	r4, sl
 801edfe:	2205      	movs	r2, #5
 801ee00:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ee04:	4851      	ldr	r0, [pc, #324]	; (801ef4c <_svfiprintf_r+0x1ec>)
 801ee06:	f7e1 fa0b 	bl	8000220 <memchr>
 801ee0a:	9a04      	ldr	r2, [sp, #16]
 801ee0c:	b9d8      	cbnz	r0, 801ee46 <_svfiprintf_r+0xe6>
 801ee0e:	06d0      	lsls	r0, r2, #27
 801ee10:	bf44      	itt	mi
 801ee12:	2320      	movmi	r3, #32
 801ee14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee18:	0711      	lsls	r1, r2, #28
 801ee1a:	bf44      	itt	mi
 801ee1c:	232b      	movmi	r3, #43	; 0x2b
 801ee1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ee22:	f89a 3000 	ldrb.w	r3, [sl]
 801ee26:	2b2a      	cmp	r3, #42	; 0x2a
 801ee28:	d015      	beq.n	801ee56 <_svfiprintf_r+0xf6>
 801ee2a:	9a07      	ldr	r2, [sp, #28]
 801ee2c:	4654      	mov	r4, sl
 801ee2e:	2000      	movs	r0, #0
 801ee30:	f04f 0c0a 	mov.w	ip, #10
 801ee34:	4621      	mov	r1, r4
 801ee36:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ee3a:	3b30      	subs	r3, #48	; 0x30
 801ee3c:	2b09      	cmp	r3, #9
 801ee3e:	d94e      	bls.n	801eede <_svfiprintf_r+0x17e>
 801ee40:	b1b0      	cbz	r0, 801ee70 <_svfiprintf_r+0x110>
 801ee42:	9207      	str	r2, [sp, #28]
 801ee44:	e014      	b.n	801ee70 <_svfiprintf_r+0x110>
 801ee46:	eba0 0308 	sub.w	r3, r0, r8
 801ee4a:	fa09 f303 	lsl.w	r3, r9, r3
 801ee4e:	4313      	orrs	r3, r2
 801ee50:	9304      	str	r3, [sp, #16]
 801ee52:	46a2      	mov	sl, r4
 801ee54:	e7d2      	b.n	801edfc <_svfiprintf_r+0x9c>
 801ee56:	9b03      	ldr	r3, [sp, #12]
 801ee58:	1d19      	adds	r1, r3, #4
 801ee5a:	681b      	ldr	r3, [r3, #0]
 801ee5c:	9103      	str	r1, [sp, #12]
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	bfbb      	ittet	lt
 801ee62:	425b      	neglt	r3, r3
 801ee64:	f042 0202 	orrlt.w	r2, r2, #2
 801ee68:	9307      	strge	r3, [sp, #28]
 801ee6a:	9307      	strlt	r3, [sp, #28]
 801ee6c:	bfb8      	it	lt
 801ee6e:	9204      	strlt	r2, [sp, #16]
 801ee70:	7823      	ldrb	r3, [r4, #0]
 801ee72:	2b2e      	cmp	r3, #46	; 0x2e
 801ee74:	d10c      	bne.n	801ee90 <_svfiprintf_r+0x130>
 801ee76:	7863      	ldrb	r3, [r4, #1]
 801ee78:	2b2a      	cmp	r3, #42	; 0x2a
 801ee7a:	d135      	bne.n	801eee8 <_svfiprintf_r+0x188>
 801ee7c:	9b03      	ldr	r3, [sp, #12]
 801ee7e:	1d1a      	adds	r2, r3, #4
 801ee80:	681b      	ldr	r3, [r3, #0]
 801ee82:	9203      	str	r2, [sp, #12]
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	bfb8      	it	lt
 801ee88:	f04f 33ff 	movlt.w	r3, #4294967295
 801ee8c:	3402      	adds	r4, #2
 801ee8e:	9305      	str	r3, [sp, #20]
 801ee90:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ef5c <_svfiprintf_r+0x1fc>
 801ee94:	7821      	ldrb	r1, [r4, #0]
 801ee96:	2203      	movs	r2, #3
 801ee98:	4650      	mov	r0, sl
 801ee9a:	f7e1 f9c1 	bl	8000220 <memchr>
 801ee9e:	b140      	cbz	r0, 801eeb2 <_svfiprintf_r+0x152>
 801eea0:	2340      	movs	r3, #64	; 0x40
 801eea2:	eba0 000a 	sub.w	r0, r0, sl
 801eea6:	fa03 f000 	lsl.w	r0, r3, r0
 801eeaa:	9b04      	ldr	r3, [sp, #16]
 801eeac:	4303      	orrs	r3, r0
 801eeae:	3401      	adds	r4, #1
 801eeb0:	9304      	str	r3, [sp, #16]
 801eeb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801eeb6:	4826      	ldr	r0, [pc, #152]	; (801ef50 <_svfiprintf_r+0x1f0>)
 801eeb8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801eebc:	2206      	movs	r2, #6
 801eebe:	f7e1 f9af 	bl	8000220 <memchr>
 801eec2:	2800      	cmp	r0, #0
 801eec4:	d038      	beq.n	801ef38 <_svfiprintf_r+0x1d8>
 801eec6:	4b23      	ldr	r3, [pc, #140]	; (801ef54 <_svfiprintf_r+0x1f4>)
 801eec8:	bb1b      	cbnz	r3, 801ef12 <_svfiprintf_r+0x1b2>
 801eeca:	9b03      	ldr	r3, [sp, #12]
 801eecc:	3307      	adds	r3, #7
 801eece:	f023 0307 	bic.w	r3, r3, #7
 801eed2:	3308      	adds	r3, #8
 801eed4:	9303      	str	r3, [sp, #12]
 801eed6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801eed8:	4433      	add	r3, r6
 801eeda:	9309      	str	r3, [sp, #36]	; 0x24
 801eedc:	e767      	b.n	801edae <_svfiprintf_r+0x4e>
 801eede:	fb0c 3202 	mla	r2, ip, r2, r3
 801eee2:	460c      	mov	r4, r1
 801eee4:	2001      	movs	r0, #1
 801eee6:	e7a5      	b.n	801ee34 <_svfiprintf_r+0xd4>
 801eee8:	2300      	movs	r3, #0
 801eeea:	3401      	adds	r4, #1
 801eeec:	9305      	str	r3, [sp, #20]
 801eeee:	4619      	mov	r1, r3
 801eef0:	f04f 0c0a 	mov.w	ip, #10
 801eef4:	4620      	mov	r0, r4
 801eef6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801eefa:	3a30      	subs	r2, #48	; 0x30
 801eefc:	2a09      	cmp	r2, #9
 801eefe:	d903      	bls.n	801ef08 <_svfiprintf_r+0x1a8>
 801ef00:	2b00      	cmp	r3, #0
 801ef02:	d0c5      	beq.n	801ee90 <_svfiprintf_r+0x130>
 801ef04:	9105      	str	r1, [sp, #20]
 801ef06:	e7c3      	b.n	801ee90 <_svfiprintf_r+0x130>
 801ef08:	fb0c 2101 	mla	r1, ip, r1, r2
 801ef0c:	4604      	mov	r4, r0
 801ef0e:	2301      	movs	r3, #1
 801ef10:	e7f0      	b.n	801eef4 <_svfiprintf_r+0x194>
 801ef12:	ab03      	add	r3, sp, #12
 801ef14:	9300      	str	r3, [sp, #0]
 801ef16:	462a      	mov	r2, r5
 801ef18:	4b0f      	ldr	r3, [pc, #60]	; (801ef58 <_svfiprintf_r+0x1f8>)
 801ef1a:	a904      	add	r1, sp, #16
 801ef1c:	4638      	mov	r0, r7
 801ef1e:	f3af 8000 	nop.w
 801ef22:	1c42      	adds	r2, r0, #1
 801ef24:	4606      	mov	r6, r0
 801ef26:	d1d6      	bne.n	801eed6 <_svfiprintf_r+0x176>
 801ef28:	89ab      	ldrh	r3, [r5, #12]
 801ef2a:	065b      	lsls	r3, r3, #25
 801ef2c:	f53f af2c 	bmi.w	801ed88 <_svfiprintf_r+0x28>
 801ef30:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef32:	b01d      	add	sp, #116	; 0x74
 801ef34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef38:	ab03      	add	r3, sp, #12
 801ef3a:	9300      	str	r3, [sp, #0]
 801ef3c:	462a      	mov	r2, r5
 801ef3e:	4b06      	ldr	r3, [pc, #24]	; (801ef58 <_svfiprintf_r+0x1f8>)
 801ef40:	a904      	add	r1, sp, #16
 801ef42:	4638      	mov	r0, r7
 801ef44:	f000 f9d4 	bl	801f2f0 <_printf_i>
 801ef48:	e7eb      	b.n	801ef22 <_svfiprintf_r+0x1c2>
 801ef4a:	bf00      	nop
 801ef4c:	080293b8 	.word	0x080293b8
 801ef50:	080293c2 	.word	0x080293c2
 801ef54:	00000000 	.word	0x00000000
 801ef58:	0801eca9 	.word	0x0801eca9
 801ef5c:	080293be 	.word	0x080293be

0801ef60 <__sfputc_r>:
 801ef60:	6893      	ldr	r3, [r2, #8]
 801ef62:	3b01      	subs	r3, #1
 801ef64:	2b00      	cmp	r3, #0
 801ef66:	b410      	push	{r4}
 801ef68:	6093      	str	r3, [r2, #8]
 801ef6a:	da08      	bge.n	801ef7e <__sfputc_r+0x1e>
 801ef6c:	6994      	ldr	r4, [r2, #24]
 801ef6e:	42a3      	cmp	r3, r4
 801ef70:	db01      	blt.n	801ef76 <__sfputc_r+0x16>
 801ef72:	290a      	cmp	r1, #10
 801ef74:	d103      	bne.n	801ef7e <__sfputc_r+0x1e>
 801ef76:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef7a:	f7ff bc6d 	b.w	801e858 <__swbuf_r>
 801ef7e:	6813      	ldr	r3, [r2, #0]
 801ef80:	1c58      	adds	r0, r3, #1
 801ef82:	6010      	str	r0, [r2, #0]
 801ef84:	7019      	strb	r1, [r3, #0]
 801ef86:	4608      	mov	r0, r1
 801ef88:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef8c:	4770      	bx	lr

0801ef8e <__sfputs_r>:
 801ef8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ef90:	4606      	mov	r6, r0
 801ef92:	460f      	mov	r7, r1
 801ef94:	4614      	mov	r4, r2
 801ef96:	18d5      	adds	r5, r2, r3
 801ef98:	42ac      	cmp	r4, r5
 801ef9a:	d101      	bne.n	801efa0 <__sfputs_r+0x12>
 801ef9c:	2000      	movs	r0, #0
 801ef9e:	e007      	b.n	801efb0 <__sfputs_r+0x22>
 801efa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801efa4:	463a      	mov	r2, r7
 801efa6:	4630      	mov	r0, r6
 801efa8:	f7ff ffda 	bl	801ef60 <__sfputc_r>
 801efac:	1c43      	adds	r3, r0, #1
 801efae:	d1f3      	bne.n	801ef98 <__sfputs_r+0xa>
 801efb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801efb4 <_vfiprintf_r>:
 801efb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efb8:	460d      	mov	r5, r1
 801efba:	b09d      	sub	sp, #116	; 0x74
 801efbc:	4614      	mov	r4, r2
 801efbe:	4698      	mov	r8, r3
 801efc0:	4606      	mov	r6, r0
 801efc2:	b118      	cbz	r0, 801efcc <_vfiprintf_r+0x18>
 801efc4:	6983      	ldr	r3, [r0, #24]
 801efc6:	b90b      	cbnz	r3, 801efcc <_vfiprintf_r+0x18>
 801efc8:	f7ff f8d6 	bl	801e178 <__sinit>
 801efcc:	4b89      	ldr	r3, [pc, #548]	; (801f1f4 <_vfiprintf_r+0x240>)
 801efce:	429d      	cmp	r5, r3
 801efd0:	d11b      	bne.n	801f00a <_vfiprintf_r+0x56>
 801efd2:	6875      	ldr	r5, [r6, #4]
 801efd4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801efd6:	07d9      	lsls	r1, r3, #31
 801efd8:	d405      	bmi.n	801efe6 <_vfiprintf_r+0x32>
 801efda:	89ab      	ldrh	r3, [r5, #12]
 801efdc:	059a      	lsls	r2, r3, #22
 801efde:	d402      	bmi.n	801efe6 <_vfiprintf_r+0x32>
 801efe0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801efe2:	f7ff f98c 	bl	801e2fe <__retarget_lock_acquire_recursive>
 801efe6:	89ab      	ldrh	r3, [r5, #12]
 801efe8:	071b      	lsls	r3, r3, #28
 801efea:	d501      	bpl.n	801eff0 <_vfiprintf_r+0x3c>
 801efec:	692b      	ldr	r3, [r5, #16]
 801efee:	b9eb      	cbnz	r3, 801f02c <_vfiprintf_r+0x78>
 801eff0:	4629      	mov	r1, r5
 801eff2:	4630      	mov	r0, r6
 801eff4:	f7ff fc94 	bl	801e920 <__swsetup_r>
 801eff8:	b1c0      	cbz	r0, 801f02c <_vfiprintf_r+0x78>
 801effa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801effc:	07dc      	lsls	r4, r3, #31
 801effe:	d50e      	bpl.n	801f01e <_vfiprintf_r+0x6a>
 801f000:	f04f 30ff 	mov.w	r0, #4294967295
 801f004:	b01d      	add	sp, #116	; 0x74
 801f006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f00a:	4b7b      	ldr	r3, [pc, #492]	; (801f1f8 <_vfiprintf_r+0x244>)
 801f00c:	429d      	cmp	r5, r3
 801f00e:	d101      	bne.n	801f014 <_vfiprintf_r+0x60>
 801f010:	68b5      	ldr	r5, [r6, #8]
 801f012:	e7df      	b.n	801efd4 <_vfiprintf_r+0x20>
 801f014:	4b79      	ldr	r3, [pc, #484]	; (801f1fc <_vfiprintf_r+0x248>)
 801f016:	429d      	cmp	r5, r3
 801f018:	bf08      	it	eq
 801f01a:	68f5      	ldreq	r5, [r6, #12]
 801f01c:	e7da      	b.n	801efd4 <_vfiprintf_r+0x20>
 801f01e:	89ab      	ldrh	r3, [r5, #12]
 801f020:	0598      	lsls	r0, r3, #22
 801f022:	d4ed      	bmi.n	801f000 <_vfiprintf_r+0x4c>
 801f024:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f026:	f7ff f96b 	bl	801e300 <__retarget_lock_release_recursive>
 801f02a:	e7e9      	b.n	801f000 <_vfiprintf_r+0x4c>
 801f02c:	2300      	movs	r3, #0
 801f02e:	9309      	str	r3, [sp, #36]	; 0x24
 801f030:	2320      	movs	r3, #32
 801f032:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f036:	f8cd 800c 	str.w	r8, [sp, #12]
 801f03a:	2330      	movs	r3, #48	; 0x30
 801f03c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801f200 <_vfiprintf_r+0x24c>
 801f040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f044:	f04f 0901 	mov.w	r9, #1
 801f048:	4623      	mov	r3, r4
 801f04a:	469a      	mov	sl, r3
 801f04c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f050:	b10a      	cbz	r2, 801f056 <_vfiprintf_r+0xa2>
 801f052:	2a25      	cmp	r2, #37	; 0x25
 801f054:	d1f9      	bne.n	801f04a <_vfiprintf_r+0x96>
 801f056:	ebba 0b04 	subs.w	fp, sl, r4
 801f05a:	d00b      	beq.n	801f074 <_vfiprintf_r+0xc0>
 801f05c:	465b      	mov	r3, fp
 801f05e:	4622      	mov	r2, r4
 801f060:	4629      	mov	r1, r5
 801f062:	4630      	mov	r0, r6
 801f064:	f7ff ff93 	bl	801ef8e <__sfputs_r>
 801f068:	3001      	adds	r0, #1
 801f06a:	f000 80aa 	beq.w	801f1c2 <_vfiprintf_r+0x20e>
 801f06e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f070:	445a      	add	r2, fp
 801f072:	9209      	str	r2, [sp, #36]	; 0x24
 801f074:	f89a 3000 	ldrb.w	r3, [sl]
 801f078:	2b00      	cmp	r3, #0
 801f07a:	f000 80a2 	beq.w	801f1c2 <_vfiprintf_r+0x20e>
 801f07e:	2300      	movs	r3, #0
 801f080:	f04f 32ff 	mov.w	r2, #4294967295
 801f084:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f088:	f10a 0a01 	add.w	sl, sl, #1
 801f08c:	9304      	str	r3, [sp, #16]
 801f08e:	9307      	str	r3, [sp, #28]
 801f090:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f094:	931a      	str	r3, [sp, #104]	; 0x68
 801f096:	4654      	mov	r4, sl
 801f098:	2205      	movs	r2, #5
 801f09a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f09e:	4858      	ldr	r0, [pc, #352]	; (801f200 <_vfiprintf_r+0x24c>)
 801f0a0:	f7e1 f8be 	bl	8000220 <memchr>
 801f0a4:	9a04      	ldr	r2, [sp, #16]
 801f0a6:	b9d8      	cbnz	r0, 801f0e0 <_vfiprintf_r+0x12c>
 801f0a8:	06d1      	lsls	r1, r2, #27
 801f0aa:	bf44      	itt	mi
 801f0ac:	2320      	movmi	r3, #32
 801f0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f0b2:	0713      	lsls	r3, r2, #28
 801f0b4:	bf44      	itt	mi
 801f0b6:	232b      	movmi	r3, #43	; 0x2b
 801f0b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f0bc:	f89a 3000 	ldrb.w	r3, [sl]
 801f0c0:	2b2a      	cmp	r3, #42	; 0x2a
 801f0c2:	d015      	beq.n	801f0f0 <_vfiprintf_r+0x13c>
 801f0c4:	9a07      	ldr	r2, [sp, #28]
 801f0c6:	4654      	mov	r4, sl
 801f0c8:	2000      	movs	r0, #0
 801f0ca:	f04f 0c0a 	mov.w	ip, #10
 801f0ce:	4621      	mov	r1, r4
 801f0d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f0d4:	3b30      	subs	r3, #48	; 0x30
 801f0d6:	2b09      	cmp	r3, #9
 801f0d8:	d94e      	bls.n	801f178 <_vfiprintf_r+0x1c4>
 801f0da:	b1b0      	cbz	r0, 801f10a <_vfiprintf_r+0x156>
 801f0dc:	9207      	str	r2, [sp, #28]
 801f0de:	e014      	b.n	801f10a <_vfiprintf_r+0x156>
 801f0e0:	eba0 0308 	sub.w	r3, r0, r8
 801f0e4:	fa09 f303 	lsl.w	r3, r9, r3
 801f0e8:	4313      	orrs	r3, r2
 801f0ea:	9304      	str	r3, [sp, #16]
 801f0ec:	46a2      	mov	sl, r4
 801f0ee:	e7d2      	b.n	801f096 <_vfiprintf_r+0xe2>
 801f0f0:	9b03      	ldr	r3, [sp, #12]
 801f0f2:	1d19      	adds	r1, r3, #4
 801f0f4:	681b      	ldr	r3, [r3, #0]
 801f0f6:	9103      	str	r1, [sp, #12]
 801f0f8:	2b00      	cmp	r3, #0
 801f0fa:	bfbb      	ittet	lt
 801f0fc:	425b      	neglt	r3, r3
 801f0fe:	f042 0202 	orrlt.w	r2, r2, #2
 801f102:	9307      	strge	r3, [sp, #28]
 801f104:	9307      	strlt	r3, [sp, #28]
 801f106:	bfb8      	it	lt
 801f108:	9204      	strlt	r2, [sp, #16]
 801f10a:	7823      	ldrb	r3, [r4, #0]
 801f10c:	2b2e      	cmp	r3, #46	; 0x2e
 801f10e:	d10c      	bne.n	801f12a <_vfiprintf_r+0x176>
 801f110:	7863      	ldrb	r3, [r4, #1]
 801f112:	2b2a      	cmp	r3, #42	; 0x2a
 801f114:	d135      	bne.n	801f182 <_vfiprintf_r+0x1ce>
 801f116:	9b03      	ldr	r3, [sp, #12]
 801f118:	1d1a      	adds	r2, r3, #4
 801f11a:	681b      	ldr	r3, [r3, #0]
 801f11c:	9203      	str	r2, [sp, #12]
 801f11e:	2b00      	cmp	r3, #0
 801f120:	bfb8      	it	lt
 801f122:	f04f 33ff 	movlt.w	r3, #4294967295
 801f126:	3402      	adds	r4, #2
 801f128:	9305      	str	r3, [sp, #20]
 801f12a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801f210 <_vfiprintf_r+0x25c>
 801f12e:	7821      	ldrb	r1, [r4, #0]
 801f130:	2203      	movs	r2, #3
 801f132:	4650      	mov	r0, sl
 801f134:	f7e1 f874 	bl	8000220 <memchr>
 801f138:	b140      	cbz	r0, 801f14c <_vfiprintf_r+0x198>
 801f13a:	2340      	movs	r3, #64	; 0x40
 801f13c:	eba0 000a 	sub.w	r0, r0, sl
 801f140:	fa03 f000 	lsl.w	r0, r3, r0
 801f144:	9b04      	ldr	r3, [sp, #16]
 801f146:	4303      	orrs	r3, r0
 801f148:	3401      	adds	r4, #1
 801f14a:	9304      	str	r3, [sp, #16]
 801f14c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f150:	482c      	ldr	r0, [pc, #176]	; (801f204 <_vfiprintf_r+0x250>)
 801f152:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f156:	2206      	movs	r2, #6
 801f158:	f7e1 f862 	bl	8000220 <memchr>
 801f15c:	2800      	cmp	r0, #0
 801f15e:	d03f      	beq.n	801f1e0 <_vfiprintf_r+0x22c>
 801f160:	4b29      	ldr	r3, [pc, #164]	; (801f208 <_vfiprintf_r+0x254>)
 801f162:	bb1b      	cbnz	r3, 801f1ac <_vfiprintf_r+0x1f8>
 801f164:	9b03      	ldr	r3, [sp, #12]
 801f166:	3307      	adds	r3, #7
 801f168:	f023 0307 	bic.w	r3, r3, #7
 801f16c:	3308      	adds	r3, #8
 801f16e:	9303      	str	r3, [sp, #12]
 801f170:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f172:	443b      	add	r3, r7
 801f174:	9309      	str	r3, [sp, #36]	; 0x24
 801f176:	e767      	b.n	801f048 <_vfiprintf_r+0x94>
 801f178:	fb0c 3202 	mla	r2, ip, r2, r3
 801f17c:	460c      	mov	r4, r1
 801f17e:	2001      	movs	r0, #1
 801f180:	e7a5      	b.n	801f0ce <_vfiprintf_r+0x11a>
 801f182:	2300      	movs	r3, #0
 801f184:	3401      	adds	r4, #1
 801f186:	9305      	str	r3, [sp, #20]
 801f188:	4619      	mov	r1, r3
 801f18a:	f04f 0c0a 	mov.w	ip, #10
 801f18e:	4620      	mov	r0, r4
 801f190:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f194:	3a30      	subs	r2, #48	; 0x30
 801f196:	2a09      	cmp	r2, #9
 801f198:	d903      	bls.n	801f1a2 <_vfiprintf_r+0x1ee>
 801f19a:	2b00      	cmp	r3, #0
 801f19c:	d0c5      	beq.n	801f12a <_vfiprintf_r+0x176>
 801f19e:	9105      	str	r1, [sp, #20]
 801f1a0:	e7c3      	b.n	801f12a <_vfiprintf_r+0x176>
 801f1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 801f1a6:	4604      	mov	r4, r0
 801f1a8:	2301      	movs	r3, #1
 801f1aa:	e7f0      	b.n	801f18e <_vfiprintf_r+0x1da>
 801f1ac:	ab03      	add	r3, sp, #12
 801f1ae:	9300      	str	r3, [sp, #0]
 801f1b0:	462a      	mov	r2, r5
 801f1b2:	4b16      	ldr	r3, [pc, #88]	; (801f20c <_vfiprintf_r+0x258>)
 801f1b4:	a904      	add	r1, sp, #16
 801f1b6:	4630      	mov	r0, r6
 801f1b8:	f3af 8000 	nop.w
 801f1bc:	4607      	mov	r7, r0
 801f1be:	1c78      	adds	r0, r7, #1
 801f1c0:	d1d6      	bne.n	801f170 <_vfiprintf_r+0x1bc>
 801f1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801f1c4:	07d9      	lsls	r1, r3, #31
 801f1c6:	d405      	bmi.n	801f1d4 <_vfiprintf_r+0x220>
 801f1c8:	89ab      	ldrh	r3, [r5, #12]
 801f1ca:	059a      	lsls	r2, r3, #22
 801f1cc:	d402      	bmi.n	801f1d4 <_vfiprintf_r+0x220>
 801f1ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801f1d0:	f7ff f896 	bl	801e300 <__retarget_lock_release_recursive>
 801f1d4:	89ab      	ldrh	r3, [r5, #12]
 801f1d6:	065b      	lsls	r3, r3, #25
 801f1d8:	f53f af12 	bmi.w	801f000 <_vfiprintf_r+0x4c>
 801f1dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f1de:	e711      	b.n	801f004 <_vfiprintf_r+0x50>
 801f1e0:	ab03      	add	r3, sp, #12
 801f1e2:	9300      	str	r3, [sp, #0]
 801f1e4:	462a      	mov	r2, r5
 801f1e6:	4b09      	ldr	r3, [pc, #36]	; (801f20c <_vfiprintf_r+0x258>)
 801f1e8:	a904      	add	r1, sp, #16
 801f1ea:	4630      	mov	r0, r6
 801f1ec:	f000 f880 	bl	801f2f0 <_printf_i>
 801f1f0:	e7e4      	b.n	801f1bc <_vfiprintf_r+0x208>
 801f1f2:	bf00      	nop
 801f1f4:	08029374 	.word	0x08029374
 801f1f8:	08029394 	.word	0x08029394
 801f1fc:	08029354 	.word	0x08029354
 801f200:	080293b8 	.word	0x080293b8
 801f204:	080293c2 	.word	0x080293c2
 801f208:	00000000 	.word	0x00000000
 801f20c:	0801ef8f 	.word	0x0801ef8f
 801f210:	080293be 	.word	0x080293be

0801f214 <_printf_common>:
 801f214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f218:	4616      	mov	r6, r2
 801f21a:	4699      	mov	r9, r3
 801f21c:	688a      	ldr	r2, [r1, #8]
 801f21e:	690b      	ldr	r3, [r1, #16]
 801f220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f224:	4293      	cmp	r3, r2
 801f226:	bfb8      	it	lt
 801f228:	4613      	movlt	r3, r2
 801f22a:	6033      	str	r3, [r6, #0]
 801f22c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f230:	4607      	mov	r7, r0
 801f232:	460c      	mov	r4, r1
 801f234:	b10a      	cbz	r2, 801f23a <_printf_common+0x26>
 801f236:	3301      	adds	r3, #1
 801f238:	6033      	str	r3, [r6, #0]
 801f23a:	6823      	ldr	r3, [r4, #0]
 801f23c:	0699      	lsls	r1, r3, #26
 801f23e:	bf42      	ittt	mi
 801f240:	6833      	ldrmi	r3, [r6, #0]
 801f242:	3302      	addmi	r3, #2
 801f244:	6033      	strmi	r3, [r6, #0]
 801f246:	6825      	ldr	r5, [r4, #0]
 801f248:	f015 0506 	ands.w	r5, r5, #6
 801f24c:	d106      	bne.n	801f25c <_printf_common+0x48>
 801f24e:	f104 0a19 	add.w	sl, r4, #25
 801f252:	68e3      	ldr	r3, [r4, #12]
 801f254:	6832      	ldr	r2, [r6, #0]
 801f256:	1a9b      	subs	r3, r3, r2
 801f258:	42ab      	cmp	r3, r5
 801f25a:	dc26      	bgt.n	801f2aa <_printf_common+0x96>
 801f25c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f260:	1e13      	subs	r3, r2, #0
 801f262:	6822      	ldr	r2, [r4, #0]
 801f264:	bf18      	it	ne
 801f266:	2301      	movne	r3, #1
 801f268:	0692      	lsls	r2, r2, #26
 801f26a:	d42b      	bmi.n	801f2c4 <_printf_common+0xb0>
 801f26c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f270:	4649      	mov	r1, r9
 801f272:	4638      	mov	r0, r7
 801f274:	47c0      	blx	r8
 801f276:	3001      	adds	r0, #1
 801f278:	d01e      	beq.n	801f2b8 <_printf_common+0xa4>
 801f27a:	6823      	ldr	r3, [r4, #0]
 801f27c:	68e5      	ldr	r5, [r4, #12]
 801f27e:	6832      	ldr	r2, [r6, #0]
 801f280:	f003 0306 	and.w	r3, r3, #6
 801f284:	2b04      	cmp	r3, #4
 801f286:	bf08      	it	eq
 801f288:	1aad      	subeq	r5, r5, r2
 801f28a:	68a3      	ldr	r3, [r4, #8]
 801f28c:	6922      	ldr	r2, [r4, #16]
 801f28e:	bf0c      	ite	eq
 801f290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f294:	2500      	movne	r5, #0
 801f296:	4293      	cmp	r3, r2
 801f298:	bfc4      	itt	gt
 801f29a:	1a9b      	subgt	r3, r3, r2
 801f29c:	18ed      	addgt	r5, r5, r3
 801f29e:	2600      	movs	r6, #0
 801f2a0:	341a      	adds	r4, #26
 801f2a2:	42b5      	cmp	r5, r6
 801f2a4:	d11a      	bne.n	801f2dc <_printf_common+0xc8>
 801f2a6:	2000      	movs	r0, #0
 801f2a8:	e008      	b.n	801f2bc <_printf_common+0xa8>
 801f2aa:	2301      	movs	r3, #1
 801f2ac:	4652      	mov	r2, sl
 801f2ae:	4649      	mov	r1, r9
 801f2b0:	4638      	mov	r0, r7
 801f2b2:	47c0      	blx	r8
 801f2b4:	3001      	adds	r0, #1
 801f2b6:	d103      	bne.n	801f2c0 <_printf_common+0xac>
 801f2b8:	f04f 30ff 	mov.w	r0, #4294967295
 801f2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f2c0:	3501      	adds	r5, #1
 801f2c2:	e7c6      	b.n	801f252 <_printf_common+0x3e>
 801f2c4:	18e1      	adds	r1, r4, r3
 801f2c6:	1c5a      	adds	r2, r3, #1
 801f2c8:	2030      	movs	r0, #48	; 0x30
 801f2ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f2ce:	4422      	add	r2, r4
 801f2d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f2d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f2d8:	3302      	adds	r3, #2
 801f2da:	e7c7      	b.n	801f26c <_printf_common+0x58>
 801f2dc:	2301      	movs	r3, #1
 801f2de:	4622      	mov	r2, r4
 801f2e0:	4649      	mov	r1, r9
 801f2e2:	4638      	mov	r0, r7
 801f2e4:	47c0      	blx	r8
 801f2e6:	3001      	adds	r0, #1
 801f2e8:	d0e6      	beq.n	801f2b8 <_printf_common+0xa4>
 801f2ea:	3601      	adds	r6, #1
 801f2ec:	e7d9      	b.n	801f2a2 <_printf_common+0x8e>
	...

0801f2f0 <_printf_i>:
 801f2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f2f4:	7e0f      	ldrb	r7, [r1, #24]
 801f2f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801f2f8:	2f78      	cmp	r7, #120	; 0x78
 801f2fa:	4691      	mov	r9, r2
 801f2fc:	4680      	mov	r8, r0
 801f2fe:	460c      	mov	r4, r1
 801f300:	469a      	mov	sl, r3
 801f302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801f306:	d807      	bhi.n	801f318 <_printf_i+0x28>
 801f308:	2f62      	cmp	r7, #98	; 0x62
 801f30a:	d80a      	bhi.n	801f322 <_printf_i+0x32>
 801f30c:	2f00      	cmp	r7, #0
 801f30e:	f000 80d8 	beq.w	801f4c2 <_printf_i+0x1d2>
 801f312:	2f58      	cmp	r7, #88	; 0x58
 801f314:	f000 80a3 	beq.w	801f45e <_printf_i+0x16e>
 801f318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f31c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f320:	e03a      	b.n	801f398 <_printf_i+0xa8>
 801f322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f326:	2b15      	cmp	r3, #21
 801f328:	d8f6      	bhi.n	801f318 <_printf_i+0x28>
 801f32a:	a101      	add	r1, pc, #4	; (adr r1, 801f330 <_printf_i+0x40>)
 801f32c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801f330:	0801f389 	.word	0x0801f389
 801f334:	0801f39d 	.word	0x0801f39d
 801f338:	0801f319 	.word	0x0801f319
 801f33c:	0801f319 	.word	0x0801f319
 801f340:	0801f319 	.word	0x0801f319
 801f344:	0801f319 	.word	0x0801f319
 801f348:	0801f39d 	.word	0x0801f39d
 801f34c:	0801f319 	.word	0x0801f319
 801f350:	0801f319 	.word	0x0801f319
 801f354:	0801f319 	.word	0x0801f319
 801f358:	0801f319 	.word	0x0801f319
 801f35c:	0801f4a9 	.word	0x0801f4a9
 801f360:	0801f3cd 	.word	0x0801f3cd
 801f364:	0801f48b 	.word	0x0801f48b
 801f368:	0801f319 	.word	0x0801f319
 801f36c:	0801f319 	.word	0x0801f319
 801f370:	0801f4cb 	.word	0x0801f4cb
 801f374:	0801f319 	.word	0x0801f319
 801f378:	0801f3cd 	.word	0x0801f3cd
 801f37c:	0801f319 	.word	0x0801f319
 801f380:	0801f319 	.word	0x0801f319
 801f384:	0801f493 	.word	0x0801f493
 801f388:	682b      	ldr	r3, [r5, #0]
 801f38a:	1d1a      	adds	r2, r3, #4
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	602a      	str	r2, [r5, #0]
 801f390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801f394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f398:	2301      	movs	r3, #1
 801f39a:	e0a3      	b.n	801f4e4 <_printf_i+0x1f4>
 801f39c:	6820      	ldr	r0, [r4, #0]
 801f39e:	6829      	ldr	r1, [r5, #0]
 801f3a0:	0606      	lsls	r6, r0, #24
 801f3a2:	f101 0304 	add.w	r3, r1, #4
 801f3a6:	d50a      	bpl.n	801f3be <_printf_i+0xce>
 801f3a8:	680e      	ldr	r6, [r1, #0]
 801f3aa:	602b      	str	r3, [r5, #0]
 801f3ac:	2e00      	cmp	r6, #0
 801f3ae:	da03      	bge.n	801f3b8 <_printf_i+0xc8>
 801f3b0:	232d      	movs	r3, #45	; 0x2d
 801f3b2:	4276      	negs	r6, r6
 801f3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f3b8:	485e      	ldr	r0, [pc, #376]	; (801f534 <_printf_i+0x244>)
 801f3ba:	230a      	movs	r3, #10
 801f3bc:	e019      	b.n	801f3f2 <_printf_i+0x102>
 801f3be:	680e      	ldr	r6, [r1, #0]
 801f3c0:	602b      	str	r3, [r5, #0]
 801f3c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 801f3c6:	bf18      	it	ne
 801f3c8:	b236      	sxthne	r6, r6
 801f3ca:	e7ef      	b.n	801f3ac <_printf_i+0xbc>
 801f3cc:	682b      	ldr	r3, [r5, #0]
 801f3ce:	6820      	ldr	r0, [r4, #0]
 801f3d0:	1d19      	adds	r1, r3, #4
 801f3d2:	6029      	str	r1, [r5, #0]
 801f3d4:	0601      	lsls	r1, r0, #24
 801f3d6:	d501      	bpl.n	801f3dc <_printf_i+0xec>
 801f3d8:	681e      	ldr	r6, [r3, #0]
 801f3da:	e002      	b.n	801f3e2 <_printf_i+0xf2>
 801f3dc:	0646      	lsls	r6, r0, #25
 801f3de:	d5fb      	bpl.n	801f3d8 <_printf_i+0xe8>
 801f3e0:	881e      	ldrh	r6, [r3, #0]
 801f3e2:	4854      	ldr	r0, [pc, #336]	; (801f534 <_printf_i+0x244>)
 801f3e4:	2f6f      	cmp	r7, #111	; 0x6f
 801f3e6:	bf0c      	ite	eq
 801f3e8:	2308      	moveq	r3, #8
 801f3ea:	230a      	movne	r3, #10
 801f3ec:	2100      	movs	r1, #0
 801f3ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801f3f2:	6865      	ldr	r5, [r4, #4]
 801f3f4:	60a5      	str	r5, [r4, #8]
 801f3f6:	2d00      	cmp	r5, #0
 801f3f8:	bfa2      	ittt	ge
 801f3fa:	6821      	ldrge	r1, [r4, #0]
 801f3fc:	f021 0104 	bicge.w	r1, r1, #4
 801f400:	6021      	strge	r1, [r4, #0]
 801f402:	b90e      	cbnz	r6, 801f408 <_printf_i+0x118>
 801f404:	2d00      	cmp	r5, #0
 801f406:	d04d      	beq.n	801f4a4 <_printf_i+0x1b4>
 801f408:	4615      	mov	r5, r2
 801f40a:	fbb6 f1f3 	udiv	r1, r6, r3
 801f40e:	fb03 6711 	mls	r7, r3, r1, r6
 801f412:	5dc7      	ldrb	r7, [r0, r7]
 801f414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801f418:	4637      	mov	r7, r6
 801f41a:	42bb      	cmp	r3, r7
 801f41c:	460e      	mov	r6, r1
 801f41e:	d9f4      	bls.n	801f40a <_printf_i+0x11a>
 801f420:	2b08      	cmp	r3, #8
 801f422:	d10b      	bne.n	801f43c <_printf_i+0x14c>
 801f424:	6823      	ldr	r3, [r4, #0]
 801f426:	07de      	lsls	r6, r3, #31
 801f428:	d508      	bpl.n	801f43c <_printf_i+0x14c>
 801f42a:	6923      	ldr	r3, [r4, #16]
 801f42c:	6861      	ldr	r1, [r4, #4]
 801f42e:	4299      	cmp	r1, r3
 801f430:	bfde      	ittt	le
 801f432:	2330      	movle	r3, #48	; 0x30
 801f434:	f805 3c01 	strble.w	r3, [r5, #-1]
 801f438:	f105 35ff 	addle.w	r5, r5, #4294967295
 801f43c:	1b52      	subs	r2, r2, r5
 801f43e:	6122      	str	r2, [r4, #16]
 801f440:	f8cd a000 	str.w	sl, [sp]
 801f444:	464b      	mov	r3, r9
 801f446:	aa03      	add	r2, sp, #12
 801f448:	4621      	mov	r1, r4
 801f44a:	4640      	mov	r0, r8
 801f44c:	f7ff fee2 	bl	801f214 <_printf_common>
 801f450:	3001      	adds	r0, #1
 801f452:	d14c      	bne.n	801f4ee <_printf_i+0x1fe>
 801f454:	f04f 30ff 	mov.w	r0, #4294967295
 801f458:	b004      	add	sp, #16
 801f45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f45e:	4835      	ldr	r0, [pc, #212]	; (801f534 <_printf_i+0x244>)
 801f460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801f464:	6829      	ldr	r1, [r5, #0]
 801f466:	6823      	ldr	r3, [r4, #0]
 801f468:	f851 6b04 	ldr.w	r6, [r1], #4
 801f46c:	6029      	str	r1, [r5, #0]
 801f46e:	061d      	lsls	r5, r3, #24
 801f470:	d514      	bpl.n	801f49c <_printf_i+0x1ac>
 801f472:	07df      	lsls	r7, r3, #31
 801f474:	bf44      	itt	mi
 801f476:	f043 0320 	orrmi.w	r3, r3, #32
 801f47a:	6023      	strmi	r3, [r4, #0]
 801f47c:	b91e      	cbnz	r6, 801f486 <_printf_i+0x196>
 801f47e:	6823      	ldr	r3, [r4, #0]
 801f480:	f023 0320 	bic.w	r3, r3, #32
 801f484:	6023      	str	r3, [r4, #0]
 801f486:	2310      	movs	r3, #16
 801f488:	e7b0      	b.n	801f3ec <_printf_i+0xfc>
 801f48a:	6823      	ldr	r3, [r4, #0]
 801f48c:	f043 0320 	orr.w	r3, r3, #32
 801f490:	6023      	str	r3, [r4, #0]
 801f492:	2378      	movs	r3, #120	; 0x78
 801f494:	4828      	ldr	r0, [pc, #160]	; (801f538 <_printf_i+0x248>)
 801f496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801f49a:	e7e3      	b.n	801f464 <_printf_i+0x174>
 801f49c:	0659      	lsls	r1, r3, #25
 801f49e:	bf48      	it	mi
 801f4a0:	b2b6      	uxthmi	r6, r6
 801f4a2:	e7e6      	b.n	801f472 <_printf_i+0x182>
 801f4a4:	4615      	mov	r5, r2
 801f4a6:	e7bb      	b.n	801f420 <_printf_i+0x130>
 801f4a8:	682b      	ldr	r3, [r5, #0]
 801f4aa:	6826      	ldr	r6, [r4, #0]
 801f4ac:	6961      	ldr	r1, [r4, #20]
 801f4ae:	1d18      	adds	r0, r3, #4
 801f4b0:	6028      	str	r0, [r5, #0]
 801f4b2:	0635      	lsls	r5, r6, #24
 801f4b4:	681b      	ldr	r3, [r3, #0]
 801f4b6:	d501      	bpl.n	801f4bc <_printf_i+0x1cc>
 801f4b8:	6019      	str	r1, [r3, #0]
 801f4ba:	e002      	b.n	801f4c2 <_printf_i+0x1d2>
 801f4bc:	0670      	lsls	r0, r6, #25
 801f4be:	d5fb      	bpl.n	801f4b8 <_printf_i+0x1c8>
 801f4c0:	8019      	strh	r1, [r3, #0]
 801f4c2:	2300      	movs	r3, #0
 801f4c4:	6123      	str	r3, [r4, #16]
 801f4c6:	4615      	mov	r5, r2
 801f4c8:	e7ba      	b.n	801f440 <_printf_i+0x150>
 801f4ca:	682b      	ldr	r3, [r5, #0]
 801f4cc:	1d1a      	adds	r2, r3, #4
 801f4ce:	602a      	str	r2, [r5, #0]
 801f4d0:	681d      	ldr	r5, [r3, #0]
 801f4d2:	6862      	ldr	r2, [r4, #4]
 801f4d4:	2100      	movs	r1, #0
 801f4d6:	4628      	mov	r0, r5
 801f4d8:	f7e0 fea2 	bl	8000220 <memchr>
 801f4dc:	b108      	cbz	r0, 801f4e2 <_printf_i+0x1f2>
 801f4de:	1b40      	subs	r0, r0, r5
 801f4e0:	6060      	str	r0, [r4, #4]
 801f4e2:	6863      	ldr	r3, [r4, #4]
 801f4e4:	6123      	str	r3, [r4, #16]
 801f4e6:	2300      	movs	r3, #0
 801f4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801f4ec:	e7a8      	b.n	801f440 <_printf_i+0x150>
 801f4ee:	6923      	ldr	r3, [r4, #16]
 801f4f0:	462a      	mov	r2, r5
 801f4f2:	4649      	mov	r1, r9
 801f4f4:	4640      	mov	r0, r8
 801f4f6:	47d0      	blx	sl
 801f4f8:	3001      	adds	r0, #1
 801f4fa:	d0ab      	beq.n	801f454 <_printf_i+0x164>
 801f4fc:	6823      	ldr	r3, [r4, #0]
 801f4fe:	079b      	lsls	r3, r3, #30
 801f500:	d413      	bmi.n	801f52a <_printf_i+0x23a>
 801f502:	68e0      	ldr	r0, [r4, #12]
 801f504:	9b03      	ldr	r3, [sp, #12]
 801f506:	4298      	cmp	r0, r3
 801f508:	bfb8      	it	lt
 801f50a:	4618      	movlt	r0, r3
 801f50c:	e7a4      	b.n	801f458 <_printf_i+0x168>
 801f50e:	2301      	movs	r3, #1
 801f510:	4632      	mov	r2, r6
 801f512:	4649      	mov	r1, r9
 801f514:	4640      	mov	r0, r8
 801f516:	47d0      	blx	sl
 801f518:	3001      	adds	r0, #1
 801f51a:	d09b      	beq.n	801f454 <_printf_i+0x164>
 801f51c:	3501      	adds	r5, #1
 801f51e:	68e3      	ldr	r3, [r4, #12]
 801f520:	9903      	ldr	r1, [sp, #12]
 801f522:	1a5b      	subs	r3, r3, r1
 801f524:	42ab      	cmp	r3, r5
 801f526:	dcf2      	bgt.n	801f50e <_printf_i+0x21e>
 801f528:	e7eb      	b.n	801f502 <_printf_i+0x212>
 801f52a:	2500      	movs	r5, #0
 801f52c:	f104 0619 	add.w	r6, r4, #25
 801f530:	e7f5      	b.n	801f51e <_printf_i+0x22e>
 801f532:	bf00      	nop
 801f534:	080293c9 	.word	0x080293c9
 801f538:	080293da 	.word	0x080293da

0801f53c <_putc_r>:
 801f53c:	b570      	push	{r4, r5, r6, lr}
 801f53e:	460d      	mov	r5, r1
 801f540:	4614      	mov	r4, r2
 801f542:	4606      	mov	r6, r0
 801f544:	b118      	cbz	r0, 801f54e <_putc_r+0x12>
 801f546:	6983      	ldr	r3, [r0, #24]
 801f548:	b90b      	cbnz	r3, 801f54e <_putc_r+0x12>
 801f54a:	f7fe fe15 	bl	801e178 <__sinit>
 801f54e:	4b1c      	ldr	r3, [pc, #112]	; (801f5c0 <_putc_r+0x84>)
 801f550:	429c      	cmp	r4, r3
 801f552:	d124      	bne.n	801f59e <_putc_r+0x62>
 801f554:	6874      	ldr	r4, [r6, #4]
 801f556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f558:	07d8      	lsls	r0, r3, #31
 801f55a:	d405      	bmi.n	801f568 <_putc_r+0x2c>
 801f55c:	89a3      	ldrh	r3, [r4, #12]
 801f55e:	0599      	lsls	r1, r3, #22
 801f560:	d402      	bmi.n	801f568 <_putc_r+0x2c>
 801f562:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f564:	f7fe fecb 	bl	801e2fe <__retarget_lock_acquire_recursive>
 801f568:	68a3      	ldr	r3, [r4, #8]
 801f56a:	3b01      	subs	r3, #1
 801f56c:	2b00      	cmp	r3, #0
 801f56e:	60a3      	str	r3, [r4, #8]
 801f570:	da05      	bge.n	801f57e <_putc_r+0x42>
 801f572:	69a2      	ldr	r2, [r4, #24]
 801f574:	4293      	cmp	r3, r2
 801f576:	db1c      	blt.n	801f5b2 <_putc_r+0x76>
 801f578:	b2eb      	uxtb	r3, r5
 801f57a:	2b0a      	cmp	r3, #10
 801f57c:	d019      	beq.n	801f5b2 <_putc_r+0x76>
 801f57e:	6823      	ldr	r3, [r4, #0]
 801f580:	1c5a      	adds	r2, r3, #1
 801f582:	6022      	str	r2, [r4, #0]
 801f584:	701d      	strb	r5, [r3, #0]
 801f586:	b2ed      	uxtb	r5, r5
 801f588:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801f58a:	07da      	lsls	r2, r3, #31
 801f58c:	d405      	bmi.n	801f59a <_putc_r+0x5e>
 801f58e:	89a3      	ldrh	r3, [r4, #12]
 801f590:	059b      	lsls	r3, r3, #22
 801f592:	d402      	bmi.n	801f59a <_putc_r+0x5e>
 801f594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801f596:	f7fe feb3 	bl	801e300 <__retarget_lock_release_recursive>
 801f59a:	4628      	mov	r0, r5
 801f59c:	bd70      	pop	{r4, r5, r6, pc}
 801f59e:	4b09      	ldr	r3, [pc, #36]	; (801f5c4 <_putc_r+0x88>)
 801f5a0:	429c      	cmp	r4, r3
 801f5a2:	d101      	bne.n	801f5a8 <_putc_r+0x6c>
 801f5a4:	68b4      	ldr	r4, [r6, #8]
 801f5a6:	e7d6      	b.n	801f556 <_putc_r+0x1a>
 801f5a8:	4b07      	ldr	r3, [pc, #28]	; (801f5c8 <_putc_r+0x8c>)
 801f5aa:	429c      	cmp	r4, r3
 801f5ac:	bf08      	it	eq
 801f5ae:	68f4      	ldreq	r4, [r6, #12]
 801f5b0:	e7d1      	b.n	801f556 <_putc_r+0x1a>
 801f5b2:	4629      	mov	r1, r5
 801f5b4:	4622      	mov	r2, r4
 801f5b6:	4630      	mov	r0, r6
 801f5b8:	f7ff f94e 	bl	801e858 <__swbuf_r>
 801f5bc:	4605      	mov	r5, r0
 801f5be:	e7e3      	b.n	801f588 <_putc_r+0x4c>
 801f5c0:	08029374 	.word	0x08029374
 801f5c4:	08029394 	.word	0x08029394
 801f5c8:	08029354 	.word	0x08029354

0801f5cc <_read_r>:
 801f5cc:	b538      	push	{r3, r4, r5, lr}
 801f5ce:	4d07      	ldr	r5, [pc, #28]	; (801f5ec <_read_r+0x20>)
 801f5d0:	4604      	mov	r4, r0
 801f5d2:	4608      	mov	r0, r1
 801f5d4:	4611      	mov	r1, r2
 801f5d6:	2200      	movs	r2, #0
 801f5d8:	602a      	str	r2, [r5, #0]
 801f5da:	461a      	mov	r2, r3
 801f5dc:	f7e6 fec6 	bl	800636c <_read>
 801f5e0:	1c43      	adds	r3, r0, #1
 801f5e2:	d102      	bne.n	801f5ea <_read_r+0x1e>
 801f5e4:	682b      	ldr	r3, [r5, #0]
 801f5e6:	b103      	cbz	r3, 801f5ea <_read_r+0x1e>
 801f5e8:	6023      	str	r3, [r4, #0]
 801f5ea:	bd38      	pop	{r3, r4, r5, pc}
 801f5ec:	2001e53c 	.word	0x2001e53c

0801f5f0 <_fstat_r>:
 801f5f0:	b538      	push	{r3, r4, r5, lr}
 801f5f2:	4d07      	ldr	r5, [pc, #28]	; (801f610 <_fstat_r+0x20>)
 801f5f4:	2300      	movs	r3, #0
 801f5f6:	4604      	mov	r4, r0
 801f5f8:	4608      	mov	r0, r1
 801f5fa:	4611      	mov	r1, r2
 801f5fc:	602b      	str	r3, [r5, #0]
 801f5fe:	f7e6 fefa 	bl	80063f6 <_fstat>
 801f602:	1c43      	adds	r3, r0, #1
 801f604:	d102      	bne.n	801f60c <_fstat_r+0x1c>
 801f606:	682b      	ldr	r3, [r5, #0]
 801f608:	b103      	cbz	r3, 801f60c <_fstat_r+0x1c>
 801f60a:	6023      	str	r3, [r4, #0]
 801f60c:	bd38      	pop	{r3, r4, r5, pc}
 801f60e:	bf00      	nop
 801f610:	2001e53c 	.word	0x2001e53c

0801f614 <_isatty_r>:
 801f614:	b538      	push	{r3, r4, r5, lr}
 801f616:	4d06      	ldr	r5, [pc, #24]	; (801f630 <_isatty_r+0x1c>)
 801f618:	2300      	movs	r3, #0
 801f61a:	4604      	mov	r4, r0
 801f61c:	4608      	mov	r0, r1
 801f61e:	602b      	str	r3, [r5, #0]
 801f620:	f7e6 fef9 	bl	8006416 <_isatty>
 801f624:	1c43      	adds	r3, r0, #1
 801f626:	d102      	bne.n	801f62e <_isatty_r+0x1a>
 801f628:	682b      	ldr	r3, [r5, #0]
 801f62a:	b103      	cbz	r3, 801f62e <_isatty_r+0x1a>
 801f62c:	6023      	str	r3, [r4, #0]
 801f62e:	bd38      	pop	{r3, r4, r5, pc}
 801f630:	2001e53c 	.word	0x2001e53c

0801f634 <_realloc_r>:
 801f634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f638:	4680      	mov	r8, r0
 801f63a:	4614      	mov	r4, r2
 801f63c:	460e      	mov	r6, r1
 801f63e:	b921      	cbnz	r1, 801f64a <_realloc_r+0x16>
 801f640:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f644:	4611      	mov	r1, r2
 801f646:	f7fe bf09 	b.w	801e45c <_malloc_r>
 801f64a:	b92a      	cbnz	r2, 801f658 <_realloc_r+0x24>
 801f64c:	f7fe fe9a 	bl	801e384 <_free_r>
 801f650:	4625      	mov	r5, r4
 801f652:	4628      	mov	r0, r5
 801f654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f658:	f000 f81b 	bl	801f692 <_malloc_usable_size_r>
 801f65c:	4284      	cmp	r4, r0
 801f65e:	4607      	mov	r7, r0
 801f660:	d802      	bhi.n	801f668 <_realloc_r+0x34>
 801f662:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801f666:	d812      	bhi.n	801f68e <_realloc_r+0x5a>
 801f668:	4621      	mov	r1, r4
 801f66a:	4640      	mov	r0, r8
 801f66c:	f7fe fef6 	bl	801e45c <_malloc_r>
 801f670:	4605      	mov	r5, r0
 801f672:	2800      	cmp	r0, #0
 801f674:	d0ed      	beq.n	801f652 <_realloc_r+0x1e>
 801f676:	42bc      	cmp	r4, r7
 801f678:	4622      	mov	r2, r4
 801f67a:	4631      	mov	r1, r6
 801f67c:	bf28      	it	cs
 801f67e:	463a      	movcs	r2, r7
 801f680:	f7fe fe50 	bl	801e324 <memcpy>
 801f684:	4631      	mov	r1, r6
 801f686:	4640      	mov	r0, r8
 801f688:	f7fe fe7c 	bl	801e384 <_free_r>
 801f68c:	e7e1      	b.n	801f652 <_realloc_r+0x1e>
 801f68e:	4635      	mov	r5, r6
 801f690:	e7df      	b.n	801f652 <_realloc_r+0x1e>

0801f692 <_malloc_usable_size_r>:
 801f692:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f696:	1f18      	subs	r0, r3, #4
 801f698:	2b00      	cmp	r3, #0
 801f69a:	bfbc      	itt	lt
 801f69c:	580b      	ldrlt	r3, [r1, r0]
 801f69e:	18c0      	addlt	r0, r0, r3
 801f6a0:	4770      	bx	lr
	...

0801f6a4 <_init>:
 801f6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6a6:	bf00      	nop
 801f6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f6aa:	bc08      	pop	{r3}
 801f6ac:	469e      	mov	lr, r3
 801f6ae:	4770      	bx	lr

0801f6b0 <_fini>:
 801f6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f6b2:	bf00      	nop
 801f6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f6b6:	bc08      	pop	{r3}
 801f6b8:	469e      	mov	lr, r3
 801f6ba:	4770      	bx	lr
